/*
 * F401RE_TIMER.c
 *
 *  Created on: Jan 27, 2025
 *      Author: voine
 */



#include "F401RE_TIMER.h"

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {

    if (pGP_TIM_Handle->pTIMx == TIM2) {
        TIM2_PCLK_EN();
    }//add other cases later

    // Enable Auto-Reload Preload (ARPE)
    pGP_TIM_Handle->pTIMx->CR1 |= (1 << 7);  // ARPE: Auto-Reload Preload Enable

    // Set Prescaler & Auto-Reload Value
    pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
    pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period;  // Frequency

    // Configure PWM Channels
    for (int ch = 0; ch < 4; ch++) {
        if (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled) {
            uint16_t dutyCycle = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
            dutyCycle = (uint16_t)(((float)dutyCycle / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period); // ex.(50/100)

            switch (ch) {
            case CH1:
                pGP_TIM_Handle->pTIMx->CCR1 = dutyCycle;
                pGP_TIM_Handle->pTIMx->CCMR1 &= ~(7 << 4);
                pGP_TIM_Handle->pTIMx->CCMR1 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 4) : (7 << 4);
                pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << 3); // Enable Output Compare Preload
                break;

            case CH2:
                pGP_TIM_Handle->pTIMx->CCR2 = dutyCycle;
                pGP_TIM_Handle->pTIMx->CCMR1 &= ~(7 << 12);
                pGP_TIM_Handle->pTIMx->CCMR1 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 12) : (7 << 12);
                pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << 11); // Enable Output Compare Preload
                break;

            case CH3:
                pGP_TIM_Handle->pTIMx->CCR3 = dutyCycle;
                pGP_TIM_Handle->pTIMx->CCMR2 &= ~(7 << 4);
                pGP_TIM_Handle->pTIMx->CCMR2 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 4) : (7 << 4);
                pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << 3); // Enable Output Compare Preload
                break;

            case CH4:
                pGP_TIM_Handle->pTIMx->CCR4 = dutyCycle;
                pGP_TIM_Handle->pTIMx->CCMR2 &= ~(7 << 12);
                pGP_TIM_Handle->pTIMx->CCMR2 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 12) : (7 << 12);
                pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << 11); // Enable Output Compare Preload
                break;
            }
        }
    }
}

void GP_TIM_PWM_Start(GP_TIM_Handle_t *pTIM_Handle, TIM_Channel_t ChannelSetup[4]){
    // Iterate over all channels (CH1 to CH4)
    for (uint8_t ch = 0; ch < 4; ch++) {
        if (ChannelSetup[ch].CH_Enabled) {
            // Enable the selected PWM channel
            switch (ch) {
            case CH1:
                pTIM_Handle->pTIMx->CCER |= (1 << 0);  // Enable CH1 (CC1E)
                break;
            case CH2:
                pTIM_Handle->pTIMx->CCER |= (1 << 4);  // Enable CH2 (CC2E)
                break;
            case CH3:
                pTIM_Handle->pTIMx->CCER |= (1 << 8);  // Enable CH3 (CC3E)
                break;
            case CH4:
                pTIM_Handle->pTIMx->CCER |= (1 << 12); // Enable CH4 (CC4E)
                break;
            }
        }
    }

    // Enable the Timer Counter (CEN Bit)
    pTIM_Handle->pTIMx->CR1 |= (1 << 0);  // Start the Timer (CEN Bit)
}

void GP_TIM_PWM_Change_State(GP_TIM_Handle_t *pTIM_Handle, uint8_t Channel, uint8_t State){
	//briefly disable timer
}



