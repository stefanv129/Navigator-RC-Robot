
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002814  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002afc  08002afc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002afc  08002afc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002afc  08002afc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000068  08002b6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002b6c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003207  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a1d  00000000  00000000  00023299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a0  00000000  00000000  00023cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  00023f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000375f  00000000  00000000  00024170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000033e5  00000000  00000000  000278cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b826  00000000  00000000  0002acb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000364da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001304  00000000  00000000  0003652c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800299c 	.word	0x0800299c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800299c 	.word	0x0800299c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d141      	bne.n	8000812 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <GPIO_PeriClockControl+0x130>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d147      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000836:	f023 0302 	bic.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <GPIO_PeriClockControl+0x130>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400

080008bc <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d820      	bhi.n	800091e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e08c      	b.n	8000a38 <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d117      	bne.n	8000956 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000926:	4b90      	ldr	r3, [pc, #576]	; (8000b68 <GPIO_Init+0x2ac>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7912      	ldrb	r2, [r2, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	2201      	movs	r2, #1
 8000932:	408a      	lsls	r2, r1
 8000934:	4611      	mov	r1, r2
 8000936:	4a8c      	ldr	r2, [pc, #560]	; (8000b68 <GPIO_Init+0x2ac>)
 8000938:	430b      	orrs	r3, r1
 800093a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b8a      	ldr	r3, [pc, #552]	; (8000b68 <GPIO_Init+0x2ac>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a86      	ldr	r2, [pc, #536]	; (8000b68 <GPIO_Init+0x2ac>)
 8000950:	400b      	ands	r3, r1
 8000952:	6093      	str	r3, [r2, #8]
 8000954:	e035      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b05      	cmp	r3, #5
 800095c:	d117      	bne.n	800098e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b82      	ldr	r3, [pc, #520]	; (8000b68 <GPIO_Init+0x2ac>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7912      	ldrb	r2, [r2, #4]
 8000966:	4611      	mov	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	408a      	lsls	r2, r1
 800096c:	4611      	mov	r1, r2
 800096e:	4a7e      	ldr	r2, [pc, #504]	; (8000b68 <GPIO_Init+0x2ac>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b7c      	ldr	r3, [pc, #496]	; (8000b68 <GPIO_Init+0x2ac>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7912      	ldrb	r2, [r2, #4]
 800097c:	4611      	mov	r1, r2
 800097e:	2201      	movs	r2, #1
 8000980:	408a      	lsls	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a78      	ldr	r2, [pc, #480]	; (8000b68 <GPIO_Init+0x2ac>)
 8000988:	400b      	ands	r3, r1
 800098a:	60d3      	str	r3, [r2, #12]
 800098c:	e019      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d115      	bne.n	80009c2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000996:	4b74      	ldr	r3, [pc, #464]	; (8000b68 <GPIO_Init+0x2ac>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7912      	ldrb	r2, [r2, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	408a      	lsls	r2, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a70      	ldr	r2, [pc, #448]	; (8000b68 <GPIO_Init+0x2ac>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ac:	4b6e      	ldr	r3, [pc, #440]	; (8000b68 <GPIO_Init+0x2ac>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7912      	ldrb	r2, [r2, #4]
 80009b4:	4611      	mov	r1, r2
 80009b6:	2201      	movs	r2, #1
 80009b8:	408a      	lsls	r2, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a6a      	ldr	r2, [pc, #424]	; (8000b68 <GPIO_Init+0x2ac>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a64      	ldr	r2, [pc, #400]	; (8000b6c <GPIO_Init+0x2b0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d00f      	beq.n	80009fe <GPIO_Init+0x142>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a63      	ldr	r2, [pc, #396]	; (8000b70 <GPIO_Init+0x2b4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d008      	beq.n	80009fa <GPIO_Init+0x13e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <GPIO_Init+0x2b8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <GPIO_Init+0x13a>
 80009f2:	2302      	movs	r3, #2
 80009f4:	e004      	b.n	8000a00 <GPIO_Init+0x144>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e002      	b.n	8000a00 <GPIO_Init+0x144>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <GPIO_Init+0x144>
 80009fe:	2300      	movs	r3, #0
 8000a00:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a02:	4b5d      	ldr	r3, [pc, #372]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a0e:	7c7a      	ldrb	r2, [r7, #17]
 8000a10:	7cbb      	ldrb	r3, [r7, #18]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa02 f103 	lsl.w	r1, r2, r3
 8000a18:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <GPIO_Init+0x2c0>)
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a22:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	7912      	ldrb	r2, [r2, #4]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	408a      	lsls	r2, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	4a4d      	ldr	r2, [pc, #308]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	799b      	ldrb	r3, [r3, #6]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6899      	ldr	r1, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	79db      	ldrb	r3, [r3, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2103      	movs	r1, #3
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68d9      	ldr	r1, [r3, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7a1b      	ldrb	r3, [r3, #8]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6859      	ldr	r1, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d131      	bne.n	8000b60 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	7c3a      	ldrb	r2, [r7, #16]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7c3a      	ldrb	r2, [r7, #16]
 8000b2e:	4001      	ands	r1, r0
 8000b30:	3208      	adds	r2, #8
 8000b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7c3a      	ldrb	r2, [r7, #16]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7a5b      	ldrb	r3, [r3, #9]
 8000b46:	461a      	mov	r2, r3
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	7c3a      	ldrb	r2, [r7, #16]
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013c00 	.word	0x40013c00
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40013800 	.word	0x40013800

08000b80 <GPIO_Read_Pin>:
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691a      	ldr	r2, [r3, #16]
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	fa22 f303 	lsr.w	r3, r2, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
    return value;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 8000bb6:	78fb      	ldrb	r3, [r7, #3]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d809      	bhi.n	8000bd0 <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc8:	405a      	eors	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	e000      	b.n	8000bd2 <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 8000bd0:	bf00      	nop
}
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
	...

08000bdc <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d133      	bne.n	8000c5a <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b1f      	cmp	r3, #31
 8000bf6:	d80a      	bhi.n	8000c0e <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <GPIO_IRQInterruptConfig+0xf0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a31      	ldr	r2, [pc, #196]	; (8000ccc <GPIO_IRQInterruptConfig+0xf0>)
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}//SHORTEN FUNCTION!!!
 8000c0c:	e059      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	d90f      	bls.n	8000c34 <GPIO_IRQInterruptConfig+0x58>
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b3f      	cmp	r3, #63	; 0x3f
 8000c18:	d80c      	bhi.n	8000c34 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <GPIO_IRQInterruptConfig+0xf4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	f002 021f 	and.w	r2, r2, #31
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a28      	ldr	r2, [pc, #160]	; (8000cd0 <GPIO_IRQInterruptConfig+0xf4>)
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	e046      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	2b3f      	cmp	r3, #63	; 0x3f
 8000c38:	d943      	bls.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b5f      	cmp	r3, #95	; 0x5f
 8000c3e:	d840      	bhi.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c50:	4611      	mov	r1, r2
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <GPIO_IRQInterruptConfig+0xf8>)
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6013      	str	r3, [r2, #0]
}//SHORTEN FUNCTION!!!
 8000c58:	e033      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b1f      	cmp	r3, #31
 8000c5e:	d80a      	bhi.n	8000c76 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <GPIO_IRQInterruptConfig+0xfc>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	79fa      	ldrb	r2, [r7, #7]
 8000c66:	2101      	movs	r1, #1
 8000c68:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <GPIO_IRQInterruptConfig+0xfc>)
 8000c70:	430b      	orrs	r3, r1
 8000c72:	6013      	str	r3, [r2, #0]
}//SHORTEN FUNCTION!!!
 8000c74:	e025      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b1f      	cmp	r3, #31
 8000c7a:	d90f      	bls.n	8000c9c <GPIO_IRQInterruptConfig+0xc0>
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c80:	d80c      	bhi.n	8000c9c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <GPIO_IRQInterruptConfig+0x100>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	f002 021f 	and.w	r2, r2, #31
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c92:	4611      	mov	r1, r2
 8000c94:	4a11      	ldr	r2, [pc, #68]	; (8000cdc <GPIO_IRQInterruptConfig+0x100>)
 8000c96:	430b      	orrs	r3, r1
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e012      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000ca0:	d90f      	bls.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b5f      	cmp	r3, #95	; 0x5f
 8000ca6:	d80c      	bhi.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <GPIO_IRQInterruptConfig+0x104>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <GPIO_IRQInterruptConfig+0x104>)
 8000cbc:	430b      	orrs	r3, r1
 8000cbe:	6013      	str	r3, [r2, #0]
}//SHORTEN FUNCTION!!!
 8000cc0:	e7ff      	b.n	8000cc2 <GPIO_IRQInterruptConfig+0xe6>
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000e104 	.word	0xe000e104
 8000cd4:	e000e108 	.word	0xe000e108
 8000cd8:	e000e180 	.word	0xe000e180
 8000cdc:	e000e184 	.word	0xe000e184
 8000ce0:	e000e188 	.word	0xe000e188

08000ce4 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <GPIO_IRQHandling+0x3c>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d009      	beq.n	8000d14 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <GPIO_IRQHandling+0x3c>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	2101      	movs	r1, #1
 8000d08:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <GPIO_IRQHandling+0x3c>)
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6153      	str	r3, [r2, #20]
	}
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40013c00 	.word	0x40013c00

08000d24 <I2C_SM_INIT>:

#include "I2C.h"


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    // 1. Enable peripheral clock
    I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <I2C_SM_INIT+0x70>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <I2C_SM_INIT+0x70>)
 8000d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40

    // 2. Configure ACK
    pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7a5b      	ldrb	r3, [r3, #9]
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4619      	mov	r1, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]

    // 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
    pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	605a      	str	r2, [r3, #4]

    // 4. Configure CCR for Standard Mode
    uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <I2C_SM_INIT+0x74>)
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	81fb      	strh	r3, [r7, #14]
    pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8000d64:	89fa      	ldrh	r2, [r7, #14]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000d6e:	61da      	str	r2, [r3, #28]

    // 5. Set TRISE
    // TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
    pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2209      	movs	r2, #9
 8000d76:	621a      	str	r2, [r3, #32]

    // 6. Enable the peripheral
    pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0201 	orr.w	r2, r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	007a1200 	.word	0x007a1200

08000d9c <drive_FWD>:
} //would rather turn right and left alternatively and usew random to calc he turn time => angle



//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	//GP_TIM_Control(pGP_TIM_Handle, DISABLE);
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fa21 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000dae:	2201      	movs	r2, #1
 8000db0:	2102      	movs	r1, #2
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fa1c 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OFF);//this doesnt stop pwm output...
 8000db8:	2200      	movs	r2, #0
 8000dba:	2101      	movs	r1, #1
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fa17 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OFF);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2103      	movs	r1, #3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f000 fa12 	bl	80011f0 <GP_TIM_PWM_Control>
	//GP_TIM_Control(pGP_TIM_Handle, ENABLE);
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2100      	movs	r1, #0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 fa05 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fa00 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2101      	movs	r1, #1
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f9fb 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f9f6 	bl	80011f0 <GP_TIM_PWM_Control>
	//WAIT FOR CHANNEL
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f9e9 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2102      	movs	r1, #2
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f9e4 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f000 f9df 	bl	80011f0 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2103      	movs	r1, #3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f9da 	bl	80011f0 <GP_TIM_PWM_Control>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e58:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000e60:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d125      	bne.n	8000ebc <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000e80:	bf00      	nop
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f8      	beq.n	8000e82 <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0203 	bic.w	r2, r2, #3
 8000e9e:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6892      	ldr	r2, [r2, #8]
 8000eaa:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000eac:	bf00      	nop
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1f8      	bne.n	8000eae <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr

08000ec6 <AD_TIM_Start_Countdown>:



#include "TIMER.h"

void AD_TIM_Start_Countdown(AD_TIM_RegDef_t *pTIMx, uint32_t time_ms) {
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
 8000ece:	6039      	str	r1, [r7, #0]
	pTIMx->CR1 &= ~TIM_CR1_CEN;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 0201 	bic.w	r2, r3, #1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) != 0);
 8000edc:	bf00      	nop
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f9      	bne.n	8000ede <AD_TIM_Start_Countdown+0x18>
	// Clear any pending update flag
	pTIMx->SR &= ~TIM_SR_UIF;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f023 0201 	bic.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	611a      	str	r2, [r3, #16]

	// Configure for single countdown
	pTIMx->CNT = time_ms - 1;;  // Load counter this doesnt set count to 0...
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
	pTIMx->ARR = time_ms - 1;  // Count from this value down to 0
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	1e5a      	subs	r2, r3, #1
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	62da      	str	r2, [r3, #44]	; 0x2c
	// Generate update to load registers
	pTIMx->EGR |= TIM_EGR_UG;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f043 0201 	orr.w	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	615a      	str	r2, [r3, #20]

	pTIMx->CR1 |= TIM_CR1_CEN;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) == 0);
 8000f1e:	bf00      	nop
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f9      	beq.n	8000f20 <AD_TIM_Start_Countdown+0x5a>
	// Clear update flag
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <AD_TIM_CDN_INIT>:
//could just use timer handle instead



void AD_TIM_CDN_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]

	if (pAD_TIM_Handle->pTIMx == TIM1) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a20      	ldr	r2, [pc, #128]	; (8000fc8 <AD_TIM_CDN_INIT+0x90>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d105      	bne.n	8000f56 <AD_TIM_CDN_INIT+0x1e>
		TIM1_PCLK_EN();
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <AD_TIM_CDN_INIT+0x94>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <AD_TIM_CDN_INIT+0x94>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6453      	str	r3, [r2, #68]	; 0x44
	}

	//HANDLE INTERRUPTS
	*NVIC_ISER0 |= TIM1_UP_IRQ;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <AD_TIM_CDN_INIT+0x98>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <AD_TIM_CDN_INIT+0x98>)
 8000f5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f60:	6013      	str	r3, [r2, #0]
	pAD_TIM_Handle->pTIMx->DIER |= TIM_DIER_UIE;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	60da      	str	r2, [r3, #12]
	//IS CLOCK NEEDED FORE SETTING REGS?

	// Set timer UEV to only overflow
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_URS;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	601a      	str	r2, [r3, #0]

	// Set timer direction to downcounting
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_DIR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0208 	orr.w	r2, r2, #8
 8000f90:	601a      	str	r2, [r3, #0]

	// Enable Auto-Reload Preload (recommended for stability)
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fa0:	601a      	str	r2, [r3, #0]

	// Set prescaler
	pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	889a      	ldrh	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28

	// Force update event to load PSC immediately
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	695a      	ldr	r2, [r3, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	615a      	str	r2, [r3, #20]

}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	e000e100 	.word	0xe000e100

08000fd4 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8000fd4:	b590      	push	{r4, r7, lr}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d106      	bne.n	8000ff4 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <GP_TIM_PWM_INIT+0x108>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <GP_TIM_PWM_INIT+0x108>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	e00a      	b.n	800100a <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <GP_TIM_PWM_INIT+0x10c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d105      	bne.n	800100a <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 8000ffe:	4b37      	ldr	r3, [pc, #220]	; (80010dc <GP_TIM_PWM_INIT+0x108>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a36      	ldr	r2, [pc, #216]	; (80010dc <GP_TIM_PWM_INIT+0x108>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 800100a:	bf00      	nop
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <GP_TIM_PWM_INIT+0x108>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f9      	beq.n	800100c <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001026:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	889a      	ldrh	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	88db      	ldrh	r3, [r3, #6]
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e03c      	b.n	80010be <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3302      	adds	r3, #2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	88db      	ldrh	r3, [r3, #6]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff f9cb 	bl	80003ec <__aeabi_ui2f>
 8001056:	4603      	mov	r3, r0
 8001058:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 800105a:	4922      	ldr	r1, [pc, #136]	; (80010e4 <GP_TIM_PWM_INIT+0x110>)
 800105c:	6938      	ldr	r0, [r7, #16]
 800105e:	f7ff fad1 	bl	8000604 <__aeabi_fdiv>
 8001062:	4603      	mov	r3, r0
 8001064:	461c      	mov	r4, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	88db      	ldrh	r3, [r3, #6]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff f9c2 	bl	80003f4 <__aeabi_i2f>
 8001070:	4603      	mov	r3, r0
 8001072:	4619      	mov	r1, r3
 8001074:	4620      	mov	r0, r4
 8001076:	f7ff fa11 	bl	800049c <__aeabi_fmul>
 800107a:	4603      	mov	r3, r0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fb5d 	bl	800073c <__aeabi_f2uiz>
 8001082:	4603      	mov	r3, r0
 8001084:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	3302      	adds	r3, #2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	795b      	ldrb	r3, [r3, #5]
 8001092:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3302      	adds	r3, #2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	791b      	ldrb	r3, [r3, #4]
 80010a0:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	7b7c      	ldrb	r4, [r7, #13]
 80010ac:	89fa      	ldrh	r2, [r7, #14]
 80010ae:	7b3b      	ldrb	r3, [r7, #12]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	4623      	mov	r3, r4
 80010b4:	f000 f818 	bl	80010e8 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	ddbf      	ble.n	8001044 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	615a      	str	r2, [r3, #20]

}
 80010d4:	bf00      	nop
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40000400 	.word	0x40000400
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	70fb      	strb	r3, [r7, #3]
 80010fa:	460b      	mov	r3, r1
 80010fc:	803b      	strh	r3, [r7, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 8001102:	78fb      	ldrb	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d802      	bhi.n	800110e <GP_TIM_SetChannel+0x26>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3318      	adds	r3, #24
 800110c:	e001      	b.n	8001112 <GP_TIM_SetChannel+0x2a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	331c      	adds	r3, #28
 8001112:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d864      	bhi.n	80011e4 <GP_TIM_SetChannel+0xfc>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <GP_TIM_SetChannel+0x38>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	08001131 	.word	0x08001131
 8001124:	08001141 	.word	0x08001141
 8001128:	08001151 	.word	0x08001151
 800112c:	08001163 	.word	0x08001163
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3334      	adds	r3, #52	; 0x34
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	2304      	movs	r3, #4
 8001138:	74fb      	strb	r3, [r7, #19]
 800113a:	2301      	movs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	e019      	b.n	8001174 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3338      	adds	r3, #56	; 0x38
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	230c      	movs	r3, #12
 8001148:	74fb      	strb	r3, [r7, #19]
 800114a:	2310      	movs	r3, #16
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e011      	b.n	8001174 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	333c      	adds	r3, #60	; 0x3c
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	2304      	movs	r3, #4
 8001158:	74fb      	strb	r3, [r7, #19]
 800115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e008      	b.n	8001174 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3340      	adds	r3, #64	; 0x40
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	230c      	movs	r3, #12
 800116a:	74fb      	strb	r3, [r7, #19]
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8001174:	883a      	ldrh	r2, [r7, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	7cfa      	ldrb	r2, [r7, #19]
 8001180:	2107      	movs	r1, #7
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	43d2      	mvns	r2, r2
 8001188:	401a      	ands	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	78ba      	ldrb	r2, [r7, #2]
 8001194:	2a00      	cmp	r2, #0
 8001196:	d101      	bne.n	800119c <GP_TIM_SetChannel+0xb4>
 8001198:	2106      	movs	r1, #6
 800119a:	e000      	b.n	800119e <GP_TIM_SetChannel+0xb6>
 800119c:	2107      	movs	r1, #7
 800119e:	7cfa      	ldrb	r2, [r7, #19]
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	431a      	orrs	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	7cfa      	ldrb	r2, [r7, #19]
 80011b0:	3a01      	subs	r2, #1
 80011b2:	2101      	movs	r1, #1
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	431a      	orrs	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 80011be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	621a      	str	r2, [r3, #32]
 80011d2:	e008      	b.n	80011e6 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	401a      	ands	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	e000      	b.n	80011e6 <GP_TIM_SetChannel+0xfe>
	default: return;
 80011e4:	bf00      	nop
	}
}
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop

080011f0 <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_ON) {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
 80011fc:	4613      	mov	r3, r2
 80011fe:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d85d      	bhi.n	80012c2 <GP_TIM_PWM_Control+0xd2>

	uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	2201      	movs	r2, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]

	if (PWM_ON) {
 8001212:	78bb      	ldrb	r3, [r7, #2]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d04a      	beq.n	80012ae <GP_TIM_PWM_Control+0xbe>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	3302      	adds	r3, #2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	88db      	ldrh	r3, [r3, #6]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f8e5 	bl	80003f4 <__aeabi_i2f>
 800122a:	4603      	mov	r3, r0
 800122c:	4927      	ldr	r1, [pc, #156]	; (80012cc <GP_TIM_PWM_Control+0xdc>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f9e8 	bl	8000604 <__aeabi_fdiv>
 8001234:	4603      	mov	r3, r0
 8001236:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff f8d9 	bl	80003f4 <__aeabi_i2f>
 8001242:	4603      	mov	r3, r0
 8001244:	4619      	mov	r1, r3
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff f928 	bl	800049c <__aeabi_fmul>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fa74 	bl	800073c <__aeabi_f2uiz>
 8001254:	4603      	mov	r3, r0
 8001256:	817b      	strh	r3, [r7, #10]
		switch(channel) {
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d81e      	bhi.n	800129c <GP_TIM_PWM_Control+0xac>
 800125e:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <GP_TIM_PWM_Control+0x74>)
 8001260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001264:	08001275 	.word	0x08001275
 8001268:	0800127f 	.word	0x0800127f
 800126c:	08001289 	.word	0x08001289
 8001270:	08001293 	.word	0x08001293
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	897a      	ldrh	r2, [r7, #10]
 800127a:	635a      	str	r2, [r3, #52]	; 0x34
 800127c:	e00e      	b.n	800129c <GP_TIM_PWM_Control+0xac>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	897a      	ldrh	r2, [r7, #10]
 8001284:	639a      	str	r2, [r3, #56]	; 0x38
 8001286:	e009      	b.n	800129c <GP_TIM_PWM_Control+0xac>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	897a      	ldrh	r2, [r7, #10]
 800128e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001290:	e004      	b.n	800129c <GP_TIM_PWM_Control+0xac>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	897a      	ldrh	r2, [r7, #10]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	bf00      	nop
		}

		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a19      	ldr	r1, [r3, #32]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	621a      	str	r2, [r3, #32]
 80012ac:	e00a      	b.n	80012c4 <GP_TIM_PWM_Control+0xd4>
		//case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
		//case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
		//case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
		//case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
		//}
		pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a19      	ldr	r1, [r3, #32]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43da      	mvns	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	400a      	ands	r2, r1
 80012be:	621a      	str	r2, [r3, #32]
 80012c0:	e000      	b.n	80012c4 <GP_TIM_PWM_Control+0xd4>
	if (channel > 3) return;
 80012c2:	bf00      	nop
	}


}
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	42c80000 	.word	0x42c80000

080012d0 <init_random_seed>:
void Full_GPIO_Config(void);
void Full_GP_TIM_Config(void);
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);

void init_random_seed(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	srand(129);  // Seed with timer count for variability
 80012d4:	2081      	movs	r0, #129	; 0x81
 80012d6:	f000 fb03 	bl	80018e0 <srand>
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <get_random_duration>:

uint32_t get_random_duration(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	return 50 + (rand() % 2000);  // Between 50 - 200 ms lets say
 80012e4:	f000 fb2a 	bl	800193c <rand>
 80012e8:	4602      	mov	r2, r0
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <get_random_duration+0x28>)
 80012ec:	fb83 1302 	smull	r1, r3, r3, r2
 80012f0:	11d9      	asrs	r1, r3, #7
 80012f2:	17d3      	asrs	r3, r2, #31
 80012f4:	1acb      	subs	r3, r1, r3
 80012f6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	3332      	adds	r3, #50	; 0x32
	//what is maximum rand value?
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	10624dd3 	.word	0x10624dd3

0800130c <main>:
	time_in_ms = (1 / APB1_CLOCK_FREQ) * time_in_ms;

	for(int i =0; i<time_in_ms; i++){}
}

int main(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0

	Full_RCC_Config();
 8001310:	f000 f892 	bl	8001438 <Full_RCC_Config>
	Full_AD_TIM_Config();
 8001314:	f000 f9a0 	bl	8001658 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 8001318:	f000 f8a6 	bl	8001468 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 800131c:	f000 f964 	bl	80015e8 <Full_GP_TIM_Config>
	Full_I2C_Config();
 8001320:	f000 f9ac 	bl	800167c <Full_I2C_Config>
	init_random_seed();
 8001324:	f7ff ffd4 	bl	80012d0 <init_random_seed>


	//begin with drive FWD if start is initialized
	drive_FWD(&TIM2_PWM);
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <main+0x64>)
 800132a:	f7ff fd37 	bl	8000d9c <drive_FWD>

	//when wall is sensed
	while (1)
	{
		if(current_state == STATE_DRIVING)
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <main+0x68>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
		}
		else
		{

		}
		srand(X_POINT%Y_POINT*ANGLE);
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <main+0x6c>)
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <main+0x70>)
 800133c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001340:	fb93 f1f2 	sdiv	r1, r3, r2
 8001344:	fb01 f202 	mul.w	r2, r1, r2
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f852 	bl	80003f4 <__aeabi_i2f>
 8001350:	4602      	mov	r2, r0
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <main+0x74>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff f89f 	bl	800049c <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f9eb 	bl	800073c <__aeabi_f2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fab9 	bl	80018e0 <srand>
		if(current_state == STATE_DRIVING)
 800136e:	e7de      	b.n	800132e <main+0x22>
 8001370:	20000088 	.word	0x20000088
 8001374:	20000084 	.word	0x20000084
 8001378:	200000ec 	.word	0x200000ec
 800137c:	200000ee 	.word	0x200000ee
 8001380:	20000000 	.word	0x20000000

08001384 <EXTI4_IRQHandler>:
}



void EXTI4_IRQHandler(void) //WALL SENSED
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

	//send coords via UART to ESP32 => only COORD_X and COORD_Y
	//they need to be parsed to be read
	//esp32 sends them to laptop

	current_state = STATE_TURNING;
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <EXTI4_IRQHandler+0x54>)
 800138c:	2202      	movs	r2, #2
 800138e:	701a      	strb	r2, [r3, #0]
	//if GPIOA4 is low wall was sensed
	if (!(GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)))
 8001390:	2104      	movs	r1, #4
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <EXTI4_IRQHandler+0x58>)
 8001394:	f7ff fbf4 	bl	8000b80 <GPIO_Read_Pin>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d117      	bne.n	80013ce <EXTI4_IRQHandler+0x4a>
	{
		GPIO_IRQHandling(GPIO_PIN_NO_4);  // Clear EXTI pending bit
 800139e:	2004      	movs	r0, #4
 80013a0:	f7ff fca0 	bl	8000ce4 <GPIO_IRQHandling>

		uint32_t turn_duration = get_random_duration();//seeding needed using coords?
 80013a4:	f7ff ff9c 	bl	80012e0 <get_random_duration>
 80013a8:	6078      	str	r0, [r7, #4]
		//duration should be in a given range
		if(!(turn_duration % 2))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <EXTI4_IRQHandler+0x38>
		{
			turn_RGT(&TIM2_PWM);
 80013b4:	480a      	ldr	r0, [pc, #40]	; (80013e0 <EXTI4_IRQHandler+0x5c>)
 80013b6:	f7ff fd0d 	bl	8000dd4 <turn_RGT>
 80013ba:	e002      	b.n	80013c2 <EXTI4_IRQHandler+0x3e>
		}
		else
		{
			turn_LFT(&TIM2_PWM);
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <EXTI4_IRQHandler+0x5c>)
 80013be:	f7ff fd25 	bl	8000e0c <turn_LFT>
		}

		AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,turn_duration);
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <EXTI4_IRQHandler+0x60>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fd7c 	bl	8000ec6 <AD_TIM_Start_Countdown>
		//exits to while(1)
	}
	//GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000084 	.word	0x20000084
 80013dc:	40020000 	.word	0x40020000
 80013e0:	20000088 	.word	0x20000088
 80013e4:	200000a4 	.word	0x200000a4

080013e8 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void) //ROTATION TIME OVER
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13); //light signal
 80013ec:	210d      	movs	r1, #13
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80013f0:	f7ff fbdb 	bl	8000baa <GPIO_Toggle_Pin>

	while(GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 80013f4:	bf00      	nop
 80013f6:	2104      	movs	r1, #4
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <TIM1_UP_TIM10_IRQHandler+0x40>)
 80013fa:	f7ff fbc1 	bl	8000b80 <GPIO_Read_Pin>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f8      	bne.n	80013f6 <TIM1_UP_TIM10_IRQHandler+0xe>
	}
	//walls still sensed
	//turn until they are gone
	//bad in interrupt but it is a good failsafe if car is stuck

	current_state = STATE_DRIVING;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <TIM1_UP_TIM10_IRQHandler+0x44>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
	drive_FWD(&TIM2_PWM);
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <TIM1_UP_TIM10_IRQHandler+0x48>)
 800140c:	f7ff fcc6 	bl	8000d9c <drive_FWD>

	TIM1_CDN.pTIMx->SR &= ~TIM_SR_UIF;
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <TIM1_UP_TIM10_IRQHandler+0x4c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0201 	bic.w	r2, r2, #1
 800141e:	611a      	str	r2, [r3, #16]
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	20000084 	.word	0x20000084
 8001430:	20000088 	.word	0x20000088
 8001434:	200000a4 	.word	0x200000a4

08001438 <Full_RCC_Config>:




void Full_RCC_Config(void){
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <Full_RCC_Config+0x2c>)
 8001440:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 8001442:	2300      	movs	r3, #0
 8001444:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 800144a:	2304      	movs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 800144e:	2304      	movs	r3, #4
 8001450:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 8001452:	463b      	mov	r3, r7
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fcf5 	bl	8000e44 <RCC_Clock_Config>
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800

08001468 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 8001468:	b580      	push	{r7, lr}
 800146a:	b098      	sub	sp, #96	; 0x60
 800146c:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 800146e:	4b5b      	ldr	r3, [pc, #364]	; (80015dc <Full_GPIO_Config+0x174>)
 8001470:	657b      	str	r3, [r7, #84]	; 0x54
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8001472:	230d      	movs	r3, #13
 8001474:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800148a:	2300      	movs	r3, #0
 800148c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PA4 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <Full_GPIO_Config+0x178>)
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8001494:	2304      	movs	r3, #4
 8001496:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800149a:	2304      	movs	r3, #4
 800149c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f



	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 80014ac:	4b4c      	ldr	r3, [pc, #304]	; (80015e0 <Full_GPIO_Config+0x178>)
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80014bc:	2303      	movs	r3, #3
 80014be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80014c8:	2301      	movs	r3, #1
 80014ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <Full_GPIO_Config+0x178>)
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80014d8:	2302      	movs	r3, #2
 80014da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80014de:	2302      	movs	r3, #2
 80014e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80014e4:	2303      	movs	r3, #3
 80014e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <Full_GPIO_Config+0x17c>)
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001500:	2303      	movs	r3, #3
 8001502:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001506:	2302      	movs	r3, #2
 8001508:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800150c:	2303      	movs	r3, #3
 800150e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001518:	2301      	movs	r3, #1
 800151a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <Full_GPIO_Config+0x178>)
 8001526:	61bb      	str	r3, [r7, #24]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001528:	2300      	movs	r3, #0
 800152a:	773b      	strb	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800152c:	2302      	movs	r3, #2
 800152e:	777b      	strb	r3, [r7, #29]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001530:	2303      	movs	r3, #3
 8001532:	77bb      	strb	r3, [r7, #30]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800153a:	2301      	movs	r3, #1
 800153c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001540:	2300      	movs	r3, #0
 8001542:	77fb      	strb	r3, [r7, #31]

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8001544:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <Full_GPIO_Config+0x17c>)
 8001546:	60fb      	str	r3, [r7, #12]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001548:	2306      	movs	r3, #6
 800154a:	743b      	strb	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800154c:	2302      	movs	r3, #2
 800154e:	747b      	strb	r3, [r7, #17]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001550:	2303      	movs	r3, #3
 8001552:	74bb      	strb	r3, [r7, #18]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001554:	2300      	movs	r3, #0
 8001556:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 8001558:	2304      	movs	r3, #4
 800155a:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800155c:	2300      	movs	r3, #0
 800155e:	74fb      	strb	r3, [r7, #19]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <Full_GPIO_Config+0x17c>)
 8001562:	603b      	str	r3, [r7, #0]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001564:	2307      	movs	r3, #7
 8001566:	713b      	strb	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001568:	2302      	movs	r3, #2
 800156a:	717b      	strb	r3, [r7, #5]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800156c:	2303      	movs	r3, #3
 800156e:	71bb      	strb	r3, [r7, #6]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001570:	2300      	movs	r3, #0
 8001572:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8001574:	2304      	movs	r3, #4
 8001576:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001578:	2300      	movs	r3, #0
 800157a:	71fb      	strb	r3, [r7, #7]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 800157c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f99b 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSensor);
 8001586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f996 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH3);
 8001590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f991 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH2);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f98c 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH1);
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f987 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80015ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f982 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSCL);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff f97d 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80015c2:	463b      	mov	r3, r7
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff f979 	bl	80008bc <GPIO_Init>

	GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
 80015ca:	2101      	movs	r1, #1
 80015cc:	200a      	movs	r0, #10
 80015ce:	f7ff fb05 	bl	8000bdc <GPIO_IRQInterruptConfig>
}
 80015d2:	bf00      	nop
 80015d4:	3760      	adds	r7, #96	; 0x60
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020800 	.word	0x40020800
 80015e0:	40020000 	.word	0x40020000
 80015e4:	40020400 	.word	0x40020400

080015e8 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 80015ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f2:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 80015f6:	2204      	movs	r2, #4
 80015f8:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 100;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 80015fc:	2264      	movs	r2, #100	; 0x64
 80015fe:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001602:	2201      	movs	r2, #1
 8001604:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001608:	2200      	movs	r2, #0
 800160a:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = DutyCycle_60;  // 80% Duty
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 800160e:	223c      	movs	r2, #60	; 0x3c
 8001610:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001614:	2201      	movs	r2, #1
 8001616:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 800161a:	2200      	movs	r2, #0
 800161c:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = DutyCycle_60;  // 80% Duty
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001620:	223c      	movs	r2, #60	; 0x3c
 8001622:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001626:	2201      	movs	r2, #1
 8001628:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 800162c:	2200      	movs	r2, #0
 800162e:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = DutyCycle_60;  // 80% Duty
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001632:	223c      	movs	r2, #60	; 0x3c
 8001634:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001638:	2201      	movs	r2, #1
 800163a:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 800163e:	2200      	movs	r2, #0
 8001640:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = DutyCycle_60;  // 80% Duty
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 8001644:	223c      	movs	r2, #60	; 0x3c
 8001646:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <Full_GP_TIM_Config+0x6c>)
 800164a:	f7ff fcc3 	bl	8000fd4 <GP_TIM_PWM_INIT>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000088 	.word	0x20000088

08001658 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_CDN.pTIMx = TIM1;
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <Full_AD_TIM_Config+0x1c>)
 800165e:	4a06      	ldr	r2, [pc, #24]	; (8001678 <Full_AD_TIM_Config+0x20>)
 8001660:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_CDN.AD_TIM_Config.Prescaler = PRESCALER_16K;
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <Full_AD_TIM_Config+0x1c>)
 8001664:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001668:	809a      	strh	r2, [r3, #4]
	AD_TIM_CDN_INIT(&TIM1_CDN);
 800166a:	4802      	ldr	r0, [pc, #8]	; (8001674 <Full_AD_TIM_Config+0x1c>)
 800166c:	f7ff fc64 	bl	8000f38 <AD_TIM_CDN_INIT>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000a4 	.word	0x200000a4
 8001678:	40010000 	.word	0x40010000

0800167c <Full_I2C_Config>:

void Full_I2C_Config(void){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <Full_I2C_Config+0x20>)
 8001682:	4a07      	ldr	r2, [pc, #28]	; (80016a0 <Full_I2C_Config+0x24>)
 8001684:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <Full_I2C_Config+0x20>)
 8001688:	2201      	movs	r2, #1
 800168a:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <Full_I2C_Config+0x20>)
 800168e:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <Full_I2C_Config+0x28>)
 8001690:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <Full_I2C_Config+0x20>)
 8001694:	f7ff fb46 	bl	8000d24 <I2C_SM_INIT>
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000c4 	.word	0x200000c4
 80016a0:	40005400 	.word	0x40005400
 80016a4:	000186a0 	.word	0x000186a0

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_kill>:

int _kill(int pid, int sig)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c0:	f000 f8dc 	bl	800187c <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2216      	movs	r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_exit>:

void _exit (int status)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016de:	f04f 31ff 	mov.w	r1, #4294967295
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffe7 	bl	80016b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e8:	e7fe      	b.n	80016e8 <_exit+0x12>

080016ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e00a      	b.n	8001712 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fc:	f3af 8000 	nop.w
 8001700:	4601      	mov	r1, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	60ba      	str	r2, [r7, #8]
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbf0      	blt.n	80016fc <_read+0x12>
  }

  return len;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e009      	b.n	800174a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf1      	blt.n	8001736 <_write+0x12>
  }
  return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_close>:

int _close(int file)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <_isatty>:

int _isatty(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c4:	4a14      	ldr	r2, [pc, #80]	; (8001818 <_sbrk+0x5c>)
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <_sbrk+0x60>)
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d102      	bne.n	80017de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <_sbrk+0x64>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <_sbrk+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d207      	bcs.n	80017fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ec:	f000 f846 	bl	800187c <__errno>
 80017f0:	4603      	mov	r3, r0
 80017f2:	220c      	movs	r2, #12
 80017f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	e009      	b.n	8001810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <_sbrk+0x64>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001802:	4b07      	ldr	r3, [pc, #28]	; (8001820 <_sbrk+0x64>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <_sbrk+0x64>)
 800180c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180e:	68fb      	ldr	r3, [r7, #12]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20018000 	.word	0x20018000
 800181c:	00000400 	.word	0x00000400
 8001820:	200000f0 	.word	0x200000f0
 8001824:	20000108 	.word	0x20000108

08001828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800182a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800182c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	; (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001856:	f000 f817 	bl	8001888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800185a:	f7ff fd57 	bl	800130c <main>

0800185e <LoopForever>:

LoopForever:
  b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   r0, =_estack
 8001860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800186c:	08002b04 	.word	0x08002b04
  ldr r2, =_sbss
 8001870:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001874:	20000104 	.word	0x20000104

08001878 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <__errno>:
 800187c:	4b01      	ldr	r3, [pc, #4]	; (8001884 <__errno+0x8>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000004 	.word	0x20000004

08001888 <__libc_init_array>:
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	4d0d      	ldr	r5, [pc, #52]	; (80018c0 <__libc_init_array+0x38>)
 800188c:	4c0d      	ldr	r4, [pc, #52]	; (80018c4 <__libc_init_array+0x3c>)
 800188e:	1b64      	subs	r4, r4, r5
 8001890:	10a4      	asrs	r4, r4, #2
 8001892:	2600      	movs	r6, #0
 8001894:	42a6      	cmp	r6, r4
 8001896:	d109      	bne.n	80018ac <__libc_init_array+0x24>
 8001898:	4d0b      	ldr	r5, [pc, #44]	; (80018c8 <__libc_init_array+0x40>)
 800189a:	4c0c      	ldr	r4, [pc, #48]	; (80018cc <__libc_init_array+0x44>)
 800189c:	f001 f87e 	bl	800299c <_init>
 80018a0:	1b64      	subs	r4, r4, r5
 80018a2:	10a4      	asrs	r4, r4, #2
 80018a4:	2600      	movs	r6, #0
 80018a6:	42a6      	cmp	r6, r4
 80018a8:	d105      	bne.n	80018b6 <__libc_init_array+0x2e>
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b0:	4798      	blx	r3
 80018b2:	3601      	adds	r6, #1
 80018b4:	e7ee      	b.n	8001894 <__libc_init_array+0xc>
 80018b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ba:	4798      	blx	r3
 80018bc:	3601      	adds	r6, #1
 80018be:	e7f2      	b.n	80018a6 <__libc_init_array+0x1e>
 80018c0:	08002afc 	.word	0x08002afc
 80018c4:	08002afc 	.word	0x08002afc
 80018c8:	08002afc 	.word	0x08002afc
 80018cc:	08002b00 	.word	0x08002b00

080018d0 <memset>:
 80018d0:	4402      	add	r2, r0
 80018d2:	4603      	mov	r3, r0
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d100      	bne.n	80018da <memset+0xa>
 80018d8:	4770      	bx	lr
 80018da:	f803 1b01 	strb.w	r1, [r3], #1
 80018de:	e7f9      	b.n	80018d4 <memset+0x4>

080018e0 <srand>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <srand+0x44>)
 80018e4:	681d      	ldr	r5, [r3, #0]
 80018e6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80018e8:	4604      	mov	r4, r0
 80018ea:	b9b3      	cbnz	r3, 800191a <srand+0x3a>
 80018ec:	2018      	movs	r0, #24
 80018ee:	f000 f893 	bl	8001a18 <malloc>
 80018f2:	4602      	mov	r2, r0
 80018f4:	63a8      	str	r0, [r5, #56]	; 0x38
 80018f6:	b920      	cbnz	r0, 8001902 <srand+0x22>
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <srand+0x48>)
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <srand+0x4c>)
 80018fc:	2142      	movs	r1, #66	; 0x42
 80018fe:	f000 f85b 	bl	80019b8 <__assert_func>
 8001902:	490b      	ldr	r1, [pc, #44]	; (8001930 <srand+0x50>)
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <srand+0x54>)
 8001906:	e9c0 1300 	strd	r1, r3, [r0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <srand+0x58>)
 800190c:	6083      	str	r3, [r0, #8]
 800190e:	230b      	movs	r3, #11
 8001910:	8183      	strh	r3, [r0, #12]
 8001912:	2100      	movs	r1, #0
 8001914:	2001      	movs	r0, #1
 8001916:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800191a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800191c:	2200      	movs	r2, #0
 800191e:	611c      	str	r4, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	bd38      	pop	{r3, r4, r5, pc}
 8001924:	20000004 	.word	0x20000004
 8001928:	080029b8 	.word	0x080029b8
 800192c:	080029cf 	.word	0x080029cf
 8001930:	abcd330e 	.word	0xabcd330e
 8001934:	e66d1234 	.word	0xe66d1234
 8001938:	0005deec 	.word	0x0005deec

0800193c <rand>:
 800193c:	4b16      	ldr	r3, [pc, #88]	; (8001998 <rand+0x5c>)
 800193e:	b510      	push	{r4, lr}
 8001940:	681c      	ldr	r4, [r3, #0]
 8001942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001944:	b9b3      	cbnz	r3, 8001974 <rand+0x38>
 8001946:	2018      	movs	r0, #24
 8001948:	f000 f866 	bl	8001a18 <malloc>
 800194c:	4602      	mov	r2, r0
 800194e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001950:	b920      	cbnz	r0, 800195c <rand+0x20>
 8001952:	4b12      	ldr	r3, [pc, #72]	; (800199c <rand+0x60>)
 8001954:	4812      	ldr	r0, [pc, #72]	; (80019a0 <rand+0x64>)
 8001956:	214e      	movs	r1, #78	; 0x4e
 8001958:	f000 f82e 	bl	80019b8 <__assert_func>
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <rand+0x68>)
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <rand+0x6c>)
 8001960:	e9c0 1300 	strd	r1, r3, [r0]
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <rand+0x70>)
 8001966:	6083      	str	r3, [r0, #8]
 8001968:	230b      	movs	r3, #11
 800196a:	8183      	strh	r3, [r0, #12]
 800196c:	2100      	movs	r1, #0
 800196e:	2001      	movs	r0, #1
 8001970:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001974:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001976:	4a0e      	ldr	r2, [pc, #56]	; (80019b0 <rand+0x74>)
 8001978:	6920      	ldr	r0, [r4, #16]
 800197a:	6963      	ldr	r3, [r4, #20]
 800197c:	490d      	ldr	r1, [pc, #52]	; (80019b4 <rand+0x78>)
 800197e:	4342      	muls	r2, r0
 8001980:	fb01 2203 	mla	r2, r1, r3, r2
 8001984:	fba0 0101 	umull	r0, r1, r0, r1
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	eb42 0001 	adc.w	r0, r2, r1
 800198e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001992:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001996:	bd10      	pop	{r4, pc}
 8001998:	20000004 	.word	0x20000004
 800199c:	080029b8 	.word	0x080029b8
 80019a0:	080029cf 	.word	0x080029cf
 80019a4:	abcd330e 	.word	0xabcd330e
 80019a8:	e66d1234 	.word	0xe66d1234
 80019ac:	0005deec 	.word	0x0005deec
 80019b0:	5851f42d 	.word	0x5851f42d
 80019b4:	4c957f2d 	.word	0x4c957f2d

080019b8 <__assert_func>:
 80019b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019ba:	4614      	mov	r4, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <__assert_func+0x2c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4605      	mov	r5, r0
 80019c4:	68d8      	ldr	r0, [r3, #12]
 80019c6:	b14c      	cbz	r4, 80019dc <__assert_func+0x24>
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <__assert_func+0x30>)
 80019ca:	9100      	str	r1, [sp, #0]
 80019cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__assert_func+0x34>)
 80019d2:	462b      	mov	r3, r5
 80019d4:	f000 f80e 	bl	80019f4 <fiprintf>
 80019d8:	f000 fcc0 	bl	800235c <abort>
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <__assert_func+0x38>)
 80019de:	461c      	mov	r4, r3
 80019e0:	e7f3      	b.n	80019ca <__assert_func+0x12>
 80019e2:	bf00      	nop
 80019e4:	20000004 	.word	0x20000004
 80019e8:	08002a2a 	.word	0x08002a2a
 80019ec:	08002a37 	.word	0x08002a37
 80019f0:	08002a65 	.word	0x08002a65

080019f4 <fiprintf>:
 80019f4:	b40e      	push	{r1, r2, r3}
 80019f6:	b503      	push	{r0, r1, lr}
 80019f8:	4601      	mov	r1, r0
 80019fa:	ab03      	add	r3, sp, #12
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <fiprintf+0x20>)
 80019fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001a02:	6800      	ldr	r0, [r0, #0]
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	f000 f915 	bl	8001c34 <_vfiprintf_r>
 8001a0a:	b002      	add	sp, #8
 8001a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a10:	b003      	add	sp, #12
 8001a12:	4770      	bx	lr
 8001a14:	20000004 	.word	0x20000004

08001a18 <malloc>:
 8001a18:	4b02      	ldr	r3, [pc, #8]	; (8001a24 <malloc+0xc>)
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	f000 b86d 	b.w	8001afc <_malloc_r>
 8001a22:	bf00      	nop
 8001a24:	20000004 	.word	0x20000004

08001a28 <_free_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	2900      	cmp	r1, #0
 8001a2e:	d041      	beq.n	8001ab4 <_free_r+0x8c>
 8001a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a34:	1f0c      	subs	r4, r1, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	bfb8      	it	lt
 8001a3a:	18e4      	addlt	r4, r4, r3
 8001a3c:	f000 feb2 	bl	80027a4 <__malloc_lock>
 8001a40:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <_free_r+0x90>)
 8001a42:	6813      	ldr	r3, [r2, #0]
 8001a44:	b933      	cbnz	r3, 8001a54 <_free_r+0x2c>
 8001a46:	6063      	str	r3, [r4, #4]
 8001a48:	6014      	str	r4, [r2, #0]
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a50:	f000 beae 	b.w	80027b0 <__malloc_unlock>
 8001a54:	42a3      	cmp	r3, r4
 8001a56:	d908      	bls.n	8001a6a <_free_r+0x42>
 8001a58:	6820      	ldr	r0, [r4, #0]
 8001a5a:	1821      	adds	r1, r4, r0
 8001a5c:	428b      	cmp	r3, r1
 8001a5e:	bf01      	itttt	eq
 8001a60:	6819      	ldreq	r1, [r3, #0]
 8001a62:	685b      	ldreq	r3, [r3, #4]
 8001a64:	1809      	addeq	r1, r1, r0
 8001a66:	6021      	streq	r1, [r4, #0]
 8001a68:	e7ed      	b.n	8001a46 <_free_r+0x1e>
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	b10b      	cbz	r3, 8001a74 <_free_r+0x4c>
 8001a70:	42a3      	cmp	r3, r4
 8001a72:	d9fa      	bls.n	8001a6a <_free_r+0x42>
 8001a74:	6811      	ldr	r1, [r2, #0]
 8001a76:	1850      	adds	r0, r2, r1
 8001a78:	42a0      	cmp	r0, r4
 8001a7a:	d10b      	bne.n	8001a94 <_free_r+0x6c>
 8001a7c:	6820      	ldr	r0, [r4, #0]
 8001a7e:	4401      	add	r1, r0
 8001a80:	1850      	adds	r0, r2, r1
 8001a82:	4283      	cmp	r3, r0
 8001a84:	6011      	str	r1, [r2, #0]
 8001a86:	d1e0      	bne.n	8001a4a <_free_r+0x22>
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	6053      	str	r3, [r2, #4]
 8001a8e:	4401      	add	r1, r0
 8001a90:	6011      	str	r1, [r2, #0]
 8001a92:	e7da      	b.n	8001a4a <_free_r+0x22>
 8001a94:	d902      	bls.n	8001a9c <_free_r+0x74>
 8001a96:	230c      	movs	r3, #12
 8001a98:	602b      	str	r3, [r5, #0]
 8001a9a:	e7d6      	b.n	8001a4a <_free_r+0x22>
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	1821      	adds	r1, r4, r0
 8001aa0:	428b      	cmp	r3, r1
 8001aa2:	bf04      	itt	eq
 8001aa4:	6819      	ldreq	r1, [r3, #0]
 8001aa6:	685b      	ldreq	r3, [r3, #4]
 8001aa8:	6063      	str	r3, [r4, #4]
 8001aaa:	bf04      	itt	eq
 8001aac:	1809      	addeq	r1, r1, r0
 8001aae:	6021      	streq	r1, [r4, #0]
 8001ab0:	6054      	str	r4, [r2, #4]
 8001ab2:	e7ca      	b.n	8001a4a <_free_r+0x22>
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200000f4 	.word	0x200000f4

08001abc <sbrk_aligned>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	4e0e      	ldr	r6, [pc, #56]	; (8001af8 <sbrk_aligned+0x3c>)
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	6831      	ldr	r1, [r6, #0]
 8001ac4:	4605      	mov	r5, r0
 8001ac6:	b911      	cbnz	r1, 8001ace <sbrk_aligned+0x12>
 8001ac8:	f000 fb78 	bl	80021bc <_sbrk_r>
 8001acc:	6030      	str	r0, [r6, #0]
 8001ace:	4621      	mov	r1, r4
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	f000 fb73 	bl	80021bc <_sbrk_r>
 8001ad6:	1c43      	adds	r3, r0, #1
 8001ad8:	d00a      	beq.n	8001af0 <sbrk_aligned+0x34>
 8001ada:	1cc4      	adds	r4, r0, #3
 8001adc:	f024 0403 	bic.w	r4, r4, #3
 8001ae0:	42a0      	cmp	r0, r4
 8001ae2:	d007      	beq.n	8001af4 <sbrk_aligned+0x38>
 8001ae4:	1a21      	subs	r1, r4, r0
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f000 fb68 	bl	80021bc <_sbrk_r>
 8001aec:	3001      	adds	r0, #1
 8001aee:	d101      	bne.n	8001af4 <sbrk_aligned+0x38>
 8001af0:	f04f 34ff 	mov.w	r4, #4294967295
 8001af4:	4620      	mov	r0, r4
 8001af6:	bd70      	pop	{r4, r5, r6, pc}
 8001af8:	200000f8 	.word	0x200000f8

08001afc <_malloc_r>:
 8001afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b00:	1ccd      	adds	r5, r1, #3
 8001b02:	f025 0503 	bic.w	r5, r5, #3
 8001b06:	3508      	adds	r5, #8
 8001b08:	2d0c      	cmp	r5, #12
 8001b0a:	bf38      	it	cc
 8001b0c:	250c      	movcc	r5, #12
 8001b0e:	2d00      	cmp	r5, #0
 8001b10:	4607      	mov	r7, r0
 8001b12:	db01      	blt.n	8001b18 <_malloc_r+0x1c>
 8001b14:	42a9      	cmp	r1, r5
 8001b16:	d905      	bls.n	8001b24 <_malloc_r+0x28>
 8001b18:	230c      	movs	r3, #12
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	4630      	mov	r0, r6
 8001b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b24:	4e2e      	ldr	r6, [pc, #184]	; (8001be0 <_malloc_r+0xe4>)
 8001b26:	f000 fe3d 	bl	80027a4 <__malloc_lock>
 8001b2a:	6833      	ldr	r3, [r6, #0]
 8001b2c:	461c      	mov	r4, r3
 8001b2e:	bb34      	cbnz	r4, 8001b7e <_malloc_r+0x82>
 8001b30:	4629      	mov	r1, r5
 8001b32:	4638      	mov	r0, r7
 8001b34:	f7ff ffc2 	bl	8001abc <sbrk_aligned>
 8001b38:	1c43      	adds	r3, r0, #1
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	d14d      	bne.n	8001bda <_malloc_r+0xde>
 8001b3e:	6834      	ldr	r4, [r6, #0]
 8001b40:	4626      	mov	r6, r4
 8001b42:	2e00      	cmp	r6, #0
 8001b44:	d140      	bne.n	8001bc8 <_malloc_r+0xcc>
 8001b46:	6823      	ldr	r3, [r4, #0]
 8001b48:	4631      	mov	r1, r6
 8001b4a:	4638      	mov	r0, r7
 8001b4c:	eb04 0803 	add.w	r8, r4, r3
 8001b50:	f000 fb34 	bl	80021bc <_sbrk_r>
 8001b54:	4580      	cmp	r8, r0
 8001b56:	d13a      	bne.n	8001bce <_malloc_r+0xd2>
 8001b58:	6821      	ldr	r1, [r4, #0]
 8001b5a:	3503      	adds	r5, #3
 8001b5c:	1a6d      	subs	r5, r5, r1
 8001b5e:	f025 0503 	bic.w	r5, r5, #3
 8001b62:	3508      	adds	r5, #8
 8001b64:	2d0c      	cmp	r5, #12
 8001b66:	bf38      	it	cc
 8001b68:	250c      	movcc	r5, #12
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	f7ff ffa5 	bl	8001abc <sbrk_aligned>
 8001b72:	3001      	adds	r0, #1
 8001b74:	d02b      	beq.n	8001bce <_malloc_r+0xd2>
 8001b76:	6823      	ldr	r3, [r4, #0]
 8001b78:	442b      	add	r3, r5
 8001b7a:	6023      	str	r3, [r4, #0]
 8001b7c:	e00e      	b.n	8001b9c <_malloc_r+0xa0>
 8001b7e:	6822      	ldr	r2, [r4, #0]
 8001b80:	1b52      	subs	r2, r2, r5
 8001b82:	d41e      	bmi.n	8001bc2 <_malloc_r+0xc6>
 8001b84:	2a0b      	cmp	r2, #11
 8001b86:	d916      	bls.n	8001bb6 <_malloc_r+0xba>
 8001b88:	1961      	adds	r1, r4, r5
 8001b8a:	42a3      	cmp	r3, r4
 8001b8c:	6025      	str	r5, [r4, #0]
 8001b8e:	bf18      	it	ne
 8001b90:	6059      	strne	r1, [r3, #4]
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	bf08      	it	eq
 8001b96:	6031      	streq	r1, [r6, #0]
 8001b98:	5162      	str	r2, [r4, r5]
 8001b9a:	604b      	str	r3, [r1, #4]
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	f104 060b 	add.w	r6, r4, #11
 8001ba2:	f000 fe05 	bl	80027b0 <__malloc_unlock>
 8001ba6:	f026 0607 	bic.w	r6, r6, #7
 8001baa:	1d23      	adds	r3, r4, #4
 8001bac:	1af2      	subs	r2, r6, r3
 8001bae:	d0b6      	beq.n	8001b1e <_malloc_r+0x22>
 8001bb0:	1b9b      	subs	r3, r3, r6
 8001bb2:	50a3      	str	r3, [r4, r2]
 8001bb4:	e7b3      	b.n	8001b1e <_malloc_r+0x22>
 8001bb6:	6862      	ldr	r2, [r4, #4]
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	bf0c      	ite	eq
 8001bbc:	6032      	streq	r2, [r6, #0]
 8001bbe:	605a      	strne	r2, [r3, #4]
 8001bc0:	e7ec      	b.n	8001b9c <_malloc_r+0xa0>
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	6864      	ldr	r4, [r4, #4]
 8001bc6:	e7b2      	b.n	8001b2e <_malloc_r+0x32>
 8001bc8:	4634      	mov	r4, r6
 8001bca:	6876      	ldr	r6, [r6, #4]
 8001bcc:	e7b9      	b.n	8001b42 <_malloc_r+0x46>
 8001bce:	230c      	movs	r3, #12
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	4638      	mov	r0, r7
 8001bd4:	f000 fdec 	bl	80027b0 <__malloc_unlock>
 8001bd8:	e7a1      	b.n	8001b1e <_malloc_r+0x22>
 8001bda:	6025      	str	r5, [r4, #0]
 8001bdc:	e7de      	b.n	8001b9c <_malloc_r+0xa0>
 8001bde:	bf00      	nop
 8001be0:	200000f4 	.word	0x200000f4

08001be4 <__sfputc_r>:
 8001be4:	6893      	ldr	r3, [r2, #8]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	b410      	push	{r4}
 8001bec:	6093      	str	r3, [r2, #8]
 8001bee:	da07      	bge.n	8001c00 <__sfputc_r+0x1c>
 8001bf0:	6994      	ldr	r4, [r2, #24]
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	db01      	blt.n	8001bfa <__sfputc_r+0x16>
 8001bf6:	290a      	cmp	r1, #10
 8001bf8:	d102      	bne.n	8001c00 <__sfputc_r+0x1c>
 8001bfa:	bc10      	pop	{r4}
 8001bfc:	f000 baee 	b.w	80021dc <__swbuf_r>
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	1c58      	adds	r0, r3, #1
 8001c04:	6010      	str	r0, [r2, #0]
 8001c06:	7019      	strb	r1, [r3, #0]
 8001c08:	4608      	mov	r0, r1
 8001c0a:	bc10      	pop	{r4}
 8001c0c:	4770      	bx	lr

08001c0e <__sfputs_r>:
 8001c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c10:	4606      	mov	r6, r0
 8001c12:	460f      	mov	r7, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	18d5      	adds	r5, r2, r3
 8001c18:	42ac      	cmp	r4, r5
 8001c1a:	d101      	bne.n	8001c20 <__sfputs_r+0x12>
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	e007      	b.n	8001c30 <__sfputs_r+0x22>
 8001c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c24:	463a      	mov	r2, r7
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff ffdc 	bl	8001be4 <__sfputc_r>
 8001c2c:	1c43      	adds	r3, r0, #1
 8001c2e:	d1f3      	bne.n	8001c18 <__sfputs_r+0xa>
 8001c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c34 <_vfiprintf_r>:
 8001c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	460d      	mov	r5, r1
 8001c3a:	b09d      	sub	sp, #116	; 0x74
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	4698      	mov	r8, r3
 8001c40:	4606      	mov	r6, r0
 8001c42:	b118      	cbz	r0, 8001c4c <_vfiprintf_r+0x18>
 8001c44:	6983      	ldr	r3, [r0, #24]
 8001c46:	b90b      	cbnz	r3, 8001c4c <_vfiprintf_r+0x18>
 8001c48:	f000 fca6 	bl	8002598 <__sinit>
 8001c4c:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <_vfiprintf_r+0x240>)
 8001c4e:	429d      	cmp	r5, r3
 8001c50:	d11b      	bne.n	8001c8a <_vfiprintf_r+0x56>
 8001c52:	6875      	ldr	r5, [r6, #4]
 8001c54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c56:	07d9      	lsls	r1, r3, #31
 8001c58:	d405      	bmi.n	8001c66 <_vfiprintf_r+0x32>
 8001c5a:	89ab      	ldrh	r3, [r5, #12]
 8001c5c:	059a      	lsls	r2, r3, #22
 8001c5e:	d402      	bmi.n	8001c66 <_vfiprintf_r+0x32>
 8001c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001c62:	f000 fd37 	bl	80026d4 <__retarget_lock_acquire_recursive>
 8001c66:	89ab      	ldrh	r3, [r5, #12]
 8001c68:	071b      	lsls	r3, r3, #28
 8001c6a:	d501      	bpl.n	8001c70 <_vfiprintf_r+0x3c>
 8001c6c:	692b      	ldr	r3, [r5, #16]
 8001c6e:	b9eb      	cbnz	r3, 8001cac <_vfiprintf_r+0x78>
 8001c70:	4629      	mov	r1, r5
 8001c72:	4630      	mov	r0, r6
 8001c74:	f000 fb04 	bl	8002280 <__swsetup_r>
 8001c78:	b1c0      	cbz	r0, 8001cac <_vfiprintf_r+0x78>
 8001c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001c7c:	07dc      	lsls	r4, r3, #31
 8001c7e:	d50e      	bpl.n	8001c9e <_vfiprintf_r+0x6a>
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	b01d      	add	sp, #116	; 0x74
 8001c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <_vfiprintf_r+0x244>)
 8001c8c:	429d      	cmp	r5, r3
 8001c8e:	d101      	bne.n	8001c94 <_vfiprintf_r+0x60>
 8001c90:	68b5      	ldr	r5, [r6, #8]
 8001c92:	e7df      	b.n	8001c54 <_vfiprintf_r+0x20>
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <_vfiprintf_r+0x248>)
 8001c96:	429d      	cmp	r5, r3
 8001c98:	bf08      	it	eq
 8001c9a:	68f5      	ldreq	r5, [r6, #12]
 8001c9c:	e7da      	b.n	8001c54 <_vfiprintf_r+0x20>
 8001c9e:	89ab      	ldrh	r3, [r5, #12]
 8001ca0:	0598      	lsls	r0, r3, #22
 8001ca2:	d4ed      	bmi.n	8001c80 <_vfiprintf_r+0x4c>
 8001ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ca6:	f000 fd16 	bl	80026d6 <__retarget_lock_release_recursive>
 8001caa:	e7e9      	b.n	8001c80 <_vfiprintf_r+0x4c>
 8001cac:	2300      	movs	r3, #0
 8001cae:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001cba:	2330      	movs	r3, #48	; 0x30
 8001cbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001e80 <_vfiprintf_r+0x24c>
 8001cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cc4:	f04f 0901 	mov.w	r9, #1
 8001cc8:	4623      	mov	r3, r4
 8001cca:	469a      	mov	sl, r3
 8001ccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001cd0:	b10a      	cbz	r2, 8001cd6 <_vfiprintf_r+0xa2>
 8001cd2:	2a25      	cmp	r2, #37	; 0x25
 8001cd4:	d1f9      	bne.n	8001cca <_vfiprintf_r+0x96>
 8001cd6:	ebba 0b04 	subs.w	fp, sl, r4
 8001cda:	d00b      	beq.n	8001cf4 <_vfiprintf_r+0xc0>
 8001cdc:	465b      	mov	r3, fp
 8001cde:	4622      	mov	r2, r4
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff ff93 	bl	8001c0e <__sfputs_r>
 8001ce8:	3001      	adds	r0, #1
 8001cea:	f000 80aa 	beq.w	8001e42 <_vfiprintf_r+0x20e>
 8001cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cf0:	445a      	add	r2, fp
 8001cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8001cf4:	f89a 3000 	ldrb.w	r3, [sl]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a2 	beq.w	8001e42 <_vfiprintf_r+0x20e>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d08:	f10a 0a01 	add.w	sl, sl, #1
 8001d0c:	9304      	str	r3, [sp, #16]
 8001d0e:	9307      	str	r3, [sp, #28]
 8001d10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d14:	931a      	str	r3, [sp, #104]	; 0x68
 8001d16:	4654      	mov	r4, sl
 8001d18:	2205      	movs	r2, #5
 8001d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d1e:	4858      	ldr	r0, [pc, #352]	; (8001e80 <_vfiprintf_r+0x24c>)
 8001d20:	f7fe fa5e 	bl	80001e0 <memchr>
 8001d24:	9a04      	ldr	r2, [sp, #16]
 8001d26:	b9d8      	cbnz	r0, 8001d60 <_vfiprintf_r+0x12c>
 8001d28:	06d1      	lsls	r1, r2, #27
 8001d2a:	bf44      	itt	mi
 8001d2c:	2320      	movmi	r3, #32
 8001d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d32:	0713      	lsls	r3, r2, #28
 8001d34:	bf44      	itt	mi
 8001d36:	232b      	movmi	r3, #43	; 0x2b
 8001d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8001d40:	2b2a      	cmp	r3, #42	; 0x2a
 8001d42:	d015      	beq.n	8001d70 <_vfiprintf_r+0x13c>
 8001d44:	9a07      	ldr	r2, [sp, #28]
 8001d46:	4654      	mov	r4, sl
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f04f 0c0a 	mov.w	ip, #10
 8001d4e:	4621      	mov	r1, r4
 8001d50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d54:	3b30      	subs	r3, #48	; 0x30
 8001d56:	2b09      	cmp	r3, #9
 8001d58:	d94e      	bls.n	8001df8 <_vfiprintf_r+0x1c4>
 8001d5a:	b1b0      	cbz	r0, 8001d8a <_vfiprintf_r+0x156>
 8001d5c:	9207      	str	r2, [sp, #28]
 8001d5e:	e014      	b.n	8001d8a <_vfiprintf_r+0x156>
 8001d60:	eba0 0308 	sub.w	r3, r0, r8
 8001d64:	fa09 f303 	lsl.w	r3, r9, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	9304      	str	r3, [sp, #16]
 8001d6c:	46a2      	mov	sl, r4
 8001d6e:	e7d2      	b.n	8001d16 <_vfiprintf_r+0xe2>
 8001d70:	9b03      	ldr	r3, [sp, #12]
 8001d72:	1d19      	adds	r1, r3, #4
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	9103      	str	r1, [sp, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bfbb      	ittet	lt
 8001d7c:	425b      	neglt	r3, r3
 8001d7e:	f042 0202 	orrlt.w	r2, r2, #2
 8001d82:	9307      	strge	r3, [sp, #28]
 8001d84:	9307      	strlt	r3, [sp, #28]
 8001d86:	bfb8      	it	lt
 8001d88:	9204      	strlt	r2, [sp, #16]
 8001d8a:	7823      	ldrb	r3, [r4, #0]
 8001d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d8e:	d10c      	bne.n	8001daa <_vfiprintf_r+0x176>
 8001d90:	7863      	ldrb	r3, [r4, #1]
 8001d92:	2b2a      	cmp	r3, #42	; 0x2a
 8001d94:	d135      	bne.n	8001e02 <_vfiprintf_r+0x1ce>
 8001d96:	9b03      	ldr	r3, [sp, #12]
 8001d98:	1d1a      	adds	r2, r3, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	9203      	str	r2, [sp, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bfb8      	it	lt
 8001da2:	f04f 33ff 	movlt.w	r3, #4294967295
 8001da6:	3402      	adds	r4, #2
 8001da8:	9305      	str	r3, [sp, #20]
 8001daa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001e84 <_vfiprintf_r+0x250>
 8001dae:	7821      	ldrb	r1, [r4, #0]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4650      	mov	r0, sl
 8001db4:	f7fe fa14 	bl	80001e0 <memchr>
 8001db8:	b140      	cbz	r0, 8001dcc <_vfiprintf_r+0x198>
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	eba0 000a 	sub.w	r0, r0, sl
 8001dc0:	fa03 f000 	lsl.w	r0, r3, r0
 8001dc4:	9b04      	ldr	r3, [sp, #16]
 8001dc6:	4303      	orrs	r3, r0
 8001dc8:	3401      	adds	r4, #1
 8001dca:	9304      	str	r3, [sp, #16]
 8001dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd0:	482d      	ldr	r0, [pc, #180]	; (8001e88 <_vfiprintf_r+0x254>)
 8001dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dd6:	2206      	movs	r2, #6
 8001dd8:	f7fe fa02 	bl	80001e0 <memchr>
 8001ddc:	2800      	cmp	r0, #0
 8001dde:	d03f      	beq.n	8001e60 <_vfiprintf_r+0x22c>
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <_vfiprintf_r+0x258>)
 8001de2:	bb1b      	cbnz	r3, 8001e2c <_vfiprintf_r+0x1f8>
 8001de4:	9b03      	ldr	r3, [sp, #12]
 8001de6:	3307      	adds	r3, #7
 8001de8:	f023 0307 	bic.w	r3, r3, #7
 8001dec:	3308      	adds	r3, #8
 8001dee:	9303      	str	r3, [sp, #12]
 8001df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001df2:	443b      	add	r3, r7
 8001df4:	9309      	str	r3, [sp, #36]	; 0x24
 8001df6:	e767      	b.n	8001cc8 <_vfiprintf_r+0x94>
 8001df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	2001      	movs	r0, #1
 8001e00:	e7a5      	b.n	8001d4e <_vfiprintf_r+0x11a>
 8001e02:	2300      	movs	r3, #0
 8001e04:	3401      	adds	r4, #1
 8001e06:	9305      	str	r3, [sp, #20]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 0c0a 	mov.w	ip, #10
 8001e0e:	4620      	mov	r0, r4
 8001e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e14:	3a30      	subs	r2, #48	; 0x30
 8001e16:	2a09      	cmp	r2, #9
 8001e18:	d903      	bls.n	8001e22 <_vfiprintf_r+0x1ee>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0c5      	beq.n	8001daa <_vfiprintf_r+0x176>
 8001e1e:	9105      	str	r1, [sp, #20]
 8001e20:	e7c3      	b.n	8001daa <_vfiprintf_r+0x176>
 8001e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8001e26:	4604      	mov	r4, r0
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e7f0      	b.n	8001e0e <_vfiprintf_r+0x1da>
 8001e2c:	ab03      	add	r3, sp, #12
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	462a      	mov	r2, r5
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <_vfiprintf_r+0x25c>)
 8001e34:	a904      	add	r1, sp, #16
 8001e36:	4630      	mov	r0, r6
 8001e38:	f3af 8000 	nop.w
 8001e3c:	4607      	mov	r7, r0
 8001e3e:	1c78      	adds	r0, r7, #1
 8001e40:	d1d6      	bne.n	8001df0 <_vfiprintf_r+0x1bc>
 8001e42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e44:	07d9      	lsls	r1, r3, #31
 8001e46:	d405      	bmi.n	8001e54 <_vfiprintf_r+0x220>
 8001e48:	89ab      	ldrh	r3, [r5, #12]
 8001e4a:	059a      	lsls	r2, r3, #22
 8001e4c:	d402      	bmi.n	8001e54 <_vfiprintf_r+0x220>
 8001e4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e50:	f000 fc41 	bl	80026d6 <__retarget_lock_release_recursive>
 8001e54:	89ab      	ldrh	r3, [r5, #12]
 8001e56:	065b      	lsls	r3, r3, #25
 8001e58:	f53f af12 	bmi.w	8001c80 <_vfiprintf_r+0x4c>
 8001e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e5e:	e711      	b.n	8001c84 <_vfiprintf_r+0x50>
 8001e60:	ab03      	add	r3, sp, #12
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	462a      	mov	r2, r5
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <_vfiprintf_r+0x25c>)
 8001e68:	a904      	add	r1, sp, #16
 8001e6a:	4630      	mov	r0, r6
 8001e6c:	f000 f880 	bl	8001f70 <_printf_i>
 8001e70:	e7e4      	b.n	8001e3c <_vfiprintf_r+0x208>
 8001e72:	bf00      	nop
 8001e74:	08002abc 	.word	0x08002abc
 8001e78:	08002adc 	.word	0x08002adc
 8001e7c:	08002a9c 	.word	0x08002a9c
 8001e80:	08002a66 	.word	0x08002a66
 8001e84:	08002a6c 	.word	0x08002a6c
 8001e88:	08002a70 	.word	0x08002a70
 8001e8c:	00000000 	.word	0x00000000
 8001e90:	08001c0f 	.word	0x08001c0f

08001e94 <_printf_common>:
 8001e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e98:	4616      	mov	r6, r2
 8001e9a:	4699      	mov	r9, r3
 8001e9c:	688a      	ldr	r2, [r1, #8]
 8001e9e:	690b      	ldr	r3, [r1, #16]
 8001ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bfb8      	it	lt
 8001ea8:	4613      	movlt	r3, r2
 8001eaa:	6033      	str	r3, [r6, #0]
 8001eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eb0:	4607      	mov	r7, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	b10a      	cbz	r2, 8001eba <_printf_common+0x26>
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	6033      	str	r3, [r6, #0]
 8001eba:	6823      	ldr	r3, [r4, #0]
 8001ebc:	0699      	lsls	r1, r3, #26
 8001ebe:	bf42      	ittt	mi
 8001ec0:	6833      	ldrmi	r3, [r6, #0]
 8001ec2:	3302      	addmi	r3, #2
 8001ec4:	6033      	strmi	r3, [r6, #0]
 8001ec6:	6825      	ldr	r5, [r4, #0]
 8001ec8:	f015 0506 	ands.w	r5, r5, #6
 8001ecc:	d106      	bne.n	8001edc <_printf_common+0x48>
 8001ece:	f104 0a19 	add.w	sl, r4, #25
 8001ed2:	68e3      	ldr	r3, [r4, #12]
 8001ed4:	6832      	ldr	r2, [r6, #0]
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	42ab      	cmp	r3, r5
 8001eda:	dc26      	bgt.n	8001f2a <_printf_common+0x96>
 8001edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ee0:	1e13      	subs	r3, r2, #0
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	bf18      	it	ne
 8001ee6:	2301      	movne	r3, #1
 8001ee8:	0692      	lsls	r2, r2, #26
 8001eea:	d42b      	bmi.n	8001f44 <_printf_common+0xb0>
 8001eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ef0:	4649      	mov	r1, r9
 8001ef2:	4638      	mov	r0, r7
 8001ef4:	47c0      	blx	r8
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	d01e      	beq.n	8001f38 <_printf_common+0xa4>
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	68e5      	ldr	r5, [r4, #12]
 8001efe:	6832      	ldr	r2, [r6, #0]
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	bf08      	it	eq
 8001f08:	1aad      	subeq	r5, r5, r2
 8001f0a:	68a3      	ldr	r3, [r4, #8]
 8001f0c:	6922      	ldr	r2, [r4, #16]
 8001f0e:	bf0c      	ite	eq
 8001f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f14:	2500      	movne	r5, #0
 8001f16:	4293      	cmp	r3, r2
 8001f18:	bfc4      	itt	gt
 8001f1a:	1a9b      	subgt	r3, r3, r2
 8001f1c:	18ed      	addgt	r5, r5, r3
 8001f1e:	2600      	movs	r6, #0
 8001f20:	341a      	adds	r4, #26
 8001f22:	42b5      	cmp	r5, r6
 8001f24:	d11a      	bne.n	8001f5c <_printf_common+0xc8>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e008      	b.n	8001f3c <_printf_common+0xa8>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	4652      	mov	r2, sl
 8001f2e:	4649      	mov	r1, r9
 8001f30:	4638      	mov	r0, r7
 8001f32:	47c0      	blx	r8
 8001f34:	3001      	adds	r0, #1
 8001f36:	d103      	bne.n	8001f40 <_printf_common+0xac>
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f40:	3501      	adds	r5, #1
 8001f42:	e7c6      	b.n	8001ed2 <_printf_common+0x3e>
 8001f44:	18e1      	adds	r1, r4, r3
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	2030      	movs	r0, #48	; 0x30
 8001f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f4e:	4422      	add	r2, r4
 8001f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f58:	3302      	adds	r3, #2
 8001f5a:	e7c7      	b.n	8001eec <_printf_common+0x58>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	4622      	mov	r2, r4
 8001f60:	4649      	mov	r1, r9
 8001f62:	4638      	mov	r0, r7
 8001f64:	47c0      	blx	r8
 8001f66:	3001      	adds	r0, #1
 8001f68:	d0e6      	beq.n	8001f38 <_printf_common+0xa4>
 8001f6a:	3601      	adds	r6, #1
 8001f6c:	e7d9      	b.n	8001f22 <_printf_common+0x8e>
	...

08001f70 <_printf_i>:
 8001f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f74:	7e0f      	ldrb	r7, [r1, #24]
 8001f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001f78:	2f78      	cmp	r7, #120	; 0x78
 8001f7a:	4691      	mov	r9, r2
 8001f7c:	4680      	mov	r8, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	469a      	mov	sl, r3
 8001f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001f86:	d807      	bhi.n	8001f98 <_printf_i+0x28>
 8001f88:	2f62      	cmp	r7, #98	; 0x62
 8001f8a:	d80a      	bhi.n	8001fa2 <_printf_i+0x32>
 8001f8c:	2f00      	cmp	r7, #0
 8001f8e:	f000 80d8 	beq.w	8002142 <_printf_i+0x1d2>
 8001f92:	2f58      	cmp	r7, #88	; 0x58
 8001f94:	f000 80a3 	beq.w	80020de <_printf_i+0x16e>
 8001f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001fa0:	e03a      	b.n	8002018 <_printf_i+0xa8>
 8001fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001fa6:	2b15      	cmp	r3, #21
 8001fa8:	d8f6      	bhi.n	8001f98 <_printf_i+0x28>
 8001faa:	a101      	add	r1, pc, #4	; (adr r1, 8001fb0 <_printf_i+0x40>)
 8001fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001fb0:	08002009 	.word	0x08002009
 8001fb4:	0800201d 	.word	0x0800201d
 8001fb8:	08001f99 	.word	0x08001f99
 8001fbc:	08001f99 	.word	0x08001f99
 8001fc0:	08001f99 	.word	0x08001f99
 8001fc4:	08001f99 	.word	0x08001f99
 8001fc8:	0800201d 	.word	0x0800201d
 8001fcc:	08001f99 	.word	0x08001f99
 8001fd0:	08001f99 	.word	0x08001f99
 8001fd4:	08001f99 	.word	0x08001f99
 8001fd8:	08001f99 	.word	0x08001f99
 8001fdc:	08002129 	.word	0x08002129
 8001fe0:	0800204d 	.word	0x0800204d
 8001fe4:	0800210b 	.word	0x0800210b
 8001fe8:	08001f99 	.word	0x08001f99
 8001fec:	08001f99 	.word	0x08001f99
 8001ff0:	0800214b 	.word	0x0800214b
 8001ff4:	08001f99 	.word	0x08001f99
 8001ff8:	0800204d 	.word	0x0800204d
 8001ffc:	08001f99 	.word	0x08001f99
 8002000:	08001f99 	.word	0x08001f99
 8002004:	08002113 	.word	0x08002113
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	1d1a      	adds	r2, r3, #4
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	602a      	str	r2, [r5, #0]
 8002010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002018:	2301      	movs	r3, #1
 800201a:	e0a3      	b.n	8002164 <_printf_i+0x1f4>
 800201c:	6820      	ldr	r0, [r4, #0]
 800201e:	6829      	ldr	r1, [r5, #0]
 8002020:	0606      	lsls	r6, r0, #24
 8002022:	f101 0304 	add.w	r3, r1, #4
 8002026:	d50a      	bpl.n	800203e <_printf_i+0xce>
 8002028:	680e      	ldr	r6, [r1, #0]
 800202a:	602b      	str	r3, [r5, #0]
 800202c:	2e00      	cmp	r6, #0
 800202e:	da03      	bge.n	8002038 <_printf_i+0xc8>
 8002030:	232d      	movs	r3, #45	; 0x2d
 8002032:	4276      	negs	r6, r6
 8002034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002038:	485e      	ldr	r0, [pc, #376]	; (80021b4 <_printf_i+0x244>)
 800203a:	230a      	movs	r3, #10
 800203c:	e019      	b.n	8002072 <_printf_i+0x102>
 800203e:	680e      	ldr	r6, [r1, #0]
 8002040:	602b      	str	r3, [r5, #0]
 8002042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002046:	bf18      	it	ne
 8002048:	b236      	sxthne	r6, r6
 800204a:	e7ef      	b.n	800202c <_printf_i+0xbc>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6820      	ldr	r0, [r4, #0]
 8002050:	1d19      	adds	r1, r3, #4
 8002052:	6029      	str	r1, [r5, #0]
 8002054:	0601      	lsls	r1, r0, #24
 8002056:	d501      	bpl.n	800205c <_printf_i+0xec>
 8002058:	681e      	ldr	r6, [r3, #0]
 800205a:	e002      	b.n	8002062 <_printf_i+0xf2>
 800205c:	0646      	lsls	r6, r0, #25
 800205e:	d5fb      	bpl.n	8002058 <_printf_i+0xe8>
 8002060:	881e      	ldrh	r6, [r3, #0]
 8002062:	4854      	ldr	r0, [pc, #336]	; (80021b4 <_printf_i+0x244>)
 8002064:	2f6f      	cmp	r7, #111	; 0x6f
 8002066:	bf0c      	ite	eq
 8002068:	2308      	moveq	r3, #8
 800206a:	230a      	movne	r3, #10
 800206c:	2100      	movs	r1, #0
 800206e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002072:	6865      	ldr	r5, [r4, #4]
 8002074:	60a5      	str	r5, [r4, #8]
 8002076:	2d00      	cmp	r5, #0
 8002078:	bfa2      	ittt	ge
 800207a:	6821      	ldrge	r1, [r4, #0]
 800207c:	f021 0104 	bicge.w	r1, r1, #4
 8002080:	6021      	strge	r1, [r4, #0]
 8002082:	b90e      	cbnz	r6, 8002088 <_printf_i+0x118>
 8002084:	2d00      	cmp	r5, #0
 8002086:	d04d      	beq.n	8002124 <_printf_i+0x1b4>
 8002088:	4615      	mov	r5, r2
 800208a:	fbb6 f1f3 	udiv	r1, r6, r3
 800208e:	fb03 6711 	mls	r7, r3, r1, r6
 8002092:	5dc7      	ldrb	r7, [r0, r7]
 8002094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002098:	4637      	mov	r7, r6
 800209a:	42bb      	cmp	r3, r7
 800209c:	460e      	mov	r6, r1
 800209e:	d9f4      	bls.n	800208a <_printf_i+0x11a>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d10b      	bne.n	80020bc <_printf_i+0x14c>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	07de      	lsls	r6, r3, #31
 80020a8:	d508      	bpl.n	80020bc <_printf_i+0x14c>
 80020aa:	6923      	ldr	r3, [r4, #16]
 80020ac:	6861      	ldr	r1, [r4, #4]
 80020ae:	4299      	cmp	r1, r3
 80020b0:	bfde      	ittt	le
 80020b2:	2330      	movle	r3, #48	; 0x30
 80020b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80020b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80020bc:	1b52      	subs	r2, r2, r5
 80020be:	6122      	str	r2, [r4, #16]
 80020c0:	f8cd a000 	str.w	sl, [sp]
 80020c4:	464b      	mov	r3, r9
 80020c6:	aa03      	add	r2, sp, #12
 80020c8:	4621      	mov	r1, r4
 80020ca:	4640      	mov	r0, r8
 80020cc:	f7ff fee2 	bl	8001e94 <_printf_common>
 80020d0:	3001      	adds	r0, #1
 80020d2:	d14c      	bne.n	800216e <_printf_i+0x1fe>
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	b004      	add	sp, #16
 80020da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020de:	4835      	ldr	r0, [pc, #212]	; (80021b4 <_printf_i+0x244>)
 80020e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80020e4:	6829      	ldr	r1, [r5, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80020ec:	6029      	str	r1, [r5, #0]
 80020ee:	061d      	lsls	r5, r3, #24
 80020f0:	d514      	bpl.n	800211c <_printf_i+0x1ac>
 80020f2:	07df      	lsls	r7, r3, #31
 80020f4:	bf44      	itt	mi
 80020f6:	f043 0320 	orrmi.w	r3, r3, #32
 80020fa:	6023      	strmi	r3, [r4, #0]
 80020fc:	b91e      	cbnz	r6, 8002106 <_printf_i+0x196>
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	f023 0320 	bic.w	r3, r3, #32
 8002104:	6023      	str	r3, [r4, #0]
 8002106:	2310      	movs	r3, #16
 8002108:	e7b0      	b.n	800206c <_printf_i+0xfc>
 800210a:	6823      	ldr	r3, [r4, #0]
 800210c:	f043 0320 	orr.w	r3, r3, #32
 8002110:	6023      	str	r3, [r4, #0]
 8002112:	2378      	movs	r3, #120	; 0x78
 8002114:	4828      	ldr	r0, [pc, #160]	; (80021b8 <_printf_i+0x248>)
 8002116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800211a:	e7e3      	b.n	80020e4 <_printf_i+0x174>
 800211c:	0659      	lsls	r1, r3, #25
 800211e:	bf48      	it	mi
 8002120:	b2b6      	uxthmi	r6, r6
 8002122:	e7e6      	b.n	80020f2 <_printf_i+0x182>
 8002124:	4615      	mov	r5, r2
 8002126:	e7bb      	b.n	80020a0 <_printf_i+0x130>
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6826      	ldr	r6, [r4, #0]
 800212c:	6961      	ldr	r1, [r4, #20]
 800212e:	1d18      	adds	r0, r3, #4
 8002130:	6028      	str	r0, [r5, #0]
 8002132:	0635      	lsls	r5, r6, #24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	d501      	bpl.n	800213c <_printf_i+0x1cc>
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	e002      	b.n	8002142 <_printf_i+0x1d2>
 800213c:	0670      	lsls	r0, r6, #25
 800213e:	d5fb      	bpl.n	8002138 <_printf_i+0x1c8>
 8002140:	8019      	strh	r1, [r3, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	6123      	str	r3, [r4, #16]
 8002146:	4615      	mov	r5, r2
 8002148:	e7ba      	b.n	80020c0 <_printf_i+0x150>
 800214a:	682b      	ldr	r3, [r5, #0]
 800214c:	1d1a      	adds	r2, r3, #4
 800214e:	602a      	str	r2, [r5, #0]
 8002150:	681d      	ldr	r5, [r3, #0]
 8002152:	6862      	ldr	r2, [r4, #4]
 8002154:	2100      	movs	r1, #0
 8002156:	4628      	mov	r0, r5
 8002158:	f7fe f842 	bl	80001e0 <memchr>
 800215c:	b108      	cbz	r0, 8002162 <_printf_i+0x1f2>
 800215e:	1b40      	subs	r0, r0, r5
 8002160:	6060      	str	r0, [r4, #4]
 8002162:	6863      	ldr	r3, [r4, #4]
 8002164:	6123      	str	r3, [r4, #16]
 8002166:	2300      	movs	r3, #0
 8002168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800216c:	e7a8      	b.n	80020c0 <_printf_i+0x150>
 800216e:	6923      	ldr	r3, [r4, #16]
 8002170:	462a      	mov	r2, r5
 8002172:	4649      	mov	r1, r9
 8002174:	4640      	mov	r0, r8
 8002176:	47d0      	blx	sl
 8002178:	3001      	adds	r0, #1
 800217a:	d0ab      	beq.n	80020d4 <_printf_i+0x164>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	d413      	bmi.n	80021aa <_printf_i+0x23a>
 8002182:	68e0      	ldr	r0, [r4, #12]
 8002184:	9b03      	ldr	r3, [sp, #12]
 8002186:	4298      	cmp	r0, r3
 8002188:	bfb8      	it	lt
 800218a:	4618      	movlt	r0, r3
 800218c:	e7a4      	b.n	80020d8 <_printf_i+0x168>
 800218e:	2301      	movs	r3, #1
 8002190:	4632      	mov	r2, r6
 8002192:	4649      	mov	r1, r9
 8002194:	4640      	mov	r0, r8
 8002196:	47d0      	blx	sl
 8002198:	3001      	adds	r0, #1
 800219a:	d09b      	beq.n	80020d4 <_printf_i+0x164>
 800219c:	3501      	adds	r5, #1
 800219e:	68e3      	ldr	r3, [r4, #12]
 80021a0:	9903      	ldr	r1, [sp, #12]
 80021a2:	1a5b      	subs	r3, r3, r1
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	dcf2      	bgt.n	800218e <_printf_i+0x21e>
 80021a8:	e7eb      	b.n	8002182 <_printf_i+0x212>
 80021aa:	2500      	movs	r5, #0
 80021ac:	f104 0619 	add.w	r6, r4, #25
 80021b0:	e7f5      	b.n	800219e <_printf_i+0x22e>
 80021b2:	bf00      	nop
 80021b4:	08002a77 	.word	0x08002a77
 80021b8:	08002a88 	.word	0x08002a88

080021bc <_sbrk_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4d06      	ldr	r5, [pc, #24]	; (80021d8 <_sbrk_r+0x1c>)
 80021c0:	2300      	movs	r3, #0
 80021c2:	4604      	mov	r4, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	602b      	str	r3, [r5, #0]
 80021c8:	f7ff faf8 	bl	80017bc <_sbrk>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_sbrk_r+0x1a>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_sbrk_r+0x1a>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	20000100 	.word	0x20000100

080021dc <__swbuf_r>:
 80021dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021de:	460e      	mov	r6, r1
 80021e0:	4614      	mov	r4, r2
 80021e2:	4605      	mov	r5, r0
 80021e4:	b118      	cbz	r0, 80021ee <__swbuf_r+0x12>
 80021e6:	6983      	ldr	r3, [r0, #24]
 80021e8:	b90b      	cbnz	r3, 80021ee <__swbuf_r+0x12>
 80021ea:	f000 f9d5 	bl	8002598 <__sinit>
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <__swbuf_r+0x98>)
 80021f0:	429c      	cmp	r4, r3
 80021f2:	d12b      	bne.n	800224c <__swbuf_r+0x70>
 80021f4:	686c      	ldr	r4, [r5, #4]
 80021f6:	69a3      	ldr	r3, [r4, #24]
 80021f8:	60a3      	str	r3, [r4, #8]
 80021fa:	89a3      	ldrh	r3, [r4, #12]
 80021fc:	071a      	lsls	r2, r3, #28
 80021fe:	d52f      	bpl.n	8002260 <__swbuf_r+0x84>
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	b36b      	cbz	r3, 8002260 <__swbuf_r+0x84>
 8002204:	6923      	ldr	r3, [r4, #16]
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	1ac0      	subs	r0, r0, r3
 800220a:	6963      	ldr	r3, [r4, #20]
 800220c:	b2f6      	uxtb	r6, r6
 800220e:	4283      	cmp	r3, r0
 8002210:	4637      	mov	r7, r6
 8002212:	dc04      	bgt.n	800221e <__swbuf_r+0x42>
 8002214:	4621      	mov	r1, r4
 8002216:	4628      	mov	r0, r5
 8002218:	f000 f92a 	bl	8002470 <_fflush_r>
 800221c:	bb30      	cbnz	r0, 800226c <__swbuf_r+0x90>
 800221e:	68a3      	ldr	r3, [r4, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60a3      	str	r3, [r4, #8]
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	6022      	str	r2, [r4, #0]
 800222a:	701e      	strb	r6, [r3, #0]
 800222c:	6963      	ldr	r3, [r4, #20]
 800222e:	3001      	adds	r0, #1
 8002230:	4283      	cmp	r3, r0
 8002232:	d004      	beq.n	800223e <__swbuf_r+0x62>
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	07db      	lsls	r3, r3, #31
 8002238:	d506      	bpl.n	8002248 <__swbuf_r+0x6c>
 800223a:	2e0a      	cmp	r6, #10
 800223c:	d104      	bne.n	8002248 <__swbuf_r+0x6c>
 800223e:	4621      	mov	r1, r4
 8002240:	4628      	mov	r0, r5
 8002242:	f000 f915 	bl	8002470 <_fflush_r>
 8002246:	b988      	cbnz	r0, 800226c <__swbuf_r+0x90>
 8002248:	4638      	mov	r0, r7
 800224a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <__swbuf_r+0x9c>)
 800224e:	429c      	cmp	r4, r3
 8002250:	d101      	bne.n	8002256 <__swbuf_r+0x7a>
 8002252:	68ac      	ldr	r4, [r5, #8]
 8002254:	e7cf      	b.n	80021f6 <__swbuf_r+0x1a>
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <__swbuf_r+0xa0>)
 8002258:	429c      	cmp	r4, r3
 800225a:	bf08      	it	eq
 800225c:	68ec      	ldreq	r4, [r5, #12]
 800225e:	e7ca      	b.n	80021f6 <__swbuf_r+0x1a>
 8002260:	4621      	mov	r1, r4
 8002262:	4628      	mov	r0, r5
 8002264:	f000 f80c 	bl	8002280 <__swsetup_r>
 8002268:	2800      	cmp	r0, #0
 800226a:	d0cb      	beq.n	8002204 <__swbuf_r+0x28>
 800226c:	f04f 37ff 	mov.w	r7, #4294967295
 8002270:	e7ea      	b.n	8002248 <__swbuf_r+0x6c>
 8002272:	bf00      	nop
 8002274:	08002abc 	.word	0x08002abc
 8002278:	08002adc 	.word	0x08002adc
 800227c:	08002a9c 	.word	0x08002a9c

08002280 <__swsetup_r>:
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <__swsetup_r+0xcc>)
 8002282:	b570      	push	{r4, r5, r6, lr}
 8002284:	681d      	ldr	r5, [r3, #0]
 8002286:	4606      	mov	r6, r0
 8002288:	460c      	mov	r4, r1
 800228a:	b125      	cbz	r5, 8002296 <__swsetup_r+0x16>
 800228c:	69ab      	ldr	r3, [r5, #24]
 800228e:	b913      	cbnz	r3, 8002296 <__swsetup_r+0x16>
 8002290:	4628      	mov	r0, r5
 8002292:	f000 f981 	bl	8002598 <__sinit>
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <__swsetup_r+0xd0>)
 8002298:	429c      	cmp	r4, r3
 800229a:	d10f      	bne.n	80022bc <__swsetup_r+0x3c>
 800229c:	686c      	ldr	r4, [r5, #4]
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80022a4:	0719      	lsls	r1, r3, #28
 80022a6:	d42c      	bmi.n	8002302 <__swsetup_r+0x82>
 80022a8:	06dd      	lsls	r5, r3, #27
 80022aa:	d411      	bmi.n	80022d0 <__swsetup_r+0x50>
 80022ac:	2309      	movs	r3, #9
 80022ae:	6033      	str	r3, [r6, #0]
 80022b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80022b4:	81a3      	strh	r3, [r4, #12]
 80022b6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ba:	e03e      	b.n	800233a <__swsetup_r+0xba>
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <__swsetup_r+0xd4>)
 80022be:	429c      	cmp	r4, r3
 80022c0:	d101      	bne.n	80022c6 <__swsetup_r+0x46>
 80022c2:	68ac      	ldr	r4, [r5, #8]
 80022c4:	e7eb      	b.n	800229e <__swsetup_r+0x1e>
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <__swsetup_r+0xd8>)
 80022c8:	429c      	cmp	r4, r3
 80022ca:	bf08      	it	eq
 80022cc:	68ec      	ldreq	r4, [r5, #12]
 80022ce:	e7e6      	b.n	800229e <__swsetup_r+0x1e>
 80022d0:	0758      	lsls	r0, r3, #29
 80022d2:	d512      	bpl.n	80022fa <__swsetup_r+0x7a>
 80022d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022d6:	b141      	cbz	r1, 80022ea <__swsetup_r+0x6a>
 80022d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022dc:	4299      	cmp	r1, r3
 80022de:	d002      	beq.n	80022e6 <__swsetup_r+0x66>
 80022e0:	4630      	mov	r0, r6
 80022e2:	f7ff fba1 	bl	8001a28 <_free_r>
 80022e6:	2300      	movs	r3, #0
 80022e8:	6363      	str	r3, [r4, #52]	; 0x34
 80022ea:	89a3      	ldrh	r3, [r4, #12]
 80022ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80022f0:	81a3      	strh	r3, [r4, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	b94b      	cbnz	r3, 800231a <__swsetup_r+0x9a>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800230c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002310:	d003      	beq.n	800231a <__swsetup_r+0x9a>
 8002312:	4621      	mov	r1, r4
 8002314:	4630      	mov	r0, r6
 8002316:	f000 fa05 	bl	8002724 <__smakebuf_r>
 800231a:	89a0      	ldrh	r0, [r4, #12]
 800231c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002320:	f010 0301 	ands.w	r3, r0, #1
 8002324:	d00a      	beq.n	800233c <__swsetup_r+0xbc>
 8002326:	2300      	movs	r3, #0
 8002328:	60a3      	str	r3, [r4, #8]
 800232a:	6963      	ldr	r3, [r4, #20]
 800232c:	425b      	negs	r3, r3
 800232e:	61a3      	str	r3, [r4, #24]
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	b943      	cbnz	r3, 8002346 <__swsetup_r+0xc6>
 8002334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002338:	d1ba      	bne.n	80022b0 <__swsetup_r+0x30>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	0781      	lsls	r1, r0, #30
 800233e:	bf58      	it	pl
 8002340:	6963      	ldrpl	r3, [r4, #20]
 8002342:	60a3      	str	r3, [r4, #8]
 8002344:	e7f4      	b.n	8002330 <__swsetup_r+0xb0>
 8002346:	2000      	movs	r0, #0
 8002348:	e7f7      	b.n	800233a <__swsetup_r+0xba>
 800234a:	bf00      	nop
 800234c:	20000004 	.word	0x20000004
 8002350:	08002abc 	.word	0x08002abc
 8002354:	08002adc 	.word	0x08002adc
 8002358:	08002a9c 	.word	0x08002a9c

0800235c <abort>:
 800235c:	b508      	push	{r3, lr}
 800235e:	2006      	movs	r0, #6
 8002360:	f000 fa54 	bl	800280c <raise>
 8002364:	2001      	movs	r0, #1
 8002366:	f7ff f9b6 	bl	80016d6 <_exit>
	...

0800236c <__sflush_r>:
 800236c:	898a      	ldrh	r2, [r1, #12]
 800236e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002370:	4605      	mov	r5, r0
 8002372:	0710      	lsls	r0, r2, #28
 8002374:	460c      	mov	r4, r1
 8002376:	d457      	bmi.n	8002428 <__sflush_r+0xbc>
 8002378:	684b      	ldr	r3, [r1, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	dc04      	bgt.n	8002388 <__sflush_r+0x1c>
 800237e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	dc01      	bgt.n	8002388 <__sflush_r+0x1c>
 8002384:	2000      	movs	r0, #0
 8002386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800238a:	2e00      	cmp	r6, #0
 800238c:	d0fa      	beq.n	8002384 <__sflush_r+0x18>
 800238e:	2300      	movs	r3, #0
 8002390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002394:	682f      	ldr	r7, [r5, #0]
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	d032      	beq.n	8002400 <__sflush_r+0x94>
 800239a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	075a      	lsls	r2, r3, #29
 80023a0:	d505      	bpl.n	80023ae <__sflush_r+0x42>
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	1ac0      	subs	r0, r0, r3
 80023a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80023a8:	b10b      	cbz	r3, 80023ae <__sflush_r+0x42>
 80023aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023ac:	1ac0      	subs	r0, r0, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	4602      	mov	r2, r0
 80023b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80023b4:	6a21      	ldr	r1, [r4, #32]
 80023b6:	4628      	mov	r0, r5
 80023b8:	47b0      	blx	r6
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	d106      	bne.n	80023ce <__sflush_r+0x62>
 80023c0:	6829      	ldr	r1, [r5, #0]
 80023c2:	291d      	cmp	r1, #29
 80023c4:	d82c      	bhi.n	8002420 <__sflush_r+0xb4>
 80023c6:	4a29      	ldr	r2, [pc, #164]	; (800246c <__sflush_r+0x100>)
 80023c8:	40ca      	lsrs	r2, r1
 80023ca:	07d6      	lsls	r6, r2, #31
 80023cc:	d528      	bpl.n	8002420 <__sflush_r+0xb4>
 80023ce:	2200      	movs	r2, #0
 80023d0:	6062      	str	r2, [r4, #4]
 80023d2:	04d9      	lsls	r1, r3, #19
 80023d4:	6922      	ldr	r2, [r4, #16]
 80023d6:	6022      	str	r2, [r4, #0]
 80023d8:	d504      	bpl.n	80023e4 <__sflush_r+0x78>
 80023da:	1c42      	adds	r2, r0, #1
 80023dc:	d101      	bne.n	80023e2 <__sflush_r+0x76>
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	b903      	cbnz	r3, 80023e4 <__sflush_r+0x78>
 80023e2:	6560      	str	r0, [r4, #84]	; 0x54
 80023e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023e6:	602f      	str	r7, [r5, #0]
 80023e8:	2900      	cmp	r1, #0
 80023ea:	d0cb      	beq.n	8002384 <__sflush_r+0x18>
 80023ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80023f0:	4299      	cmp	r1, r3
 80023f2:	d002      	beq.n	80023fa <__sflush_r+0x8e>
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff fb17 	bl	8001a28 <_free_r>
 80023fa:	2000      	movs	r0, #0
 80023fc:	6360      	str	r0, [r4, #52]	; 0x34
 80023fe:	e7c2      	b.n	8002386 <__sflush_r+0x1a>
 8002400:	6a21      	ldr	r1, [r4, #32]
 8002402:	2301      	movs	r3, #1
 8002404:	4628      	mov	r0, r5
 8002406:	47b0      	blx	r6
 8002408:	1c41      	adds	r1, r0, #1
 800240a:	d1c7      	bne.n	800239c <__sflush_r+0x30>
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0c4      	beq.n	800239c <__sflush_r+0x30>
 8002412:	2b1d      	cmp	r3, #29
 8002414:	d001      	beq.n	800241a <__sflush_r+0xae>
 8002416:	2b16      	cmp	r3, #22
 8002418:	d101      	bne.n	800241e <__sflush_r+0xb2>
 800241a:	602f      	str	r7, [r5, #0]
 800241c:	e7b2      	b.n	8002384 <__sflush_r+0x18>
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002424:	81a3      	strh	r3, [r4, #12]
 8002426:	e7ae      	b.n	8002386 <__sflush_r+0x1a>
 8002428:	690f      	ldr	r7, [r1, #16]
 800242a:	2f00      	cmp	r7, #0
 800242c:	d0aa      	beq.n	8002384 <__sflush_r+0x18>
 800242e:	0793      	lsls	r3, r2, #30
 8002430:	680e      	ldr	r6, [r1, #0]
 8002432:	bf08      	it	eq
 8002434:	694b      	ldreq	r3, [r1, #20]
 8002436:	600f      	str	r7, [r1, #0]
 8002438:	bf18      	it	ne
 800243a:	2300      	movne	r3, #0
 800243c:	1bf6      	subs	r6, r6, r7
 800243e:	608b      	str	r3, [r1, #8]
 8002440:	2e00      	cmp	r6, #0
 8002442:	dd9f      	ble.n	8002384 <__sflush_r+0x18>
 8002444:	6a21      	ldr	r1, [r4, #32]
 8002446:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800244a:	4633      	mov	r3, r6
 800244c:	463a      	mov	r2, r7
 800244e:	4628      	mov	r0, r5
 8002450:	47e0      	blx	ip
 8002452:	2800      	cmp	r0, #0
 8002454:	dc06      	bgt.n	8002464 <__sflush_r+0xf8>
 8002456:	89a3      	ldrh	r3, [r4, #12]
 8002458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	e790      	b.n	8002386 <__sflush_r+0x1a>
 8002464:	4407      	add	r7, r0
 8002466:	1a36      	subs	r6, r6, r0
 8002468:	e7ea      	b.n	8002440 <__sflush_r+0xd4>
 800246a:	bf00      	nop
 800246c:	20400001 	.word	0x20400001

08002470 <_fflush_r>:
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	690b      	ldr	r3, [r1, #16]
 8002474:	4605      	mov	r5, r0
 8002476:	460c      	mov	r4, r1
 8002478:	b913      	cbnz	r3, 8002480 <_fflush_r+0x10>
 800247a:	2500      	movs	r5, #0
 800247c:	4628      	mov	r0, r5
 800247e:	bd38      	pop	{r3, r4, r5, pc}
 8002480:	b118      	cbz	r0, 800248a <_fflush_r+0x1a>
 8002482:	6983      	ldr	r3, [r0, #24]
 8002484:	b90b      	cbnz	r3, 800248a <_fflush_r+0x1a>
 8002486:	f000 f887 	bl	8002598 <__sinit>
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <_fflush_r+0x6c>)
 800248c:	429c      	cmp	r4, r3
 800248e:	d11b      	bne.n	80024c8 <_fflush_r+0x58>
 8002490:	686c      	ldr	r4, [r5, #4]
 8002492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0ef      	beq.n	800247a <_fflush_r+0xa>
 800249a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800249c:	07d0      	lsls	r0, r2, #31
 800249e:	d404      	bmi.n	80024aa <_fflush_r+0x3a>
 80024a0:	0599      	lsls	r1, r3, #22
 80024a2:	d402      	bmi.n	80024aa <_fflush_r+0x3a>
 80024a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024a6:	f000 f915 	bl	80026d4 <__retarget_lock_acquire_recursive>
 80024aa:	4628      	mov	r0, r5
 80024ac:	4621      	mov	r1, r4
 80024ae:	f7ff ff5d 	bl	800236c <__sflush_r>
 80024b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80024b4:	07da      	lsls	r2, r3, #31
 80024b6:	4605      	mov	r5, r0
 80024b8:	d4e0      	bmi.n	800247c <_fflush_r+0xc>
 80024ba:	89a3      	ldrh	r3, [r4, #12]
 80024bc:	059b      	lsls	r3, r3, #22
 80024be:	d4dd      	bmi.n	800247c <_fflush_r+0xc>
 80024c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024c2:	f000 f908 	bl	80026d6 <__retarget_lock_release_recursive>
 80024c6:	e7d9      	b.n	800247c <_fflush_r+0xc>
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <_fflush_r+0x70>)
 80024ca:	429c      	cmp	r4, r3
 80024cc:	d101      	bne.n	80024d2 <_fflush_r+0x62>
 80024ce:	68ac      	ldr	r4, [r5, #8]
 80024d0:	e7df      	b.n	8002492 <_fflush_r+0x22>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_fflush_r+0x74>)
 80024d4:	429c      	cmp	r4, r3
 80024d6:	bf08      	it	eq
 80024d8:	68ec      	ldreq	r4, [r5, #12]
 80024da:	e7da      	b.n	8002492 <_fflush_r+0x22>
 80024dc:	08002abc 	.word	0x08002abc
 80024e0:	08002adc 	.word	0x08002adc
 80024e4:	08002a9c 	.word	0x08002a9c

080024e8 <std>:
 80024e8:	2300      	movs	r3, #0
 80024ea:	b510      	push	{r4, lr}
 80024ec:	4604      	mov	r4, r0
 80024ee:	e9c0 3300 	strd	r3, r3, [r0]
 80024f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80024f6:	6083      	str	r3, [r0, #8]
 80024f8:	8181      	strh	r1, [r0, #12]
 80024fa:	6643      	str	r3, [r0, #100]	; 0x64
 80024fc:	81c2      	strh	r2, [r0, #14]
 80024fe:	6183      	str	r3, [r0, #24]
 8002500:	4619      	mov	r1, r3
 8002502:	2208      	movs	r2, #8
 8002504:	305c      	adds	r0, #92	; 0x5c
 8002506:	f7ff f9e3 	bl	80018d0 <memset>
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <std+0x38>)
 800250c:	6263      	str	r3, [r4, #36]	; 0x24
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <std+0x3c>)
 8002510:	62a3      	str	r3, [r4, #40]	; 0x28
 8002512:	4b05      	ldr	r3, [pc, #20]	; (8002528 <std+0x40>)
 8002514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <std+0x44>)
 8002518:	6224      	str	r4, [r4, #32]
 800251a:	6323      	str	r3, [r4, #48]	; 0x30
 800251c:	bd10      	pop	{r4, pc}
 800251e:	bf00      	nop
 8002520:	08002845 	.word	0x08002845
 8002524:	08002867 	.word	0x08002867
 8002528:	0800289f 	.word	0x0800289f
 800252c:	080028c3 	.word	0x080028c3

08002530 <_cleanup_r>:
 8002530:	4901      	ldr	r1, [pc, #4]	; (8002538 <_cleanup_r+0x8>)
 8002532:	f000 b8af 	b.w	8002694 <_fwalk_reent>
 8002536:	bf00      	nop
 8002538:	08002471 	.word	0x08002471

0800253c <__sfmoreglue>:
 800253c:	b570      	push	{r4, r5, r6, lr}
 800253e:	2268      	movs	r2, #104	; 0x68
 8002540:	1e4d      	subs	r5, r1, #1
 8002542:	4355      	muls	r5, r2
 8002544:	460e      	mov	r6, r1
 8002546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800254a:	f7ff fad7 	bl	8001afc <_malloc_r>
 800254e:	4604      	mov	r4, r0
 8002550:	b140      	cbz	r0, 8002564 <__sfmoreglue+0x28>
 8002552:	2100      	movs	r1, #0
 8002554:	e9c0 1600 	strd	r1, r6, [r0]
 8002558:	300c      	adds	r0, #12
 800255a:	60a0      	str	r0, [r4, #8]
 800255c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002560:	f7ff f9b6 	bl	80018d0 <memset>
 8002564:	4620      	mov	r0, r4
 8002566:	bd70      	pop	{r4, r5, r6, pc}

08002568 <__sfp_lock_acquire>:
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <__sfp_lock_acquire+0x8>)
 800256a:	f000 b8b3 	b.w	80026d4 <__retarget_lock_acquire_recursive>
 800256e:	bf00      	nop
 8002570:	200000fd 	.word	0x200000fd

08002574 <__sfp_lock_release>:
 8002574:	4801      	ldr	r0, [pc, #4]	; (800257c <__sfp_lock_release+0x8>)
 8002576:	f000 b8ae 	b.w	80026d6 <__retarget_lock_release_recursive>
 800257a:	bf00      	nop
 800257c:	200000fd 	.word	0x200000fd

08002580 <__sinit_lock_acquire>:
 8002580:	4801      	ldr	r0, [pc, #4]	; (8002588 <__sinit_lock_acquire+0x8>)
 8002582:	f000 b8a7 	b.w	80026d4 <__retarget_lock_acquire_recursive>
 8002586:	bf00      	nop
 8002588:	200000fe 	.word	0x200000fe

0800258c <__sinit_lock_release>:
 800258c:	4801      	ldr	r0, [pc, #4]	; (8002594 <__sinit_lock_release+0x8>)
 800258e:	f000 b8a2 	b.w	80026d6 <__retarget_lock_release_recursive>
 8002592:	bf00      	nop
 8002594:	200000fe 	.word	0x200000fe

08002598 <__sinit>:
 8002598:	b510      	push	{r4, lr}
 800259a:	4604      	mov	r4, r0
 800259c:	f7ff fff0 	bl	8002580 <__sinit_lock_acquire>
 80025a0:	69a3      	ldr	r3, [r4, #24]
 80025a2:	b11b      	cbz	r3, 80025ac <__sinit+0x14>
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	f7ff bff0 	b.w	800258c <__sinit_lock_release>
 80025ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80025b0:	6523      	str	r3, [r4, #80]	; 0x50
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <__sinit+0x68>)
 80025b4:	4a13      	ldr	r2, [pc, #76]	; (8002604 <__sinit+0x6c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80025ba:	42a3      	cmp	r3, r4
 80025bc:	bf04      	itt	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	61a3      	streq	r3, [r4, #24]
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 f820 	bl	8002608 <__sfp>
 80025c8:	6060      	str	r0, [r4, #4]
 80025ca:	4620      	mov	r0, r4
 80025cc:	f000 f81c 	bl	8002608 <__sfp>
 80025d0:	60a0      	str	r0, [r4, #8]
 80025d2:	4620      	mov	r0, r4
 80025d4:	f000 f818 	bl	8002608 <__sfp>
 80025d8:	2200      	movs	r2, #0
 80025da:	60e0      	str	r0, [r4, #12]
 80025dc:	2104      	movs	r1, #4
 80025de:	6860      	ldr	r0, [r4, #4]
 80025e0:	f7ff ff82 	bl	80024e8 <std>
 80025e4:	68a0      	ldr	r0, [r4, #8]
 80025e6:	2201      	movs	r2, #1
 80025e8:	2109      	movs	r1, #9
 80025ea:	f7ff ff7d 	bl	80024e8 <std>
 80025ee:	68e0      	ldr	r0, [r4, #12]
 80025f0:	2202      	movs	r2, #2
 80025f2:	2112      	movs	r1, #18
 80025f4:	f7ff ff78 	bl	80024e8 <std>
 80025f8:	2301      	movs	r3, #1
 80025fa:	61a3      	str	r3, [r4, #24]
 80025fc:	e7d2      	b.n	80025a4 <__sinit+0xc>
 80025fe:	bf00      	nop
 8002600:	080029b4 	.word	0x080029b4
 8002604:	08002531 	.word	0x08002531

08002608 <__sfp>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	4607      	mov	r7, r0
 800260c:	f7ff ffac 	bl	8002568 <__sfp_lock_acquire>
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <__sfp+0x84>)
 8002612:	681e      	ldr	r6, [r3, #0]
 8002614:	69b3      	ldr	r3, [r6, #24]
 8002616:	b913      	cbnz	r3, 800261e <__sfp+0x16>
 8002618:	4630      	mov	r0, r6
 800261a:	f7ff ffbd 	bl	8002598 <__sinit>
 800261e:	3648      	adds	r6, #72	; 0x48
 8002620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002624:	3b01      	subs	r3, #1
 8002626:	d503      	bpl.n	8002630 <__sfp+0x28>
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	b30b      	cbz	r3, 8002670 <__sfp+0x68>
 800262c:	6836      	ldr	r6, [r6, #0]
 800262e:	e7f7      	b.n	8002620 <__sfp+0x18>
 8002630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002634:	b9d5      	cbnz	r5, 800266c <__sfp+0x64>
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <__sfp+0x88>)
 8002638:	60e3      	str	r3, [r4, #12]
 800263a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800263e:	6665      	str	r5, [r4, #100]	; 0x64
 8002640:	f000 f847 	bl	80026d2 <__retarget_lock_init_recursive>
 8002644:	f7ff ff96 	bl	8002574 <__sfp_lock_release>
 8002648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800264c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002650:	6025      	str	r5, [r4, #0]
 8002652:	61a5      	str	r5, [r4, #24]
 8002654:	2208      	movs	r2, #8
 8002656:	4629      	mov	r1, r5
 8002658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800265c:	f7ff f938 	bl	80018d0 <memset>
 8002660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002668:	4620      	mov	r0, r4
 800266a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800266c:	3468      	adds	r4, #104	; 0x68
 800266e:	e7d9      	b.n	8002624 <__sfp+0x1c>
 8002670:	2104      	movs	r1, #4
 8002672:	4638      	mov	r0, r7
 8002674:	f7ff ff62 	bl	800253c <__sfmoreglue>
 8002678:	4604      	mov	r4, r0
 800267a:	6030      	str	r0, [r6, #0]
 800267c:	2800      	cmp	r0, #0
 800267e:	d1d5      	bne.n	800262c <__sfp+0x24>
 8002680:	f7ff ff78 	bl	8002574 <__sfp_lock_release>
 8002684:	230c      	movs	r3, #12
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	e7ee      	b.n	8002668 <__sfp+0x60>
 800268a:	bf00      	nop
 800268c:	080029b4 	.word	0x080029b4
 8002690:	ffff0001 	.word	0xffff0001

08002694 <_fwalk_reent>:
 8002694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002698:	4606      	mov	r6, r0
 800269a:	4688      	mov	r8, r1
 800269c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80026a0:	2700      	movs	r7, #0
 80026a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026a6:	f1b9 0901 	subs.w	r9, r9, #1
 80026aa:	d505      	bpl.n	80026b8 <_fwalk_reent+0x24>
 80026ac:	6824      	ldr	r4, [r4, #0]
 80026ae:	2c00      	cmp	r4, #0
 80026b0:	d1f7      	bne.n	80026a2 <_fwalk_reent+0xe>
 80026b2:	4638      	mov	r0, r7
 80026b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026b8:	89ab      	ldrh	r3, [r5, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d907      	bls.n	80026ce <_fwalk_reent+0x3a>
 80026be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026c2:	3301      	adds	r3, #1
 80026c4:	d003      	beq.n	80026ce <_fwalk_reent+0x3a>
 80026c6:	4629      	mov	r1, r5
 80026c8:	4630      	mov	r0, r6
 80026ca:	47c0      	blx	r8
 80026cc:	4307      	orrs	r7, r0
 80026ce:	3568      	adds	r5, #104	; 0x68
 80026d0:	e7e9      	b.n	80026a6 <_fwalk_reent+0x12>

080026d2 <__retarget_lock_init_recursive>:
 80026d2:	4770      	bx	lr

080026d4 <__retarget_lock_acquire_recursive>:
 80026d4:	4770      	bx	lr

080026d6 <__retarget_lock_release_recursive>:
 80026d6:	4770      	bx	lr

080026d8 <__swhatbuf_r>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	460e      	mov	r6, r1
 80026dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026e0:	2900      	cmp	r1, #0
 80026e2:	b096      	sub	sp, #88	; 0x58
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	da08      	bge.n	80026fc <__swhatbuf_r+0x24>
 80026ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	602a      	str	r2, [r5, #0]
 80026f2:	061a      	lsls	r2, r3, #24
 80026f4:	d410      	bmi.n	8002718 <__swhatbuf_r+0x40>
 80026f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026fa:	e00e      	b.n	800271a <__swhatbuf_r+0x42>
 80026fc:	466a      	mov	r2, sp
 80026fe:	f000 f907 	bl	8002910 <_fstat_r>
 8002702:	2800      	cmp	r0, #0
 8002704:	dbf1      	blt.n	80026ea <__swhatbuf_r+0x12>
 8002706:	9a01      	ldr	r2, [sp, #4]
 8002708:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800270c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002710:	425a      	negs	r2, r3
 8002712:	415a      	adcs	r2, r3
 8002714:	602a      	str	r2, [r5, #0]
 8002716:	e7ee      	b.n	80026f6 <__swhatbuf_r+0x1e>
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	2000      	movs	r0, #0
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	b016      	add	sp, #88	; 0x58
 8002720:	bd70      	pop	{r4, r5, r6, pc}
	...

08002724 <__smakebuf_r>:
 8002724:	898b      	ldrh	r3, [r1, #12]
 8002726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002728:	079d      	lsls	r5, r3, #30
 800272a:	4606      	mov	r6, r0
 800272c:	460c      	mov	r4, r1
 800272e:	d507      	bpl.n	8002740 <__smakebuf_r+0x1c>
 8002730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	6123      	str	r3, [r4, #16]
 8002738:	2301      	movs	r3, #1
 800273a:	6163      	str	r3, [r4, #20]
 800273c:	b002      	add	sp, #8
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	ab01      	add	r3, sp, #4
 8002742:	466a      	mov	r2, sp
 8002744:	f7ff ffc8 	bl	80026d8 <__swhatbuf_r>
 8002748:	9900      	ldr	r1, [sp, #0]
 800274a:	4605      	mov	r5, r0
 800274c:	4630      	mov	r0, r6
 800274e:	f7ff f9d5 	bl	8001afc <_malloc_r>
 8002752:	b948      	cbnz	r0, 8002768 <__smakebuf_r+0x44>
 8002754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002758:	059a      	lsls	r2, r3, #22
 800275a:	d4ef      	bmi.n	800273c <__smakebuf_r+0x18>
 800275c:	f023 0303 	bic.w	r3, r3, #3
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	e7e3      	b.n	8002730 <__smakebuf_r+0xc>
 8002768:	4b0d      	ldr	r3, [pc, #52]	; (80027a0 <__smakebuf_r+0x7c>)
 800276a:	62b3      	str	r3, [r6, #40]	; 0x28
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	6020      	str	r0, [r4, #0]
 8002770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002774:	81a3      	strh	r3, [r4, #12]
 8002776:	9b00      	ldr	r3, [sp, #0]
 8002778:	6163      	str	r3, [r4, #20]
 800277a:	9b01      	ldr	r3, [sp, #4]
 800277c:	6120      	str	r0, [r4, #16]
 800277e:	b15b      	cbz	r3, 8002798 <__smakebuf_r+0x74>
 8002780:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002784:	4630      	mov	r0, r6
 8002786:	f000 f8d5 	bl	8002934 <_isatty_r>
 800278a:	b128      	cbz	r0, 8002798 <__smakebuf_r+0x74>
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	81a3      	strh	r3, [r4, #12]
 8002798:	89a0      	ldrh	r0, [r4, #12]
 800279a:	4305      	orrs	r5, r0
 800279c:	81a5      	strh	r5, [r4, #12]
 800279e:	e7cd      	b.n	800273c <__smakebuf_r+0x18>
 80027a0:	08002531 	.word	0x08002531

080027a4 <__malloc_lock>:
 80027a4:	4801      	ldr	r0, [pc, #4]	; (80027ac <__malloc_lock+0x8>)
 80027a6:	f7ff bf95 	b.w	80026d4 <__retarget_lock_acquire_recursive>
 80027aa:	bf00      	nop
 80027ac:	200000fc 	.word	0x200000fc

080027b0 <__malloc_unlock>:
 80027b0:	4801      	ldr	r0, [pc, #4]	; (80027b8 <__malloc_unlock+0x8>)
 80027b2:	f7ff bf90 	b.w	80026d6 <__retarget_lock_release_recursive>
 80027b6:	bf00      	nop
 80027b8:	200000fc 	.word	0x200000fc

080027bc <_raise_r>:
 80027bc:	291f      	cmp	r1, #31
 80027be:	b538      	push	{r3, r4, r5, lr}
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	d904      	bls.n	80027d0 <_raise_r+0x14>
 80027c6:	2316      	movs	r3, #22
 80027c8:	6003      	str	r3, [r0, #0]
 80027ca:	f04f 30ff 	mov.w	r0, #4294967295
 80027ce:	bd38      	pop	{r3, r4, r5, pc}
 80027d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80027d2:	b112      	cbz	r2, 80027da <_raise_r+0x1e>
 80027d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80027d8:	b94b      	cbnz	r3, 80027ee <_raise_r+0x32>
 80027da:	4620      	mov	r0, r4
 80027dc:	f000 f830 	bl	8002840 <_getpid_r>
 80027e0:	462a      	mov	r2, r5
 80027e2:	4601      	mov	r1, r0
 80027e4:	4620      	mov	r0, r4
 80027e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027ea:	f000 b817 	b.w	800281c <_kill_r>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d00a      	beq.n	8002808 <_raise_r+0x4c>
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	d103      	bne.n	80027fe <_raise_r+0x42>
 80027f6:	2316      	movs	r3, #22
 80027f8:	6003      	str	r3, [r0, #0]
 80027fa:	2001      	movs	r0, #1
 80027fc:	e7e7      	b.n	80027ce <_raise_r+0x12>
 80027fe:	2400      	movs	r4, #0
 8002800:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002804:	4628      	mov	r0, r5
 8002806:	4798      	blx	r3
 8002808:	2000      	movs	r0, #0
 800280a:	e7e0      	b.n	80027ce <_raise_r+0x12>

0800280c <raise>:
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <raise+0xc>)
 800280e:	4601      	mov	r1, r0
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	f7ff bfd3 	b.w	80027bc <_raise_r>
 8002816:	bf00      	nop
 8002818:	20000004 	.word	0x20000004

0800281c <_kill_r>:
 800281c:	b538      	push	{r3, r4, r5, lr}
 800281e:	4d07      	ldr	r5, [pc, #28]	; (800283c <_kill_r+0x20>)
 8002820:	2300      	movs	r3, #0
 8002822:	4604      	mov	r4, r0
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	602b      	str	r3, [r5, #0]
 800282a:	f7fe ff44 	bl	80016b6 <_kill>
 800282e:	1c43      	adds	r3, r0, #1
 8002830:	d102      	bne.n	8002838 <_kill_r+0x1c>
 8002832:	682b      	ldr	r3, [r5, #0]
 8002834:	b103      	cbz	r3, 8002838 <_kill_r+0x1c>
 8002836:	6023      	str	r3, [r4, #0]
 8002838:	bd38      	pop	{r3, r4, r5, pc}
 800283a:	bf00      	nop
 800283c:	20000100 	.word	0x20000100

08002840 <_getpid_r>:
 8002840:	f7fe bf32 	b.w	80016a8 <_getpid>

08002844 <__sread>:
 8002844:	b510      	push	{r4, lr}
 8002846:	460c      	mov	r4, r1
 8002848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800284c:	f000 f894 	bl	8002978 <_read_r>
 8002850:	2800      	cmp	r0, #0
 8002852:	bfab      	itete	ge
 8002854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002856:	89a3      	ldrhlt	r3, [r4, #12]
 8002858:	181b      	addge	r3, r3, r0
 800285a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800285e:	bfac      	ite	ge
 8002860:	6563      	strge	r3, [r4, #84]	; 0x54
 8002862:	81a3      	strhlt	r3, [r4, #12]
 8002864:	bd10      	pop	{r4, pc}

08002866 <__swrite>:
 8002866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800286a:	461f      	mov	r7, r3
 800286c:	898b      	ldrh	r3, [r1, #12]
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	4605      	mov	r5, r0
 8002872:	460c      	mov	r4, r1
 8002874:	4616      	mov	r6, r2
 8002876:	d505      	bpl.n	8002884 <__swrite+0x1e>
 8002878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800287c:	2302      	movs	r3, #2
 800287e:	2200      	movs	r2, #0
 8002880:	f000 f868 	bl	8002954 <_lseek_r>
 8002884:	89a3      	ldrh	r3, [r4, #12]
 8002886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800288a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800288e:	81a3      	strh	r3, [r4, #12]
 8002890:	4632      	mov	r2, r6
 8002892:	463b      	mov	r3, r7
 8002894:	4628      	mov	r0, r5
 8002896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	f000 b817 	b.w	80028cc <_write_r>

0800289e <__sseek>:
 800289e:	b510      	push	{r4, lr}
 80028a0:	460c      	mov	r4, r1
 80028a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028a6:	f000 f855 	bl	8002954 <_lseek_r>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	89a3      	ldrh	r3, [r4, #12]
 80028ae:	bf15      	itete	ne
 80028b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80028b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028ba:	81a3      	strheq	r3, [r4, #12]
 80028bc:	bf18      	it	ne
 80028be:	81a3      	strhne	r3, [r4, #12]
 80028c0:	bd10      	pop	{r4, pc}

080028c2 <__sclose>:
 80028c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c6:	f000 b813 	b.w	80028f0 <_close_r>
	...

080028cc <_write_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4d07      	ldr	r5, [pc, #28]	; (80028ec <_write_r+0x20>)
 80028d0:	4604      	mov	r4, r0
 80028d2:	4608      	mov	r0, r1
 80028d4:	4611      	mov	r1, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	602a      	str	r2, [r5, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	f7fe ff22 	bl	8001724 <_write>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d102      	bne.n	80028ea <_write_r+0x1e>
 80028e4:	682b      	ldr	r3, [r5, #0]
 80028e6:	b103      	cbz	r3, 80028ea <_write_r+0x1e>
 80028e8:	6023      	str	r3, [r4, #0]
 80028ea:	bd38      	pop	{r3, r4, r5, pc}
 80028ec:	20000100 	.word	0x20000100

080028f0 <_close_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	4d06      	ldr	r5, [pc, #24]	; (800290c <_close_r+0x1c>)
 80028f4:	2300      	movs	r3, #0
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	f7fe ff2e 	bl	800175c <_close>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_close_r+0x1a>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_close_r+0x1a>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	20000100 	.word	0x20000100

08002910 <_fstat_r>:
 8002910:	b538      	push	{r3, r4, r5, lr}
 8002912:	4d07      	ldr	r5, [pc, #28]	; (8002930 <_fstat_r+0x20>)
 8002914:	2300      	movs	r3, #0
 8002916:	4604      	mov	r4, r0
 8002918:	4608      	mov	r0, r1
 800291a:	4611      	mov	r1, r2
 800291c:	602b      	str	r3, [r5, #0]
 800291e:	f7fe ff28 	bl	8001772 <_fstat>
 8002922:	1c43      	adds	r3, r0, #1
 8002924:	d102      	bne.n	800292c <_fstat_r+0x1c>
 8002926:	682b      	ldr	r3, [r5, #0]
 8002928:	b103      	cbz	r3, 800292c <_fstat_r+0x1c>
 800292a:	6023      	str	r3, [r4, #0]
 800292c:	bd38      	pop	{r3, r4, r5, pc}
 800292e:	bf00      	nop
 8002930:	20000100 	.word	0x20000100

08002934 <_isatty_r>:
 8002934:	b538      	push	{r3, r4, r5, lr}
 8002936:	4d06      	ldr	r5, [pc, #24]	; (8002950 <_isatty_r+0x1c>)
 8002938:	2300      	movs	r3, #0
 800293a:	4604      	mov	r4, r0
 800293c:	4608      	mov	r0, r1
 800293e:	602b      	str	r3, [r5, #0]
 8002940:	f7fe ff26 	bl	8001790 <_isatty>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_isatty_r+0x1a>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	b103      	cbz	r3, 800294e <_isatty_r+0x1a>
 800294c:	6023      	str	r3, [r4, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	20000100 	.word	0x20000100

08002954 <_lseek_r>:
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4d07      	ldr	r5, [pc, #28]	; (8002974 <_lseek_r+0x20>)
 8002958:	4604      	mov	r4, r0
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	2200      	movs	r2, #0
 8002960:	602a      	str	r2, [r5, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	f7fe ff1e 	bl	80017a4 <_lseek>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_lseek_r+0x1e>
 800296c:	682b      	ldr	r3, [r5, #0]
 800296e:	b103      	cbz	r3, 8002972 <_lseek_r+0x1e>
 8002970:	6023      	str	r3, [r4, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	20000100 	.word	0x20000100

08002978 <_read_r>:
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4d07      	ldr	r5, [pc, #28]	; (8002998 <_read_r+0x20>)
 800297c:	4604      	mov	r4, r0
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	2200      	movs	r2, #0
 8002984:	602a      	str	r2, [r5, #0]
 8002986:	461a      	mov	r2, r3
 8002988:	f7fe feaf 	bl	80016ea <_read>
 800298c:	1c43      	adds	r3, r0, #1
 800298e:	d102      	bne.n	8002996 <_read_r+0x1e>
 8002990:	682b      	ldr	r3, [r5, #0]
 8002992:	b103      	cbz	r3, 8002996 <_read_r+0x1e>
 8002994:	6023      	str	r3, [r4, #0]
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	20000100 	.word	0x20000100

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
