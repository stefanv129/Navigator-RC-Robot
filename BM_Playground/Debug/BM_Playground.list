
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800505c  0800505c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800505c  0800505c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800505c  0800505c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800505c  0800505c  0001505c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  080050cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080050cc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f73  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d41  00000000  00000000  00024005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000368  00000000  00000000  00024d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  000250b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ef6  00000000  00000000  00025380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003f76  00000000  00000000  00029276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c608  00000000  00000000  0002d1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000397f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bcc  00000000  00000000  00039844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a5c 	.word	0x08004a5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004a5c 	.word	0x08004a5c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_frsub>:
 80008fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000900:	e002      	b.n	8000908 <__addsf3>
 8000902:	bf00      	nop

08000904 <__aeabi_fsub>:
 8000904:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000908 <__addsf3>:
 8000908:	0042      	lsls	r2, r0, #1
 800090a:	bf1f      	itttt	ne
 800090c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000910:	ea92 0f03 	teqne	r2, r3
 8000914:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000918:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800091c:	d06a      	beq.n	80009f4 <__addsf3+0xec>
 800091e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000922:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000926:	bfc1      	itttt	gt
 8000928:	18d2      	addgt	r2, r2, r3
 800092a:	4041      	eorgt	r1, r0
 800092c:	4048      	eorgt	r0, r1
 800092e:	4041      	eorgt	r1, r0
 8000930:	bfb8      	it	lt
 8000932:	425b      	neglt	r3, r3
 8000934:	2b19      	cmp	r3, #25
 8000936:	bf88      	it	hi
 8000938:	4770      	bxhi	lr
 800093a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800093e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000942:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800094e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000952:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4249      	negne	r1, r1
 800095a:	ea92 0f03 	teq	r2, r3
 800095e:	d03f      	beq.n	80009e0 <__addsf3+0xd8>
 8000960:	f1a2 0201 	sub.w	r2, r2, #1
 8000964:	fa41 fc03 	asr.w	ip, r1, r3
 8000968:	eb10 000c 	adds.w	r0, r0, ip
 800096c:	f1c3 0320 	rsb	r3, r3, #32
 8000970:	fa01 f103 	lsl.w	r1, r1, r3
 8000974:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000978:	d502      	bpl.n	8000980 <__addsf3+0x78>
 800097a:	4249      	negs	r1, r1
 800097c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000980:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000984:	d313      	bcc.n	80009ae <__addsf3+0xa6>
 8000986:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800098a:	d306      	bcc.n	800099a <__addsf3+0x92>
 800098c:	0840      	lsrs	r0, r0, #1
 800098e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000992:	f102 0201 	add.w	r2, r2, #1
 8000996:	2afe      	cmp	r2, #254	; 0xfe
 8000998:	d251      	bcs.n	8000a3e <__addsf3+0x136>
 800099a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800099e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009a2:	bf08      	it	eq
 80009a4:	f020 0001 	biceq.w	r0, r0, #1
 80009a8:	ea40 0003 	orr.w	r0, r0, r3
 80009ac:	4770      	bx	lr
 80009ae:	0049      	lsls	r1, r1, #1
 80009b0:	eb40 0000 	adc.w	r0, r0, r0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	bf28      	it	cs
 80009b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009bc:	d2ed      	bcs.n	800099a <__addsf3+0x92>
 80009be:	fab0 fc80 	clz	ip, r0
 80009c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009c6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ce:	bfaa      	itet	ge
 80009d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009d4:	4252      	neglt	r2, r2
 80009d6:	4318      	orrge	r0, r3
 80009d8:	bfbc      	itt	lt
 80009da:	40d0      	lsrlt	r0, r2
 80009dc:	4318      	orrlt	r0, r3
 80009de:	4770      	bx	lr
 80009e0:	f092 0f00 	teq	r2, #0
 80009e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009e8:	bf06      	itte	eq
 80009ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009ee:	3201      	addeq	r2, #1
 80009f0:	3b01      	subne	r3, #1
 80009f2:	e7b5      	b.n	8000960 <__addsf3+0x58>
 80009f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009fc:	bf18      	it	ne
 80009fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a02:	d021      	beq.n	8000a48 <__addsf3+0x140>
 8000a04:	ea92 0f03 	teq	r2, r3
 8000a08:	d004      	beq.n	8000a14 <__addsf3+0x10c>
 8000a0a:	f092 0f00 	teq	r2, #0
 8000a0e:	bf08      	it	eq
 8000a10:	4608      	moveq	r0, r1
 8000a12:	4770      	bx	lr
 8000a14:	ea90 0f01 	teq	r0, r1
 8000a18:	bf1c      	itt	ne
 8000a1a:	2000      	movne	r0, #0
 8000a1c:	4770      	bxne	lr
 8000a1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a22:	d104      	bne.n	8000a2e <__addsf3+0x126>
 8000a24:	0040      	lsls	r0, r0, #1
 8000a26:	bf28      	it	cs
 8000a28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	4770      	bx	lr
 8000a2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a32:	bf3c      	itt	cc
 8000a34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bxcc	lr
 8000a3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a46:	4770      	bx	lr
 8000a48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a4c:	bf16      	itet	ne
 8000a4e:	4608      	movne	r0, r1
 8000a50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a54:	4601      	movne	r1, r0
 8000a56:	0242      	lsls	r2, r0, #9
 8000a58:	bf06      	itte	eq
 8000a5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a5e:	ea90 0f01 	teqeq	r0, r1
 8000a62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_ui2f>:
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	e004      	b.n	8000a78 <__aeabi_i2f+0x8>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_i2f>:
 8000a70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a74:	bf48      	it	mi
 8000a76:	4240      	negmi	r0, r0
 8000a78:	ea5f 0c00 	movs.w	ip, r0
 8000a7c:	bf08      	it	eq
 8000a7e:	4770      	bxeq	lr
 8000a80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a84:	4601      	mov	r1, r0
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	e01c      	b.n	8000ac6 <__aeabi_l2f+0x2a>

08000a8c <__aeabi_ul2f>:
 8000a8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a90:	bf08      	it	eq
 8000a92:	4770      	bxeq	lr
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e00a      	b.n	8000ab0 <__aeabi_l2f+0x14>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_l2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__aeabi_l2f+0x14>
 8000aaa:	4240      	negs	r0, r0
 8000aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ab0:	ea5f 0c01 	movs.w	ip, r1
 8000ab4:	bf02      	ittt	eq
 8000ab6:	4684      	moveq	ip, r0
 8000ab8:	4601      	moveq	r1, r0
 8000aba:	2000      	moveq	r0, #0
 8000abc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ac0:	bf08      	it	eq
 8000ac2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aca:	fabc f28c 	clz	r2, ip
 8000ace:	3a08      	subs	r2, #8
 8000ad0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ad4:	db10      	blt.n	8000af8 <__aeabi_l2f+0x5c>
 8000ad6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ada:	4463      	add	r3, ip
 8000adc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ae0:	f1c2 0220 	rsb	r2, r2, #32
 8000ae4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ae8:	fa20 f202 	lsr.w	r2, r0, r2
 8000aec:	eb43 0002 	adc.w	r0, r3, r2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f102 0220 	add.w	r2, r2, #32
 8000afc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b08:	fa21 f202 	lsr.w	r2, r1, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_fmul>:
 8000b18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b20:	bf1e      	ittt	ne
 8000b22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b26:	ea92 0f0c 	teqne	r2, ip
 8000b2a:	ea93 0f0c 	teqne	r3, ip
 8000b2e:	d06f      	beq.n	8000c10 <__aeabi_fmul+0xf8>
 8000b30:	441a      	add	r2, r3
 8000b32:	ea80 0c01 	eor.w	ip, r0, r1
 8000b36:	0240      	lsls	r0, r0, #9
 8000b38:	bf18      	it	ne
 8000b3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b3e:	d01e      	beq.n	8000b7e <__aeabi_fmul+0x66>
 8000b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b58:	bf3e      	ittt	cc
 8000b5a:	0049      	lslcc	r1, r1, #1
 8000b5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b60:	005b      	lslcc	r3, r3, #1
 8000b62:	ea40 0001 	orr.w	r0, r0, r1
 8000b66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b6a:	2afd      	cmp	r2, #253	; 0xfd
 8000b6c:	d81d      	bhi.n	8000baa <__aeabi_fmul+0x92>
 8000b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b76:	bf08      	it	eq
 8000b78:	f020 0001 	biceq.w	r0, r0, #1
 8000b7c:	4770      	bx	lr
 8000b7e:	f090 0f00 	teq	r0, #0
 8000b82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b86:	bf08      	it	eq
 8000b88:	0249      	lsleq	r1, r1, #9
 8000b8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b92:	3a7f      	subs	r2, #127	; 0x7f
 8000b94:	bfc2      	ittt	gt
 8000b96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9e:	4770      	bxgt	lr
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	dc5d      	bgt.n	8000c68 <__aeabi_fmul+0x150>
 8000bac:	f112 0f19 	cmn.w	r2, #25
 8000bb0:	bfdc      	itt	le
 8000bb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bxle	lr
 8000bb8:	f1c2 0200 	rsb	r2, r2, #0
 8000bbc:	0041      	lsls	r1, r0, #1
 8000bbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000bc2:	f1c2 0220 	rsb	r2, r2, #32
 8000bc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bce:	f140 0000 	adc.w	r0, r0, #0
 8000bd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bd6:	bf08      	it	eq
 8000bd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bdc:	4770      	bx	lr
 8000bde:	f092 0f00 	teq	r2, #0
 8000be2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000be6:	bf02      	ittt	eq
 8000be8:	0040      	lsleq	r0, r0, #1
 8000bea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bee:	3a01      	subeq	r2, #1
 8000bf0:	d0f9      	beq.n	8000be6 <__aeabi_fmul+0xce>
 8000bf2:	ea40 000c 	orr.w	r0, r0, ip
 8000bf6:	f093 0f00 	teq	r3, #0
 8000bfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bfe:	bf02      	ittt	eq
 8000c00:	0049      	lsleq	r1, r1, #1
 8000c02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c06:	3b01      	subeq	r3, #1
 8000c08:	d0f9      	beq.n	8000bfe <__aeabi_fmul+0xe6>
 8000c0a:	ea41 010c 	orr.w	r1, r1, ip
 8000c0e:	e78f      	b.n	8000b30 <__aeabi_fmul+0x18>
 8000c10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c14:	ea92 0f0c 	teq	r2, ip
 8000c18:	bf18      	it	ne
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d00a      	beq.n	8000c36 <__aeabi_fmul+0x11e>
 8000c20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c24:	bf18      	it	ne
 8000c26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	d1d8      	bne.n	8000bde <__aeabi_fmul+0xc6>
 8000c2c:	ea80 0001 	eor.w	r0, r0, r1
 8000c30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	bf17      	itett	ne
 8000c3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c40:	4608      	moveq	r0, r1
 8000c42:	f091 0f00 	teqne	r1, #0
 8000c46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c4a:	d014      	beq.n	8000c76 <__aeabi_fmul+0x15e>
 8000c4c:	ea92 0f0c 	teq	r2, ip
 8000c50:	d101      	bne.n	8000c56 <__aeabi_fmul+0x13e>
 8000c52:	0242      	lsls	r2, r0, #9
 8000c54:	d10f      	bne.n	8000c76 <__aeabi_fmul+0x15e>
 8000c56:	ea93 0f0c 	teq	r3, ip
 8000c5a:	d103      	bne.n	8000c64 <__aeabi_fmul+0x14c>
 8000c5c:	024b      	lsls	r3, r1, #9
 8000c5e:	bf18      	it	ne
 8000c60:	4608      	movne	r0, r1
 8000c62:	d108      	bne.n	8000c76 <__aeabi_fmul+0x15e>
 8000c64:	ea80 0001 	eor.w	r0, r0, r1
 8000c68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fdiv>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d069      	beq.n	8000d6c <__aeabi_fdiv+0xec>
 8000c98:	eba2 0203 	sub.w	r2, r2, r3
 8000c9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca0:	0249      	lsls	r1, r1, #9
 8000ca2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ca6:	d037      	beq.n	8000d18 <__aeabi_fdiv+0x98>
 8000ca8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	bf38      	it	cc
 8000cbc:	005b      	lslcc	r3, r3, #1
 8000cbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	bf24      	itt	cs
 8000cca:	1a5b      	subcs	r3, r3, r1
 8000ccc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cd4:	bf24      	itt	cs
 8000cd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ce2:	bf24      	itt	cs
 8000ce4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ce8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cf0:	bf24      	itt	cs
 8000cf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d02:	d1e0      	bne.n	8000cc6 <__aeabi_fdiv+0x46>
 8000d04:	2afd      	cmp	r2, #253	; 0xfd
 8000d06:	f63f af50 	bhi.w	8000baa <__aeabi_fmul+0x92>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d20:	327f      	adds	r2, #127	; 0x7f
 8000d22:	bfc2      	ittt	gt
 8000d24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2c:	4770      	bxgt	lr
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	3a01      	subs	r2, #1
 8000d38:	e737      	b.n	8000baa <__aeabi_fmul+0x92>
 8000d3a:	f092 0f00 	teq	r2, #0
 8000d3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d42:	bf02      	ittt	eq
 8000d44:	0040      	lsleq	r0, r0, #1
 8000d46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d4a:	3a01      	subeq	r2, #1
 8000d4c:	d0f9      	beq.n	8000d42 <__aeabi_fdiv+0xc2>
 8000d4e:	ea40 000c 	orr.w	r0, r0, ip
 8000d52:	f093 0f00 	teq	r3, #0
 8000d56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d5a:	bf02      	ittt	eq
 8000d5c:	0049      	lsleq	r1, r1, #1
 8000d5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d62:	3b01      	subeq	r3, #1
 8000d64:	d0f9      	beq.n	8000d5a <__aeabi_fdiv+0xda>
 8000d66:	ea41 010c 	orr.w	r1, r1, ip
 8000d6a:	e795      	b.n	8000c98 <__aeabi_fdiv+0x18>
 8000d6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d70:	ea92 0f0c 	teq	r2, ip
 8000d74:	d108      	bne.n	8000d88 <__aeabi_fdiv+0x108>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	f47f af7d 	bne.w	8000c76 <__aeabi_fmul+0x15e>
 8000d7c:	ea93 0f0c 	teq	r3, ip
 8000d80:	f47f af70 	bne.w	8000c64 <__aeabi_fmul+0x14c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e776      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000d88:	ea93 0f0c 	teq	r3, ip
 8000d8c:	d104      	bne.n	8000d98 <__aeabi_fdiv+0x118>
 8000d8e:	024b      	lsls	r3, r1, #9
 8000d90:	f43f af4c 	beq.w	8000c2c <__aeabi_fmul+0x114>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e76e      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1ca      	bne.n	8000d3a <__aeabi_fdiv+0xba>
 8000da4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000da8:	f47f af5c 	bne.w	8000c64 <__aeabi_fmul+0x14c>
 8000dac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	f47f af3c 	bne.w	8000c2c <__aeabi_fmul+0x114>
 8000db4:	e75f      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000db6:	bf00      	nop

08000db8 <__gesf2>:
 8000db8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dbc:	e006      	b.n	8000dcc <__cmpsf2+0x4>
 8000dbe:	bf00      	nop

08000dc0 <__lesf2>:
 8000dc0:	f04f 0c01 	mov.w	ip, #1
 8000dc4:	e002      	b.n	8000dcc <__cmpsf2+0x4>
 8000dc6:	bf00      	nop

08000dc8 <__cmpsf2>:
 8000dc8:	f04f 0c01 	mov.w	ip, #1
 8000dcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	bf18      	it	ne
 8000dde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de2:	d011      	beq.n	8000e08 <__cmpsf2+0x40>
 8000de4:	b001      	add	sp, #4
 8000de6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dea:	bf18      	it	ne
 8000dec:	ea90 0f01 	teqne	r0, r1
 8000df0:	bf58      	it	pl
 8000df2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000df6:	bf88      	it	hi
 8000df8:	17c8      	asrhi	r0, r1, #31
 8000dfa:	bf38      	it	cc
 8000dfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e00:	bf18      	it	ne
 8000e02:	f040 0001 	orrne.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	d102      	bne.n	8000e14 <__cmpsf2+0x4c>
 8000e0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e12:	d105      	bne.n	8000e20 <__cmpsf2+0x58>
 8000e14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e18:	d1e4      	bne.n	8000de4 <__cmpsf2+0x1c>
 8000e1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e1e:	d0e1      	beq.n	8000de4 <__cmpsf2+0x1c>
 8000e20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <__aeabi_cfrcmple>:
 8000e28:	4684      	mov	ip, r0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4661      	mov	r1, ip
 8000e2e:	e7ff      	b.n	8000e30 <__aeabi_cfcmpeq>

08000e30 <__aeabi_cfcmpeq>:
 8000e30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e32:	f7ff ffc9 	bl	8000dc8 <__cmpsf2>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	bf48      	it	mi
 8000e3a:	f110 0f00 	cmnmi.w	r0, #0
 8000e3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e40 <__aeabi_fcmpeq>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff fff4 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e48:	bf0c      	ite	eq
 8000e4a:	2001      	moveq	r0, #1
 8000e4c:	2000      	movne	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_fcmplt>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffea 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e5c:	bf34      	ite	cc
 8000e5e:	2001      	movcc	r0, #1
 8000e60:	2000      	movcs	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_fcmple>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffe0 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e70:	bf94      	ite	ls
 8000e72:	2001      	movls	r0, #1
 8000e74:	2000      	movhi	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_fcmpge>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff ffd2 	bl	8000e28 <__aeabi_cfrcmple>
 8000e84:	bf94      	ite	ls
 8000e86:	2001      	movls	r0, #1
 8000e88:	2000      	movhi	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmpgt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffc8 	bl	8000e28 <__aeabi_cfrcmple>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_f2iz>:
 8000ea4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eac:	d30f      	bcc.n	8000ece <__aeabi_f2iz+0x2a>
 8000eae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eb6:	d90d      	bls.n	8000ed4 <__aeabi_f2iz+0x30>
 8000eb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ec4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec8:	bf18      	it	ne
 8000eca:	4240      	negne	r0, r0
 8000ecc:	4770      	bx	lr
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed8:	d101      	bne.n	8000ede <__aeabi_f2iz+0x3a>
 8000eda:	0242      	lsls	r2, r0, #9
 8000edc:	d105      	bne.n	8000eea <__aeabi_f2iz+0x46>
 8000ede:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ee2:	bf08      	it	eq
 8000ee4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_f2uiz>:
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	d20e      	bcs.n	8000f12 <__aeabi_f2uiz+0x22>
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30b      	bcc.n	8000f12 <__aeabi_f2uiz+0x22>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d409      	bmi.n	8000f18 <__aeabi_f2uiz+0x28>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr
 8000f18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_f2uiz+0x32>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d102      	bne.n	8000f28 <__aeabi_f2uiz+0x38>
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d141      	bne.n	8000fc6 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a43      	ldr	r2, [pc, #268]	; (8001054 <GPIO_PeriClockControl+0x124>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d106      	bne.n	8000f58 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a42      	ldr	r2, [pc, #264]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 8000f56:	e077      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a40      	ldr	r2, [pc, #256]	; (800105c <GPIO_PeriClockControl+0x12c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f6c:	e06c      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a3b      	ldr	r2, [pc, #236]	; (8001060 <GPIO_PeriClockControl+0x130>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a37      	ldr	r2, [pc, #220]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f82:	e061      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a37      	ldr	r2, [pc, #220]	; (8001064 <GPIO_PeriClockControl+0x134>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d106      	bne.n	8000f9a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a31      	ldr	r2, [pc, #196]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f98:	e056      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <GPIO_PeriClockControl+0x138>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d106      	bne.n	8000fb0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fae:	e04b      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a2e      	ldr	r2, [pc, #184]	; (800106c <GPIO_PeriClockControl+0x13c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d147      	bne.n	8001048 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc4:	e040      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <GPIO_PeriClockControl+0x124>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fda:	e035      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <GPIO_PeriClockControl+0x12c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fea:	f023 0302 	bic.w	r3, r3, #2
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff0:	e02a      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <GPIO_PeriClockControl+0x130>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d106      	bne.n	8001008 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001006:	e01f      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <GPIO_PeriClockControl+0x134>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001016:	f023 0308 	bic.w	r3, r3, #8
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101c:	e014      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <GPIO_PeriClockControl+0x138>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <GPIO_PeriClockControl+0x128>)
 800102c:	f023 0310 	bic.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001032:	e009      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <GPIO_PeriClockControl+0x13c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d105      	bne.n	8001048 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <GPIO_PeriClockControl+0x128>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001042:	f023 0320 	bic.w	r3, r3, #32
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40020000 	.word	0x40020000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400

08001070 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff54 	bl	8000f30 <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d820      	bhi.n	80010d2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	795b      	ldrb	r3, [r3, #5]
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2103      	movs	r1, #3
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e08c      	b.n	80011ec <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d117      	bne.n	800110a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010da:	4b90      	ldr	r3, [pc, #576]	; (800131c <GPIO_Init+0x2ac>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7912      	ldrb	r2, [r2, #4]
 80010e2:	4611      	mov	r1, r2
 80010e4:	2201      	movs	r2, #1
 80010e6:	408a      	lsls	r2, r1
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a8c      	ldr	r2, [pc, #560]	; (800131c <GPIO_Init+0x2ac>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f0:	4b8a      	ldr	r3, [pc, #552]	; (800131c <GPIO_Init+0x2ac>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	7912      	ldrb	r2, [r2, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	2201      	movs	r2, #1
 80010fc:	408a      	lsls	r2, r1
 80010fe:	43d2      	mvns	r2, r2
 8001100:	4611      	mov	r1, r2
 8001102:	4a86      	ldr	r2, [pc, #536]	; (800131c <GPIO_Init+0x2ac>)
 8001104:	400b      	ands	r3, r1
 8001106:	6093      	str	r3, [r2, #8]
 8001108:	e035      	b.n	8001176 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d117      	bne.n	8001142 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001112:	4b82      	ldr	r3, [pc, #520]	; (800131c <GPIO_Init+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	7912      	ldrb	r2, [r2, #4]
 800111a:	4611      	mov	r1, r2
 800111c:	2201      	movs	r2, #1
 800111e:	408a      	lsls	r2, r1
 8001120:	4611      	mov	r1, r2
 8001122:	4a7e      	ldr	r2, [pc, #504]	; (800131c <GPIO_Init+0x2ac>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001128:	4b7c      	ldr	r3, [pc, #496]	; (800131c <GPIO_Init+0x2ac>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	7912      	ldrb	r2, [r2, #4]
 8001130:	4611      	mov	r1, r2
 8001132:	2201      	movs	r2, #1
 8001134:	408a      	lsls	r2, r1
 8001136:	43d2      	mvns	r2, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a78      	ldr	r2, [pc, #480]	; (800131c <GPIO_Init+0x2ac>)
 800113c:	400b      	ands	r3, r1
 800113e:	60d3      	str	r3, [r2, #12]
 8001140:	e019      	b.n	8001176 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d115      	bne.n	8001176 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800114a:	4b74      	ldr	r3, [pc, #464]	; (800131c <GPIO_Init+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7912      	ldrb	r2, [r2, #4]
 8001152:	4611      	mov	r1, r2
 8001154:	2201      	movs	r2, #1
 8001156:	408a      	lsls	r2, r1
 8001158:	4611      	mov	r1, r2
 800115a:	4a70      	ldr	r2, [pc, #448]	; (800131c <GPIO_Init+0x2ac>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001160:	4b6e      	ldr	r3, [pc, #440]	; (800131c <GPIO_Init+0x2ac>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7912      	ldrb	r2, [r2, #4]
 8001168:	4611      	mov	r1, r2
 800116a:	2201      	movs	r2, #1
 800116c:	408a      	lsls	r2, r1
 800116e:	4611      	mov	r1, r2
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <GPIO_Init+0x2ac>)
 8001172:	430b      	orrs	r3, r1
 8001174:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a64      	ldr	r2, [pc, #400]	; (8001320 <GPIO_Init+0x2b0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00f      	beq.n	80011b2 <GPIO_Init+0x142>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a63      	ldr	r2, [pc, #396]	; (8001324 <GPIO_Init+0x2b4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d008      	beq.n	80011ae <GPIO_Init+0x13e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a61      	ldr	r2, [pc, #388]	; (8001328 <GPIO_Init+0x2b8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <GPIO_Init+0x13a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e004      	b.n	80011b4 <GPIO_Init+0x144>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e002      	b.n	80011b4 <GPIO_Init+0x144>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <GPIO_Init+0x144>
 80011b2:	2300      	movs	r3, #0
 80011b4:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <GPIO_Init+0x2bc>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <GPIO_Init+0x2bc>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f103 	lsl.w	r1, r2, r3
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <GPIO_Init+0x2c0>)
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	3302      	adds	r3, #2
 80011d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <GPIO_Init+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	7912      	ldrb	r2, [r2, #4]
 80011de:	4611      	mov	r1, r2
 80011e0:	2201      	movs	r2, #1
 80011e2:	408a      	lsls	r2, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	4a4d      	ldr	r2, [pc, #308]	; (800131c <GPIO_Init+0x2ac>)
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2103      	movs	r1, #3
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6899      	ldr	r1, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	430a      	orrs	r2, r1
 800122a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	79db      	ldrb	r3, [r3, #7]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2103      	movs	r1, #3
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	400a      	ands	r2, r1
 800125a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7a1b      	ldrb	r3, [r3, #8]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	4619      	mov	r1, r3
 8001288:	2301      	movs	r3, #1
 800128a:	408b      	lsls	r3, r1
 800128c:	43db      	mvns	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	400a      	ands	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6859      	ldr	r1, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d131      	bne.n	8001314 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7c3a      	ldrb	r2, [r7, #16]
 80012c8:	3208      	adds	r2, #8
 80012ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	7c3a      	ldrb	r2, [r7, #16]
 80012e2:	4001      	ands	r1, r0
 80012e4:	3208      	adds	r2, #8
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	7c3a      	ldrb	r2, [r7, #16]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7a5b      	ldrb	r3, [r3, #9]
 80012fa:	461a      	mov	r2, r3
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7c3a      	ldrb	r2, [r7, #16]
 800130c:	4301      	orrs	r1, r0
 800130e:	3208      	adds	r2, #8
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40013c00 	.word	0x40013c00
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800

08001334 <GPIO_Write_Pin>:
	{
		GPIOH_REG_RESET();
	}
}

void GPIO_Write_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t STATE) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
 8001340:	4613      	mov	r3, r2
 8001342:	70bb      	strb	r3, [r7, #2]
	if (STATE == SET) {
 8001344:	78bb      	ldrb	r3, [r7, #2]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d109      	bne.n	800135e <GPIO_Write_Pin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);   // Set the pin
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}
 800135c:	e009      	b.n	8001372 <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	43d2      	mvns	r2, r2
 800136c:	401a      	ands	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	615a      	str	r2, [r3, #20]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
    return value;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d809      	bhi.n	80013cc <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	405a      	eors	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	e000      	b.n	80013ce <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 80013cc:	bf00      	nop
}
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d133      	bne.n	8001456 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b1f      	cmp	r3, #31
 80013f2:	d80a      	bhi.n	800140a <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <GPIO_IRQInterruptConfig+0xf0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	4611      	mov	r1, r2
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <GPIO_IRQInterruptConfig+0xf0>)
 8001404:	430b      	orrs	r3, r1
 8001406:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001408:	e059      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b1f      	cmp	r3, #31
 800140e:	d90f      	bls.n	8001430 <GPIO_IRQInterruptConfig+0x58>
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b3f      	cmp	r3, #63	; 0x3f
 8001414:	d80c      	bhi.n	8001430 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <GPIO_IRQInterruptConfig+0xf4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	f002 021f 	and.w	r2, r2, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <GPIO_IRQInterruptConfig+0xf4>)
 800142a:	430b      	orrs	r3, r1
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e046      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b3f      	cmp	r3, #63	; 0x3f
 8001434:	d943      	bls.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b5f      	cmp	r3, #95	; 0x5f
 800143a:	d840      	bhi.n	80014be <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <GPIO_IRQInterruptConfig+0xf8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <GPIO_IRQInterruptConfig+0xf8>)
 8001450:	430b      	orrs	r3, r1
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	e033      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b1f      	cmp	r3, #31
 800145a:	d80a      	bhi.n	8001472 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <GPIO_IRQInterruptConfig+0xfc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <GPIO_IRQInterruptConfig+0xfc>)
 800146c:	430b      	orrs	r3, r1
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	e025      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b1f      	cmp	r3, #31
 8001476:	d90f      	bls.n	8001498 <GPIO_IRQInterruptConfig+0xc0>
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b3f      	cmp	r3, #63	; 0x3f
 800147c:	d80c      	bhi.n	8001498 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <GPIO_IRQInterruptConfig+0x100>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <GPIO_IRQInterruptConfig+0x100>)
 8001492:	430b      	orrs	r3, r1
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e012      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b3f      	cmp	r3, #63	; 0x3f
 800149c:	d90f      	bls.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b5f      	cmp	r3, #95	; 0x5f
 80014a2:	d80c      	bhi.n	80014be <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <GPIO_IRQInterruptConfig+0x104>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <GPIO_IRQInterruptConfig+0x104>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	e7ff      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000e104 	.word	0xe000e104
 80014d0:	e000e108 	.word	0xe000e108
 80014d4:	e000e180 	.word	0xe000e180
 80014d8:	e000e184 	.word	0xe000e184
 80014dc:	e000e188 	.word	0xe000e188

080014e0 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <GPIO_IRQHandling+0x3c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <GPIO_IRQHandling+0x3c>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <GPIO_IRQHandling+0x3c>)
 800150c:	430b      	orrs	r3, r1
 800150e:	6153      	str	r3, [r2, #20]
	}
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40013c00 	.word	0x40013c00

08001520 <I2C_SM_INIT>:

}


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	// 1. Enable peripheral clock
	I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <I2C_SM_INIT+0x6c>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <I2C_SM_INIT+0x6c>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40

	// 2. Configure ACK
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a5b      	ldrb	r3, [r3, #9]
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4619      	mov	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

	// 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
	pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2208      	movs	r2, #8
 8001550:	605a      	str	r2, [r3, #4]

	// 4. Configure CCR for Standard Mode
	uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <I2C_SM_INIT+0x70>)
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	81fb      	strh	r3, [r7, #14]
	pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8001560:	89fa      	ldrh	r2, [r7, #14]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800156a:	61da      	str	r2, [r3, #28]

	// 5. Set TRISE
	// TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
	pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2209      	movs	r2, #9
 8001572:	621a      	str	r2, [r3, #32]

	// 6. Enable the peripheral
	pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	007a1200 	.word	0x007a1200

08001594 <drive_FWD>:
		__asm__("nop");
	}
}

//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]


	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2100      	movs	r1, #0
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fa41 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2102      	movs	r1, #2
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fa3c 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fa37 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2103      	movs	r1, #3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa32 	bl	8001a30 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH3)) & ~((1 << 4 * CH2) | (1 << 4 * CH4));
 80015cc:	f240 1301 	movw	r3, #257	; 0x101
 80015d0:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a19      	ldr	r1, [r3, #32]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	430a      	orrs	r2, r1
 80015e0:	621a      	str	r2, [r3, #32]

	//GP_TIM_Control(pGP_TIM_Handle->pTIMx, ENABLE);
	//one wheel turns faster at startup...
	//increase duty linearly?

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	695a      	ldr	r2, [r3, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	615a      	str	r2, [r3, #20]
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <stop_FWD>:

void stop_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_STOP);
 8001602:	2202      	movs	r2, #2
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa12 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_STOP);
 800160c:	2202      	movs	r2, #2
 800160e:	2102      	movs	r1, #2
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fa0d 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_STOP);
 8001616:	2202      	movs	r2, #2
 8001618:	2101      	movs	r1, #1
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 fa08 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_STOP);
 8001620:	2202      	movs	r2, #2
 8001622:	2103      	movs	r1, #3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fa03 	bl	8001a30 <GP_TIM_PWM_Control>



	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	695a      	ldr	r2, [r3, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0201 	orr.w	r2, r2, #1
 8001638:	615a      	str	r2, [r3, #20]
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8001652:	2201      	movs	r2, #1
 8001654:	2100      	movs	r1, #0
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f9ea 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 800165c:	2200      	movs	r2, #0
 800165e:	2102      	movs	r1, #2
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f9e5 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8001666:	2200      	movs	r2, #0
 8001668:	2101      	movs	r1, #1
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f9e0 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 8001670:	2201      	movs	r2, #1
 8001672:	2103      	movs	r1, #3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 f9db 	bl	8001a30 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH4)) & ~((1 << 4 * CH3) | (1 << 4 * CH2));
 800167a:	f241 0301 	movw	r3, #4097	; 0x1001
 800167e:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a19      	ldr	r1, [r3, #32]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	430a      	orrs	r2, r1
 800168e:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	615a      	str	r2, [r3, #20]
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f9b7 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2102      	movs	r1, #2
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f9b2 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f9ad 	bl	8001a30 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2103      	movs	r1, #3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f9a8 	bl	8001a30 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH3) | (1 << 4 * CH2)) & ~((1 << 4 * CH4) | (1 << 4 * CH1));
 80016e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80016e4:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6a19      	ldr	r1, [r3, #32]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	615a      	str	r2, [r3, #20]
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8001722:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 800172a:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d125      	bne.n	8001786 <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 800174a:	bf00      	nop
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f8      	beq.n	800174c <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0203 	bic.w	r2, r2, #3
 8001768:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6892      	ldr	r2, [r2, #8]
 8001774:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8001776:	bf00      	nop
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f8      	bne.n	8001778 <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <AD_TIM_FreeRun_INIT>:
}




void AD_TIM_FreeRun_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    if (pAD_TIM_Handle->pTIMx == TIM1) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1b      	ldr	r2, [pc, #108]	; (800180c <AD_TIM_FreeRun_INIT+0x7c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d105      	bne.n	80017ae <AD_TIM_FreeRun_INIT+0x1e>
        TIM1_PCLK_EN();
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <AD_TIM_FreeRun_INIT+0x80>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <AD_TIM_FreeRun_INIT+0x80>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
    }

    // Count up
    pAD_TIM_Handle->pTIMx->CR1 &= ~TIM_CR1_DIR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0208 	bic.w	r2, r2, #8
 80017bc:	601a      	str	r2, [r3, #0]

    // Auto-Reload Preload
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017cc:	601a      	str	r2, [r3, #0]

    // Max ARR
    pAD_TIM_Handle->pTIMx->ARR = 0xFFFF;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c

    // Prescaler (set before calling or assign here)
    pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	889a      	ldrh	r2, [r3, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

    // Load PSC and ARR immediately
    pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	615a      	str	r2, [r3, #20]

    // Start free-running timer
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_CEN;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	40010000 	.word	0x40010000
 8001810:	40023800 	.word	0x40023800

08001814 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af02      	add	r7, sp, #8
 800181a:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d106      	bne.n	8001834 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <GP_TIM_PWM_INIT+0x108>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a3c      	ldr	r2, [pc, #240]	; (800191c <GP_TIM_PWM_INIT+0x108>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	e00a      	b.n	800184a <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a39      	ldr	r2, [pc, #228]	; (8001920 <GP_TIM_PWM_INIT+0x10c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d105      	bne.n	800184a <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <GP_TIM_PWM_INIT+0x108>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	4a36      	ldr	r2, [pc, #216]	; (800191c <GP_TIM_PWM_INIT+0x108>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 800184a:	bf00      	nop
 800184c:	4b33      	ldr	r3, [pc, #204]	; (800191c <GP_TIM_PWM_INIT+0x108>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f9      	beq.n	800184c <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001866:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	889a      	ldrh	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	88db      	ldrh	r3, [r3, #6]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e03c      	b.n	80018fe <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3302      	adds	r3, #2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	88db      	ldrh	r3, [r3, #6]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff f8e9 	bl	8000a68 <__aeabi_ui2f>
 8001896:	4603      	mov	r3, r0
 8001898:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 800189a:	4922      	ldr	r1, [pc, #136]	; (8001924 <GP_TIM_PWM_INIT+0x110>)
 800189c:	6938      	ldr	r0, [r7, #16]
 800189e:	f7ff f9ef 	bl	8000c80 <__aeabi_fdiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461c      	mov	r4, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	88db      	ldrh	r3, [r3, #6]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f8e0 	bl	8000a70 <__aeabi_i2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff f92f 	bl	8000b18 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb17 	bl	8000ef0 <__aeabi_f2uiz>
 80018c2:	4603      	mov	r3, r0
 80018c4:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3302      	adds	r3, #2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	795b      	ldrb	r3, [r3, #5]
 80018d2:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3302      	adds	r3, #2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	791b      	ldrb	r3, [r3, #4]
 80018e0:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	b2d9      	uxtb	r1, r3
 80018ea:	7b7c      	ldrb	r4, [r7, #13]
 80018ec:	89fa      	ldrh	r2, [r7, #14]
 80018ee:	7b3b      	ldrb	r3, [r7, #12]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4623      	mov	r3, r4
 80018f4:	f000 f818 	bl	8001928 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	3301      	adds	r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b03      	cmp	r3, #3
 8001902:	ddbf      	ble.n	8001884 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	615a      	str	r2, [r3, #20]

}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40000400 	.word	0x40000400
 8001924:	42c80000 	.word	0x42c80000

08001928 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	460b      	mov	r3, r1
 800193c:	803b      	strh	r3, [r7, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 8001942:	78fb      	ldrb	r3, [r7, #3]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d802      	bhi.n	800194e <GP_TIM_SetChannel+0x26>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3318      	adds	r3, #24
 800194c:	e001      	b.n	8001952 <GP_TIM_SetChannel+0x2a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	331c      	adds	r3, #28
 8001952:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d864      	bhi.n	8001a24 <GP_TIM_SetChannel+0xfc>
 800195a:	a201      	add	r2, pc, #4	; (adr r2, 8001960 <GP_TIM_SetChannel+0x38>)
 800195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001960:	08001971 	.word	0x08001971
 8001964:	08001981 	.word	0x08001981
 8001968:	08001991 	.word	0x08001991
 800196c:	080019a3 	.word	0x080019a3
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3334      	adds	r3, #52	; 0x34
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	2304      	movs	r3, #4
 8001978:	74fb      	strb	r3, [r7, #19]
 800197a:	2301      	movs	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e019      	b.n	80019b4 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3338      	adds	r3, #56	; 0x38
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	230c      	movs	r3, #12
 8001988:	74fb      	strb	r3, [r7, #19]
 800198a:	2310      	movs	r3, #16
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e011      	b.n	80019b4 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	333c      	adds	r3, #60	; 0x3c
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	2304      	movs	r3, #4
 8001998:	74fb      	strb	r3, [r7, #19]
 800199a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e008      	b.n	80019b4 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3340      	adds	r3, #64	; 0x40
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	230c      	movs	r3, #12
 80019aa:	74fb      	strb	r3, [r7, #19]
 80019ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 80019b4:	883a      	ldrh	r2, [r7, #0]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	7cfa      	ldrb	r2, [r7, #19]
 80019c0:	2107      	movs	r1, #7
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	43d2      	mvns	r2, r2
 80019c8:	401a      	ands	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	78ba      	ldrb	r2, [r7, #2]
 80019d4:	2a00      	cmp	r2, #0
 80019d6:	d101      	bne.n	80019dc <GP_TIM_SetChannel+0xb4>
 80019d8:	2106      	movs	r1, #6
 80019da:	e000      	b.n	80019de <GP_TIM_SetChannel+0xb6>
 80019dc:	2107      	movs	r1, #7
 80019de:	7cfa      	ldrb	r2, [r7, #19]
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	7cfa      	ldrb	r2, [r7, #19]
 80019f0:	3a01      	subs	r2, #1
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	431a      	orrs	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 80019fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a1a      	ldr	r2, [r3, #32]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	621a      	str	r2, [r3, #32]
 8001a12:	e008      	b.n	8001a26 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1a      	ldr	r2, [r3, #32]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	401a      	ands	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]
 8001a22:	e000      	b.n	8001a26 <GP_TIM_SetChannel+0xfe>
	default: return;
 8001a24:	bf00      	nop
	}
}
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop

08001a30 <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_STATE) {
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d86c      	bhi.n	8001b20 <GP_TIM_PWM_Control+0xf0>

	//		uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit

	if (PWM_STATE == PWM_OUTPUT) {
 8001a46:	78bb      	ldrb	r3, [r7, #2]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d141      	bne.n	8001ad0 <GP_TIM_PWM_Control+0xa0>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	3302      	adds	r3, #2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	88db      	ldrh	r3, [r3, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f809 	bl	8000a70 <__aeabi_i2f>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4931      	ldr	r1, [pc, #196]	; (8001b28 <GP_TIM_PWM_Control+0xf8>)
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff f90c 	bl	8000c80 <__aeabi_fdiv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fffd 	bl	8000a70 <__aeabi_i2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f7ff f84c 	bl	8000b18 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa34 	bl	8000ef0 <__aeabi_f2uiz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	81bb      	strh	r3, [r7, #12]
		switch(channel) {
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d847      	bhi.n	8001b22 <GP_TIM_PWM_Control+0xf2>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <GP_TIM_PWM_Control+0x68>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001ab3 	.word	0x08001ab3
 8001aa0:	08001abd 	.word	0x08001abd
 8001aa4:	08001ac7 	.word	0x08001ac7
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	89ba      	ldrh	r2, [r7, #12]
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab0:	e037      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	89ba      	ldrh	r2, [r7, #12]
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8001aba:	e032      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	89ba      	ldrh	r2, [r7, #12]
 8001ac2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac4:	e02d      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	89ba      	ldrh	r2, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ace:	e028      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		}

		//		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
	} else if(PWM_STATE == PWM_STOP)
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d125      	bne.n	8001b22 <GP_TIM_PWM_Control+0xf2>
	{
		uint16_t duty = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	81fb      	strh	r3, [r7, #14]
		switch(channel) {
 8001ada:	78fb      	ldrb	r3, [r7, #3]
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d820      	bhi.n	8001b22 <GP_TIM_PWM_Control+0xf2>
 8001ae0:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <GP_TIM_PWM_Control+0xb8>)
 8001ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae6:	bf00      	nop
 8001ae8:	08001af9 	.word	0x08001af9
 8001aec:	08001b03 	.word	0x08001b03
 8001af0:	08001b0d 	.word	0x08001b0d
 8001af4:	08001b17 	.word	0x08001b17
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	89fa      	ldrh	r2, [r7, #14]
 8001afe:	635a      	str	r2, [r3, #52]	; 0x34
 8001b00:	e00f      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	89fa      	ldrh	r2, [r7, #14]
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
 8001b0a:	e00a      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	89fa      	ldrh	r2, [r7, #14]
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b14:	e005      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	89fa      	ldrh	r2, [r7, #14]
 8001b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b1e:	e000      	b.n	8001b22 <GP_TIM_PWM_Control+0xf2>
	if (channel > 3) return;
 8001b20:	bf00      	nop
	{
		//pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
	}


}
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	42c80000 	.word	0x42c80000

08001b2c <USART_SetBaudRate>:

#include "USART.h"


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]

	uint32_t PCLKx = APB2_CLOCK_FREQ;	//APB2_CLOCK_FREQ_MHZ
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <USART_SetBaudRate+0xc0>)
 8001b38:	617b      	str	r3, [r7, #20]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <USART_SetBaudRate+0x36>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	009a      	lsls	r2, r3, #2
 8001b54:	441a      	add	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	61fb      	str	r3, [r7, #28]
 8001b60:	e00a      	b.n	8001b78 <USART_SetBaudRate+0x4c>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	009a      	lsls	r2, r3, #2
 8001b6c:	441a      	add	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <USART_SetBaudRate+0xc4>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2264      	movs	r2, #100	; 0x64
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <USART_SetBaudRate+0x92>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	3332      	adds	r3, #50	; 0x32
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <USART_SetBaudRate+0xc4>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61bb      	str	r3, [r7, #24]
 8001bbc:	e009      	b.n	8001bd2 <USART_SetBaudRate+0xa6>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	3332      	adds	r3, #50	; 0x32
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <USART_SetBaudRate+0xc4>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	3724      	adds	r7, #36	; 0x24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	007a1200 	.word	0x007a1200
 8001bf0:	51eb851f 	.word	0x51eb851f

08001bf4 <USART_INIT>:


void USART_INIT(USART_Handle_t *pUSARTHandle){
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

	uint32_t tempreg=0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
	//ENABLE PERIPHERAL
	USART1_PCLK_EN();
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <USART_INIT+0xa4>)
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <USART_INIT+0xa4>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d104      	bne.n	8001c1e <USART_INIT+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	e010      	b.n	8001c40 <USART_INIT+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	791b      	ldrb	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d104      	bne.n	8001c30 <USART_INIT+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e007      	b.n	8001c40 <USART_INIT+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	791b      	ldrb	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d103      	bne.n	8001c40 <USART_INIT+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 030c 	orr.w	r3, r3, #12
 8001c3e:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7b5b      	ldrb	r3, [r3, #13]
 8001c44:	031b      	lsls	r3, r3, #12
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	60da      	str	r2, [r3, #12]

	tempreg=0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7b1b      	ldrb	r3, [r3, #12]
 8001c5e:	031b      	lsls	r3, r3, #12
 8001c60:	461a      	mov	r2, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	611a      	str	r2, [r3, #16]


	//no hw flow control

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f7ff ff56 	bl	8001b2c <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << 13);  // UE
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c8e:	60da      	str	r2, [r3, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40023800 	.word	0x40023800

08001c9c <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <USART_SendData>:


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
 8001cd4:	e031      	b.n	8001d3a <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001cd6:	bf00      	nop
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ffdc 	bl	8001c9c <USART_GetFlagStatus>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f6      	beq.n	8001cd8 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	7b5b      	ldrb	r3, [r3, #13]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d118      	bne.n	8001d24 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d04:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	7b9b      	ldrb	r3, [r3, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	e00b      	b.n	8001d34 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	e007      	b.n	8001d34 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3c9      	bcc.n	8001cd6 <USART_SendData+0x12>
		}

	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001d42:	bf00      	nop
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ffa6 	bl	8001c9c <USART_GetFlagStatus>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f6      	beq.n	8001d44 <USART_SendData+0x80>

}
 8001d56:	bf00      	nop
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <USART_ReceiveData>:

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e045      	b.n	8001dfe <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8001d72:	bf00      	nop
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2120      	movs	r1, #32
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff8e 	bl	8001c9c <USART_GetFlagStatus>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f6      	beq.n	8001d74 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	7b5b      	ldrb	r3, [r3, #13]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d11d      	bne.n	8001dca <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	7b9b      	ldrb	r3, [r3, #14]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <USART_ReceiveData+0x56>
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	3301      	adds	r3, #1
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	e020      	b.n	8001df8 <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	e016      	b.n	8001df8 <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	7b9b      	ldrb	r3, [r3, #14]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e008      	b.n	8001df2 <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3b5      	bcc.n	8001d72 <USART_ReceiveData+0x12>
		}
	}

}
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <init_random_seed>:
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);
void Full_USART_Config(void);
uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start);

void init_random_seed(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	srand(TIM1_TMR.pTIMx->CNT);  // Seed with x,y coords/angle
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <init_random_seed+0x14>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fdda 	bl	80029d4 <srand>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	200000a4 	.word	0x200000a4

08001e28 <get_random_direction>:

uint16_t get_random_direction(void) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	return 150 + (rand() % 450);  // Between 50 - 200 ms lets say
 8001e2c:	f000 fe00 	bl	8002a30 <rand>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a08      	ldr	r2, [pc, #32]	; (8001e54 <get_random_direction+0x2c>)
 8001e34:	fb82 1203 	smull	r1, r2, r2, r3
 8001e38:	441a      	add	r2, r3
 8001e3a:	1211      	asrs	r1, r2, #8
 8001e3c:	17da      	asrs	r2, r3, #31
 8001e3e:	1a8a      	subs	r2, r1, r2
 8001e40:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001e44:	fb01 f202 	mul.w	r2, r1, r2
 8001e48:	1a9a      	subs	r2, r3, r2
 8001e4a:	b293      	uxth	r3, r2
 8001e4c:	3396      	adds	r3, #150	; 0x96
 8001e4e:	b29b      	uxth	r3, r3
	//what is maximum rand value?
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	91a2b3c5 	.word	0x91a2b3c5

08001e58 <ms_delay>:

uint16_t calc_rotation(uint32_t duration_ms, float angular_velocity_dps) {
	return (uint16_t)((duration_ms / 1000.0f) * angular_velocity_dps);  // degrees = time * speed
}

void ms_delay(uint32_t time_ms) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e003      	b.n	8001e6e <ms_delay+0x16>
		__asm__("nop");
 8001e66:	bf00      	nop
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	4413      	add	r3, r2
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	1a9a      	subs	r2, r3, r2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f2      	bhi.n	8001e66 <ms_delay+0xe>
	}
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <get_current_time>:

uint16_t get_current_time(AD_TIM_RegDef_t *pTIMx)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	uint16_t time = pTIMx->CNT;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	81fb      	strh	r3, [r7, #14]
	return time;
 8001e9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <get_elapsed_time>:


uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	807b      	strh	r3, [r7, #2]
	uint16_t now = pTIMx->CNT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	81bb      	strh	r3, [r7, #12]
	uint16_t elapsed;

	if (now >= start) {
 8001eb8:	89ba      	ldrh	r2, [r7, #12]
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d304      	bcc.n	8001eca <get_elapsed_time+0x24>
		elapsed = now - start;
 8001ec0:	89ba      	ldrh	r2, [r7, #12]
 8001ec2:	887b      	ldrh	r3, [r7, #2]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	81fb      	strh	r3, [r7, #14]
 8001ec8:	e003      	b.n	8001ed2 <get_elapsed_time+0x2c>
	} else {
		elapsed = (0xFFFF - start) + now + 1; // handle overflow
 8001eca:	89ba      	ldrh	r2, [r7, #12]
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	81fb      	strh	r3, [r7, #14]
	}
	return elapsed - 25;//error
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	3b19      	subs	r3, #25
 8001ed6:	b29b      	uxth	r3, r3
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
 8001ee2:	0000      	movs	r0, r0
 8001ee4:	0000      	movs	r0, r0
	...

08001ee8 <send_coordinates>:

void send_coordinates()
{
 8001ee8:	b5b0      	push	{r4, r5, r7, lr}
 8001eea:	b08a      	sub	sp, #40	; 0x28
 8001eec:	af00      	add	r7, sp, #0
	//X_POINT = X_POINT + DRIVING_ELAPSED_TIME * speed * sinf(ANGLE * (M_PI / 180.0f);
	//X_POINT = Y_POINT + DRIVING_ELAPSED_TIME * speed * cosf(ANGLE * (M_PI / 180.0f);

	char msg[32];

	X_POINT = X_POINT + (DRIVING_ELAPSED_TIME /100) * sinf(ANGLE * (M_PI / 180.0f));
 8001eee:	4b8c      	ldr	r3, [pc, #560]	; (8002120 <send_coordinates+0x238>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fdbb 	bl	8000a70 <__aeabi_i2f>
 8001efa:	4604      	mov	r4, r0
 8001efc:	4b89      	ldr	r3, [pc, #548]	; (8002124 <send_coordinates+0x23c>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4a89      	ldr	r2, [pc, #548]	; (8002128 <send_coordinates+0x240>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fdaf 	bl	8000a70 <__aeabi_i2f>
 8001f12:	4605      	mov	r5, r0
 8001f14:	4b85      	ldr	r3, [pc, #532]	; (800212c <send_coordinates+0x244>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fc47 	bl	80007ac <__aeabi_f2d>
 8001f1e:	a37e      	add	r3, pc, #504	; (adr r3, 8002118 <send_coordinates+0x230>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe f9b4 	bl	8000290 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fc94 	bl	800085c <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f001 ffbe 	bl	8003eb8 <sinf>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4628      	mov	r0, r5
 8001f42:	f7fe fde9 	bl	8000b18 <__aeabi_fmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7fe fcdc 	bl	8000908 <__addsf3>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe ffa6 	bl	8000ea4 <__aeabi_f2iz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b70      	ldr	r3, [pc, #448]	; (8002120 <send_coordinates+0x238>)
 8001f5e:	801a      	strh	r2, [r3, #0]
	Y_POINT = Y_POINT + (DRIVING_ELAPSED_TIME /100) * cosf(ANGLE * (M_PI / 180.0f));
 8001f60:	4b73      	ldr	r3, [pc, #460]	; (8002130 <send_coordinates+0x248>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fd82 	bl	8000a70 <__aeabi_i2f>
 8001f6c:	4604      	mov	r4, r0
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <send_coordinates+0x23c>)
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4a6c      	ldr	r2, [pc, #432]	; (8002128 <send_coordinates+0x240>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fd76 	bl	8000a70 <__aeabi_i2f>
 8001f84:	4605      	mov	r5, r0
 8001f86:	4b69      	ldr	r3, [pc, #420]	; (800212c <send_coordinates+0x244>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fc0e 	bl	80007ac <__aeabi_f2d>
 8001f90:	a361      	add	r3, pc, #388	; (adr r3, 8002118 <send_coordinates+0x230>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe f97b 	bl	8000290 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe fc5b 	bl	800085c <__aeabi_d2f>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 ff4d 	bl	8003e48 <cosf>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4628      	mov	r0, r5
 8001fb4:	f7fe fdb0 	bl	8000b18 <__aeabi_fmul>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7fe fca3 	bl	8000908 <__addsf3>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ff6d 	bl	8000ea4 <__aeabi_f2iz>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b21a      	sxth	r2, r3
 8001fce:	4b58      	ldr	r3, [pc, #352]	; (8002130 <send_coordinates+0x248>)
 8001fd0:	801a      	strh	r2, [r3, #0]

	int16_t COORD_X = X_POINT + (int16_t)(7.0f * sinf(ANGLE * (M_PI / 180.0f)));
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <send_coordinates+0x244>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fbe8 	bl	80007ac <__aeabi_f2d>
 8001fdc:	a34e      	add	r3, pc, #312	; (adr r3, 8002118 <send_coordinates+0x230>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe f955 	bl	8000290 <__aeabi_dmul>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fc35 	bl	800085c <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f001 ff5f 	bl	8003eb8 <sinf>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <send_coordinates+0x24c>)
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fd8a 	bl	8000b18 <__aeabi_fmul>
 8002004:	4603      	mov	r3, r0
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe ff4c 	bl	8000ea4 <__aeabi_f2iz>
 800200c:	4603      	mov	r3, r0
 800200e:	b21b      	sxth	r3, r3
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <send_coordinates+0x238>)
 8002014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4413      	add	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t COORD_Y = Y_POINT + (int16_t)(7.0f * cosf(ANGLE * (M_PI / 180.0f)));
 8002020:	4b42      	ldr	r3, [pc, #264]	; (800212c <send_coordinates+0x244>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fbc1 	bl	80007ac <__aeabi_f2d>
 800202a:	a33b      	add	r3, pc, #236	; (adr r3, 8002118 <send_coordinates+0x230>)
 800202c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002030:	f7fe f92e 	bl	8000290 <__aeabi_dmul>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	f7fe fc0e 	bl	800085c <__aeabi_d2f>
 8002040:	4603      	mov	r3, r0
 8002042:	4618      	mov	r0, r3
 8002044:	f001 ff00 	bl	8003e48 <cosf>
 8002048:	4603      	mov	r3, r0
 800204a:	493a      	ldr	r1, [pc, #232]	; (8002134 <send_coordinates+0x24c>)
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd63 	bl	8000b18 <__aeabi_fmul>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe ff25 	bl	8000ea4 <__aeabi_f2iz>
 800205a:	4603      	mov	r3, r0
 800205c:	b21b      	sxth	r3, r3
 800205e:	b29a      	uxth	r2, r3
 8002060:	4b33      	ldr	r3, [pc, #204]	; (8002130 <send_coordinates+0x248>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4413      	add	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	84bb      	strh	r3, [r7, #36]	; 0x24

	sprintf(msg, "XPOINT: %d\r\n", X_POINT);
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <send_coordinates+0x238>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	461a      	mov	r2, r3
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	492f      	ldr	r1, [pc, #188]	; (8002138 <send_coordinates+0x250>)
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd16 	bl	8002aac <siprintf>
	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe f8ac 	bl	80001e0 <strlen>
 8002088:	4602      	mov	r2, r0
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	482b      	ldr	r0, [pc, #172]	; (800213c <send_coordinates+0x254>)
 8002090:	f7ff fe18 	bl	8001cc4 <USART_SendData>
	sprintf(msg, "YPOINT: %d\r\n", Y_POINT);
 8002094:	4b26      	ldr	r3, [pc, #152]	; (8002130 <send_coordinates+0x248>)
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	461a      	mov	r2, r3
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	4928      	ldr	r1, [pc, #160]	; (8002140 <send_coordinates+0x258>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f000 fd03 	bl	8002aac <siprintf>
	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f899 	bl	80001e0 <strlen>
 80020ae:	4602      	mov	r2, r0
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4821      	ldr	r0, [pc, #132]	; (800213c <send_coordinates+0x254>)
 80020b6:	f7ff fe05 	bl	8001cc4 <USART_SendData>

	sprintf(msg, "COORD_X: %d\r\n", COORD_X);
 80020ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4920      	ldr	r1, [pc, #128]	; (8002144 <send_coordinates+0x25c>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fcf2 	bl	8002aac <siprintf>
	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f888 	bl	80001e0 <strlen>
 80020d0:	4602      	mov	r2, r0
 80020d2:	1d3b      	adds	r3, r7, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <send_coordinates+0x254>)
 80020d8:	f7ff fdf4 	bl	8001cc4 <USART_SendData>
	sprintf(msg, "COORD_Y: %d\r\n", COORD_Y);
 80020dc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	4919      	ldr	r1, [pc, #100]	; (8002148 <send_coordinates+0x260>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fce1 	bl	8002aac <siprintf>
	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe f877 	bl	80001e0 <strlen>
 80020f2:	4602      	mov	r2, r0
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4810      	ldr	r0, [pc, #64]	; (800213c <send_coordinates+0x254>)
 80020fa:	f7ff fde3 	bl	8001cc4 <USART_SendData>


	DRIVING_ELAPSED_TIME = 0;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <send_coordinates+0x23c>)
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
	DRIVING_START_TIME = 0;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <send_coordinates+0x264>)
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]
	// Send 5 bytes over USART
	//USART_SendData(&USART1_TXRX, data, 5);
	//send_coords_flag = 0;

	//would rather put this in the irq so it cant be distrubed by rt
}
 800210a:	bf00      	nop
 800210c:	3728      	adds	r7, #40	; 0x28
 800210e:	46bd      	mov	sp, r7
 8002110:	bdb0      	pop	{r4, r5, r7, pc}
 8002112:	bf00      	nop
 8002114:	f3af 8000 	nop.w
 8002118:	a2529d39 	.word	0xa2529d39
 800211c:	3f91df46 	.word	0x3f91df46
 8002120:	20000110 	.word	0x20000110
 8002124:	20000116 	.word	0x20000116
 8002128:	51eb851f 	.word	0x51eb851f
 800212c:	20000000 	.word	0x20000000
 8002130:	20000112 	.word	0x20000112
 8002134:	40e00000 	.word	0x40e00000
 8002138:	08004a74 	.word	0x08004a74
 800213c:	200000ec 	.word	0x200000ec
 8002140:	08004a84 	.word	0x08004a84
 8002144:	08004a94 	.word	0x08004a94
 8002148:	08004aa4 	.word	0x08004aa4
 800214c:	20000114 	.word	0x20000114

08002150 <main>:

uint8_t password = 0;



int main(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0

	//while(1);

	Full_RCC_Config();
 8002156:	f000 f9a3 	bl	80024a0 <Full_RCC_Config>
	Full_AD_TIM_Config();
 800215a:	f000 fad9 	bl	8002710 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 800215e:	f000 f9b7 	bl	80024d0 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 8002162:	f000 fa9d 	bl	80026a0 <Full_GP_TIM_Config>
	Full_USART_Config();
 8002166:	f000 fafb 	bl	8002760 <Full_USART_Config>
	Full_I2C_Config();
 800216a:	f000 fae3 	bl	8002734 <Full_I2C_Config>
	init_random_seed();
 800216e:	f7ff fe4f 	bl	8001e10 <init_random_seed>
	ms_delay(500);
 8002172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002176:	f7ff fe6f 	bl	8001e58 <ms_delay>

		//		if(send_coords_flag){
		//			send_coordinates();
		//		}

		if(calc_angle_flag){
 800217a:	4b29      	ldr	r3, [pc, #164]	; (8002220 <main+0xd0>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00c      	beq.n	800219e <main+0x4e>
			//use ELAPSED TIME and angular_velocity to calc angle
			//calc_angle();
			calc_angle_flag = 0;
 8002184:	4b26      	ldr	r3, [pc, #152]	; (8002220 <main+0xd0>)
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
			DRIVING_START_TIME = get_current_time(TIM1);
 800218a:	4826      	ldr	r0, [pc, #152]	; (8002224 <main+0xd4>)
 800218c:	f7ff fe7e 	bl	8001e8c <get_current_time>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <main+0xd8>)
 8002196:	801a      	strh	r2, [r3, #0]
			DRIVING_ELAPSED_TIME = 0;
 8002198:	4b24      	ldr	r3, [pc, #144]	; (800222c <main+0xdc>)
 800219a:	2200      	movs	r2, #0
 800219c:	801a      	strh	r2, [r3, #0]
		}

		if(current_state == STATE_DRIVING)
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <main+0xe0>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d038      	beq.n	8002218 <main+0xc8>
			//			float angle_rad = ANGLE * (M_PI / 180.0f);
			//			X_POINT += (int16_t)(INCREMENT * sinf(angle_rad));
			//			Y_POINT += (int16_t)(INCREMENT * cosf(angle_rad));
			//every 50 ms
		}
		else if(current_state == STATE_TURNING)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <main+0xe0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d034      	beq.n	8002218 <main+0xc8>
			//angular_velocity = read_w_gyro(); => Z, last 2 bytes of the 6 read
			//use direction_state?
			//ANGLE = (ANGLE + calc_rotation(10ms,w))%360;
			// Check if wall is no longer detected
		}
		else if(current_state == STATE_IDLE)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <main+0xe0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d130      	bne.n	8002218 <main+0xc8>
		{
			USART_ReceiveData(&USART1_TXRX, &password, 1);
 80021b6:	2201      	movs	r2, #1
 80021b8:	491e      	ldr	r1, [pc, #120]	; (8002234 <main+0xe4>)
 80021ba:	481f      	ldr	r0, [pc, #124]	; (8002238 <main+0xe8>)
 80021bc:	f7ff fdd0 	bl	8001d60 <USART_ReceiveData>
			GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 80021c0:	210d      	movs	r1, #13
 80021c2:	481e      	ldr	r0, [pc, #120]	; (800223c <main+0xec>)
 80021c4:	f7ff f8ef 	bl	80013a6 <GPIO_Toggle_Pin>
			if(password == START_PSW)
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <main+0xe4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d123      	bne.n	8002218 <main+0xc8>
			{
				//START CONDITION basically
				current_state = STATE_DRIVING;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <main+0xe0>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
				char msg[32];
				drive_FWD(&TIM2_PWM);
 80021d6:	481a      	ldr	r0, [pc, #104]	; (8002240 <main+0xf0>)
 80021d8:	f7ff f9dc 	bl	8001594 <drive_FWD>
				DRIVING_START_TIME = get_current_time(TIM1);
 80021dc:	4811      	ldr	r0, [pc, #68]	; (8002224 <main+0xd4>)
 80021de:	f7ff fe55 	bl	8001e8c <get_current_time>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <main+0xd8>)
 80021e8:	801a      	strh	r2, [r3, #0]
				sprintf(msg, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <main+0xd8>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	463b      	mov	r3, r7
 80021f4:	4913      	ldr	r1, [pc, #76]	; (8002244 <main+0xf4>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fc58 	bl	8002aac <siprintf>
				USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 80021fc:	463b      	mov	r3, r7
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fd ffee 	bl	80001e0 <strlen>
 8002204:	4602      	mov	r2, r0
 8002206:	463b      	mov	r3, r7
 8002208:	4619      	mov	r1, r3
 800220a:	480b      	ldr	r0, [pc, #44]	; (8002238 <main+0xe8>)
 800220c:	f7ff fd5a 	bl	8001cc4 <USART_SendData>

				GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
 8002210:	2101      	movs	r1, #1
 8002212:	200a      	movs	r0, #10
 8002214:	f7ff f8e0 	bl	80013d8 <GPIO_IRQInterruptConfig>
		else if(current_state == STATE_STOPPED)
		{

		}

		ms_delay(50);
 8002218:	2032      	movs	r0, #50	; 0x32
 800221a:	f7ff fe1d 	bl	8001e58 <ms_delay>
		if(calc_angle_flag){
 800221e:	e7ac      	b.n	800217a <main+0x2a>
 8002220:	2000011c 	.word	0x2000011c
 8002224:	40010000 	.word	0x40010000
 8002228:	20000114 	.word	0x20000114
 800222c:	20000116 	.word	0x20000116
 8002230:	20000085 	.word	0x20000085
 8002234:	2000011e 	.word	0x2000011e
 8002238:	200000ec 	.word	0x200000ec
 800223c:	40020800 	.word	0x40020800
 8002240:	20000088 	.word	0x20000088
 8002244:	08004ab4 	.word	0x08004ab4

08002248 <EXTI4_IRQHandler>:
}



void EXTI4_IRQHandler(void) //WALL SENSED
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, DISABLE);
	GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,DISABLE);
 800224e:	2200      	movs	r2, #0
 8002250:	210d      	movs	r1, #13
 8002252:	487f      	ldr	r0, [pc, #508]	; (8002450 <EXTI4_IRQHandler+0x208>)
 8002254:	f7ff f86e 	bl	8001334 <GPIO_Write_Pin>

	//send coords here maybe



	if(!GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 8002258:	2104      	movs	r1, #4
 800225a:	487e      	ldr	r0, [pc, #504]	; (8002454 <EXTI4_IRQHandler+0x20c>)
 800225c:	f7ff f88e 	bl	800137c <GPIO_Read_Pin>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 8086 	bne.w	8002374 <EXTI4_IRQHandler+0x12c>
		char msg2[32];
		sprintf(msg2, "StoppedDrivingAt %u\r\n", get_current_time(TIM1));
 8002268:	487b      	ldr	r0, [pc, #492]	; (8002458 <EXTI4_IRQHandler+0x210>)
 800226a:	f7ff fe0f 	bl	8001e8c <get_current_time>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4979      	ldr	r1, [pc, #484]	; (800245c <EXTI4_IRQHandler+0x214>)
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fc18 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	4618      	mov	r0, r3
 8002280:	f7fd ffae 	bl	80001e0 <strlen>
 8002284:	4602      	mov	r2, r0
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	4619      	mov	r1, r3
 800228a:	4875      	ldr	r0, [pc, #468]	; (8002460 <EXTI4_IRQHandler+0x218>)
 800228c:	f7ff fd1a 	bl	8001cc4 <USART_SendData>
		stop_FWD(&TIM2_PWM);//driving stops here
 8002290:	4874      	ldr	r0, [pc, #464]	; (8002464 <EXTI4_IRQHandler+0x21c>)
 8002292:	f7ff f9b2 	bl	80015fa <stop_FWD>
		DRIVING_ELAPSED_TIME = get_elapsed_time(TIM1, DRIVING_START_TIME);//how long driving took place
 8002296:	4b74      	ldr	r3, [pc, #464]	; (8002468 <EXTI4_IRQHandler+0x220>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4619      	mov	r1, r3
 800229e:	486e      	ldr	r0, [pc, #440]	; (8002458 <EXTI4_IRQHandler+0x210>)
 80022a0:	f7ff fe01 	bl	8001ea6 <get_elapsed_time>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b70      	ldr	r3, [pc, #448]	; (800246c <EXTI4_IRQHandler+0x224>)
 80022aa:	801a      	strh	r2, [r3, #0]
		sprintf(msg2, "DroveFor %u\r\n", DRIVING_ELAPSED_TIME);
 80022ac:	4b6f      	ldr	r3, [pc, #444]	; (800246c <EXTI4_IRQHandler+0x224>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	496e      	ldr	r1, [pc, #440]	; (8002470 <EXTI4_IRQHandler+0x228>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f000 fbf7 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fd ff8d 	bl	80001e0 <strlen>
 80022c6:	4602      	mov	r2, r0
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	4619      	mov	r1, r3
 80022cc:	4864      	ldr	r0, [pc, #400]	; (8002460 <EXTI4_IRQHandler+0x218>)
 80022ce:	f7ff fcf9 	bl	8001cc4 <USART_SendData>

		send_coordinates();
 80022d2:	f7ff fe09 	bl	8001ee8 <send_coordinates>
		ms_delay(500);
 80022d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022da:	f7ff fdbd 	bl	8001e58 <ms_delay>

		//send_coords_flag = 1;
		//send coords here

		current_state = STATE_TURNING;
 80022de:	4b65      	ldr	r3, [pc, #404]	; (8002474 <EXTI4_IRQHandler+0x22c>)
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
		calc_angle_flag = 0;
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <EXTI4_IRQHandler+0x230>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
		TURNING_ELAPSED_TIME = 0;
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <EXTI4_IRQHandler+0x234>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	801a      	strh	r2, [r3, #0]
		uint16_t turn_dir = get_random_direction();
 80022f0:	f7ff fd9a 	bl	8001e28 <get_random_direction>
 80022f4:	4603      	mov	r3, r0
 80022f6:	84fb      	strh	r3, [r7, #38]	; 0x26
		sprintf(msg2, "RandomDir: %u\r\n", (uint16_t)turn_dir);
 80022f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	4960      	ldr	r1, [pc, #384]	; (8002480 <EXTI4_IRQHandler+0x238>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f000 fbd4 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ff6a 	bl	80001e0 <strlen>
 800230c:	4602      	mov	r2, r0
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4853      	ldr	r0, [pc, #332]	; (8002460 <EXTI4_IRQHandler+0x218>)
 8002314:	f7ff fcd6 	bl	8001cc4 <USART_SendData>

		if(!(turn_dir % 2))
 8002318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	b29b      	uxth	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <EXTI4_IRQHandler+0xea>
		{
			direction_state = TURNING_RIGHT;
 8002324:	4b57      	ldr	r3, [pc, #348]	; (8002484 <EXTI4_IRQHandler+0x23c>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
			turn_RGT(&TIM2_PWM);
 800232a:	484e      	ldr	r0, [pc, #312]	; (8002464 <EXTI4_IRQHandler+0x21c>)
 800232c:	f7ff f989 	bl	8001642 <turn_RGT>
 8002330:	e005      	b.n	800233e <EXTI4_IRQHandler+0xf6>
		}
		else
		{
			direction_state = TURNING_LEFT;
 8002332:	4b54      	ldr	r3, [pc, #336]	; (8002484 <EXTI4_IRQHandler+0x23c>)
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
			turn_LFT(&TIM2_PWM);
 8002338:	484a      	ldr	r0, [pc, #296]	; (8002464 <EXTI4_IRQHandler+0x21c>)
 800233a:	f7ff f9b5 	bl	80016a8 <turn_LFT>
		}
		TURNING_START_TIME = get_current_time(TIM1);
 800233e:	4846      	ldr	r0, [pc, #280]	; (8002458 <EXTI4_IRQHandler+0x210>)
 8002340:	f7ff fda4 	bl	8001e8c <get_current_time>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b4f      	ldr	r3, [pc, #316]	; (8002488 <EXTI4_IRQHandler+0x240>)
 800234a:	801a      	strh	r2, [r3, #0]
		sprintf(msg2, "StartedTurningAt %u\r\n", TURNING_START_TIME);
 800234c:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <EXTI4_IRQHandler+0x240>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	494d      	ldr	r1, [pc, #308]	; (800248c <EXTI4_IRQHandler+0x244>)
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fba7 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f7fd ff3d 	bl	80001e0 <strlen>
 8002366:	4602      	mov	r2, r0
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	4619      	mov	r1, r3
 800236c:	483c      	ldr	r0, [pc, #240]	; (8002460 <EXTI4_IRQHandler+0x218>)
 800236e:	f7ff fca9 	bl	8001cc4 <USART_SendData>
 8002372:	e066      	b.n	8002442 <EXTI4_IRQHandler+0x1fa>
	}
	else{
		ms_delay(50);
 8002374:	2032      	movs	r0, #50	; 0x32
 8002376:	f7ff fd6f 	bl	8001e58 <ms_delay>
		char msg3[32];
		stop_FWD(&TIM2_PWM);//turning stops here
 800237a:	483a      	ldr	r0, [pc, #232]	; (8002464 <EXTI4_IRQHandler+0x21c>)
 800237c:	f7ff f93d 	bl	80015fa <stop_FWD>
		sprintf(msg3, "StoppedTurningAt %u\r\n", get_current_time(TIM1));
 8002380:	4835      	ldr	r0, [pc, #212]	; (8002458 <EXTI4_IRQHandler+0x210>)
 8002382:	f7ff fd83 	bl	8001e8c <get_current_time>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	4940      	ldr	r1, [pc, #256]	; (8002490 <EXTI4_IRQHandler+0x248>)
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fb8c 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f7fd ff22 	bl	80001e0 <strlen>
 800239c:	4602      	mov	r2, r0
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	482f      	ldr	r0, [pc, #188]	; (8002460 <EXTI4_IRQHandler+0x218>)
 80023a4:	f7ff fc8e 	bl	8001cc4 <USART_SendData>
		TURNING_ELAPSED_TIME = get_elapsed_time(TIM1,TURNING_START_TIME);
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <EXTI4_IRQHandler+0x240>)
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4619      	mov	r1, r3
 80023b0:	4829      	ldr	r0, [pc, #164]	; (8002458 <EXTI4_IRQHandler+0x210>)
 80023b2:	f7ff fd78 	bl	8001ea6 <get_elapsed_time>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <EXTI4_IRQHandler+0x234>)
 80023bc:	801a      	strh	r2, [r3, #0]
		sprintf(msg3, "TurnedFor %u\r\n", TURNING_ELAPSED_TIME);
 80023be:	4b2f      	ldr	r3, [pc, #188]	; (800247c <EXTI4_IRQHandler+0x234>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4932      	ldr	r1, [pc, #200]	; (8002494 <EXTI4_IRQHandler+0x24c>)
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fb6e 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fd ff04 	bl	80001e0 <strlen>
 80023d8:	4602      	mov	r2, r0
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4820      	ldr	r0, [pc, #128]	; (8002460 <EXTI4_IRQHandler+0x218>)
 80023e0:	f7ff fc70 	bl	8001cc4 <USART_SendData>

		ms_delay(500);
 80023e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023e8:	f7ff fd36 	bl	8001e58 <ms_delay>
		send_coords_flag = 0;
 80023ec:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <EXTI4_IRQHandler+0x250>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
		calc_angle_flag = 1;
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <EXTI4_IRQHandler+0x230>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]

		current_state = STATE_DRIVING;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <EXTI4_IRQHandler+0x22c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		DRIVING_START_TIME = get_current_time(TIM1);
 80023fe:	4816      	ldr	r0, [pc, #88]	; (8002458 <EXTI4_IRQHandler+0x210>)
 8002400:	f7ff fd44 	bl	8001e8c <get_current_time>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <EXTI4_IRQHandler+0x220>)
 800240a:	801a      	strh	r2, [r3, #0]
		drive_FWD(&TIM2_PWM);
 800240c:	4815      	ldr	r0, [pc, #84]	; (8002464 <EXTI4_IRQHandler+0x21c>)
 800240e:	f7ff f8c1 	bl	8001594 <drive_FWD>
		sprintf(msg3, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <EXTI4_IRQHandler+0x220>)
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	491f      	ldr	r1, [pc, #124]	; (800249c <EXTI4_IRQHandler+0x254>)
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fb44 	bl	8002aac <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd feda 	bl	80001e0 <strlen>
 800242c:	4602      	mov	r2, r0
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	4619      	mov	r1, r3
 8002432:	480b      	ldr	r0, [pc, #44]	; (8002460 <EXTI4_IRQHandler+0x218>)
 8002434:	f7ff fc46 	bl	8001cc4 <USART_SendData>
		GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,ENABLE);
 8002438:	2201      	movs	r2, #1
 800243a:	210d      	movs	r1, #13
 800243c:	4804      	ldr	r0, [pc, #16]	; (8002450 <EXTI4_IRQHandler+0x208>)
 800243e:	f7fe ff79 	bl	8001334 <GPIO_Write_Pin>
	}
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8002442:	2004      	movs	r0, #4
 8002444:	f7ff f84c 	bl	80014e0 <GPIO_IRQHandling>
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
}
 8002448:	bf00      	nop
 800244a:	3728      	adds	r7, #40	; 0x28
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40020800 	.word	0x40020800
 8002454:	40020000 	.word	0x40020000
 8002458:	40010000 	.word	0x40010000
 800245c:	08004acc 	.word	0x08004acc
 8002460:	200000ec 	.word	0x200000ec
 8002464:	20000088 	.word	0x20000088
 8002468:	20000114 	.word	0x20000114
 800246c:	20000116 	.word	0x20000116
 8002470:	08004ae4 	.word	0x08004ae4
 8002474:	20000085 	.word	0x20000085
 8002478:	2000011c 	.word	0x2000011c
 800247c:	2000011a 	.word	0x2000011a
 8002480:	08004af4 	.word	0x08004af4
 8002484:	20000084 	.word	0x20000084
 8002488:	20000118 	.word	0x20000118
 800248c:	08004b04 	.word	0x08004b04
 8002490:	08004b1c 	.word	0x08004b1c
 8002494:	08004b34 	.word	0x08004b34
 8002498:	2000011d 	.word	0x2000011d
 800249c:	08004ab4 	.word	0x08004ab4

080024a0 <Full_RCC_Config>:

void Full_RCC_Config(void){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <Full_RCC_Config+0x2c>)
 80024a8:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 80024aa:	2300      	movs	r3, #0
 80024ac:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 80024b2:	2304      	movs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 80024b6:	2304      	movs	r3, #4
 80024b8:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 80024ba:	463b      	mov	r3, r7
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f926 	bl	800170e <RCC_Clock_Config>
}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800

080024d0 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b09e      	sub	sp, #120	; 0x78
 80024d4:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 80024d6:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <Full_GPIO_Config+0x1c4>)
 80024d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80024da:	230d      	movs	r3, #13
 80024dc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PA4 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 80024f8:	4b67      	ldr	r3, [pc, #412]	; (8002698 <Full_GPIO_Config+0x1c8>)
 80024fa:	663b      	str	r3, [r7, #96]	; 0x60
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 80024fc:	2304      	movs	r3, #4
 80024fe:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RFT;
 8002502:	2306      	movs	r3, #6
 8002504:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// UART CONFIG
	// GPIO Configuration for UART_TX PA9 = UART_TX
	GPIO_Handle_t GpioTX;
	GpioTX.pGPIOx = GPIOA;
 8002514:	4b60      	ldr	r3, [pc, #384]	; (8002698 <Full_GPIO_Config+0x1c8>)
 8002516:	657b      	str	r3, [r7, #84]	; 0x54
	GpioTX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8002518:	2309      	movs	r3, #9
 800251a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	GpioTX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 800251e:	2302      	movs	r3, #2
 8002520:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	GpioTX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8002524:	2307      	movs	r3, #7
 8002526:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GpioTX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800252a:	2303      	movs	r3, #3
 800252c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	GpioTX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	// GPIO Configuration for GpioSensor PA10 = UART_RX
	GPIO_Handle_t GpioRX;
	GpioRX.pGPIOx = GPIOA;
 8002536:	4b58      	ldr	r3, [pc, #352]	; (8002698 <Full_GPIO_Config+0x1c8>)
 8002538:	64bb      	str	r3, [r7, #72]	; 0x48
	GpioRX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800253a:	230a      	movs	r3, #10
 800253c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GpioRX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 8002540:	2302      	movs	r3, #2
 8002542:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	GpioRX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8002546:	2307      	movs	r3, #7
 8002548:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioRX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	GpioRX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 8002558:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <Full_GPIO_Config+0x1c8>)
 800255a:	63fb      	str	r3, [r7, #60]	; 0x3c
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800255c:	2303      	movs	r3, #3
 800255e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002562:	2302      	movs	r3, #2
 8002564:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002568:	2303      	movs	r3, #3
 800256a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 8002580:	4b45      	ldr	r3, [pc, #276]	; (8002698 <Full_GPIO_Config+0x1c8>)
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8002584:	2302      	movs	r3, #2
 8002586:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800258a:	2302      	movs	r3, #2
 800258c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002590:	2303      	movs	r3, #3
 8002592:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002596:	2300      	movs	r3, #0
 8002598:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800259c:	2301      	movs	r3, #1
 800259e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Full_GPIO_Config+0x1cc>)
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025b2:	2302      	movs	r3, #2
 80025b4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025b8:	2303      	movs	r3, #3
 80025ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 80025d0:	4b31      	ldr	r3, [pc, #196]	; (8002698 <Full_GPIO_Config+0x1c8>)
 80025d2:	61bb      	str	r3, [r7, #24]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	773b      	strb	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025d8:	2302      	movs	r3, #2
 80025da:	777b      	strb	r3, [r7, #29]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025dc:	2303      	movs	r3, #3
 80025de:	77bb      	strb	r3, [r7, #30]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <Full_GPIO_Config+0x1cc>)
 80025f2:	60fb      	str	r3, [r7, #12]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 80025f4:	2306      	movs	r3, #6
 80025f6:	743b      	strb	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025f8:	2302      	movs	r3, #2
 80025fa:	747b      	strb	r3, [r7, #17]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025fc:	2303      	movs	r3, #3
 80025fe:	74bb      	strb	r3, [r7, #18]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002600:	2300      	movs	r3, #0
 8002602:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 8002604:	2304      	movs	r3, #4
 8002606:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002608:	2300      	movs	r3, #0
 800260a:	74fb      	strb	r3, [r7, #19]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <Full_GPIO_Config+0x1cc>)
 800260e:	603b      	str	r3, [r7, #0]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8002610:	2307      	movs	r3, #7
 8002612:	713b      	strb	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002614:	2302      	movs	r3, #2
 8002616:	717b      	strb	r3, [r7, #5]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002618:	2303      	movs	r3, #3
 800261a:	71bb      	strb	r3, [r7, #6]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800261c:	2300      	movs	r3, #0
 800261e:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8002620:	2304      	movs	r3, #4
 8002622:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002624:	2300      	movs	r3, #0
 8002626:	71fb      	strb	r3, [r7, #7]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 8002628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe fd1f 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSensor);
 8002632:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd1a 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH3);
 800263c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fd15 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH2);
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fd10 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH1);
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fd0b 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH4);
 800265a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fd06 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSCL);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fd01 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSDA);
 800266e:	463b      	mov	r3, r7
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fcfd 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioTX);
 8002676:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fcf8 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioRX);
 8002680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fcf3 	bl	8001070 <GPIO_Init>

	//GPIO_IRQInterruptConfig(EXTI15_10_IRQ, ENABLE);
}
 800268a:	bf00      	nop
 800268c:	3778      	adds	r7, #120	; 0x78
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40020800 	.word	0x40020800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400

080026a0 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026aa:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026ae:	2204      	movs	r2, #4
 80026b0:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 6400;
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026b4:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80026b8:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026bc:	2201      	movs	r2, #1
 80026be:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = 10;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026c8:	220a      	movs	r2, #10
 80026ca:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = 10;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026da:	220a      	movs	r2, #10
 80026dc:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = 10;
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026ec:	220a      	movs	r2, #10
 80026ee:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = 10;
 80026fc:	4b03      	ldr	r3, [pc, #12]	; (800270c <Full_GP_TIM_Config+0x6c>)
 80026fe:	220a      	movs	r2, #10
 8002700:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8002702:	4802      	ldr	r0, [pc, #8]	; (800270c <Full_GP_TIM_Config+0x6c>)
 8002704:	f7ff f886 	bl	8001814 <GP_TIM_PWM_INIT>
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000088 	.word	0x20000088

08002710 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_TMR.pTIMx = TIM1;
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <Full_AD_TIM_Config+0x1c>)
 8002716:	4a06      	ldr	r2, [pc, #24]	; (8002730 <Full_AD_TIM_Config+0x20>)
 8002718:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_TMR.AD_TIM_Config.Prescaler = PRESCALER_16K;
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <Full_AD_TIM_Config+0x1c>)
 800271c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002720:	809a      	strh	r2, [r3, #4]
	AD_TIM_FreeRun_INIT(&TIM1_TMR);
 8002722:	4802      	ldr	r0, [pc, #8]	; (800272c <Full_AD_TIM_Config+0x1c>)
 8002724:	f7ff f834 	bl	8001790 <AD_TIM_FreeRun_INIT>
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200000a4 	.word	0x200000a4
 8002730:	40010000 	.word	0x40010000

08002734 <Full_I2C_Config>:


void Full_I2C_Config(void){
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <Full_I2C_Config+0x20>)
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <Full_I2C_Config+0x24>)
 800273c:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <Full_I2C_Config+0x20>)
 8002740:	2201      	movs	r2, #1
 8002742:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 8002744:	4b03      	ldr	r3, [pc, #12]	; (8002754 <Full_I2C_Config+0x20>)
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <Full_I2C_Config+0x28>)
 8002748:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 800274a:	4802      	ldr	r0, [pc, #8]	; (8002754 <Full_I2C_Config+0x20>)
 800274c:	f7fe fee8 	bl	8001520 <I2C_SM_INIT>
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200000c4 	.word	0x200000c4
 8002758:	40005400 	.word	0x40005400
 800275c:	000186a0 	.word	0x000186a0

08002760 <Full_USART_Config>:

void Full_USART_Config(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

	USART1_TXRX.pUSARTx = USART1;
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <Full_USART_Config+0x34>)
 8002766:	4a0c      	ldr	r2, [pc, #48]	; (8002798 <Full_USART_Config+0x38>)
 8002768:	601a      	str	r2, [r3, #0]
	USART1_TXRX.USART_Config.USART_Mode = USART_MODE_TXRX;
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <Full_USART_Config+0x34>)
 800276c:	2202      	movs	r2, #2
 800276e:	711a      	strb	r2, [r3, #4]
	USART1_TXRX.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <Full_USART_Config+0x34>)
 8002772:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002776:	609a      	str	r2, [r3, #8]
	USART1_TXRX.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <Full_USART_Config+0x34>)
 800277a:	2200      	movs	r2, #0
 800277c:	735a      	strb	r2, [r3, #13]
	USART1_TXRX.USART_Config.USART_NoOfStopBits	= USART_STOPBITS_1;
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <Full_USART_Config+0x34>)
 8002780:	2200      	movs	r2, #0
 8002782:	731a      	strb	r2, [r3, #12]
	USART1_TXRX.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <Full_USART_Config+0x34>)
 8002786:	2200      	movs	r2, #0
 8002788:	739a      	strb	r2, [r3, #14]
	//enable peripheral via cr1?

	USART_INIT(&USART1_TXRX);
 800278a:	4802      	ldr	r0, [pc, #8]	; (8002794 <Full_USART_Config+0x34>)
 800278c:	f7ff fa32 	bl	8001bf4 <USART_INIT>
	//USART1_TXRX.pUSARTx->CR1 |= (1 << 13);
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200000ec 	.word	0x200000ec
 8002798:	40011000 	.word	0x40011000

0800279c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr

080027aa <_kill>:

int _kill(int pid, int sig)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027b4:	f000 f8dc 	bl	8002970 <__errno>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2216      	movs	r2, #22
 80027bc:	601a      	str	r2, [r3, #0]
  return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <_exit>:

void _exit (int status)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027d2:	f04f 31ff 	mov.w	r1, #4294967295
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffe7 	bl	80027aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80027dc:	e7fe      	b.n	80027dc <_exit+0x12>

080027de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e00a      	b.n	8002806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f0:	f3af 8000 	nop.w
 80027f4:	4601      	mov	r1, r0
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	60ba      	str	r2, [r7, #8]
 80027fc:	b2ca      	uxtb	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	dbf0      	blt.n	80027f0 <_read+0x12>
  }

  return len;
 800280e:	687b      	ldr	r3, [r7, #4]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e009      	b.n	800283e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1c5a      	adds	r2, r3, #1
 800282e:	60ba      	str	r2, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	dbf1      	blt.n	800282a <_write+0x12>
  }
  return len;
 8002846:	687b      	ldr	r3, [r7, #4]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <_close>:

int _close(int file)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002876:	605a      	str	r2, [r3, #4]
  return 0;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <_isatty>:

int _isatty(int file)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800288c:	2301      	movs	r3, #1
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028b8:	4a14      	ldr	r2, [pc, #80]	; (800290c <_sbrk+0x5c>)
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <_sbrk+0x60>)
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_sbrk+0x64>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <_sbrk+0x68>)
 80028d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d207      	bcs.n	80028f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e0:	f000 f846 	bl	8002970 <__errno>
 80028e4:	4603      	mov	r3, r0
 80028e6:	220c      	movs	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e009      	b.n	8002904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <_sbrk+0x64>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <_sbrk+0x64>)
 8002900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	20018000 	.word	0x20018000
 8002910:	00000400 	.word	0x00000400
 8002914:	20000120 	.word	0x20000120
 8002918:	20000138 	.word	0x20000138

0800291c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800291c:	480d      	ldr	r0, [pc, #52]	; (8002954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800291e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002920:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <LoopForever+0x6>)
  ldr r1, =_edata
 8002926:	490d      	ldr	r1, [pc, #52]	; (800295c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <LoopForever+0xe>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <LoopForever+0x16>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800294a:	f000 f817 	bl	800297c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800294e:	f7ff fbff 	bl	8002150 <main>

08002952 <LoopForever>:

LoopForever:
  b LoopForever
 8002952:	e7fe      	b.n	8002952 <LoopForever>
  ldr   r0, =_estack
 8002954:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002960:	08005064 	.word	0x08005064
  ldr r2, =_sbss
 8002964:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002968:	20000134 	.word	0x20000134

0800296c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <__errno>:
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <__errno+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000004 	.word	0x20000004

0800297c <__libc_init_array>:
 800297c:	b570      	push	{r4, r5, r6, lr}
 800297e:	4d0d      	ldr	r5, [pc, #52]	; (80029b4 <__libc_init_array+0x38>)
 8002980:	4c0d      	ldr	r4, [pc, #52]	; (80029b8 <__libc_init_array+0x3c>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	2600      	movs	r6, #0
 8002988:	42a6      	cmp	r6, r4
 800298a:	d109      	bne.n	80029a0 <__libc_init_array+0x24>
 800298c:	4d0b      	ldr	r5, [pc, #44]	; (80029bc <__libc_init_array+0x40>)
 800298e:	4c0c      	ldr	r4, [pc, #48]	; (80029c0 <__libc_init_array+0x44>)
 8002990:	f002 f864 	bl	8004a5c <_init>
 8002994:	1b64      	subs	r4, r4, r5
 8002996:	10a4      	asrs	r4, r4, #2
 8002998:	2600      	movs	r6, #0
 800299a:	42a6      	cmp	r6, r4
 800299c:	d105      	bne.n	80029aa <__libc_init_array+0x2e>
 800299e:	bd70      	pop	{r4, r5, r6, pc}
 80029a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a4:	4798      	blx	r3
 80029a6:	3601      	adds	r6, #1
 80029a8:	e7ee      	b.n	8002988 <__libc_init_array+0xc>
 80029aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029ae:	4798      	blx	r3
 80029b0:	3601      	adds	r6, #1
 80029b2:	e7f2      	b.n	800299a <__libc_init_array+0x1e>
 80029b4:	0800505c 	.word	0x0800505c
 80029b8:	0800505c 	.word	0x0800505c
 80029bc:	0800505c 	.word	0x0800505c
 80029c0:	08005060 	.word	0x08005060

080029c4 <memset>:
 80029c4:	4402      	add	r2, r0
 80029c6:	4603      	mov	r3, r0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d100      	bne.n	80029ce <memset+0xa>
 80029cc:	4770      	bx	lr
 80029ce:	f803 1b01 	strb.w	r1, [r3], #1
 80029d2:	e7f9      	b.n	80029c8 <memset+0x4>

080029d4 <srand>:
 80029d4:	b538      	push	{r3, r4, r5, lr}
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <srand+0x44>)
 80029d8:	681d      	ldr	r5, [r3, #0]
 80029da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80029dc:	4604      	mov	r4, r0
 80029de:	b9b3      	cbnz	r3, 8002a0e <srand+0x3a>
 80029e0:	2018      	movs	r0, #24
 80029e2:	f000 f8b3 	bl	8002b4c <malloc>
 80029e6:	4602      	mov	r2, r0
 80029e8:	63a8      	str	r0, [r5, #56]	; 0x38
 80029ea:	b920      	cbnz	r0, 80029f6 <srand+0x22>
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <srand+0x48>)
 80029ee:	480c      	ldr	r0, [pc, #48]	; (8002a20 <srand+0x4c>)
 80029f0:	2142      	movs	r1, #66	; 0x42
 80029f2:	f000 f87b 	bl	8002aec <__assert_func>
 80029f6:	490b      	ldr	r1, [pc, #44]	; (8002a24 <srand+0x50>)
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <srand+0x54>)
 80029fa:	e9c0 1300 	strd	r1, r3, [r0]
 80029fe:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <srand+0x58>)
 8002a00:	6083      	str	r3, [r0, #8]
 8002a02:	230b      	movs	r3, #11
 8002a04:	8183      	strh	r3, [r0, #12]
 8002a06:	2100      	movs	r1, #0
 8002a08:	2001      	movs	r0, #1
 8002a0a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a10:	2200      	movs	r2, #0
 8002a12:	611c      	str	r4, [r3, #16]
 8002a14:	615a      	str	r2, [r3, #20]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	08004b48 	.word	0x08004b48
 8002a20:	08004b5f 	.word	0x08004b5f
 8002a24:	abcd330e 	.word	0xabcd330e
 8002a28:	e66d1234 	.word	0xe66d1234
 8002a2c:	0005deec 	.word	0x0005deec

08002a30 <rand>:
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <rand+0x5c>)
 8002a32:	b510      	push	{r4, lr}
 8002a34:	681c      	ldr	r4, [r3, #0]
 8002a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a38:	b9b3      	cbnz	r3, 8002a68 <rand+0x38>
 8002a3a:	2018      	movs	r0, #24
 8002a3c:	f000 f886 	bl	8002b4c <malloc>
 8002a40:	4602      	mov	r2, r0
 8002a42:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a44:	b920      	cbnz	r0, 8002a50 <rand+0x20>
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <rand+0x60>)
 8002a48:	4812      	ldr	r0, [pc, #72]	; (8002a94 <rand+0x64>)
 8002a4a:	214e      	movs	r1, #78	; 0x4e
 8002a4c:	f000 f84e 	bl	8002aec <__assert_func>
 8002a50:	4911      	ldr	r1, [pc, #68]	; (8002a98 <rand+0x68>)
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <rand+0x6c>)
 8002a54:	e9c0 1300 	strd	r1, r3, [r0]
 8002a58:	4b11      	ldr	r3, [pc, #68]	; (8002aa0 <rand+0x70>)
 8002a5a:	6083      	str	r3, [r0, #8]
 8002a5c:	230b      	movs	r3, #11
 8002a5e:	8183      	strh	r3, [r0, #12]
 8002a60:	2100      	movs	r1, #0
 8002a62:	2001      	movs	r0, #1
 8002a64:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a68:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <rand+0x74>)
 8002a6c:	6920      	ldr	r0, [r4, #16]
 8002a6e:	6963      	ldr	r3, [r4, #20]
 8002a70:	490d      	ldr	r1, [pc, #52]	; (8002aa8 <rand+0x78>)
 8002a72:	4342      	muls	r2, r0
 8002a74:	fb01 2203 	mla	r2, r1, r3, r2
 8002a78:	fba0 0101 	umull	r0, r1, r0, r1
 8002a7c:	1c43      	adds	r3, r0, #1
 8002a7e:	eb42 0001 	adc.w	r0, r2, r1
 8002a82:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002a86:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	08004b48 	.word	0x08004b48
 8002a94:	08004b5f 	.word	0x08004b5f
 8002a98:	abcd330e 	.word	0xabcd330e
 8002a9c:	e66d1234 	.word	0xe66d1234
 8002aa0:	0005deec 	.word	0x0005deec
 8002aa4:	5851f42d 	.word	0x5851f42d
 8002aa8:	4c957f2d 	.word	0x4c957f2d

08002aac <siprintf>:
 8002aac:	b40e      	push	{r1, r2, r3}
 8002aae:	b500      	push	{lr}
 8002ab0:	b09c      	sub	sp, #112	; 0x70
 8002ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ab4:	9002      	str	r0, [sp, #8]
 8002ab6:	9006      	str	r0, [sp, #24]
 8002ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002abc:	4809      	ldr	r0, [pc, #36]	; (8002ae4 <siprintf+0x38>)
 8002abe:	9107      	str	r1, [sp, #28]
 8002ac0:	9104      	str	r1, [sp, #16]
 8002ac2:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <siprintf+0x3c>)
 8002ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac8:	9105      	str	r1, [sp, #20]
 8002aca:	6800      	ldr	r0, [r0, #0]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	a902      	add	r1, sp, #8
 8002ad0:	f000 f97e 	bl	8002dd0 <_svfiprintf_r>
 8002ad4:	9b02      	ldr	r3, [sp, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	b01c      	add	sp, #112	; 0x70
 8002adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ae0:	b003      	add	sp, #12
 8002ae2:	4770      	bx	lr
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	ffff0208 	.word	0xffff0208

08002aec <__assert_func>:
 8002aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002aee:	4614      	mov	r4, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <__assert_func+0x2c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4605      	mov	r5, r0
 8002af8:	68d8      	ldr	r0, [r3, #12]
 8002afa:	b14c      	cbz	r4, 8002b10 <__assert_func+0x24>
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <__assert_func+0x30>)
 8002afe:	9100      	str	r1, [sp, #0]
 8002b00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b04:	4906      	ldr	r1, [pc, #24]	; (8002b20 <__assert_func+0x34>)
 8002b06:	462b      	mov	r3, r5
 8002b08:	f000 f80e 	bl	8002b28 <fiprintf>
 8002b0c:	f000 fe1c 	bl	8003748 <abort>
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <__assert_func+0x38>)
 8002b12:	461c      	mov	r4, r3
 8002b14:	e7f3      	b.n	8002afe <__assert_func+0x12>
 8002b16:	bf00      	nop
 8002b18:	20000004 	.word	0x20000004
 8002b1c:	08004bba 	.word	0x08004bba
 8002b20:	08004bc7 	.word	0x08004bc7
 8002b24:	08004bf5 	.word	0x08004bf5

08002b28 <fiprintf>:
 8002b28:	b40e      	push	{r1, r2, r3}
 8002b2a:	b503      	push	{r0, r1, lr}
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	ab03      	add	r3, sp, #12
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <fiprintf+0x20>)
 8002b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b36:	6800      	ldr	r0, [r0, #0]
 8002b38:	9301      	str	r3, [sp, #4]
 8002b3a:	f000 fa71 	bl	8003020 <_vfiprintf_r>
 8002b3e:	b002      	add	sp, #8
 8002b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b44:	b003      	add	sp, #12
 8002b46:	4770      	bx	lr
 8002b48:	20000004 	.word	0x20000004

08002b4c <malloc>:
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <malloc+0xc>)
 8002b4e:	4601      	mov	r1, r0
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	f000 b86d 	b.w	8002c30 <_malloc_r>
 8002b56:	bf00      	nop
 8002b58:	20000004 	.word	0x20000004

08002b5c <_free_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4605      	mov	r5, r0
 8002b60:	2900      	cmp	r1, #0
 8002b62:	d041      	beq.n	8002be8 <_free_r+0x8c>
 8002b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b68:	1f0c      	subs	r4, r1, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	bfb8      	it	lt
 8002b6e:	18e4      	addlt	r4, r4, r3
 8002b70:	f001 f836 	bl	8003be0 <__malloc_lock>
 8002b74:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <_free_r+0x90>)
 8002b76:	6813      	ldr	r3, [r2, #0]
 8002b78:	b933      	cbnz	r3, 8002b88 <_free_r+0x2c>
 8002b7a:	6063      	str	r3, [r4, #4]
 8002b7c:	6014      	str	r4, [r2, #0]
 8002b7e:	4628      	mov	r0, r5
 8002b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b84:	f001 b832 	b.w	8003bec <__malloc_unlock>
 8002b88:	42a3      	cmp	r3, r4
 8002b8a:	d908      	bls.n	8002b9e <_free_r+0x42>
 8002b8c:	6820      	ldr	r0, [r4, #0]
 8002b8e:	1821      	adds	r1, r4, r0
 8002b90:	428b      	cmp	r3, r1
 8002b92:	bf01      	itttt	eq
 8002b94:	6819      	ldreq	r1, [r3, #0]
 8002b96:	685b      	ldreq	r3, [r3, #4]
 8002b98:	1809      	addeq	r1, r1, r0
 8002b9a:	6021      	streq	r1, [r4, #0]
 8002b9c:	e7ed      	b.n	8002b7a <_free_r+0x1e>
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	b10b      	cbz	r3, 8002ba8 <_free_r+0x4c>
 8002ba4:	42a3      	cmp	r3, r4
 8002ba6:	d9fa      	bls.n	8002b9e <_free_r+0x42>
 8002ba8:	6811      	ldr	r1, [r2, #0]
 8002baa:	1850      	adds	r0, r2, r1
 8002bac:	42a0      	cmp	r0, r4
 8002bae:	d10b      	bne.n	8002bc8 <_free_r+0x6c>
 8002bb0:	6820      	ldr	r0, [r4, #0]
 8002bb2:	4401      	add	r1, r0
 8002bb4:	1850      	adds	r0, r2, r1
 8002bb6:	4283      	cmp	r3, r0
 8002bb8:	6011      	str	r1, [r2, #0]
 8002bba:	d1e0      	bne.n	8002b7e <_free_r+0x22>
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	6053      	str	r3, [r2, #4]
 8002bc2:	4401      	add	r1, r0
 8002bc4:	6011      	str	r1, [r2, #0]
 8002bc6:	e7da      	b.n	8002b7e <_free_r+0x22>
 8002bc8:	d902      	bls.n	8002bd0 <_free_r+0x74>
 8002bca:	230c      	movs	r3, #12
 8002bcc:	602b      	str	r3, [r5, #0]
 8002bce:	e7d6      	b.n	8002b7e <_free_r+0x22>
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	1821      	adds	r1, r4, r0
 8002bd4:	428b      	cmp	r3, r1
 8002bd6:	bf04      	itt	eq
 8002bd8:	6819      	ldreq	r1, [r3, #0]
 8002bda:	685b      	ldreq	r3, [r3, #4]
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	bf04      	itt	eq
 8002be0:	1809      	addeq	r1, r1, r0
 8002be2:	6021      	streq	r1, [r4, #0]
 8002be4:	6054      	str	r4, [r2, #4]
 8002be6:	e7ca      	b.n	8002b7e <_free_r+0x22>
 8002be8:	bd38      	pop	{r3, r4, r5, pc}
 8002bea:	bf00      	nop
 8002bec:	20000124 	.word	0x20000124

08002bf0 <sbrk_aligned>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	4e0e      	ldr	r6, [pc, #56]	; (8002c2c <sbrk_aligned+0x3c>)
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	6831      	ldr	r1, [r6, #0]
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	b911      	cbnz	r1, 8002c02 <sbrk_aligned+0x12>
 8002bfc:	f000 fcd4 	bl	80035a8 <_sbrk_r>
 8002c00:	6030      	str	r0, [r6, #0]
 8002c02:	4621      	mov	r1, r4
 8002c04:	4628      	mov	r0, r5
 8002c06:	f000 fccf 	bl	80035a8 <_sbrk_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	d00a      	beq.n	8002c24 <sbrk_aligned+0x34>
 8002c0e:	1cc4      	adds	r4, r0, #3
 8002c10:	f024 0403 	bic.w	r4, r4, #3
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	d007      	beq.n	8002c28 <sbrk_aligned+0x38>
 8002c18:	1a21      	subs	r1, r4, r0
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f000 fcc4 	bl	80035a8 <_sbrk_r>
 8002c20:	3001      	adds	r0, #1
 8002c22:	d101      	bne.n	8002c28 <sbrk_aligned+0x38>
 8002c24:	f04f 34ff 	mov.w	r4, #4294967295
 8002c28:	4620      	mov	r0, r4
 8002c2a:	bd70      	pop	{r4, r5, r6, pc}
 8002c2c:	20000128 	.word	0x20000128

08002c30 <_malloc_r>:
 8002c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c34:	1ccd      	adds	r5, r1, #3
 8002c36:	f025 0503 	bic.w	r5, r5, #3
 8002c3a:	3508      	adds	r5, #8
 8002c3c:	2d0c      	cmp	r5, #12
 8002c3e:	bf38      	it	cc
 8002c40:	250c      	movcc	r5, #12
 8002c42:	2d00      	cmp	r5, #0
 8002c44:	4607      	mov	r7, r0
 8002c46:	db01      	blt.n	8002c4c <_malloc_r+0x1c>
 8002c48:	42a9      	cmp	r1, r5
 8002c4a:	d905      	bls.n	8002c58 <_malloc_r+0x28>
 8002c4c:	230c      	movs	r3, #12
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	2600      	movs	r6, #0
 8002c52:	4630      	mov	r0, r6
 8002c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c58:	4e2e      	ldr	r6, [pc, #184]	; (8002d14 <_malloc_r+0xe4>)
 8002c5a:	f000 ffc1 	bl	8003be0 <__malloc_lock>
 8002c5e:	6833      	ldr	r3, [r6, #0]
 8002c60:	461c      	mov	r4, r3
 8002c62:	bb34      	cbnz	r4, 8002cb2 <_malloc_r+0x82>
 8002c64:	4629      	mov	r1, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	f7ff ffc2 	bl	8002bf0 <sbrk_aligned>
 8002c6c:	1c43      	adds	r3, r0, #1
 8002c6e:	4604      	mov	r4, r0
 8002c70:	d14d      	bne.n	8002d0e <_malloc_r+0xde>
 8002c72:	6834      	ldr	r4, [r6, #0]
 8002c74:	4626      	mov	r6, r4
 8002c76:	2e00      	cmp	r6, #0
 8002c78:	d140      	bne.n	8002cfc <_malloc_r+0xcc>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	4631      	mov	r1, r6
 8002c7e:	4638      	mov	r0, r7
 8002c80:	eb04 0803 	add.w	r8, r4, r3
 8002c84:	f000 fc90 	bl	80035a8 <_sbrk_r>
 8002c88:	4580      	cmp	r8, r0
 8002c8a:	d13a      	bne.n	8002d02 <_malloc_r+0xd2>
 8002c8c:	6821      	ldr	r1, [r4, #0]
 8002c8e:	3503      	adds	r5, #3
 8002c90:	1a6d      	subs	r5, r5, r1
 8002c92:	f025 0503 	bic.w	r5, r5, #3
 8002c96:	3508      	adds	r5, #8
 8002c98:	2d0c      	cmp	r5, #12
 8002c9a:	bf38      	it	cc
 8002c9c:	250c      	movcc	r5, #12
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	4638      	mov	r0, r7
 8002ca2:	f7ff ffa5 	bl	8002bf0 <sbrk_aligned>
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d02b      	beq.n	8002d02 <_malloc_r+0xd2>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	442b      	add	r3, r5
 8002cae:	6023      	str	r3, [r4, #0]
 8002cb0:	e00e      	b.n	8002cd0 <_malloc_r+0xa0>
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	1b52      	subs	r2, r2, r5
 8002cb6:	d41e      	bmi.n	8002cf6 <_malloc_r+0xc6>
 8002cb8:	2a0b      	cmp	r2, #11
 8002cba:	d916      	bls.n	8002cea <_malloc_r+0xba>
 8002cbc:	1961      	adds	r1, r4, r5
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	6025      	str	r5, [r4, #0]
 8002cc2:	bf18      	it	ne
 8002cc4:	6059      	strne	r1, [r3, #4]
 8002cc6:	6863      	ldr	r3, [r4, #4]
 8002cc8:	bf08      	it	eq
 8002cca:	6031      	streq	r1, [r6, #0]
 8002ccc:	5162      	str	r2, [r4, r5]
 8002cce:	604b      	str	r3, [r1, #4]
 8002cd0:	4638      	mov	r0, r7
 8002cd2:	f104 060b 	add.w	r6, r4, #11
 8002cd6:	f000 ff89 	bl	8003bec <__malloc_unlock>
 8002cda:	f026 0607 	bic.w	r6, r6, #7
 8002cde:	1d23      	adds	r3, r4, #4
 8002ce0:	1af2      	subs	r2, r6, r3
 8002ce2:	d0b6      	beq.n	8002c52 <_malloc_r+0x22>
 8002ce4:	1b9b      	subs	r3, r3, r6
 8002ce6:	50a3      	str	r3, [r4, r2]
 8002ce8:	e7b3      	b.n	8002c52 <_malloc_r+0x22>
 8002cea:	6862      	ldr	r2, [r4, #4]
 8002cec:	42a3      	cmp	r3, r4
 8002cee:	bf0c      	ite	eq
 8002cf0:	6032      	streq	r2, [r6, #0]
 8002cf2:	605a      	strne	r2, [r3, #4]
 8002cf4:	e7ec      	b.n	8002cd0 <_malloc_r+0xa0>
 8002cf6:	4623      	mov	r3, r4
 8002cf8:	6864      	ldr	r4, [r4, #4]
 8002cfa:	e7b2      	b.n	8002c62 <_malloc_r+0x32>
 8002cfc:	4634      	mov	r4, r6
 8002cfe:	6876      	ldr	r6, [r6, #4]
 8002d00:	e7b9      	b.n	8002c76 <_malloc_r+0x46>
 8002d02:	230c      	movs	r3, #12
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	4638      	mov	r0, r7
 8002d08:	f000 ff70 	bl	8003bec <__malloc_unlock>
 8002d0c:	e7a1      	b.n	8002c52 <_malloc_r+0x22>
 8002d0e:	6025      	str	r5, [r4, #0]
 8002d10:	e7de      	b.n	8002cd0 <_malloc_r+0xa0>
 8002d12:	bf00      	nop
 8002d14:	20000124 	.word	0x20000124

08002d18 <__ssputs_r>:
 8002d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	688e      	ldr	r6, [r1, #8]
 8002d1e:	429e      	cmp	r6, r3
 8002d20:	4682      	mov	sl, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	4690      	mov	r8, r2
 8002d26:	461f      	mov	r7, r3
 8002d28:	d838      	bhi.n	8002d9c <__ssputs_r+0x84>
 8002d2a:	898a      	ldrh	r2, [r1, #12]
 8002d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d30:	d032      	beq.n	8002d98 <__ssputs_r+0x80>
 8002d32:	6825      	ldr	r5, [r4, #0]
 8002d34:	6909      	ldr	r1, [r1, #16]
 8002d36:	eba5 0901 	sub.w	r9, r5, r1
 8002d3a:	6965      	ldr	r5, [r4, #20]
 8002d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d44:	3301      	adds	r3, #1
 8002d46:	444b      	add	r3, r9
 8002d48:	106d      	asrs	r5, r5, #1
 8002d4a:	429d      	cmp	r5, r3
 8002d4c:	bf38      	it	cc
 8002d4e:	461d      	movcc	r5, r3
 8002d50:	0553      	lsls	r3, r2, #21
 8002d52:	d531      	bpl.n	8002db8 <__ssputs_r+0xa0>
 8002d54:	4629      	mov	r1, r5
 8002d56:	f7ff ff6b 	bl	8002c30 <_malloc_r>
 8002d5a:	4606      	mov	r6, r0
 8002d5c:	b950      	cbnz	r0, 8002d74 <__ssputs_r+0x5c>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	f8ca 3000 	str.w	r3, [sl]
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6a:	81a3      	strh	r3, [r4, #12]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d74:	6921      	ldr	r1, [r4, #16]
 8002d76:	464a      	mov	r2, r9
 8002d78:	f000 ff0a 	bl	8003b90 <memcpy>
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d86:	81a3      	strh	r3, [r4, #12]
 8002d88:	6126      	str	r6, [r4, #16]
 8002d8a:	6165      	str	r5, [r4, #20]
 8002d8c:	444e      	add	r6, r9
 8002d8e:	eba5 0509 	sub.w	r5, r5, r9
 8002d92:	6026      	str	r6, [r4, #0]
 8002d94:	60a5      	str	r5, [r4, #8]
 8002d96:	463e      	mov	r6, r7
 8002d98:	42be      	cmp	r6, r7
 8002d9a:	d900      	bls.n	8002d9e <__ssputs_r+0x86>
 8002d9c:	463e      	mov	r6, r7
 8002d9e:	6820      	ldr	r0, [r4, #0]
 8002da0:	4632      	mov	r2, r6
 8002da2:	4641      	mov	r1, r8
 8002da4:	f000 ff02 	bl	8003bac <memmove>
 8002da8:	68a3      	ldr	r3, [r4, #8]
 8002daa:	1b9b      	subs	r3, r3, r6
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	4433      	add	r3, r6
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7db      	b.n	8002d70 <__ssputs_r+0x58>
 8002db8:	462a      	mov	r2, r5
 8002dba:	f000 ff1d 	bl	8003bf8 <_realloc_r>
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d1e1      	bne.n	8002d88 <__ssputs_r+0x70>
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	4650      	mov	r0, sl
 8002dc8:	f7ff fec8 	bl	8002b5c <_free_r>
 8002dcc:	e7c7      	b.n	8002d5e <__ssputs_r+0x46>
	...

08002dd0 <_svfiprintf_r>:
 8002dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	898b      	ldrh	r3, [r1, #12]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	b09d      	sub	sp, #116	; 0x74
 8002ddc:	4607      	mov	r7, r0
 8002dde:	460d      	mov	r5, r1
 8002de0:	4614      	mov	r4, r2
 8002de2:	d50e      	bpl.n	8002e02 <_svfiprintf_r+0x32>
 8002de4:	690b      	ldr	r3, [r1, #16]
 8002de6:	b963      	cbnz	r3, 8002e02 <_svfiprintf_r+0x32>
 8002de8:	2140      	movs	r1, #64	; 0x40
 8002dea:	f7ff ff21 	bl	8002c30 <_malloc_r>
 8002dee:	6028      	str	r0, [r5, #0]
 8002df0:	6128      	str	r0, [r5, #16]
 8002df2:	b920      	cbnz	r0, 8002dfe <_svfiprintf_r+0x2e>
 8002df4:	230c      	movs	r3, #12
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	e0d1      	b.n	8002fa2 <_svfiprintf_r+0x1d2>
 8002dfe:	2340      	movs	r3, #64	; 0x40
 8002e00:	616b      	str	r3, [r5, #20]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9309      	str	r3, [sp, #36]	; 0x24
 8002e06:	2320      	movs	r3, #32
 8002e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e10:	2330      	movs	r3, #48	; 0x30
 8002e12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fbc <_svfiprintf_r+0x1ec>
 8002e16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e1a:	f04f 0901 	mov.w	r9, #1
 8002e1e:	4623      	mov	r3, r4
 8002e20:	469a      	mov	sl, r3
 8002e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e26:	b10a      	cbz	r2, 8002e2c <_svfiprintf_r+0x5c>
 8002e28:	2a25      	cmp	r2, #37	; 0x25
 8002e2a:	d1f9      	bne.n	8002e20 <_svfiprintf_r+0x50>
 8002e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e30:	d00b      	beq.n	8002e4a <_svfiprintf_r+0x7a>
 8002e32:	465b      	mov	r3, fp
 8002e34:	4622      	mov	r2, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	4638      	mov	r0, r7
 8002e3a:	f7ff ff6d 	bl	8002d18 <__ssputs_r>
 8002e3e:	3001      	adds	r0, #1
 8002e40:	f000 80aa 	beq.w	8002f98 <_svfiprintf_r+0x1c8>
 8002e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e46:	445a      	add	r2, fp
 8002e48:	9209      	str	r2, [sp, #36]	; 0x24
 8002e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a2 	beq.w	8002f98 <_svfiprintf_r+0x1c8>
 8002e54:	2300      	movs	r3, #0
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e5e:	f10a 0a01 	add.w	sl, sl, #1
 8002e62:	9304      	str	r3, [sp, #16]
 8002e64:	9307      	str	r3, [sp, #28]
 8002e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e6c:	4654      	mov	r4, sl
 8002e6e:	2205      	movs	r2, #5
 8002e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e74:	4851      	ldr	r0, [pc, #324]	; (8002fbc <_svfiprintf_r+0x1ec>)
 8002e76:	f7fd f9bb 	bl	80001f0 <memchr>
 8002e7a:	9a04      	ldr	r2, [sp, #16]
 8002e7c:	b9d8      	cbnz	r0, 8002eb6 <_svfiprintf_r+0xe6>
 8002e7e:	06d0      	lsls	r0, r2, #27
 8002e80:	bf44      	itt	mi
 8002e82:	2320      	movmi	r3, #32
 8002e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e88:	0711      	lsls	r1, r2, #28
 8002e8a:	bf44      	itt	mi
 8002e8c:	232b      	movmi	r3, #43	; 0x2b
 8002e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e92:	f89a 3000 	ldrb.w	r3, [sl]
 8002e96:	2b2a      	cmp	r3, #42	; 0x2a
 8002e98:	d015      	beq.n	8002ec6 <_svfiprintf_r+0xf6>
 8002e9a:	9a07      	ldr	r2, [sp, #28]
 8002e9c:	4654      	mov	r4, sl
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	f04f 0c0a 	mov.w	ip, #10
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002eaa:	3b30      	subs	r3, #48	; 0x30
 8002eac:	2b09      	cmp	r3, #9
 8002eae:	d94e      	bls.n	8002f4e <_svfiprintf_r+0x17e>
 8002eb0:	b1b0      	cbz	r0, 8002ee0 <_svfiprintf_r+0x110>
 8002eb2:	9207      	str	r2, [sp, #28]
 8002eb4:	e014      	b.n	8002ee0 <_svfiprintf_r+0x110>
 8002eb6:	eba0 0308 	sub.w	r3, r0, r8
 8002eba:	fa09 f303 	lsl.w	r3, r9, r3
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	9304      	str	r3, [sp, #16]
 8002ec2:	46a2      	mov	sl, r4
 8002ec4:	e7d2      	b.n	8002e6c <_svfiprintf_r+0x9c>
 8002ec6:	9b03      	ldr	r3, [sp, #12]
 8002ec8:	1d19      	adds	r1, r3, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	9103      	str	r1, [sp, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bfbb      	ittet	lt
 8002ed2:	425b      	neglt	r3, r3
 8002ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ed8:	9307      	strge	r3, [sp, #28]
 8002eda:	9307      	strlt	r3, [sp, #28]
 8002edc:	bfb8      	it	lt
 8002ede:	9204      	strlt	r2, [sp, #16]
 8002ee0:	7823      	ldrb	r3, [r4, #0]
 8002ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ee4:	d10c      	bne.n	8002f00 <_svfiprintf_r+0x130>
 8002ee6:	7863      	ldrb	r3, [r4, #1]
 8002ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8002eea:	d135      	bne.n	8002f58 <_svfiprintf_r+0x188>
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	1d1a      	adds	r2, r3, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	9203      	str	r2, [sp, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bfb8      	it	lt
 8002ef8:	f04f 33ff 	movlt.w	r3, #4294967295
 8002efc:	3402      	adds	r4, #2
 8002efe:	9305      	str	r3, [sp, #20]
 8002f00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002fc0 <_svfiprintf_r+0x1f0>
 8002f04:	7821      	ldrb	r1, [r4, #0]
 8002f06:	2203      	movs	r2, #3
 8002f08:	4650      	mov	r0, sl
 8002f0a:	f7fd f971 	bl	80001f0 <memchr>
 8002f0e:	b140      	cbz	r0, 8002f22 <_svfiprintf_r+0x152>
 8002f10:	2340      	movs	r3, #64	; 0x40
 8002f12:	eba0 000a 	sub.w	r0, r0, sl
 8002f16:	fa03 f000 	lsl.w	r0, r3, r0
 8002f1a:	9b04      	ldr	r3, [sp, #16]
 8002f1c:	4303      	orrs	r3, r0
 8002f1e:	3401      	adds	r4, #1
 8002f20:	9304      	str	r3, [sp, #16]
 8002f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f26:	4827      	ldr	r0, [pc, #156]	; (8002fc4 <_svfiprintf_r+0x1f4>)
 8002f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f7fd f95f 	bl	80001f0 <memchr>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d038      	beq.n	8002fa8 <_svfiprintf_r+0x1d8>
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <_svfiprintf_r+0x1f8>)
 8002f38:	bb1b      	cbnz	r3, 8002f82 <_svfiprintf_r+0x1b2>
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	3307      	adds	r3, #7
 8002f3e:	f023 0307 	bic.w	r3, r3, #7
 8002f42:	3308      	adds	r3, #8
 8002f44:	9303      	str	r3, [sp, #12]
 8002f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f48:	4433      	add	r3, r6
 8002f4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4c:	e767      	b.n	8002e1e <_svfiprintf_r+0x4e>
 8002f4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f52:	460c      	mov	r4, r1
 8002f54:	2001      	movs	r0, #1
 8002f56:	e7a5      	b.n	8002ea4 <_svfiprintf_r+0xd4>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	3401      	adds	r4, #1
 8002f5c:	9305      	str	r3, [sp, #20]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f04f 0c0a 	mov.w	ip, #10
 8002f64:	4620      	mov	r0, r4
 8002f66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f6a:	3a30      	subs	r2, #48	; 0x30
 8002f6c:	2a09      	cmp	r2, #9
 8002f6e:	d903      	bls.n	8002f78 <_svfiprintf_r+0x1a8>
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0c5      	beq.n	8002f00 <_svfiprintf_r+0x130>
 8002f74:	9105      	str	r1, [sp, #20]
 8002f76:	e7c3      	b.n	8002f00 <_svfiprintf_r+0x130>
 8002f78:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e7f0      	b.n	8002f64 <_svfiprintf_r+0x194>
 8002f82:	ab03      	add	r3, sp, #12
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	462a      	mov	r2, r5
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <_svfiprintf_r+0x1fc>)
 8002f8a:	a904      	add	r1, sp, #16
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	f3af 8000 	nop.w
 8002f92:	1c42      	adds	r2, r0, #1
 8002f94:	4606      	mov	r6, r0
 8002f96:	d1d6      	bne.n	8002f46 <_svfiprintf_r+0x176>
 8002f98:	89ab      	ldrh	r3, [r5, #12]
 8002f9a:	065b      	lsls	r3, r3, #25
 8002f9c:	f53f af2c 	bmi.w	8002df8 <_svfiprintf_r+0x28>
 8002fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fa2:	b01d      	add	sp, #116	; 0x74
 8002fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa8:	ab03      	add	r3, sp, #12
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	462a      	mov	r2, r5
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <_svfiprintf_r+0x1fc>)
 8002fb0:	a904      	add	r1, sp, #16
 8002fb2:	4638      	mov	r0, r7
 8002fb4:	f000 f9d2 	bl	800335c <_printf_i>
 8002fb8:	e7eb      	b.n	8002f92 <_svfiprintf_r+0x1c2>
 8002fba:	bf00      	nop
 8002fbc:	08004bf6 	.word	0x08004bf6
 8002fc0:	08004bfc 	.word	0x08004bfc
 8002fc4:	08004c00 	.word	0x08004c00
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	08002d19 	.word	0x08002d19

08002fd0 <__sfputc_r>:
 8002fd0:	6893      	ldr	r3, [r2, #8]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	b410      	push	{r4}
 8002fd8:	6093      	str	r3, [r2, #8]
 8002fda:	da07      	bge.n	8002fec <__sfputc_r+0x1c>
 8002fdc:	6994      	ldr	r4, [r2, #24]
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	db01      	blt.n	8002fe6 <__sfputc_r+0x16>
 8002fe2:	290a      	cmp	r1, #10
 8002fe4:	d102      	bne.n	8002fec <__sfputc_r+0x1c>
 8002fe6:	bc10      	pop	{r4}
 8002fe8:	f000 baee 	b.w	80035c8 <__swbuf_r>
 8002fec:	6813      	ldr	r3, [r2, #0]
 8002fee:	1c58      	adds	r0, r3, #1
 8002ff0:	6010      	str	r0, [r2, #0]
 8002ff2:	7019      	strb	r1, [r3, #0]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	bc10      	pop	{r4}
 8002ff8:	4770      	bx	lr

08002ffa <__sfputs_r>:
 8002ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffc:	4606      	mov	r6, r0
 8002ffe:	460f      	mov	r7, r1
 8003000:	4614      	mov	r4, r2
 8003002:	18d5      	adds	r5, r2, r3
 8003004:	42ac      	cmp	r4, r5
 8003006:	d101      	bne.n	800300c <__sfputs_r+0x12>
 8003008:	2000      	movs	r0, #0
 800300a:	e007      	b.n	800301c <__sfputs_r+0x22>
 800300c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003010:	463a      	mov	r2, r7
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff ffdc 	bl	8002fd0 <__sfputc_r>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d1f3      	bne.n	8003004 <__sfputs_r+0xa>
 800301c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003020 <_vfiprintf_r>:
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	460d      	mov	r5, r1
 8003026:	b09d      	sub	sp, #116	; 0x74
 8003028:	4614      	mov	r4, r2
 800302a:	4698      	mov	r8, r3
 800302c:	4606      	mov	r6, r0
 800302e:	b118      	cbz	r0, 8003038 <_vfiprintf_r+0x18>
 8003030:	6983      	ldr	r3, [r0, #24]
 8003032:	b90b      	cbnz	r3, 8003038 <_vfiprintf_r+0x18>
 8003034:	f000 fca6 	bl	8003984 <__sinit>
 8003038:	4b89      	ldr	r3, [pc, #548]	; (8003260 <_vfiprintf_r+0x240>)
 800303a:	429d      	cmp	r5, r3
 800303c:	d11b      	bne.n	8003076 <_vfiprintf_r+0x56>
 800303e:	6875      	ldr	r5, [r6, #4]
 8003040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003042:	07d9      	lsls	r1, r3, #31
 8003044:	d405      	bmi.n	8003052 <_vfiprintf_r+0x32>
 8003046:	89ab      	ldrh	r3, [r5, #12]
 8003048:	059a      	lsls	r2, r3, #22
 800304a:	d402      	bmi.n	8003052 <_vfiprintf_r+0x32>
 800304c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800304e:	f000 fd37 	bl	8003ac0 <__retarget_lock_acquire_recursive>
 8003052:	89ab      	ldrh	r3, [r5, #12]
 8003054:	071b      	lsls	r3, r3, #28
 8003056:	d501      	bpl.n	800305c <_vfiprintf_r+0x3c>
 8003058:	692b      	ldr	r3, [r5, #16]
 800305a:	b9eb      	cbnz	r3, 8003098 <_vfiprintf_r+0x78>
 800305c:	4629      	mov	r1, r5
 800305e:	4630      	mov	r0, r6
 8003060:	f000 fb04 	bl	800366c <__swsetup_r>
 8003064:	b1c0      	cbz	r0, 8003098 <_vfiprintf_r+0x78>
 8003066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003068:	07dc      	lsls	r4, r3, #31
 800306a:	d50e      	bpl.n	800308a <_vfiprintf_r+0x6a>
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	b01d      	add	sp, #116	; 0x74
 8003072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003076:	4b7b      	ldr	r3, [pc, #492]	; (8003264 <_vfiprintf_r+0x244>)
 8003078:	429d      	cmp	r5, r3
 800307a:	d101      	bne.n	8003080 <_vfiprintf_r+0x60>
 800307c:	68b5      	ldr	r5, [r6, #8]
 800307e:	e7df      	b.n	8003040 <_vfiprintf_r+0x20>
 8003080:	4b79      	ldr	r3, [pc, #484]	; (8003268 <_vfiprintf_r+0x248>)
 8003082:	429d      	cmp	r5, r3
 8003084:	bf08      	it	eq
 8003086:	68f5      	ldreq	r5, [r6, #12]
 8003088:	e7da      	b.n	8003040 <_vfiprintf_r+0x20>
 800308a:	89ab      	ldrh	r3, [r5, #12]
 800308c:	0598      	lsls	r0, r3, #22
 800308e:	d4ed      	bmi.n	800306c <_vfiprintf_r+0x4c>
 8003090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003092:	f000 fd16 	bl	8003ac2 <__retarget_lock_release_recursive>
 8003096:	e7e9      	b.n	800306c <_vfiprintf_r+0x4c>
 8003098:	2300      	movs	r3, #0
 800309a:	9309      	str	r3, [sp, #36]	; 0x24
 800309c:	2320      	movs	r3, #32
 800309e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a6:	2330      	movs	r3, #48	; 0x30
 80030a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800326c <_vfiprintf_r+0x24c>
 80030ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030b0:	f04f 0901 	mov.w	r9, #1
 80030b4:	4623      	mov	r3, r4
 80030b6:	469a      	mov	sl, r3
 80030b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030bc:	b10a      	cbz	r2, 80030c2 <_vfiprintf_r+0xa2>
 80030be:	2a25      	cmp	r2, #37	; 0x25
 80030c0:	d1f9      	bne.n	80030b6 <_vfiprintf_r+0x96>
 80030c2:	ebba 0b04 	subs.w	fp, sl, r4
 80030c6:	d00b      	beq.n	80030e0 <_vfiprintf_r+0xc0>
 80030c8:	465b      	mov	r3, fp
 80030ca:	4622      	mov	r2, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	4630      	mov	r0, r6
 80030d0:	f7ff ff93 	bl	8002ffa <__sfputs_r>
 80030d4:	3001      	adds	r0, #1
 80030d6:	f000 80aa 	beq.w	800322e <_vfiprintf_r+0x20e>
 80030da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030dc:	445a      	add	r2, fp
 80030de:	9209      	str	r2, [sp, #36]	; 0x24
 80030e0:	f89a 3000 	ldrb.w	r3, [sl]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80a2 	beq.w	800322e <_vfiprintf_r+0x20e>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f04f 32ff 	mov.w	r2, #4294967295
 80030f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030f4:	f10a 0a01 	add.w	sl, sl, #1
 80030f8:	9304      	str	r3, [sp, #16]
 80030fa:	9307      	str	r3, [sp, #28]
 80030fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003100:	931a      	str	r3, [sp, #104]	; 0x68
 8003102:	4654      	mov	r4, sl
 8003104:	2205      	movs	r2, #5
 8003106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800310a:	4858      	ldr	r0, [pc, #352]	; (800326c <_vfiprintf_r+0x24c>)
 800310c:	f7fd f870 	bl	80001f0 <memchr>
 8003110:	9a04      	ldr	r2, [sp, #16]
 8003112:	b9d8      	cbnz	r0, 800314c <_vfiprintf_r+0x12c>
 8003114:	06d1      	lsls	r1, r2, #27
 8003116:	bf44      	itt	mi
 8003118:	2320      	movmi	r3, #32
 800311a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800311e:	0713      	lsls	r3, r2, #28
 8003120:	bf44      	itt	mi
 8003122:	232b      	movmi	r3, #43	; 0x2b
 8003124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003128:	f89a 3000 	ldrb.w	r3, [sl]
 800312c:	2b2a      	cmp	r3, #42	; 0x2a
 800312e:	d015      	beq.n	800315c <_vfiprintf_r+0x13c>
 8003130:	9a07      	ldr	r2, [sp, #28]
 8003132:	4654      	mov	r4, sl
 8003134:	2000      	movs	r0, #0
 8003136:	f04f 0c0a 	mov.w	ip, #10
 800313a:	4621      	mov	r1, r4
 800313c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003140:	3b30      	subs	r3, #48	; 0x30
 8003142:	2b09      	cmp	r3, #9
 8003144:	d94e      	bls.n	80031e4 <_vfiprintf_r+0x1c4>
 8003146:	b1b0      	cbz	r0, 8003176 <_vfiprintf_r+0x156>
 8003148:	9207      	str	r2, [sp, #28]
 800314a:	e014      	b.n	8003176 <_vfiprintf_r+0x156>
 800314c:	eba0 0308 	sub.w	r3, r0, r8
 8003150:	fa09 f303 	lsl.w	r3, r9, r3
 8003154:	4313      	orrs	r3, r2
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	46a2      	mov	sl, r4
 800315a:	e7d2      	b.n	8003102 <_vfiprintf_r+0xe2>
 800315c:	9b03      	ldr	r3, [sp, #12]
 800315e:	1d19      	adds	r1, r3, #4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	9103      	str	r1, [sp, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	bfbb      	ittet	lt
 8003168:	425b      	neglt	r3, r3
 800316a:	f042 0202 	orrlt.w	r2, r2, #2
 800316e:	9307      	strge	r3, [sp, #28]
 8003170:	9307      	strlt	r3, [sp, #28]
 8003172:	bfb8      	it	lt
 8003174:	9204      	strlt	r2, [sp, #16]
 8003176:	7823      	ldrb	r3, [r4, #0]
 8003178:	2b2e      	cmp	r3, #46	; 0x2e
 800317a:	d10c      	bne.n	8003196 <_vfiprintf_r+0x176>
 800317c:	7863      	ldrb	r3, [r4, #1]
 800317e:	2b2a      	cmp	r3, #42	; 0x2a
 8003180:	d135      	bne.n	80031ee <_vfiprintf_r+0x1ce>
 8003182:	9b03      	ldr	r3, [sp, #12]
 8003184:	1d1a      	adds	r2, r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	9203      	str	r2, [sp, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	bfb8      	it	lt
 800318e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003192:	3402      	adds	r4, #2
 8003194:	9305      	str	r3, [sp, #20]
 8003196:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003270 <_vfiprintf_r+0x250>
 800319a:	7821      	ldrb	r1, [r4, #0]
 800319c:	2203      	movs	r2, #3
 800319e:	4650      	mov	r0, sl
 80031a0:	f7fd f826 	bl	80001f0 <memchr>
 80031a4:	b140      	cbz	r0, 80031b8 <_vfiprintf_r+0x198>
 80031a6:	2340      	movs	r3, #64	; 0x40
 80031a8:	eba0 000a 	sub.w	r0, r0, sl
 80031ac:	fa03 f000 	lsl.w	r0, r3, r0
 80031b0:	9b04      	ldr	r3, [sp, #16]
 80031b2:	4303      	orrs	r3, r0
 80031b4:	3401      	adds	r4, #1
 80031b6:	9304      	str	r3, [sp, #16]
 80031b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031bc:	482d      	ldr	r0, [pc, #180]	; (8003274 <_vfiprintf_r+0x254>)
 80031be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031c2:	2206      	movs	r2, #6
 80031c4:	f7fd f814 	bl	80001f0 <memchr>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	d03f      	beq.n	800324c <_vfiprintf_r+0x22c>
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <_vfiprintf_r+0x258>)
 80031ce:	bb1b      	cbnz	r3, 8003218 <_vfiprintf_r+0x1f8>
 80031d0:	9b03      	ldr	r3, [sp, #12]
 80031d2:	3307      	adds	r3, #7
 80031d4:	f023 0307 	bic.w	r3, r3, #7
 80031d8:	3308      	adds	r3, #8
 80031da:	9303      	str	r3, [sp, #12]
 80031dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031de:	443b      	add	r3, r7
 80031e0:	9309      	str	r3, [sp, #36]	; 0x24
 80031e2:	e767      	b.n	80030b4 <_vfiprintf_r+0x94>
 80031e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80031e8:	460c      	mov	r4, r1
 80031ea:	2001      	movs	r0, #1
 80031ec:	e7a5      	b.n	800313a <_vfiprintf_r+0x11a>
 80031ee:	2300      	movs	r3, #0
 80031f0:	3401      	adds	r4, #1
 80031f2:	9305      	str	r3, [sp, #20]
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0c0a 	mov.w	ip, #10
 80031fa:	4620      	mov	r0, r4
 80031fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003200:	3a30      	subs	r2, #48	; 0x30
 8003202:	2a09      	cmp	r2, #9
 8003204:	d903      	bls.n	800320e <_vfiprintf_r+0x1ee>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0c5      	beq.n	8003196 <_vfiprintf_r+0x176>
 800320a:	9105      	str	r1, [sp, #20]
 800320c:	e7c3      	b.n	8003196 <_vfiprintf_r+0x176>
 800320e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003212:	4604      	mov	r4, r0
 8003214:	2301      	movs	r3, #1
 8003216:	e7f0      	b.n	80031fa <_vfiprintf_r+0x1da>
 8003218:	ab03      	add	r3, sp, #12
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	462a      	mov	r2, r5
 800321e:	4b17      	ldr	r3, [pc, #92]	; (800327c <_vfiprintf_r+0x25c>)
 8003220:	a904      	add	r1, sp, #16
 8003222:	4630      	mov	r0, r6
 8003224:	f3af 8000 	nop.w
 8003228:	4607      	mov	r7, r0
 800322a:	1c78      	adds	r0, r7, #1
 800322c:	d1d6      	bne.n	80031dc <_vfiprintf_r+0x1bc>
 800322e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003230:	07d9      	lsls	r1, r3, #31
 8003232:	d405      	bmi.n	8003240 <_vfiprintf_r+0x220>
 8003234:	89ab      	ldrh	r3, [r5, #12]
 8003236:	059a      	lsls	r2, r3, #22
 8003238:	d402      	bmi.n	8003240 <_vfiprintf_r+0x220>
 800323a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800323c:	f000 fc41 	bl	8003ac2 <__retarget_lock_release_recursive>
 8003240:	89ab      	ldrh	r3, [r5, #12]
 8003242:	065b      	lsls	r3, r3, #25
 8003244:	f53f af12 	bmi.w	800306c <_vfiprintf_r+0x4c>
 8003248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800324a:	e711      	b.n	8003070 <_vfiprintf_r+0x50>
 800324c:	ab03      	add	r3, sp, #12
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	462a      	mov	r2, r5
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <_vfiprintf_r+0x25c>)
 8003254:	a904      	add	r1, sp, #16
 8003256:	4630      	mov	r0, r6
 8003258:	f000 f880 	bl	800335c <_printf_i>
 800325c:	e7e4      	b.n	8003228 <_vfiprintf_r+0x208>
 800325e:	bf00      	nop
 8003260:	08004c4c 	.word	0x08004c4c
 8003264:	08004c6c 	.word	0x08004c6c
 8003268:	08004c2c 	.word	0x08004c2c
 800326c:	08004bf6 	.word	0x08004bf6
 8003270:	08004bfc 	.word	0x08004bfc
 8003274:	08004c00 	.word	0x08004c00
 8003278:	00000000 	.word	0x00000000
 800327c:	08002ffb 	.word	0x08002ffb

08003280 <_printf_common>:
 8003280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003284:	4616      	mov	r6, r2
 8003286:	4699      	mov	r9, r3
 8003288:	688a      	ldr	r2, [r1, #8]
 800328a:	690b      	ldr	r3, [r1, #16]
 800328c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003290:	4293      	cmp	r3, r2
 8003292:	bfb8      	it	lt
 8003294:	4613      	movlt	r3, r2
 8003296:	6033      	str	r3, [r6, #0]
 8003298:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800329c:	4607      	mov	r7, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	b10a      	cbz	r2, 80032a6 <_printf_common+0x26>
 80032a2:	3301      	adds	r3, #1
 80032a4:	6033      	str	r3, [r6, #0]
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	0699      	lsls	r1, r3, #26
 80032aa:	bf42      	ittt	mi
 80032ac:	6833      	ldrmi	r3, [r6, #0]
 80032ae:	3302      	addmi	r3, #2
 80032b0:	6033      	strmi	r3, [r6, #0]
 80032b2:	6825      	ldr	r5, [r4, #0]
 80032b4:	f015 0506 	ands.w	r5, r5, #6
 80032b8:	d106      	bne.n	80032c8 <_printf_common+0x48>
 80032ba:	f104 0a19 	add.w	sl, r4, #25
 80032be:	68e3      	ldr	r3, [r4, #12]
 80032c0:	6832      	ldr	r2, [r6, #0]
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	42ab      	cmp	r3, r5
 80032c6:	dc26      	bgt.n	8003316 <_printf_common+0x96>
 80032c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032cc:	1e13      	subs	r3, r2, #0
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	bf18      	it	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	0692      	lsls	r2, r2, #26
 80032d6:	d42b      	bmi.n	8003330 <_printf_common+0xb0>
 80032d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032dc:	4649      	mov	r1, r9
 80032de:	4638      	mov	r0, r7
 80032e0:	47c0      	blx	r8
 80032e2:	3001      	adds	r0, #1
 80032e4:	d01e      	beq.n	8003324 <_printf_common+0xa4>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	68e5      	ldr	r5, [r4, #12]
 80032ea:	6832      	ldr	r2, [r6, #0]
 80032ec:	f003 0306 	and.w	r3, r3, #6
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	bf08      	it	eq
 80032f4:	1aad      	subeq	r5, r5, r2
 80032f6:	68a3      	ldr	r3, [r4, #8]
 80032f8:	6922      	ldr	r2, [r4, #16]
 80032fa:	bf0c      	ite	eq
 80032fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003300:	2500      	movne	r5, #0
 8003302:	4293      	cmp	r3, r2
 8003304:	bfc4      	itt	gt
 8003306:	1a9b      	subgt	r3, r3, r2
 8003308:	18ed      	addgt	r5, r5, r3
 800330a:	2600      	movs	r6, #0
 800330c:	341a      	adds	r4, #26
 800330e:	42b5      	cmp	r5, r6
 8003310:	d11a      	bne.n	8003348 <_printf_common+0xc8>
 8003312:	2000      	movs	r0, #0
 8003314:	e008      	b.n	8003328 <_printf_common+0xa8>
 8003316:	2301      	movs	r3, #1
 8003318:	4652      	mov	r2, sl
 800331a:	4649      	mov	r1, r9
 800331c:	4638      	mov	r0, r7
 800331e:	47c0      	blx	r8
 8003320:	3001      	adds	r0, #1
 8003322:	d103      	bne.n	800332c <_printf_common+0xac>
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800332c:	3501      	adds	r5, #1
 800332e:	e7c6      	b.n	80032be <_printf_common+0x3e>
 8003330:	18e1      	adds	r1, r4, r3
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	2030      	movs	r0, #48	; 0x30
 8003336:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800333a:	4422      	add	r2, r4
 800333c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003340:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003344:	3302      	adds	r3, #2
 8003346:	e7c7      	b.n	80032d8 <_printf_common+0x58>
 8003348:	2301      	movs	r3, #1
 800334a:	4622      	mov	r2, r4
 800334c:	4649      	mov	r1, r9
 800334e:	4638      	mov	r0, r7
 8003350:	47c0      	blx	r8
 8003352:	3001      	adds	r0, #1
 8003354:	d0e6      	beq.n	8003324 <_printf_common+0xa4>
 8003356:	3601      	adds	r6, #1
 8003358:	e7d9      	b.n	800330e <_printf_common+0x8e>
	...

0800335c <_printf_i>:
 800335c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003360:	7e0f      	ldrb	r7, [r1, #24]
 8003362:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003364:	2f78      	cmp	r7, #120	; 0x78
 8003366:	4691      	mov	r9, r2
 8003368:	4680      	mov	r8, r0
 800336a:	460c      	mov	r4, r1
 800336c:	469a      	mov	sl, r3
 800336e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003372:	d807      	bhi.n	8003384 <_printf_i+0x28>
 8003374:	2f62      	cmp	r7, #98	; 0x62
 8003376:	d80a      	bhi.n	800338e <_printf_i+0x32>
 8003378:	2f00      	cmp	r7, #0
 800337a:	f000 80d8 	beq.w	800352e <_printf_i+0x1d2>
 800337e:	2f58      	cmp	r7, #88	; 0x58
 8003380:	f000 80a3 	beq.w	80034ca <_printf_i+0x16e>
 8003384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003388:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800338c:	e03a      	b.n	8003404 <_printf_i+0xa8>
 800338e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003392:	2b15      	cmp	r3, #21
 8003394:	d8f6      	bhi.n	8003384 <_printf_i+0x28>
 8003396:	a101      	add	r1, pc, #4	; (adr r1, 800339c <_printf_i+0x40>)
 8003398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800339c:	080033f5 	.word	0x080033f5
 80033a0:	08003409 	.word	0x08003409
 80033a4:	08003385 	.word	0x08003385
 80033a8:	08003385 	.word	0x08003385
 80033ac:	08003385 	.word	0x08003385
 80033b0:	08003385 	.word	0x08003385
 80033b4:	08003409 	.word	0x08003409
 80033b8:	08003385 	.word	0x08003385
 80033bc:	08003385 	.word	0x08003385
 80033c0:	08003385 	.word	0x08003385
 80033c4:	08003385 	.word	0x08003385
 80033c8:	08003515 	.word	0x08003515
 80033cc:	08003439 	.word	0x08003439
 80033d0:	080034f7 	.word	0x080034f7
 80033d4:	08003385 	.word	0x08003385
 80033d8:	08003385 	.word	0x08003385
 80033dc:	08003537 	.word	0x08003537
 80033e0:	08003385 	.word	0x08003385
 80033e4:	08003439 	.word	0x08003439
 80033e8:	08003385 	.word	0x08003385
 80033ec:	08003385 	.word	0x08003385
 80033f0:	080034ff 	.word	0x080034ff
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	1d1a      	adds	r2, r3, #4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	602a      	str	r2, [r5, #0]
 80033fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003404:	2301      	movs	r3, #1
 8003406:	e0a3      	b.n	8003550 <_printf_i+0x1f4>
 8003408:	6820      	ldr	r0, [r4, #0]
 800340a:	6829      	ldr	r1, [r5, #0]
 800340c:	0606      	lsls	r6, r0, #24
 800340e:	f101 0304 	add.w	r3, r1, #4
 8003412:	d50a      	bpl.n	800342a <_printf_i+0xce>
 8003414:	680e      	ldr	r6, [r1, #0]
 8003416:	602b      	str	r3, [r5, #0]
 8003418:	2e00      	cmp	r6, #0
 800341a:	da03      	bge.n	8003424 <_printf_i+0xc8>
 800341c:	232d      	movs	r3, #45	; 0x2d
 800341e:	4276      	negs	r6, r6
 8003420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003424:	485e      	ldr	r0, [pc, #376]	; (80035a0 <_printf_i+0x244>)
 8003426:	230a      	movs	r3, #10
 8003428:	e019      	b.n	800345e <_printf_i+0x102>
 800342a:	680e      	ldr	r6, [r1, #0]
 800342c:	602b      	str	r3, [r5, #0]
 800342e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003432:	bf18      	it	ne
 8003434:	b236      	sxthne	r6, r6
 8003436:	e7ef      	b.n	8003418 <_printf_i+0xbc>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	1d19      	adds	r1, r3, #4
 800343e:	6029      	str	r1, [r5, #0]
 8003440:	0601      	lsls	r1, r0, #24
 8003442:	d501      	bpl.n	8003448 <_printf_i+0xec>
 8003444:	681e      	ldr	r6, [r3, #0]
 8003446:	e002      	b.n	800344e <_printf_i+0xf2>
 8003448:	0646      	lsls	r6, r0, #25
 800344a:	d5fb      	bpl.n	8003444 <_printf_i+0xe8>
 800344c:	881e      	ldrh	r6, [r3, #0]
 800344e:	4854      	ldr	r0, [pc, #336]	; (80035a0 <_printf_i+0x244>)
 8003450:	2f6f      	cmp	r7, #111	; 0x6f
 8003452:	bf0c      	ite	eq
 8003454:	2308      	moveq	r3, #8
 8003456:	230a      	movne	r3, #10
 8003458:	2100      	movs	r1, #0
 800345a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800345e:	6865      	ldr	r5, [r4, #4]
 8003460:	60a5      	str	r5, [r4, #8]
 8003462:	2d00      	cmp	r5, #0
 8003464:	bfa2      	ittt	ge
 8003466:	6821      	ldrge	r1, [r4, #0]
 8003468:	f021 0104 	bicge.w	r1, r1, #4
 800346c:	6021      	strge	r1, [r4, #0]
 800346e:	b90e      	cbnz	r6, 8003474 <_printf_i+0x118>
 8003470:	2d00      	cmp	r5, #0
 8003472:	d04d      	beq.n	8003510 <_printf_i+0x1b4>
 8003474:	4615      	mov	r5, r2
 8003476:	fbb6 f1f3 	udiv	r1, r6, r3
 800347a:	fb03 6711 	mls	r7, r3, r1, r6
 800347e:	5dc7      	ldrb	r7, [r0, r7]
 8003480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003484:	4637      	mov	r7, r6
 8003486:	42bb      	cmp	r3, r7
 8003488:	460e      	mov	r6, r1
 800348a:	d9f4      	bls.n	8003476 <_printf_i+0x11a>
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10b      	bne.n	80034a8 <_printf_i+0x14c>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	07de      	lsls	r6, r3, #31
 8003494:	d508      	bpl.n	80034a8 <_printf_i+0x14c>
 8003496:	6923      	ldr	r3, [r4, #16]
 8003498:	6861      	ldr	r1, [r4, #4]
 800349a:	4299      	cmp	r1, r3
 800349c:	bfde      	ittt	le
 800349e:	2330      	movle	r3, #48	; 0x30
 80034a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034a8:	1b52      	subs	r2, r2, r5
 80034aa:	6122      	str	r2, [r4, #16]
 80034ac:	f8cd a000 	str.w	sl, [sp]
 80034b0:	464b      	mov	r3, r9
 80034b2:	aa03      	add	r2, sp, #12
 80034b4:	4621      	mov	r1, r4
 80034b6:	4640      	mov	r0, r8
 80034b8:	f7ff fee2 	bl	8003280 <_printf_common>
 80034bc:	3001      	adds	r0, #1
 80034be:	d14c      	bne.n	800355a <_printf_i+0x1fe>
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	b004      	add	sp, #16
 80034c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ca:	4835      	ldr	r0, [pc, #212]	; (80035a0 <_printf_i+0x244>)
 80034cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80034d0:	6829      	ldr	r1, [r5, #0]
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80034d8:	6029      	str	r1, [r5, #0]
 80034da:	061d      	lsls	r5, r3, #24
 80034dc:	d514      	bpl.n	8003508 <_printf_i+0x1ac>
 80034de:	07df      	lsls	r7, r3, #31
 80034e0:	bf44      	itt	mi
 80034e2:	f043 0320 	orrmi.w	r3, r3, #32
 80034e6:	6023      	strmi	r3, [r4, #0]
 80034e8:	b91e      	cbnz	r6, 80034f2 <_printf_i+0x196>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f023 0320 	bic.w	r3, r3, #32
 80034f0:	6023      	str	r3, [r4, #0]
 80034f2:	2310      	movs	r3, #16
 80034f4:	e7b0      	b.n	8003458 <_printf_i+0xfc>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	f043 0320 	orr.w	r3, r3, #32
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	2378      	movs	r3, #120	; 0x78
 8003500:	4828      	ldr	r0, [pc, #160]	; (80035a4 <_printf_i+0x248>)
 8003502:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003506:	e7e3      	b.n	80034d0 <_printf_i+0x174>
 8003508:	0659      	lsls	r1, r3, #25
 800350a:	bf48      	it	mi
 800350c:	b2b6      	uxthmi	r6, r6
 800350e:	e7e6      	b.n	80034de <_printf_i+0x182>
 8003510:	4615      	mov	r5, r2
 8003512:	e7bb      	b.n	800348c <_printf_i+0x130>
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	6826      	ldr	r6, [r4, #0]
 8003518:	6961      	ldr	r1, [r4, #20]
 800351a:	1d18      	adds	r0, r3, #4
 800351c:	6028      	str	r0, [r5, #0]
 800351e:	0635      	lsls	r5, r6, #24
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	d501      	bpl.n	8003528 <_printf_i+0x1cc>
 8003524:	6019      	str	r1, [r3, #0]
 8003526:	e002      	b.n	800352e <_printf_i+0x1d2>
 8003528:	0670      	lsls	r0, r6, #25
 800352a:	d5fb      	bpl.n	8003524 <_printf_i+0x1c8>
 800352c:	8019      	strh	r1, [r3, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	6123      	str	r3, [r4, #16]
 8003532:	4615      	mov	r5, r2
 8003534:	e7ba      	b.n	80034ac <_printf_i+0x150>
 8003536:	682b      	ldr	r3, [r5, #0]
 8003538:	1d1a      	adds	r2, r3, #4
 800353a:	602a      	str	r2, [r5, #0]
 800353c:	681d      	ldr	r5, [r3, #0]
 800353e:	6862      	ldr	r2, [r4, #4]
 8003540:	2100      	movs	r1, #0
 8003542:	4628      	mov	r0, r5
 8003544:	f7fc fe54 	bl	80001f0 <memchr>
 8003548:	b108      	cbz	r0, 800354e <_printf_i+0x1f2>
 800354a:	1b40      	subs	r0, r0, r5
 800354c:	6060      	str	r0, [r4, #4]
 800354e:	6863      	ldr	r3, [r4, #4]
 8003550:	6123      	str	r3, [r4, #16]
 8003552:	2300      	movs	r3, #0
 8003554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003558:	e7a8      	b.n	80034ac <_printf_i+0x150>
 800355a:	6923      	ldr	r3, [r4, #16]
 800355c:	462a      	mov	r2, r5
 800355e:	4649      	mov	r1, r9
 8003560:	4640      	mov	r0, r8
 8003562:	47d0      	blx	sl
 8003564:	3001      	adds	r0, #1
 8003566:	d0ab      	beq.n	80034c0 <_printf_i+0x164>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	079b      	lsls	r3, r3, #30
 800356c:	d413      	bmi.n	8003596 <_printf_i+0x23a>
 800356e:	68e0      	ldr	r0, [r4, #12]
 8003570:	9b03      	ldr	r3, [sp, #12]
 8003572:	4298      	cmp	r0, r3
 8003574:	bfb8      	it	lt
 8003576:	4618      	movlt	r0, r3
 8003578:	e7a4      	b.n	80034c4 <_printf_i+0x168>
 800357a:	2301      	movs	r3, #1
 800357c:	4632      	mov	r2, r6
 800357e:	4649      	mov	r1, r9
 8003580:	4640      	mov	r0, r8
 8003582:	47d0      	blx	sl
 8003584:	3001      	adds	r0, #1
 8003586:	d09b      	beq.n	80034c0 <_printf_i+0x164>
 8003588:	3501      	adds	r5, #1
 800358a:	68e3      	ldr	r3, [r4, #12]
 800358c:	9903      	ldr	r1, [sp, #12]
 800358e:	1a5b      	subs	r3, r3, r1
 8003590:	42ab      	cmp	r3, r5
 8003592:	dcf2      	bgt.n	800357a <_printf_i+0x21e>
 8003594:	e7eb      	b.n	800356e <_printf_i+0x212>
 8003596:	2500      	movs	r5, #0
 8003598:	f104 0619 	add.w	r6, r4, #25
 800359c:	e7f5      	b.n	800358a <_printf_i+0x22e>
 800359e:	bf00      	nop
 80035a0:	08004c07 	.word	0x08004c07
 80035a4:	08004c18 	.word	0x08004c18

080035a8 <_sbrk_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	4d06      	ldr	r5, [pc, #24]	; (80035c4 <_sbrk_r+0x1c>)
 80035ac:	2300      	movs	r3, #0
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	f7ff f97c 	bl	80028b0 <_sbrk>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_sbrk_r+0x1a>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_sbrk_r+0x1a>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	20000130 	.word	0x20000130

080035c8 <__swbuf_r>:
 80035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ca:	460e      	mov	r6, r1
 80035cc:	4614      	mov	r4, r2
 80035ce:	4605      	mov	r5, r0
 80035d0:	b118      	cbz	r0, 80035da <__swbuf_r+0x12>
 80035d2:	6983      	ldr	r3, [r0, #24]
 80035d4:	b90b      	cbnz	r3, 80035da <__swbuf_r+0x12>
 80035d6:	f000 f9d5 	bl	8003984 <__sinit>
 80035da:	4b21      	ldr	r3, [pc, #132]	; (8003660 <__swbuf_r+0x98>)
 80035dc:	429c      	cmp	r4, r3
 80035de:	d12b      	bne.n	8003638 <__swbuf_r+0x70>
 80035e0:	686c      	ldr	r4, [r5, #4]
 80035e2:	69a3      	ldr	r3, [r4, #24]
 80035e4:	60a3      	str	r3, [r4, #8]
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	071a      	lsls	r2, r3, #28
 80035ea:	d52f      	bpl.n	800364c <__swbuf_r+0x84>
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	b36b      	cbz	r3, 800364c <__swbuf_r+0x84>
 80035f0:	6923      	ldr	r3, [r4, #16]
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1ac0      	subs	r0, r0, r3
 80035f6:	6963      	ldr	r3, [r4, #20]
 80035f8:	b2f6      	uxtb	r6, r6
 80035fa:	4283      	cmp	r3, r0
 80035fc:	4637      	mov	r7, r6
 80035fe:	dc04      	bgt.n	800360a <__swbuf_r+0x42>
 8003600:	4621      	mov	r1, r4
 8003602:	4628      	mov	r0, r5
 8003604:	f000 f92a 	bl	800385c <_fflush_r>
 8003608:	bb30      	cbnz	r0, 8003658 <__swbuf_r+0x90>
 800360a:	68a3      	ldr	r3, [r4, #8]
 800360c:	3b01      	subs	r3, #1
 800360e:	60a3      	str	r3, [r4, #8]
 8003610:	6823      	ldr	r3, [r4, #0]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	6022      	str	r2, [r4, #0]
 8003616:	701e      	strb	r6, [r3, #0]
 8003618:	6963      	ldr	r3, [r4, #20]
 800361a:	3001      	adds	r0, #1
 800361c:	4283      	cmp	r3, r0
 800361e:	d004      	beq.n	800362a <__swbuf_r+0x62>
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	07db      	lsls	r3, r3, #31
 8003624:	d506      	bpl.n	8003634 <__swbuf_r+0x6c>
 8003626:	2e0a      	cmp	r6, #10
 8003628:	d104      	bne.n	8003634 <__swbuf_r+0x6c>
 800362a:	4621      	mov	r1, r4
 800362c:	4628      	mov	r0, r5
 800362e:	f000 f915 	bl	800385c <_fflush_r>
 8003632:	b988      	cbnz	r0, 8003658 <__swbuf_r+0x90>
 8003634:	4638      	mov	r0, r7
 8003636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <__swbuf_r+0x9c>)
 800363a:	429c      	cmp	r4, r3
 800363c:	d101      	bne.n	8003642 <__swbuf_r+0x7a>
 800363e:	68ac      	ldr	r4, [r5, #8]
 8003640:	e7cf      	b.n	80035e2 <__swbuf_r+0x1a>
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <__swbuf_r+0xa0>)
 8003644:	429c      	cmp	r4, r3
 8003646:	bf08      	it	eq
 8003648:	68ec      	ldreq	r4, [r5, #12]
 800364a:	e7ca      	b.n	80035e2 <__swbuf_r+0x1a>
 800364c:	4621      	mov	r1, r4
 800364e:	4628      	mov	r0, r5
 8003650:	f000 f80c 	bl	800366c <__swsetup_r>
 8003654:	2800      	cmp	r0, #0
 8003656:	d0cb      	beq.n	80035f0 <__swbuf_r+0x28>
 8003658:	f04f 37ff 	mov.w	r7, #4294967295
 800365c:	e7ea      	b.n	8003634 <__swbuf_r+0x6c>
 800365e:	bf00      	nop
 8003660:	08004c4c 	.word	0x08004c4c
 8003664:	08004c6c 	.word	0x08004c6c
 8003668:	08004c2c 	.word	0x08004c2c

0800366c <__swsetup_r>:
 800366c:	4b32      	ldr	r3, [pc, #200]	; (8003738 <__swsetup_r+0xcc>)
 800366e:	b570      	push	{r4, r5, r6, lr}
 8003670:	681d      	ldr	r5, [r3, #0]
 8003672:	4606      	mov	r6, r0
 8003674:	460c      	mov	r4, r1
 8003676:	b125      	cbz	r5, 8003682 <__swsetup_r+0x16>
 8003678:	69ab      	ldr	r3, [r5, #24]
 800367a:	b913      	cbnz	r3, 8003682 <__swsetup_r+0x16>
 800367c:	4628      	mov	r0, r5
 800367e:	f000 f981 	bl	8003984 <__sinit>
 8003682:	4b2e      	ldr	r3, [pc, #184]	; (800373c <__swsetup_r+0xd0>)
 8003684:	429c      	cmp	r4, r3
 8003686:	d10f      	bne.n	80036a8 <__swsetup_r+0x3c>
 8003688:	686c      	ldr	r4, [r5, #4]
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003690:	0719      	lsls	r1, r3, #28
 8003692:	d42c      	bmi.n	80036ee <__swsetup_r+0x82>
 8003694:	06dd      	lsls	r5, r3, #27
 8003696:	d411      	bmi.n	80036bc <__swsetup_r+0x50>
 8003698:	2309      	movs	r3, #9
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	f04f 30ff 	mov.w	r0, #4294967295
 80036a6:	e03e      	b.n	8003726 <__swsetup_r+0xba>
 80036a8:	4b25      	ldr	r3, [pc, #148]	; (8003740 <__swsetup_r+0xd4>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d101      	bne.n	80036b2 <__swsetup_r+0x46>
 80036ae:	68ac      	ldr	r4, [r5, #8]
 80036b0:	e7eb      	b.n	800368a <__swsetup_r+0x1e>
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <__swsetup_r+0xd8>)
 80036b4:	429c      	cmp	r4, r3
 80036b6:	bf08      	it	eq
 80036b8:	68ec      	ldreq	r4, [r5, #12]
 80036ba:	e7e6      	b.n	800368a <__swsetup_r+0x1e>
 80036bc:	0758      	lsls	r0, r3, #29
 80036be:	d512      	bpl.n	80036e6 <__swsetup_r+0x7a>
 80036c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036c2:	b141      	cbz	r1, 80036d6 <__swsetup_r+0x6a>
 80036c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036c8:	4299      	cmp	r1, r3
 80036ca:	d002      	beq.n	80036d2 <__swsetup_r+0x66>
 80036cc:	4630      	mov	r0, r6
 80036ce:	f7ff fa45 	bl	8002b5c <_free_r>
 80036d2:	2300      	movs	r3, #0
 80036d4:	6363      	str	r3, [r4, #52]	; 0x34
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	2300      	movs	r3, #0
 80036e0:	6063      	str	r3, [r4, #4]
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	89a3      	ldrh	r3, [r4, #12]
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	b94b      	cbnz	r3, 8003706 <__swsetup_r+0x9a>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d003      	beq.n	8003706 <__swsetup_r+0x9a>
 80036fe:	4621      	mov	r1, r4
 8003700:	4630      	mov	r0, r6
 8003702:	f000 fa05 	bl	8003b10 <__smakebuf_r>
 8003706:	89a0      	ldrh	r0, [r4, #12]
 8003708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800370c:	f010 0301 	ands.w	r3, r0, #1
 8003710:	d00a      	beq.n	8003728 <__swsetup_r+0xbc>
 8003712:	2300      	movs	r3, #0
 8003714:	60a3      	str	r3, [r4, #8]
 8003716:	6963      	ldr	r3, [r4, #20]
 8003718:	425b      	negs	r3, r3
 800371a:	61a3      	str	r3, [r4, #24]
 800371c:	6923      	ldr	r3, [r4, #16]
 800371e:	b943      	cbnz	r3, 8003732 <__swsetup_r+0xc6>
 8003720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003724:	d1ba      	bne.n	800369c <__swsetup_r+0x30>
 8003726:	bd70      	pop	{r4, r5, r6, pc}
 8003728:	0781      	lsls	r1, r0, #30
 800372a:	bf58      	it	pl
 800372c:	6963      	ldrpl	r3, [r4, #20]
 800372e:	60a3      	str	r3, [r4, #8]
 8003730:	e7f4      	b.n	800371c <__swsetup_r+0xb0>
 8003732:	2000      	movs	r0, #0
 8003734:	e7f7      	b.n	8003726 <__swsetup_r+0xba>
 8003736:	bf00      	nop
 8003738:	20000004 	.word	0x20000004
 800373c:	08004c4c 	.word	0x08004c4c
 8003740:	08004c6c 	.word	0x08004c6c
 8003744:	08004c2c 	.word	0x08004c2c

08003748 <abort>:
 8003748:	b508      	push	{r3, lr}
 800374a:	2006      	movs	r0, #6
 800374c:	f000 faac 	bl	8003ca8 <raise>
 8003750:	2001      	movs	r0, #1
 8003752:	f7ff f83a 	bl	80027ca <_exit>
	...

08003758 <__sflush_r>:
 8003758:	898a      	ldrh	r2, [r1, #12]
 800375a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375c:	4605      	mov	r5, r0
 800375e:	0710      	lsls	r0, r2, #28
 8003760:	460c      	mov	r4, r1
 8003762:	d457      	bmi.n	8003814 <__sflush_r+0xbc>
 8003764:	684b      	ldr	r3, [r1, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dc04      	bgt.n	8003774 <__sflush_r+0x1c>
 800376a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	dc01      	bgt.n	8003774 <__sflush_r+0x1c>
 8003770:	2000      	movs	r0, #0
 8003772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003776:	2e00      	cmp	r6, #0
 8003778:	d0fa      	beq.n	8003770 <__sflush_r+0x18>
 800377a:	2300      	movs	r3, #0
 800377c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003780:	682f      	ldr	r7, [r5, #0]
 8003782:	602b      	str	r3, [r5, #0]
 8003784:	d032      	beq.n	80037ec <__sflush_r+0x94>
 8003786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	075a      	lsls	r2, r3, #29
 800378c:	d505      	bpl.n	800379a <__sflush_r+0x42>
 800378e:	6863      	ldr	r3, [r4, #4]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003794:	b10b      	cbz	r3, 800379a <__sflush_r+0x42>
 8003796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003798:	1ac0      	subs	r0, r0, r3
 800379a:	2300      	movs	r3, #0
 800379c:	4602      	mov	r2, r0
 800379e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037a0:	6a21      	ldr	r1, [r4, #32]
 80037a2:	4628      	mov	r0, r5
 80037a4:	47b0      	blx	r6
 80037a6:	1c43      	adds	r3, r0, #1
 80037a8:	89a3      	ldrh	r3, [r4, #12]
 80037aa:	d106      	bne.n	80037ba <__sflush_r+0x62>
 80037ac:	6829      	ldr	r1, [r5, #0]
 80037ae:	291d      	cmp	r1, #29
 80037b0:	d82c      	bhi.n	800380c <__sflush_r+0xb4>
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <__sflush_r+0x100>)
 80037b4:	40ca      	lsrs	r2, r1
 80037b6:	07d6      	lsls	r6, r2, #31
 80037b8:	d528      	bpl.n	800380c <__sflush_r+0xb4>
 80037ba:	2200      	movs	r2, #0
 80037bc:	6062      	str	r2, [r4, #4]
 80037be:	04d9      	lsls	r1, r3, #19
 80037c0:	6922      	ldr	r2, [r4, #16]
 80037c2:	6022      	str	r2, [r4, #0]
 80037c4:	d504      	bpl.n	80037d0 <__sflush_r+0x78>
 80037c6:	1c42      	adds	r2, r0, #1
 80037c8:	d101      	bne.n	80037ce <__sflush_r+0x76>
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	b903      	cbnz	r3, 80037d0 <__sflush_r+0x78>
 80037ce:	6560      	str	r0, [r4, #84]	; 0x54
 80037d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037d2:	602f      	str	r7, [r5, #0]
 80037d4:	2900      	cmp	r1, #0
 80037d6:	d0cb      	beq.n	8003770 <__sflush_r+0x18>
 80037d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037dc:	4299      	cmp	r1, r3
 80037de:	d002      	beq.n	80037e6 <__sflush_r+0x8e>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff f9bb 	bl	8002b5c <_free_r>
 80037e6:	2000      	movs	r0, #0
 80037e8:	6360      	str	r0, [r4, #52]	; 0x34
 80037ea:	e7c2      	b.n	8003772 <__sflush_r+0x1a>
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	2301      	movs	r3, #1
 80037f0:	4628      	mov	r0, r5
 80037f2:	47b0      	blx	r6
 80037f4:	1c41      	adds	r1, r0, #1
 80037f6:	d1c7      	bne.n	8003788 <__sflush_r+0x30>
 80037f8:	682b      	ldr	r3, [r5, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0c4      	beq.n	8003788 <__sflush_r+0x30>
 80037fe:	2b1d      	cmp	r3, #29
 8003800:	d001      	beq.n	8003806 <__sflush_r+0xae>
 8003802:	2b16      	cmp	r3, #22
 8003804:	d101      	bne.n	800380a <__sflush_r+0xb2>
 8003806:	602f      	str	r7, [r5, #0]
 8003808:	e7b2      	b.n	8003770 <__sflush_r+0x18>
 800380a:	89a3      	ldrh	r3, [r4, #12]
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	81a3      	strh	r3, [r4, #12]
 8003812:	e7ae      	b.n	8003772 <__sflush_r+0x1a>
 8003814:	690f      	ldr	r7, [r1, #16]
 8003816:	2f00      	cmp	r7, #0
 8003818:	d0aa      	beq.n	8003770 <__sflush_r+0x18>
 800381a:	0793      	lsls	r3, r2, #30
 800381c:	680e      	ldr	r6, [r1, #0]
 800381e:	bf08      	it	eq
 8003820:	694b      	ldreq	r3, [r1, #20]
 8003822:	600f      	str	r7, [r1, #0]
 8003824:	bf18      	it	ne
 8003826:	2300      	movne	r3, #0
 8003828:	1bf6      	subs	r6, r6, r7
 800382a:	608b      	str	r3, [r1, #8]
 800382c:	2e00      	cmp	r6, #0
 800382e:	dd9f      	ble.n	8003770 <__sflush_r+0x18>
 8003830:	6a21      	ldr	r1, [r4, #32]
 8003832:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003836:	4633      	mov	r3, r6
 8003838:	463a      	mov	r2, r7
 800383a:	4628      	mov	r0, r5
 800383c:	47e0      	blx	ip
 800383e:	2800      	cmp	r0, #0
 8003840:	dc06      	bgt.n	8003850 <__sflush_r+0xf8>
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003848:	81a3      	strh	r3, [r4, #12]
 800384a:	f04f 30ff 	mov.w	r0, #4294967295
 800384e:	e790      	b.n	8003772 <__sflush_r+0x1a>
 8003850:	4407      	add	r7, r0
 8003852:	1a36      	subs	r6, r6, r0
 8003854:	e7ea      	b.n	800382c <__sflush_r+0xd4>
 8003856:	bf00      	nop
 8003858:	20400001 	.word	0x20400001

0800385c <_fflush_r>:
 800385c:	b538      	push	{r3, r4, r5, lr}
 800385e:	690b      	ldr	r3, [r1, #16]
 8003860:	4605      	mov	r5, r0
 8003862:	460c      	mov	r4, r1
 8003864:	b913      	cbnz	r3, 800386c <_fflush_r+0x10>
 8003866:	2500      	movs	r5, #0
 8003868:	4628      	mov	r0, r5
 800386a:	bd38      	pop	{r3, r4, r5, pc}
 800386c:	b118      	cbz	r0, 8003876 <_fflush_r+0x1a>
 800386e:	6983      	ldr	r3, [r0, #24]
 8003870:	b90b      	cbnz	r3, 8003876 <_fflush_r+0x1a>
 8003872:	f000 f887 	bl	8003984 <__sinit>
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <_fflush_r+0x6c>)
 8003878:	429c      	cmp	r4, r3
 800387a:	d11b      	bne.n	80038b4 <_fflush_r+0x58>
 800387c:	686c      	ldr	r4, [r5, #4]
 800387e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0ef      	beq.n	8003866 <_fflush_r+0xa>
 8003886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003888:	07d0      	lsls	r0, r2, #31
 800388a:	d404      	bmi.n	8003896 <_fflush_r+0x3a>
 800388c:	0599      	lsls	r1, r3, #22
 800388e:	d402      	bmi.n	8003896 <_fflush_r+0x3a>
 8003890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003892:	f000 f915 	bl	8003ac0 <__retarget_lock_acquire_recursive>
 8003896:	4628      	mov	r0, r5
 8003898:	4621      	mov	r1, r4
 800389a:	f7ff ff5d 	bl	8003758 <__sflush_r>
 800389e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038a0:	07da      	lsls	r2, r3, #31
 80038a2:	4605      	mov	r5, r0
 80038a4:	d4e0      	bmi.n	8003868 <_fflush_r+0xc>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	059b      	lsls	r3, r3, #22
 80038aa:	d4dd      	bmi.n	8003868 <_fflush_r+0xc>
 80038ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038ae:	f000 f908 	bl	8003ac2 <__retarget_lock_release_recursive>
 80038b2:	e7d9      	b.n	8003868 <_fflush_r+0xc>
 80038b4:	4b05      	ldr	r3, [pc, #20]	; (80038cc <_fflush_r+0x70>)
 80038b6:	429c      	cmp	r4, r3
 80038b8:	d101      	bne.n	80038be <_fflush_r+0x62>
 80038ba:	68ac      	ldr	r4, [r5, #8]
 80038bc:	e7df      	b.n	800387e <_fflush_r+0x22>
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <_fflush_r+0x74>)
 80038c0:	429c      	cmp	r4, r3
 80038c2:	bf08      	it	eq
 80038c4:	68ec      	ldreq	r4, [r5, #12]
 80038c6:	e7da      	b.n	800387e <_fflush_r+0x22>
 80038c8:	08004c4c 	.word	0x08004c4c
 80038cc:	08004c6c 	.word	0x08004c6c
 80038d0:	08004c2c 	.word	0x08004c2c

080038d4 <std>:
 80038d4:	2300      	movs	r3, #0
 80038d6:	b510      	push	{r4, lr}
 80038d8:	4604      	mov	r4, r0
 80038da:	e9c0 3300 	strd	r3, r3, [r0]
 80038de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038e2:	6083      	str	r3, [r0, #8]
 80038e4:	8181      	strh	r1, [r0, #12]
 80038e6:	6643      	str	r3, [r0, #100]	; 0x64
 80038e8:	81c2      	strh	r2, [r0, #14]
 80038ea:	6183      	str	r3, [r0, #24]
 80038ec:	4619      	mov	r1, r3
 80038ee:	2208      	movs	r2, #8
 80038f0:	305c      	adds	r0, #92	; 0x5c
 80038f2:	f7ff f867 	bl	80029c4 <memset>
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <std+0x38>)
 80038f8:	6263      	str	r3, [r4, #36]	; 0x24
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <std+0x3c>)
 80038fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <std+0x40>)
 8003900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <std+0x44>)
 8003904:	6224      	str	r4, [r4, #32]
 8003906:	6323      	str	r3, [r4, #48]	; 0x30
 8003908:	bd10      	pop	{r4, pc}
 800390a:	bf00      	nop
 800390c:	08003ce1 	.word	0x08003ce1
 8003910:	08003d03 	.word	0x08003d03
 8003914:	08003d3b 	.word	0x08003d3b
 8003918:	08003d5f 	.word	0x08003d5f

0800391c <_cleanup_r>:
 800391c:	4901      	ldr	r1, [pc, #4]	; (8003924 <_cleanup_r+0x8>)
 800391e:	f000 b8af 	b.w	8003a80 <_fwalk_reent>
 8003922:	bf00      	nop
 8003924:	0800385d 	.word	0x0800385d

08003928 <__sfmoreglue>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	2268      	movs	r2, #104	; 0x68
 800392c:	1e4d      	subs	r5, r1, #1
 800392e:	4355      	muls	r5, r2
 8003930:	460e      	mov	r6, r1
 8003932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003936:	f7ff f97b 	bl	8002c30 <_malloc_r>
 800393a:	4604      	mov	r4, r0
 800393c:	b140      	cbz	r0, 8003950 <__sfmoreglue+0x28>
 800393e:	2100      	movs	r1, #0
 8003940:	e9c0 1600 	strd	r1, r6, [r0]
 8003944:	300c      	adds	r0, #12
 8003946:	60a0      	str	r0, [r4, #8]
 8003948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800394c:	f7ff f83a 	bl	80029c4 <memset>
 8003950:	4620      	mov	r0, r4
 8003952:	bd70      	pop	{r4, r5, r6, pc}

08003954 <__sfp_lock_acquire>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__sfp_lock_acquire+0x8>)
 8003956:	f000 b8b3 	b.w	8003ac0 <__retarget_lock_acquire_recursive>
 800395a:	bf00      	nop
 800395c:	2000012d 	.word	0x2000012d

08003960 <__sfp_lock_release>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__sfp_lock_release+0x8>)
 8003962:	f000 b8ae 	b.w	8003ac2 <__retarget_lock_release_recursive>
 8003966:	bf00      	nop
 8003968:	2000012d 	.word	0x2000012d

0800396c <__sinit_lock_acquire>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__sinit_lock_acquire+0x8>)
 800396e:	f000 b8a7 	b.w	8003ac0 <__retarget_lock_acquire_recursive>
 8003972:	bf00      	nop
 8003974:	2000012e 	.word	0x2000012e

08003978 <__sinit_lock_release>:
 8003978:	4801      	ldr	r0, [pc, #4]	; (8003980 <__sinit_lock_release+0x8>)
 800397a:	f000 b8a2 	b.w	8003ac2 <__retarget_lock_release_recursive>
 800397e:	bf00      	nop
 8003980:	2000012e 	.word	0x2000012e

08003984 <__sinit>:
 8003984:	b510      	push	{r4, lr}
 8003986:	4604      	mov	r4, r0
 8003988:	f7ff fff0 	bl	800396c <__sinit_lock_acquire>
 800398c:	69a3      	ldr	r3, [r4, #24]
 800398e:	b11b      	cbz	r3, 8003998 <__sinit+0x14>
 8003990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003994:	f7ff bff0 	b.w	8003978 <__sinit_lock_release>
 8003998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800399c:	6523      	str	r3, [r4, #80]	; 0x50
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <__sinit+0x68>)
 80039a0:	4a13      	ldr	r2, [pc, #76]	; (80039f0 <__sinit+0x6c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80039a6:	42a3      	cmp	r3, r4
 80039a8:	bf04      	itt	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	61a3      	streq	r3, [r4, #24]
 80039ae:	4620      	mov	r0, r4
 80039b0:	f000 f820 	bl	80039f4 <__sfp>
 80039b4:	6060      	str	r0, [r4, #4]
 80039b6:	4620      	mov	r0, r4
 80039b8:	f000 f81c 	bl	80039f4 <__sfp>
 80039bc:	60a0      	str	r0, [r4, #8]
 80039be:	4620      	mov	r0, r4
 80039c0:	f000 f818 	bl	80039f4 <__sfp>
 80039c4:	2200      	movs	r2, #0
 80039c6:	60e0      	str	r0, [r4, #12]
 80039c8:	2104      	movs	r1, #4
 80039ca:	6860      	ldr	r0, [r4, #4]
 80039cc:	f7ff ff82 	bl	80038d4 <std>
 80039d0:	68a0      	ldr	r0, [r4, #8]
 80039d2:	2201      	movs	r2, #1
 80039d4:	2109      	movs	r1, #9
 80039d6:	f7ff ff7d 	bl	80038d4 <std>
 80039da:	68e0      	ldr	r0, [r4, #12]
 80039dc:	2202      	movs	r2, #2
 80039de:	2112      	movs	r1, #18
 80039e0:	f7ff ff78 	bl	80038d4 <std>
 80039e4:	2301      	movs	r3, #1
 80039e6:	61a3      	str	r3, [r4, #24]
 80039e8:	e7d2      	b.n	8003990 <__sinit+0xc>
 80039ea:	bf00      	nop
 80039ec:	08004b44 	.word	0x08004b44
 80039f0:	0800391d 	.word	0x0800391d

080039f4 <__sfp>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	4607      	mov	r7, r0
 80039f8:	f7ff ffac 	bl	8003954 <__sfp_lock_acquire>
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <__sfp+0x84>)
 80039fe:	681e      	ldr	r6, [r3, #0]
 8003a00:	69b3      	ldr	r3, [r6, #24]
 8003a02:	b913      	cbnz	r3, 8003a0a <__sfp+0x16>
 8003a04:	4630      	mov	r0, r6
 8003a06:	f7ff ffbd 	bl	8003984 <__sinit>
 8003a0a:	3648      	adds	r6, #72	; 0x48
 8003a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	d503      	bpl.n	8003a1c <__sfp+0x28>
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	b30b      	cbz	r3, 8003a5c <__sfp+0x68>
 8003a18:	6836      	ldr	r6, [r6, #0]
 8003a1a:	e7f7      	b.n	8003a0c <__sfp+0x18>
 8003a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a20:	b9d5      	cbnz	r5, 8003a58 <__sfp+0x64>
 8003a22:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <__sfp+0x88>)
 8003a24:	60e3      	str	r3, [r4, #12]
 8003a26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a2c:	f000 f847 	bl	8003abe <__retarget_lock_init_recursive>
 8003a30:	f7ff ff96 	bl	8003960 <__sfp_lock_release>
 8003a34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a3c:	6025      	str	r5, [r4, #0]
 8003a3e:	61a5      	str	r5, [r4, #24]
 8003a40:	2208      	movs	r2, #8
 8003a42:	4629      	mov	r1, r5
 8003a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a48:	f7fe ffbc 	bl	80029c4 <memset>
 8003a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a54:	4620      	mov	r0, r4
 8003a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a58:	3468      	adds	r4, #104	; 0x68
 8003a5a:	e7d9      	b.n	8003a10 <__sfp+0x1c>
 8003a5c:	2104      	movs	r1, #4
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f7ff ff62 	bl	8003928 <__sfmoreglue>
 8003a64:	4604      	mov	r4, r0
 8003a66:	6030      	str	r0, [r6, #0]
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1d5      	bne.n	8003a18 <__sfp+0x24>
 8003a6c:	f7ff ff78 	bl	8003960 <__sfp_lock_release>
 8003a70:	230c      	movs	r3, #12
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	e7ee      	b.n	8003a54 <__sfp+0x60>
 8003a76:	bf00      	nop
 8003a78:	08004b44 	.word	0x08004b44
 8003a7c:	ffff0001 	.word	0xffff0001

08003a80 <_fwalk_reent>:
 8003a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a84:	4606      	mov	r6, r0
 8003a86:	4688      	mov	r8, r1
 8003a88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a8c:	2700      	movs	r7, #0
 8003a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a92:	f1b9 0901 	subs.w	r9, r9, #1
 8003a96:	d505      	bpl.n	8003aa4 <_fwalk_reent+0x24>
 8003a98:	6824      	ldr	r4, [r4, #0]
 8003a9a:	2c00      	cmp	r4, #0
 8003a9c:	d1f7      	bne.n	8003a8e <_fwalk_reent+0xe>
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aa4:	89ab      	ldrh	r3, [r5, #12]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d907      	bls.n	8003aba <_fwalk_reent+0x3a>
 8003aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	d003      	beq.n	8003aba <_fwalk_reent+0x3a>
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	47c0      	blx	r8
 8003ab8:	4307      	orrs	r7, r0
 8003aba:	3568      	adds	r5, #104	; 0x68
 8003abc:	e7e9      	b.n	8003a92 <_fwalk_reent+0x12>

08003abe <__retarget_lock_init_recursive>:
 8003abe:	4770      	bx	lr

08003ac0 <__retarget_lock_acquire_recursive>:
 8003ac0:	4770      	bx	lr

08003ac2 <__retarget_lock_release_recursive>:
 8003ac2:	4770      	bx	lr

08003ac4 <__swhatbuf_r>:
 8003ac4:	b570      	push	{r4, r5, r6, lr}
 8003ac6:	460e      	mov	r6, r1
 8003ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003acc:	2900      	cmp	r1, #0
 8003ace:	b096      	sub	sp, #88	; 0x58
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	da08      	bge.n	8003ae8 <__swhatbuf_r+0x24>
 8003ad6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	602a      	str	r2, [r5, #0]
 8003ade:	061a      	lsls	r2, r3, #24
 8003ae0:	d410      	bmi.n	8003b04 <__swhatbuf_r+0x40>
 8003ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae6:	e00e      	b.n	8003b06 <__swhatbuf_r+0x42>
 8003ae8:	466a      	mov	r2, sp
 8003aea:	f000 f95f 	bl	8003dac <_fstat_r>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	dbf1      	blt.n	8003ad6 <__swhatbuf_r+0x12>
 8003af2:	9a01      	ldr	r2, [sp, #4]
 8003af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003afc:	425a      	negs	r2, r3
 8003afe:	415a      	adcs	r2, r3
 8003b00:	602a      	str	r2, [r5, #0]
 8003b02:	e7ee      	b.n	8003ae2 <__swhatbuf_r+0x1e>
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	2000      	movs	r0, #0
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	b016      	add	sp, #88	; 0x58
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b10 <__smakebuf_r>:
 8003b10:	898b      	ldrh	r3, [r1, #12]
 8003b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b14:	079d      	lsls	r5, r3, #30
 8003b16:	4606      	mov	r6, r0
 8003b18:	460c      	mov	r4, r1
 8003b1a:	d507      	bpl.n	8003b2c <__smakebuf_r+0x1c>
 8003b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	6123      	str	r3, [r4, #16]
 8003b24:	2301      	movs	r3, #1
 8003b26:	6163      	str	r3, [r4, #20]
 8003b28:	b002      	add	sp, #8
 8003b2a:	bd70      	pop	{r4, r5, r6, pc}
 8003b2c:	ab01      	add	r3, sp, #4
 8003b2e:	466a      	mov	r2, sp
 8003b30:	f7ff ffc8 	bl	8003ac4 <__swhatbuf_r>
 8003b34:	9900      	ldr	r1, [sp, #0]
 8003b36:	4605      	mov	r5, r0
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f7ff f879 	bl	8002c30 <_malloc_r>
 8003b3e:	b948      	cbnz	r0, 8003b54 <__smakebuf_r+0x44>
 8003b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b44:	059a      	lsls	r2, r3, #22
 8003b46:	d4ef      	bmi.n	8003b28 <__smakebuf_r+0x18>
 8003b48:	f023 0303 	bic.w	r3, r3, #3
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	81a3      	strh	r3, [r4, #12]
 8003b52:	e7e3      	b.n	8003b1c <__smakebuf_r+0xc>
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <__smakebuf_r+0x7c>)
 8003b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	6020      	str	r0, [r4, #0]
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	81a3      	strh	r3, [r4, #12]
 8003b62:	9b00      	ldr	r3, [sp, #0]
 8003b64:	6163      	str	r3, [r4, #20]
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	6120      	str	r0, [r4, #16]
 8003b6a:	b15b      	cbz	r3, 8003b84 <__smakebuf_r+0x74>
 8003b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f92d 	bl	8003dd0 <_isatty_r>
 8003b76:	b128      	cbz	r0, 8003b84 <__smakebuf_r+0x74>
 8003b78:	89a3      	ldrh	r3, [r4, #12]
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	81a3      	strh	r3, [r4, #12]
 8003b84:	89a0      	ldrh	r0, [r4, #12]
 8003b86:	4305      	orrs	r5, r0
 8003b88:	81a5      	strh	r5, [r4, #12]
 8003b8a:	e7cd      	b.n	8003b28 <__smakebuf_r+0x18>
 8003b8c:	0800391d 	.word	0x0800391d

08003b90 <memcpy>:
 8003b90:	440a      	add	r2, r1
 8003b92:	4291      	cmp	r1, r2
 8003b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b98:	d100      	bne.n	8003b9c <memcpy+0xc>
 8003b9a:	4770      	bx	lr
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ba6:	4291      	cmp	r1, r2
 8003ba8:	d1f9      	bne.n	8003b9e <memcpy+0xe>
 8003baa:	bd10      	pop	{r4, pc}

08003bac <memmove>:
 8003bac:	4288      	cmp	r0, r1
 8003bae:	b510      	push	{r4, lr}
 8003bb0:	eb01 0402 	add.w	r4, r1, r2
 8003bb4:	d902      	bls.n	8003bbc <memmove+0x10>
 8003bb6:	4284      	cmp	r4, r0
 8003bb8:	4623      	mov	r3, r4
 8003bba:	d807      	bhi.n	8003bcc <memmove+0x20>
 8003bbc:	1e43      	subs	r3, r0, #1
 8003bbe:	42a1      	cmp	r1, r4
 8003bc0:	d008      	beq.n	8003bd4 <memmove+0x28>
 8003bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bca:	e7f8      	b.n	8003bbe <memmove+0x12>
 8003bcc:	4402      	add	r2, r0
 8003bce:	4601      	mov	r1, r0
 8003bd0:	428a      	cmp	r2, r1
 8003bd2:	d100      	bne.n	8003bd6 <memmove+0x2a>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bde:	e7f7      	b.n	8003bd0 <memmove+0x24>

08003be0 <__malloc_lock>:
 8003be0:	4801      	ldr	r0, [pc, #4]	; (8003be8 <__malloc_lock+0x8>)
 8003be2:	f7ff bf6d 	b.w	8003ac0 <__retarget_lock_acquire_recursive>
 8003be6:	bf00      	nop
 8003be8:	2000012c 	.word	0x2000012c

08003bec <__malloc_unlock>:
 8003bec:	4801      	ldr	r0, [pc, #4]	; (8003bf4 <__malloc_unlock+0x8>)
 8003bee:	f7ff bf68 	b.w	8003ac2 <__retarget_lock_release_recursive>
 8003bf2:	bf00      	nop
 8003bf4:	2000012c 	.word	0x2000012c

08003bf8 <_realloc_r>:
 8003bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfc:	4680      	mov	r8, r0
 8003bfe:	4614      	mov	r4, r2
 8003c00:	460e      	mov	r6, r1
 8003c02:	b921      	cbnz	r1, 8003c0e <_realloc_r+0x16>
 8003c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c08:	4611      	mov	r1, r2
 8003c0a:	f7ff b811 	b.w	8002c30 <_malloc_r>
 8003c0e:	b92a      	cbnz	r2, 8003c1c <_realloc_r+0x24>
 8003c10:	f7fe ffa4 	bl	8002b5c <_free_r>
 8003c14:	4625      	mov	r5, r4
 8003c16:	4628      	mov	r0, r5
 8003c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c1c:	f000 f8fa 	bl	8003e14 <_malloc_usable_size_r>
 8003c20:	4284      	cmp	r4, r0
 8003c22:	4607      	mov	r7, r0
 8003c24:	d802      	bhi.n	8003c2c <_realloc_r+0x34>
 8003c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c2a:	d812      	bhi.n	8003c52 <_realloc_r+0x5a>
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f7fe fffe 	bl	8002c30 <_malloc_r>
 8003c34:	4605      	mov	r5, r0
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d0ed      	beq.n	8003c16 <_realloc_r+0x1e>
 8003c3a:	42bc      	cmp	r4, r7
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	4631      	mov	r1, r6
 8003c40:	bf28      	it	cs
 8003c42:	463a      	movcs	r2, r7
 8003c44:	f7ff ffa4 	bl	8003b90 <memcpy>
 8003c48:	4631      	mov	r1, r6
 8003c4a:	4640      	mov	r0, r8
 8003c4c:	f7fe ff86 	bl	8002b5c <_free_r>
 8003c50:	e7e1      	b.n	8003c16 <_realloc_r+0x1e>
 8003c52:	4635      	mov	r5, r6
 8003c54:	e7df      	b.n	8003c16 <_realloc_r+0x1e>

08003c56 <_raise_r>:
 8003c56:	291f      	cmp	r1, #31
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	460d      	mov	r5, r1
 8003c5e:	d904      	bls.n	8003c6a <_raise_r+0x14>
 8003c60:	2316      	movs	r3, #22
 8003c62:	6003      	str	r3, [r0, #0]
 8003c64:	f04f 30ff 	mov.w	r0, #4294967295
 8003c68:	bd38      	pop	{r3, r4, r5, pc}
 8003c6a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c6c:	b112      	cbz	r2, 8003c74 <_raise_r+0x1e>
 8003c6e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c72:	b94b      	cbnz	r3, 8003c88 <_raise_r+0x32>
 8003c74:	4620      	mov	r0, r4
 8003c76:	f000 f831 	bl	8003cdc <_getpid_r>
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	4601      	mov	r1, r0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c84:	f000 b818 	b.w	8003cb8 <_kill_r>
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d00a      	beq.n	8003ca2 <_raise_r+0x4c>
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	d103      	bne.n	8003c98 <_raise_r+0x42>
 8003c90:	2316      	movs	r3, #22
 8003c92:	6003      	str	r3, [r0, #0]
 8003c94:	2001      	movs	r0, #1
 8003c96:	e7e7      	b.n	8003c68 <_raise_r+0x12>
 8003c98:	2400      	movs	r4, #0
 8003c9a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	4798      	blx	r3
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	e7e0      	b.n	8003c68 <_raise_r+0x12>
	...

08003ca8 <raise>:
 8003ca8:	4b02      	ldr	r3, [pc, #8]	; (8003cb4 <raise+0xc>)
 8003caa:	4601      	mov	r1, r0
 8003cac:	6818      	ldr	r0, [r3, #0]
 8003cae:	f7ff bfd2 	b.w	8003c56 <_raise_r>
 8003cb2:	bf00      	nop
 8003cb4:	20000004 	.word	0x20000004

08003cb8 <_kill_r>:
 8003cb8:	b538      	push	{r3, r4, r5, lr}
 8003cba:	4d07      	ldr	r5, [pc, #28]	; (8003cd8 <_kill_r+0x20>)
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	4608      	mov	r0, r1
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	602b      	str	r3, [r5, #0]
 8003cc6:	f7fe fd70 	bl	80027aa <_kill>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	d102      	bne.n	8003cd4 <_kill_r+0x1c>
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	b103      	cbz	r3, 8003cd4 <_kill_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000130 	.word	0x20000130

08003cdc <_getpid_r>:
 8003cdc:	f7fe bd5e 	b.w	800279c <_getpid>

08003ce0 <__sread>:
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ce8:	f000 f89c 	bl	8003e24 <_read_r>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	bfab      	itete	ge
 8003cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8003cf4:	181b      	addge	r3, r3, r0
 8003cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cfa:	bfac      	ite	ge
 8003cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cfe:	81a3      	strhlt	r3, [r4, #12]
 8003d00:	bd10      	pop	{r4, pc}

08003d02 <__swrite>:
 8003d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d06:	461f      	mov	r7, r3
 8003d08:	898b      	ldrh	r3, [r1, #12]
 8003d0a:	05db      	lsls	r3, r3, #23
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	4616      	mov	r6, r2
 8003d12:	d505      	bpl.n	8003d20 <__swrite+0x1e>
 8003d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f000 f868 	bl	8003df0 <_lseek_r>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	463b      	mov	r3, r7
 8003d30:	4628      	mov	r0, r5
 8003d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d36:	f000 b817 	b.w	8003d68 <_write_r>

08003d3a <__sseek>:
 8003d3a:	b510      	push	{r4, lr}
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d42:	f000 f855 	bl	8003df0 <_lseek_r>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	89a3      	ldrh	r3, [r4, #12]
 8003d4a:	bf15      	itete	ne
 8003d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d56:	81a3      	strheq	r3, [r4, #12]
 8003d58:	bf18      	it	ne
 8003d5a:	81a3      	strhne	r3, [r4, #12]
 8003d5c:	bd10      	pop	{r4, pc}

08003d5e <__sclose>:
 8003d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d62:	f000 b813 	b.w	8003d8c <_close_r>
	...

08003d68 <_write_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d07      	ldr	r5, [pc, #28]	; (8003d88 <_write_r+0x20>)
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	4608      	mov	r0, r1
 8003d70:	4611      	mov	r1, r2
 8003d72:	2200      	movs	r2, #0
 8003d74:	602a      	str	r2, [r5, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7fe fd4e 	bl	8002818 <_write>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d102      	bne.n	8003d86 <_write_r+0x1e>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	b103      	cbz	r3, 8003d86 <_write_r+0x1e>
 8003d84:	6023      	str	r3, [r4, #0]
 8003d86:	bd38      	pop	{r3, r4, r5, pc}
 8003d88:	20000130 	.word	0x20000130

08003d8c <_close_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4d06      	ldr	r5, [pc, #24]	; (8003da8 <_close_r+0x1c>)
 8003d90:	2300      	movs	r3, #0
 8003d92:	4604      	mov	r4, r0
 8003d94:	4608      	mov	r0, r1
 8003d96:	602b      	str	r3, [r5, #0]
 8003d98:	f7fe fd5a 	bl	8002850 <_close>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d102      	bne.n	8003da6 <_close_r+0x1a>
 8003da0:	682b      	ldr	r3, [r5, #0]
 8003da2:	b103      	cbz	r3, 8003da6 <_close_r+0x1a>
 8003da4:	6023      	str	r3, [r4, #0]
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	20000130 	.word	0x20000130

08003dac <_fstat_r>:
 8003dac:	b538      	push	{r3, r4, r5, lr}
 8003dae:	4d07      	ldr	r5, [pc, #28]	; (8003dcc <_fstat_r+0x20>)
 8003db0:	2300      	movs	r3, #0
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	f7fe fd54 	bl	8002866 <_fstat>
 8003dbe:	1c43      	adds	r3, r0, #1
 8003dc0:	d102      	bne.n	8003dc8 <_fstat_r+0x1c>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	b103      	cbz	r3, 8003dc8 <_fstat_r+0x1c>
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	bd38      	pop	{r3, r4, r5, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000130 	.word	0x20000130

08003dd0 <_isatty_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4d06      	ldr	r5, [pc, #24]	; (8003dec <_isatty_r+0x1c>)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	602b      	str	r3, [r5, #0]
 8003ddc:	f7fe fd52 	bl	8002884 <_isatty>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_isatty_r+0x1a>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_isatty_r+0x1a>
 8003de8:	6023      	str	r3, [r4, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000130 	.word	0x20000130

08003df0 <_lseek_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4d07      	ldr	r5, [pc, #28]	; (8003e10 <_lseek_r+0x20>)
 8003df4:	4604      	mov	r4, r0
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	602a      	str	r2, [r5, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fe fd4a 	bl	8002898 <_lseek>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_lseek_r+0x1e>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_lseek_r+0x1e>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000130 	.word	0x20000130

08003e14 <_malloc_usable_size_r>:
 8003e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e18:	1f18      	subs	r0, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfbc      	itt	lt
 8003e1e:	580b      	ldrlt	r3, [r1, r0]
 8003e20:	18c0      	addlt	r0, r0, r3
 8003e22:	4770      	bx	lr

08003e24 <_read_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_read_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fe fcd3 	bl	80027de <_read>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_read_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_read_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000130 	.word	0x20000130

08003e48 <cosf>:
 8003e48:	b507      	push	{r0, r1, r2, lr}
 8003e4a:	4a1a      	ldr	r2, [pc, #104]	; (8003eb4 <cosf+0x6c>)
 8003e4c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003e50:	4293      	cmp	r3, r2
 8003e52:	4601      	mov	r1, r0
 8003e54:	dc05      	bgt.n	8003e62 <cosf+0x1a>
 8003e56:	2100      	movs	r1, #0
 8003e58:	b003      	add	sp, #12
 8003e5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e5e:	f000 b9c3 	b.w	80041e8 <__kernel_cosf>
 8003e62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003e66:	db04      	blt.n	8003e72 <cosf+0x2a>
 8003e68:	f7fc fd4c 	bl	8000904 <__aeabi_fsub>
 8003e6c:	b003      	add	sp, #12
 8003e6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e72:	4669      	mov	r1, sp
 8003e74:	f000 f85a 	bl	8003f2c <__ieee754_rem_pio2f>
 8003e78:	f000 0203 	and.w	r2, r0, #3
 8003e7c:	2a01      	cmp	r2, #1
 8003e7e:	d007      	beq.n	8003e90 <cosf+0x48>
 8003e80:	2a02      	cmp	r2, #2
 8003e82:	d00c      	beq.n	8003e9e <cosf+0x56>
 8003e84:	b982      	cbnz	r2, 8003ea8 <cosf+0x60>
 8003e86:	9901      	ldr	r1, [sp, #4]
 8003e88:	9800      	ldr	r0, [sp, #0]
 8003e8a:	f000 f9ad 	bl	80041e8 <__kernel_cosf>
 8003e8e:	e7ed      	b.n	8003e6c <cosf+0x24>
 8003e90:	9901      	ldr	r1, [sp, #4]
 8003e92:	9800      	ldr	r0, [sp, #0]
 8003e94:	f000 fcda 	bl	800484c <__kernel_sinf>
 8003e98:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003e9c:	e7e6      	b.n	8003e6c <cosf+0x24>
 8003e9e:	9901      	ldr	r1, [sp, #4]
 8003ea0:	9800      	ldr	r0, [sp, #0]
 8003ea2:	f000 f9a1 	bl	80041e8 <__kernel_cosf>
 8003ea6:	e7f7      	b.n	8003e98 <cosf+0x50>
 8003ea8:	9901      	ldr	r1, [sp, #4]
 8003eaa:	9800      	ldr	r0, [sp, #0]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f000 fccd 	bl	800484c <__kernel_sinf>
 8003eb2:	e7db      	b.n	8003e6c <cosf+0x24>
 8003eb4:	3f490fd8 	.word	0x3f490fd8

08003eb8 <sinf>:
 8003eb8:	b507      	push	{r0, r1, r2, lr}
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <sinf+0x70>)
 8003ebc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	4601      	mov	r1, r0
 8003ec4:	dc06      	bgt.n	8003ed4 <sinf+0x1c>
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2100      	movs	r1, #0
 8003eca:	b003      	add	sp, #12
 8003ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ed0:	f000 bcbc 	b.w	800484c <__kernel_sinf>
 8003ed4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003ed8:	db04      	blt.n	8003ee4 <sinf+0x2c>
 8003eda:	f7fc fd13 	bl	8000904 <__aeabi_fsub>
 8003ede:	b003      	add	sp, #12
 8003ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ee4:	4669      	mov	r1, sp
 8003ee6:	f000 f821 	bl	8003f2c <__ieee754_rem_pio2f>
 8003eea:	f000 0003 	and.w	r0, r0, #3
 8003eee:	2801      	cmp	r0, #1
 8003ef0:	d008      	beq.n	8003f04 <sinf+0x4c>
 8003ef2:	2802      	cmp	r0, #2
 8003ef4:	d00b      	beq.n	8003f0e <sinf+0x56>
 8003ef6:	b990      	cbnz	r0, 8003f1e <sinf+0x66>
 8003ef8:	9901      	ldr	r1, [sp, #4]
 8003efa:	9800      	ldr	r0, [sp, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f000 fca5 	bl	800484c <__kernel_sinf>
 8003f02:	e7ec      	b.n	8003ede <sinf+0x26>
 8003f04:	9901      	ldr	r1, [sp, #4]
 8003f06:	9800      	ldr	r0, [sp, #0]
 8003f08:	f000 f96e 	bl	80041e8 <__kernel_cosf>
 8003f0c:	e7e7      	b.n	8003ede <sinf+0x26>
 8003f0e:	9901      	ldr	r1, [sp, #4]
 8003f10:	9800      	ldr	r0, [sp, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f000 fc9a 	bl	800484c <__kernel_sinf>
 8003f18:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003f1c:	e7df      	b.n	8003ede <sinf+0x26>
 8003f1e:	9901      	ldr	r1, [sp, #4]
 8003f20:	9800      	ldr	r0, [sp, #0]
 8003f22:	f000 f961 	bl	80041e8 <__kernel_cosf>
 8003f26:	e7f7      	b.n	8003f18 <sinf+0x60>
 8003f28:	3f490fd8 	.word	0x3f490fd8

08003f2c <__ieee754_rem_pio2f>:
 8003f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f30:	4aa0      	ldr	r2, [pc, #640]	; (80041b4 <__ieee754_rem_pio2f+0x288>)
 8003f32:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003f36:	4296      	cmp	r6, r2
 8003f38:	b087      	sub	sp, #28
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	4682      	mov	sl, r0
 8003f3e:	dc04      	bgt.n	8003f4a <__ieee754_rem_pio2f+0x1e>
 8003f40:	2300      	movs	r3, #0
 8003f42:	6008      	str	r0, [r1, #0]
 8003f44:	604b      	str	r3, [r1, #4]
 8003f46:	2500      	movs	r5, #0
 8003f48:	e01a      	b.n	8003f80 <__ieee754_rem_pio2f+0x54>
 8003f4a:	4a9b      	ldr	r2, [pc, #620]	; (80041b8 <__ieee754_rem_pio2f+0x28c>)
 8003f4c:	4296      	cmp	r6, r2
 8003f4e:	dc4b      	bgt.n	8003fe8 <__ieee754_rem_pio2f+0xbc>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	499a      	ldr	r1, [pc, #616]	; (80041bc <__ieee754_rem_pio2f+0x290>)
 8003f54:	4f9a      	ldr	r7, [pc, #616]	; (80041c0 <__ieee754_rem_pio2f+0x294>)
 8003f56:	f026 060f 	bic.w	r6, r6, #15
 8003f5a:	dd23      	ble.n	8003fa4 <__ieee754_rem_pio2f+0x78>
 8003f5c:	f7fc fcd2 	bl	8000904 <__aeabi_fsub>
 8003f60:	42be      	cmp	r6, r7
 8003f62:	4605      	mov	r5, r0
 8003f64:	d010      	beq.n	8003f88 <__ieee754_rem_pio2f+0x5c>
 8003f66:	4997      	ldr	r1, [pc, #604]	; (80041c4 <__ieee754_rem_pio2f+0x298>)
 8003f68:	f7fc fccc 	bl	8000904 <__aeabi_fsub>
 8003f6c:	4601      	mov	r1, r0
 8003f6e:	6020      	str	r0, [r4, #0]
 8003f70:	4628      	mov	r0, r5
 8003f72:	f7fc fcc7 	bl	8000904 <__aeabi_fsub>
 8003f76:	4993      	ldr	r1, [pc, #588]	; (80041c4 <__ieee754_rem_pio2f+0x298>)
 8003f78:	f7fc fcc4 	bl	8000904 <__aeabi_fsub>
 8003f7c:	2501      	movs	r5, #1
 8003f7e:	6060      	str	r0, [r4, #4]
 8003f80:	4628      	mov	r0, r5
 8003f82:	b007      	add	sp, #28
 8003f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f88:	498f      	ldr	r1, [pc, #572]	; (80041c8 <__ieee754_rem_pio2f+0x29c>)
 8003f8a:	f7fc fcbb 	bl	8000904 <__aeabi_fsub>
 8003f8e:	498f      	ldr	r1, [pc, #572]	; (80041cc <__ieee754_rem_pio2f+0x2a0>)
 8003f90:	4605      	mov	r5, r0
 8003f92:	f7fc fcb7 	bl	8000904 <__aeabi_fsub>
 8003f96:	4601      	mov	r1, r0
 8003f98:	6020      	str	r0, [r4, #0]
 8003f9a:	4628      	mov	r0, r5
 8003f9c:	f7fc fcb2 	bl	8000904 <__aeabi_fsub>
 8003fa0:	498a      	ldr	r1, [pc, #552]	; (80041cc <__ieee754_rem_pio2f+0x2a0>)
 8003fa2:	e7e9      	b.n	8003f78 <__ieee754_rem_pio2f+0x4c>
 8003fa4:	f7fc fcb0 	bl	8000908 <__addsf3>
 8003fa8:	42be      	cmp	r6, r7
 8003faa:	4605      	mov	r5, r0
 8003fac:	d00e      	beq.n	8003fcc <__ieee754_rem_pio2f+0xa0>
 8003fae:	4985      	ldr	r1, [pc, #532]	; (80041c4 <__ieee754_rem_pio2f+0x298>)
 8003fb0:	f7fc fcaa 	bl	8000908 <__addsf3>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	6020      	str	r0, [r4, #0]
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7fc fca3 	bl	8000904 <__aeabi_fsub>
 8003fbe:	4981      	ldr	r1, [pc, #516]	; (80041c4 <__ieee754_rem_pio2f+0x298>)
 8003fc0:	f7fc fca2 	bl	8000908 <__addsf3>
 8003fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fc8:	6060      	str	r0, [r4, #4]
 8003fca:	e7d9      	b.n	8003f80 <__ieee754_rem_pio2f+0x54>
 8003fcc:	497e      	ldr	r1, [pc, #504]	; (80041c8 <__ieee754_rem_pio2f+0x29c>)
 8003fce:	f7fc fc9b 	bl	8000908 <__addsf3>
 8003fd2:	497e      	ldr	r1, [pc, #504]	; (80041cc <__ieee754_rem_pio2f+0x2a0>)
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	f7fc fc97 	bl	8000908 <__addsf3>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	6020      	str	r0, [r4, #0]
 8003fde:	4628      	mov	r0, r5
 8003fe0:	f7fc fc90 	bl	8000904 <__aeabi_fsub>
 8003fe4:	4979      	ldr	r1, [pc, #484]	; (80041cc <__ieee754_rem_pio2f+0x2a0>)
 8003fe6:	e7eb      	b.n	8003fc0 <__ieee754_rem_pio2f+0x94>
 8003fe8:	4a79      	ldr	r2, [pc, #484]	; (80041d0 <__ieee754_rem_pio2f+0x2a4>)
 8003fea:	4296      	cmp	r6, r2
 8003fec:	f300 8091 	bgt.w	8004112 <__ieee754_rem_pio2f+0x1e6>
 8003ff0:	f000 fca2 	bl	8004938 <fabsf>
 8003ff4:	4977      	ldr	r1, [pc, #476]	; (80041d4 <__ieee754_rem_pio2f+0x2a8>)
 8003ff6:	4607      	mov	r7, r0
 8003ff8:	f7fc fd8e 	bl	8000b18 <__aeabi_fmul>
 8003ffc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004000:	f7fc fc82 	bl	8000908 <__addsf3>
 8004004:	f7fc ff4e 	bl	8000ea4 <__aeabi_f2iz>
 8004008:	4605      	mov	r5, r0
 800400a:	f7fc fd31 	bl	8000a70 <__aeabi_i2f>
 800400e:	496b      	ldr	r1, [pc, #428]	; (80041bc <__ieee754_rem_pio2f+0x290>)
 8004010:	4681      	mov	r9, r0
 8004012:	f7fc fd81 	bl	8000b18 <__aeabi_fmul>
 8004016:	4601      	mov	r1, r0
 8004018:	4638      	mov	r0, r7
 800401a:	f7fc fc73 	bl	8000904 <__aeabi_fsub>
 800401e:	4969      	ldr	r1, [pc, #420]	; (80041c4 <__ieee754_rem_pio2f+0x298>)
 8004020:	4680      	mov	r8, r0
 8004022:	4648      	mov	r0, r9
 8004024:	f7fc fd78 	bl	8000b18 <__aeabi_fmul>
 8004028:	2d1f      	cmp	r5, #31
 800402a:	4607      	mov	r7, r0
 800402c:	dc0c      	bgt.n	8004048 <__ieee754_rem_pio2f+0x11c>
 800402e:	4a6a      	ldr	r2, [pc, #424]	; (80041d8 <__ieee754_rem_pio2f+0x2ac>)
 8004030:	1e69      	subs	r1, r5, #1
 8004032:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8004036:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <__ieee754_rem_pio2f+0x11c>
 800403e:	4639      	mov	r1, r7
 8004040:	4640      	mov	r0, r8
 8004042:	f7fc fc5f 	bl	8000904 <__aeabi_fsub>
 8004046:	e00b      	b.n	8004060 <__ieee754_rem_pio2f+0x134>
 8004048:	4639      	mov	r1, r7
 800404a:	4640      	mov	r0, r8
 800404c:	f7fc fc5a 	bl	8000904 <__aeabi_fsub>
 8004050:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004054:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8004058:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800405c:	2e08      	cmp	r6, #8
 800405e:	dc01      	bgt.n	8004064 <__ieee754_rem_pio2f+0x138>
 8004060:	6020      	str	r0, [r4, #0]
 8004062:	e026      	b.n	80040b2 <__ieee754_rem_pio2f+0x186>
 8004064:	4958      	ldr	r1, [pc, #352]	; (80041c8 <__ieee754_rem_pio2f+0x29c>)
 8004066:	4648      	mov	r0, r9
 8004068:	f7fc fd56 	bl	8000b18 <__aeabi_fmul>
 800406c:	4607      	mov	r7, r0
 800406e:	4601      	mov	r1, r0
 8004070:	4640      	mov	r0, r8
 8004072:	f7fc fc47 	bl	8000904 <__aeabi_fsub>
 8004076:	4601      	mov	r1, r0
 8004078:	4606      	mov	r6, r0
 800407a:	4640      	mov	r0, r8
 800407c:	f7fc fc42 	bl	8000904 <__aeabi_fsub>
 8004080:	4639      	mov	r1, r7
 8004082:	f7fc fc3f 	bl	8000904 <__aeabi_fsub>
 8004086:	4951      	ldr	r1, [pc, #324]	; (80041cc <__ieee754_rem_pio2f+0x2a0>)
 8004088:	4607      	mov	r7, r0
 800408a:	4648      	mov	r0, r9
 800408c:	f7fc fd44 	bl	8000b18 <__aeabi_fmul>
 8004090:	4639      	mov	r1, r7
 8004092:	f7fc fc37 	bl	8000904 <__aeabi_fsub>
 8004096:	4601      	mov	r1, r0
 8004098:	4607      	mov	r7, r0
 800409a:	4630      	mov	r0, r6
 800409c:	f7fc fc32 	bl	8000904 <__aeabi_fsub>
 80040a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80040a4:	ebab 0b03 	sub.w	fp, fp, r3
 80040a8:	f1bb 0f19 	cmp.w	fp, #25
 80040ac:	dc16      	bgt.n	80040dc <__ieee754_rem_pio2f+0x1b0>
 80040ae:	6020      	str	r0, [r4, #0]
 80040b0:	46b0      	mov	r8, r6
 80040b2:	6826      	ldr	r6, [r4, #0]
 80040b4:	4640      	mov	r0, r8
 80040b6:	4631      	mov	r1, r6
 80040b8:	f7fc fc24 	bl	8000904 <__aeabi_fsub>
 80040bc:	4639      	mov	r1, r7
 80040be:	f7fc fc21 	bl	8000904 <__aeabi_fsub>
 80040c2:	f1ba 0f00 	cmp.w	sl, #0
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	f6bf af5a 	bge.w	8003f80 <__ieee754_rem_pio2f+0x54>
 80040cc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80040d0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80040d4:	6026      	str	r6, [r4, #0]
 80040d6:	6060      	str	r0, [r4, #4]
 80040d8:	426d      	negs	r5, r5
 80040da:	e751      	b.n	8003f80 <__ieee754_rem_pio2f+0x54>
 80040dc:	493f      	ldr	r1, [pc, #252]	; (80041dc <__ieee754_rem_pio2f+0x2b0>)
 80040de:	4648      	mov	r0, r9
 80040e0:	f7fc fd1a 	bl	8000b18 <__aeabi_fmul>
 80040e4:	4607      	mov	r7, r0
 80040e6:	4601      	mov	r1, r0
 80040e8:	4630      	mov	r0, r6
 80040ea:	f7fc fc0b 	bl	8000904 <__aeabi_fsub>
 80040ee:	4601      	mov	r1, r0
 80040f0:	4680      	mov	r8, r0
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7fc fc06 	bl	8000904 <__aeabi_fsub>
 80040f8:	4639      	mov	r1, r7
 80040fa:	f7fc fc03 	bl	8000904 <__aeabi_fsub>
 80040fe:	4938      	ldr	r1, [pc, #224]	; (80041e0 <__ieee754_rem_pio2f+0x2b4>)
 8004100:	4606      	mov	r6, r0
 8004102:	4648      	mov	r0, r9
 8004104:	f7fc fd08 	bl	8000b18 <__aeabi_fmul>
 8004108:	4631      	mov	r1, r6
 800410a:	f7fc fbfb 	bl	8000904 <__aeabi_fsub>
 800410e:	4607      	mov	r7, r0
 8004110:	e795      	b.n	800403e <__ieee754_rem_pio2f+0x112>
 8004112:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004116:	db05      	blt.n	8004124 <__ieee754_rem_pio2f+0x1f8>
 8004118:	4601      	mov	r1, r0
 800411a:	f7fc fbf3 	bl	8000904 <__aeabi_fsub>
 800411e:	6060      	str	r0, [r4, #4]
 8004120:	6020      	str	r0, [r4, #0]
 8004122:	e710      	b.n	8003f46 <__ieee754_rem_pio2f+0x1a>
 8004124:	15f7      	asrs	r7, r6, #23
 8004126:	3f86      	subs	r7, #134	; 0x86
 8004128:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800412c:	4630      	mov	r0, r6
 800412e:	f7fc feb9 	bl	8000ea4 <__aeabi_f2iz>
 8004132:	f7fc fc9d 	bl	8000a70 <__aeabi_i2f>
 8004136:	4601      	mov	r1, r0
 8004138:	9003      	str	r0, [sp, #12]
 800413a:	4630      	mov	r0, r6
 800413c:	f7fc fbe2 	bl	8000904 <__aeabi_fsub>
 8004140:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004144:	f7fc fce8 	bl	8000b18 <__aeabi_fmul>
 8004148:	4606      	mov	r6, r0
 800414a:	f7fc feab 	bl	8000ea4 <__aeabi_f2iz>
 800414e:	f7fc fc8f 	bl	8000a70 <__aeabi_i2f>
 8004152:	4601      	mov	r1, r0
 8004154:	9004      	str	r0, [sp, #16]
 8004156:	4605      	mov	r5, r0
 8004158:	4630      	mov	r0, r6
 800415a:	f7fc fbd3 	bl	8000904 <__aeabi_fsub>
 800415e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004162:	f7fc fcd9 	bl	8000b18 <__aeabi_fmul>
 8004166:	2100      	movs	r1, #0
 8004168:	9005      	str	r0, [sp, #20]
 800416a:	f7fc fe69 	bl	8000e40 <__aeabi_fcmpeq>
 800416e:	b1f0      	cbz	r0, 80041ae <__ieee754_rem_pio2f+0x282>
 8004170:	2100      	movs	r1, #0
 8004172:	4628      	mov	r0, r5
 8004174:	f7fc fe64 	bl	8000e40 <__aeabi_fcmpeq>
 8004178:	2800      	cmp	r0, #0
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2302      	moveq	r3, #2
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <__ieee754_rem_pio2f+0x2b8>)
 8004182:	9201      	str	r2, [sp, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	9200      	str	r2, [sp, #0]
 8004188:	4621      	mov	r1, r4
 800418a:	463a      	mov	r2, r7
 800418c:	a803      	add	r0, sp, #12
 800418e:	f000 f8ab 	bl	80042e8 <__kernel_rem_pio2f>
 8004192:	f1ba 0f00 	cmp.w	sl, #0
 8004196:	4605      	mov	r5, r0
 8004198:	f6bf aef2 	bge.w	8003f80 <__ieee754_rem_pio2f+0x54>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	6863      	ldr	r3, [r4, #4]
 80041a6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	e794      	b.n	80040d8 <__ieee754_rem_pio2f+0x1ac>
 80041ae:	2303      	movs	r3, #3
 80041b0:	e7e6      	b.n	8004180 <__ieee754_rem_pio2f+0x254>
 80041b2:	bf00      	nop
 80041b4:	3f490fd8 	.word	0x3f490fd8
 80041b8:	4016cbe3 	.word	0x4016cbe3
 80041bc:	3fc90f80 	.word	0x3fc90f80
 80041c0:	3fc90fd0 	.word	0x3fc90fd0
 80041c4:	37354443 	.word	0x37354443
 80041c8:	37354400 	.word	0x37354400
 80041cc:	2e85a308 	.word	0x2e85a308
 80041d0:	43490f80 	.word	0x43490f80
 80041d4:	3f22f984 	.word	0x3f22f984
 80041d8:	08004c8c 	.word	0x08004c8c
 80041dc:	2e85a300 	.word	0x2e85a300
 80041e0:	248d3132 	.word	0x248d3132
 80041e4:	08004d0c 	.word	0x08004d0c

080041e8 <__kernel_cosf>:
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80041f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80041f4:	4606      	mov	r6, r0
 80041f6:	4688      	mov	r8, r1
 80041f8:	da03      	bge.n	8004202 <__kernel_cosf+0x1a>
 80041fa:	f7fc fe53 	bl	8000ea4 <__aeabi_f2iz>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d05c      	beq.n	80042bc <__kernel_cosf+0xd4>
 8004202:	4631      	mov	r1, r6
 8004204:	4630      	mov	r0, r6
 8004206:	f7fc fc87 	bl	8000b18 <__aeabi_fmul>
 800420a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800420e:	4605      	mov	r5, r0
 8004210:	f7fc fc82 	bl	8000b18 <__aeabi_fmul>
 8004214:	492b      	ldr	r1, [pc, #172]	; (80042c4 <__kernel_cosf+0xdc>)
 8004216:	4607      	mov	r7, r0
 8004218:	4628      	mov	r0, r5
 800421a:	f7fc fc7d 	bl	8000b18 <__aeabi_fmul>
 800421e:	492a      	ldr	r1, [pc, #168]	; (80042c8 <__kernel_cosf+0xe0>)
 8004220:	f7fc fb72 	bl	8000908 <__addsf3>
 8004224:	4629      	mov	r1, r5
 8004226:	f7fc fc77 	bl	8000b18 <__aeabi_fmul>
 800422a:	4928      	ldr	r1, [pc, #160]	; (80042cc <__kernel_cosf+0xe4>)
 800422c:	f7fc fb6a 	bl	8000904 <__aeabi_fsub>
 8004230:	4629      	mov	r1, r5
 8004232:	f7fc fc71 	bl	8000b18 <__aeabi_fmul>
 8004236:	4926      	ldr	r1, [pc, #152]	; (80042d0 <__kernel_cosf+0xe8>)
 8004238:	f7fc fb66 	bl	8000908 <__addsf3>
 800423c:	4629      	mov	r1, r5
 800423e:	f7fc fc6b 	bl	8000b18 <__aeabi_fmul>
 8004242:	4924      	ldr	r1, [pc, #144]	; (80042d4 <__kernel_cosf+0xec>)
 8004244:	f7fc fb5e 	bl	8000904 <__aeabi_fsub>
 8004248:	4629      	mov	r1, r5
 800424a:	f7fc fc65 	bl	8000b18 <__aeabi_fmul>
 800424e:	4922      	ldr	r1, [pc, #136]	; (80042d8 <__kernel_cosf+0xf0>)
 8004250:	f7fc fb5a 	bl	8000908 <__addsf3>
 8004254:	4629      	mov	r1, r5
 8004256:	f7fc fc5f 	bl	8000b18 <__aeabi_fmul>
 800425a:	4629      	mov	r1, r5
 800425c:	f7fc fc5c 	bl	8000b18 <__aeabi_fmul>
 8004260:	4641      	mov	r1, r8
 8004262:	4605      	mov	r5, r0
 8004264:	4630      	mov	r0, r6
 8004266:	f7fc fc57 	bl	8000b18 <__aeabi_fmul>
 800426a:	4601      	mov	r1, r0
 800426c:	4628      	mov	r0, r5
 800426e:	f7fc fb49 	bl	8000904 <__aeabi_fsub>
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <__kernel_cosf+0xf4>)
 8004274:	429c      	cmp	r4, r3
 8004276:	4605      	mov	r5, r0
 8004278:	dc0a      	bgt.n	8004290 <__kernel_cosf+0xa8>
 800427a:	4601      	mov	r1, r0
 800427c:	4638      	mov	r0, r7
 800427e:	f7fc fb41 	bl	8000904 <__aeabi_fsub>
 8004282:	4601      	mov	r1, r0
 8004284:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004288:	f7fc fb3c 	bl	8000904 <__aeabi_fsub>
 800428c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <__kernel_cosf+0xf8>)
 8004292:	429c      	cmp	r4, r3
 8004294:	bfcc      	ite	gt
 8004296:	4c13      	ldrgt	r4, [pc, #76]	; (80042e4 <__kernel_cosf+0xfc>)
 8004298:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800429c:	4621      	mov	r1, r4
 800429e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042a2:	f7fc fb2f 	bl	8000904 <__aeabi_fsub>
 80042a6:	4621      	mov	r1, r4
 80042a8:	4606      	mov	r6, r0
 80042aa:	4638      	mov	r0, r7
 80042ac:	f7fc fb2a 	bl	8000904 <__aeabi_fsub>
 80042b0:	4629      	mov	r1, r5
 80042b2:	f7fc fb27 	bl	8000904 <__aeabi_fsub>
 80042b6:	4601      	mov	r1, r0
 80042b8:	4630      	mov	r0, r6
 80042ba:	e7e5      	b.n	8004288 <__kernel_cosf+0xa0>
 80042bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042c0:	e7e4      	b.n	800428c <__kernel_cosf+0xa4>
 80042c2:	bf00      	nop
 80042c4:	ad47d74e 	.word	0xad47d74e
 80042c8:	310f74f6 	.word	0x310f74f6
 80042cc:	3493f27c 	.word	0x3493f27c
 80042d0:	37d00d01 	.word	0x37d00d01
 80042d4:	3ab60b61 	.word	0x3ab60b61
 80042d8:	3d2aaaab 	.word	0x3d2aaaab
 80042dc:	3e999999 	.word	0x3e999999
 80042e0:	3f480000 	.word	0x3f480000
 80042e4:	3e900000 	.word	0x3e900000

080042e8 <__kernel_rem_pio2f>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	b0db      	sub	sp, #364	; 0x16c
 80042ee:	9202      	str	r2, [sp, #8]
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80042f4:	4bb2      	ldr	r3, [pc, #712]	; (80045c0 <__kernel_rem_pio2f+0x2d8>)
 80042f6:	9005      	str	r0, [sp, #20]
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	9100      	str	r1, [sp, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	9303      	str	r3, [sp, #12]
 8004306:	9b02      	ldr	r3, [sp, #8]
 8004308:	1d1a      	adds	r2, r3, #4
 800430a:	f2c0 809b 	blt.w	8004444 <__kernel_rem_pio2f+0x15c>
 800430e:	1edc      	subs	r4, r3, #3
 8004310:	bf48      	it	mi
 8004312:	1d1c      	addmi	r4, r3, #4
 8004314:	10e4      	asrs	r4, r4, #3
 8004316:	1c67      	adds	r7, r4, #1
 8004318:	00fb      	lsls	r3, r7, #3
 800431a:	9306      	str	r3, [sp, #24]
 800431c:	9b02      	ldr	r3, [sp, #8]
 800431e:	9a03      	ldr	r2, [sp, #12]
 8004320:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004324:	9b01      	ldr	r3, [sp, #4]
 8004326:	eb03 0902 	add.w	r9, r3, r2
 800432a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800432c:	eba4 0802 	sub.w	r8, r4, r2
 8004330:	ae1e      	add	r6, sp, #120	; 0x78
 8004332:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004336:	2500      	movs	r5, #0
 8004338:	f04f 0b00 	mov.w	fp, #0
 800433c:	454d      	cmp	r5, r9
 800433e:	f340 8083 	ble.w	8004448 <__kernel_rem_pio2f+0x160>
 8004342:	9a04      	ldr	r2, [sp, #16]
 8004344:	ab1e      	add	r3, sp, #120	; 0x78
 8004346:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800434a:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800434e:	f04f 0900 	mov.w	r9, #0
 8004352:	2300      	movs	r3, #0
 8004354:	9a01      	ldr	r2, [sp, #4]
 8004356:	4591      	cmp	r9, r2
 8004358:	f340 809e 	ble.w	8004498 <__kernel_rem_pio2f+0x1b0>
 800435c:	4613      	mov	r3, r2
 800435e:	aa0a      	add	r2, sp, #40	; 0x28
 8004360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004364:	9308      	str	r3, [sp, #32]
 8004366:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004368:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800436c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004370:	9307      	str	r3, [sp, #28]
 8004372:	ab5a      	add	r3, sp, #360	; 0x168
 8004374:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004378:	ac0a      	add	r4, sp, #40	; 0x28
 800437a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 800437e:	4626      	mov	r6, r4
 8004380:	46c3      	mov	fp, r8
 8004382:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8004386:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800438a:	f1bb 0f00 	cmp.w	fp, #0
 800438e:	f300 8088 	bgt.w	80044a2 <__kernel_rem_pio2f+0x1ba>
 8004392:	4639      	mov	r1, r7
 8004394:	4628      	mov	r0, r5
 8004396:	f000 fb15 	bl	80049c4 <scalbnf>
 800439a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800439e:	4605      	mov	r5, r0
 80043a0:	f7fc fbba 	bl	8000b18 <__aeabi_fmul>
 80043a4:	f000 facc 	bl	8004940 <floorf>
 80043a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80043ac:	f7fc fbb4 	bl	8000b18 <__aeabi_fmul>
 80043b0:	4601      	mov	r1, r0
 80043b2:	4628      	mov	r0, r5
 80043b4:	f7fc faa6 	bl	8000904 <__aeabi_fsub>
 80043b8:	4605      	mov	r5, r0
 80043ba:	f7fc fd73 	bl	8000ea4 <__aeabi_f2iz>
 80043be:	4606      	mov	r6, r0
 80043c0:	f7fc fb56 	bl	8000a70 <__aeabi_i2f>
 80043c4:	4601      	mov	r1, r0
 80043c6:	4628      	mov	r0, r5
 80043c8:	f7fc fa9c 	bl	8000904 <__aeabi_fsub>
 80043cc:	2f00      	cmp	r7, #0
 80043ce:	4681      	mov	r9, r0
 80043d0:	f340 8086 	ble.w	80044e0 <__kernel_rem_pio2f+0x1f8>
 80043d4:	f108 32ff 	add.w	r2, r8, #4294967295
 80043d8:	ab0a      	add	r3, sp, #40	; 0x28
 80043da:	f1c7 0108 	rsb	r1, r7, #8
 80043de:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80043e2:	fa45 f301 	asr.w	r3, r5, r1
 80043e6:	441e      	add	r6, r3
 80043e8:	408b      	lsls	r3, r1
 80043ea:	1aed      	subs	r5, r5, r3
 80043ec:	ab0a      	add	r3, sp, #40	; 0x28
 80043ee:	f1c7 0007 	rsb	r0, r7, #7
 80043f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80043f6:	4105      	asrs	r5, r0
 80043f8:	2d00      	cmp	r5, #0
 80043fa:	dd7f      	ble.n	80044fc <__kernel_rem_pio2f+0x214>
 80043fc:	2200      	movs	r2, #0
 80043fe:	3601      	adds	r6, #1
 8004400:	4692      	mov	sl, r2
 8004402:	4590      	cmp	r8, r2
 8004404:	f300 80b0 	bgt.w	8004568 <__kernel_rem_pio2f+0x280>
 8004408:	2f00      	cmp	r7, #0
 800440a:	dd05      	ble.n	8004418 <__kernel_rem_pio2f+0x130>
 800440c:	2f01      	cmp	r7, #1
 800440e:	f000 80bd 	beq.w	800458c <__kernel_rem_pio2f+0x2a4>
 8004412:	2f02      	cmp	r7, #2
 8004414:	f000 80c5 	beq.w	80045a2 <__kernel_rem_pio2f+0x2ba>
 8004418:	2d02      	cmp	r5, #2
 800441a:	d16f      	bne.n	80044fc <__kernel_rem_pio2f+0x214>
 800441c:	4649      	mov	r1, r9
 800441e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004422:	f7fc fa6f 	bl	8000904 <__aeabi_fsub>
 8004426:	4681      	mov	r9, r0
 8004428:	f1ba 0f00 	cmp.w	sl, #0
 800442c:	d066      	beq.n	80044fc <__kernel_rem_pio2f+0x214>
 800442e:	4639      	mov	r1, r7
 8004430:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004434:	f000 fac6 	bl	80049c4 <scalbnf>
 8004438:	4601      	mov	r1, r0
 800443a:	4648      	mov	r0, r9
 800443c:	f7fc fa62 	bl	8000904 <__aeabi_fsub>
 8004440:	4681      	mov	r9, r0
 8004442:	e05b      	b.n	80044fc <__kernel_rem_pio2f+0x214>
 8004444:	2400      	movs	r4, #0
 8004446:	e766      	b.n	8004316 <__kernel_rem_pio2f+0x2e>
 8004448:	eb18 0f05 	cmn.w	r8, r5
 800444c:	d407      	bmi.n	800445e <__kernel_rem_pio2f+0x176>
 800444e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004452:	f7fc fb0d 	bl	8000a70 <__aeabi_i2f>
 8004456:	f846 0b04 	str.w	r0, [r6], #4
 800445a:	3501      	adds	r5, #1
 800445c:	e76e      	b.n	800433c <__kernel_rem_pio2f+0x54>
 800445e:	4658      	mov	r0, fp
 8004460:	e7f9      	b.n	8004456 <__kernel_rem_pio2f+0x16e>
 8004462:	9307      	str	r3, [sp, #28]
 8004464:	9b05      	ldr	r3, [sp, #20]
 8004466:	f8da 1000 	ldr.w	r1, [sl]
 800446a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800446e:	f7fc fb53 	bl	8000b18 <__aeabi_fmul>
 8004472:	4601      	mov	r1, r0
 8004474:	4630      	mov	r0, r6
 8004476:	f7fc fa47 	bl	8000908 <__addsf3>
 800447a:	9b07      	ldr	r3, [sp, #28]
 800447c:	4606      	mov	r6, r0
 800447e:	f108 0801 	add.w	r8, r8, #1
 8004482:	9a03      	ldr	r2, [sp, #12]
 8004484:	4590      	cmp	r8, r2
 8004486:	f1aa 0a04 	sub.w	sl, sl, #4
 800448a:	ddea      	ble.n	8004462 <__kernel_rem_pio2f+0x17a>
 800448c:	f84b 6b04 	str.w	r6, [fp], #4
 8004490:	f109 0901 	add.w	r9, r9, #1
 8004494:	3504      	adds	r5, #4
 8004496:	e75d      	b.n	8004354 <__kernel_rem_pio2f+0x6c>
 8004498:	46aa      	mov	sl, r5
 800449a:	461e      	mov	r6, r3
 800449c:	f04f 0800 	mov.w	r8, #0
 80044a0:	e7ef      	b.n	8004482 <__kernel_rem_pio2f+0x19a>
 80044a2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80044a6:	4628      	mov	r0, r5
 80044a8:	f7fc fb36 	bl	8000b18 <__aeabi_fmul>
 80044ac:	f7fc fcfa 	bl	8000ea4 <__aeabi_f2iz>
 80044b0:	f7fc fade 	bl	8000a70 <__aeabi_i2f>
 80044b4:	4649      	mov	r1, r9
 80044b6:	9009      	str	r0, [sp, #36]	; 0x24
 80044b8:	f7fc fb2e 	bl	8000b18 <__aeabi_fmul>
 80044bc:	4601      	mov	r1, r0
 80044be:	4628      	mov	r0, r5
 80044c0:	f7fc fa20 	bl	8000904 <__aeabi_fsub>
 80044c4:	f7fc fcee 	bl	8000ea4 <__aeabi_f2iz>
 80044c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ce:	f846 0b04 	str.w	r0, [r6], #4
 80044d2:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fc fa16 	bl	8000908 <__addsf3>
 80044dc:	4605      	mov	r5, r0
 80044de:	e754      	b.n	800438a <__kernel_rem_pio2f+0xa2>
 80044e0:	d106      	bne.n	80044f0 <__kernel_rem_pio2f+0x208>
 80044e2:	f108 33ff 	add.w	r3, r8, #4294967295
 80044e6:	aa0a      	add	r2, sp, #40	; 0x28
 80044e8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80044ec:	11ed      	asrs	r5, r5, #7
 80044ee:	e783      	b.n	80043f8 <__kernel_rem_pio2f+0x110>
 80044f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80044f4:	f7fc fcc2 	bl	8000e7c <__aeabi_fcmpge>
 80044f8:	4605      	mov	r5, r0
 80044fa:	bb98      	cbnz	r0, 8004564 <__kernel_rem_pio2f+0x27c>
 80044fc:	2100      	movs	r1, #0
 80044fe:	4648      	mov	r0, r9
 8004500:	f7fc fc9e 	bl	8000e40 <__aeabi_fcmpeq>
 8004504:	2800      	cmp	r0, #0
 8004506:	f000 8098 	beq.w	800463a <__kernel_rem_pio2f+0x352>
 800450a:	f108 34ff 	add.w	r4, r8, #4294967295
 800450e:	4623      	mov	r3, r4
 8004510:	2200      	movs	r2, #0
 8004512:	9901      	ldr	r1, [sp, #4]
 8004514:	428b      	cmp	r3, r1
 8004516:	da4c      	bge.n	80045b2 <__kernel_rem_pio2f+0x2ca>
 8004518:	2a00      	cmp	r2, #0
 800451a:	d07a      	beq.n	8004612 <__kernel_rem_pio2f+0x32a>
 800451c:	ab0a      	add	r3, sp, #40	; 0x28
 800451e:	3f08      	subs	r7, #8
 8004520:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 8086 	beq.w	8004636 <__kernel_rem_pio2f+0x34e>
 800452a:	4639      	mov	r1, r7
 800452c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004530:	f000 fa48 	bl	80049c4 <scalbnf>
 8004534:	46a2      	mov	sl, r4
 8004536:	4681      	mov	r9, r0
 8004538:	af46      	add	r7, sp, #280	; 0x118
 800453a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800453e:	f1ba 0f00 	cmp.w	sl, #0
 8004542:	f280 80af 	bge.w	80046a4 <__kernel_rem_pio2f+0x3bc>
 8004546:	4627      	mov	r7, r4
 8004548:	2200      	movs	r2, #0
 800454a:	2f00      	cmp	r7, #0
 800454c:	f2c0 80d9 	blt.w	8004702 <__kernel_rem_pio2f+0x41a>
 8004550:	a946      	add	r1, sp, #280	; 0x118
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <__kernel_rem_pio2f+0x2dc>)
 8004554:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004558:	4690      	mov	r8, r2
 800455a:	f04f 0a00 	mov.w	sl, #0
 800455e:	eba4 0907 	sub.w	r9, r4, r7
 8004562:	e0c2      	b.n	80046ea <__kernel_rem_pio2f+0x402>
 8004564:	2502      	movs	r5, #2
 8004566:	e749      	b.n	80043fc <__kernel_rem_pio2f+0x114>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	f1ba 0f00 	cmp.w	sl, #0
 800456e:	d108      	bne.n	8004582 <__kernel_rem_pio2f+0x29a>
 8004570:	b11b      	cbz	r3, 800457a <__kernel_rem_pio2f+0x292>
 8004572:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	2301      	movs	r3, #1
 800457a:	3201      	adds	r2, #1
 800457c:	3404      	adds	r4, #4
 800457e:	469a      	mov	sl, r3
 8004580:	e73f      	b.n	8004402 <__kernel_rem_pio2f+0x11a>
 8004582:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	4653      	mov	r3, sl
 800458a:	e7f6      	b.n	800457a <__kernel_rem_pio2f+0x292>
 800458c:	f108 32ff 	add.w	r2, r8, #4294967295
 8004590:	ab0a      	add	r3, sp, #40	; 0x28
 8004592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800459a:	a90a      	add	r1, sp, #40	; 0x28
 800459c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045a0:	e73a      	b.n	8004418 <__kernel_rem_pio2f+0x130>
 80045a2:	f108 32ff 	add.w	r2, r8, #4294967295
 80045a6:	ab0a      	add	r3, sp, #40	; 0x28
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b0:	e7f3      	b.n	800459a <__kernel_rem_pio2f+0x2b2>
 80045b2:	a90a      	add	r1, sp, #40	; 0x28
 80045b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	430a      	orrs	r2, r1
 80045bc:	e7a9      	b.n	8004512 <__kernel_rem_pio2f+0x22a>
 80045be:	bf00      	nop
 80045c0:	08005050 	.word	0x08005050
 80045c4:	08005024 	.word	0x08005024
 80045c8:	3301      	adds	r3, #1
 80045ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80045ce:	2900      	cmp	r1, #0
 80045d0:	d0fa      	beq.n	80045c8 <__kernel_rem_pio2f+0x2e0>
 80045d2:	9a04      	ldr	r2, [sp, #16]
 80045d4:	eb08 0402 	add.w	r4, r8, r2
 80045d8:	aa1e      	add	r2, sp, #120	; 0x78
 80045da:	f108 0501 	add.w	r5, r8, #1
 80045de:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80045e2:	4498      	add	r8, r3
 80045e4:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80045e8:	45a8      	cmp	r8, r5
 80045ea:	f6ff aec2 	blt.w	8004372 <__kernel_rem_pio2f+0x8a>
 80045ee:	9b07      	ldr	r3, [sp, #28]
 80045f0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80045f4:	f7fc fa3c 	bl	8000a70 <__aeabi_i2f>
 80045f8:	46a3      	mov	fp, r4
 80045fa:	6020      	str	r0, [r4, #0]
 80045fc:	f04f 0a00 	mov.w	sl, #0
 8004600:	2600      	movs	r6, #0
 8004602:	9b03      	ldr	r3, [sp, #12]
 8004604:	459a      	cmp	sl, r3
 8004606:	dd07      	ble.n	8004618 <__kernel_rem_pio2f+0x330>
 8004608:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800460c:	3404      	adds	r4, #4
 800460e:	3501      	adds	r5, #1
 8004610:	e7ea      	b.n	80045e8 <__kernel_rem_pio2f+0x300>
 8004612:	9a08      	ldr	r2, [sp, #32]
 8004614:	2301      	movs	r3, #1
 8004616:	e7d8      	b.n	80045ca <__kernel_rem_pio2f+0x2e2>
 8004618:	9b05      	ldr	r3, [sp, #20]
 800461a:	f85b 0904 	ldr.w	r0, [fp], #-4
 800461e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8004622:	f7fc fa79 	bl	8000b18 <__aeabi_fmul>
 8004626:	4601      	mov	r1, r0
 8004628:	4630      	mov	r0, r6
 800462a:	f7fc f96d 	bl	8000908 <__addsf3>
 800462e:	f10a 0a01 	add.w	sl, sl, #1
 8004632:	4606      	mov	r6, r0
 8004634:	e7e5      	b.n	8004602 <__kernel_rem_pio2f+0x31a>
 8004636:	3c01      	subs	r4, #1
 8004638:	e770      	b.n	800451c <__kernel_rem_pio2f+0x234>
 800463a:	9b06      	ldr	r3, [sp, #24]
 800463c:	9a02      	ldr	r2, [sp, #8]
 800463e:	4648      	mov	r0, r9
 8004640:	1a99      	subs	r1, r3, r2
 8004642:	f000 f9bf 	bl	80049c4 <scalbnf>
 8004646:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800464a:	4604      	mov	r4, r0
 800464c:	f7fc fc16 	bl	8000e7c <__aeabi_fcmpge>
 8004650:	b300      	cbz	r0, 8004694 <__kernel_rem_pio2f+0x3ac>
 8004652:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004656:	4620      	mov	r0, r4
 8004658:	f7fc fa5e 	bl	8000b18 <__aeabi_fmul>
 800465c:	f7fc fc22 	bl	8000ea4 <__aeabi_f2iz>
 8004660:	f7fc fa06 	bl	8000a70 <__aeabi_i2f>
 8004664:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004668:	4681      	mov	r9, r0
 800466a:	f7fc fa55 	bl	8000b18 <__aeabi_fmul>
 800466e:	4601      	mov	r1, r0
 8004670:	4620      	mov	r0, r4
 8004672:	f7fc f947 	bl	8000904 <__aeabi_fsub>
 8004676:	f7fc fc15 	bl	8000ea4 <__aeabi_f2iz>
 800467a:	ab0a      	add	r3, sp, #40	; 0x28
 800467c:	f108 0401 	add.w	r4, r8, #1
 8004680:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004684:	4648      	mov	r0, r9
 8004686:	f7fc fc0d 	bl	8000ea4 <__aeabi_f2iz>
 800468a:	ab0a      	add	r3, sp, #40	; 0x28
 800468c:	3708      	adds	r7, #8
 800468e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004692:	e74a      	b.n	800452a <__kernel_rem_pio2f+0x242>
 8004694:	4620      	mov	r0, r4
 8004696:	f7fc fc05 	bl	8000ea4 <__aeabi_f2iz>
 800469a:	ab0a      	add	r3, sp, #40	; 0x28
 800469c:	4644      	mov	r4, r8
 800469e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80046a2:	e742      	b.n	800452a <__kernel_rem_pio2f+0x242>
 80046a4:	ab0a      	add	r3, sp, #40	; 0x28
 80046a6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80046aa:	f7fc f9e1 	bl	8000a70 <__aeabi_i2f>
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fc fa32 	bl	8000b18 <__aeabi_fmul>
 80046b4:	4641      	mov	r1, r8
 80046b6:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 80046ba:	4648      	mov	r0, r9
 80046bc:	f7fc fa2c 	bl	8000b18 <__aeabi_fmul>
 80046c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046c4:	4681      	mov	r9, r0
 80046c6:	e73a      	b.n	800453e <__kernel_rem_pio2f+0x256>
 80046c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80046cc:	f85b 1b04 	ldr.w	r1, [fp], #4
 80046d0:	9203      	str	r2, [sp, #12]
 80046d2:	9302      	str	r3, [sp, #8]
 80046d4:	f7fc fa20 	bl	8000b18 <__aeabi_fmul>
 80046d8:	4601      	mov	r1, r0
 80046da:	4640      	mov	r0, r8
 80046dc:	f7fc f914 	bl	8000908 <__addsf3>
 80046e0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80046e4:	4680      	mov	r8, r0
 80046e6:	f10a 0a01 	add.w	sl, sl, #1
 80046ea:	9901      	ldr	r1, [sp, #4]
 80046ec:	458a      	cmp	sl, r1
 80046ee:	dc01      	bgt.n	80046f4 <__kernel_rem_pio2f+0x40c>
 80046f0:	45ca      	cmp	sl, r9
 80046f2:	dde9      	ble.n	80046c8 <__kernel_rem_pio2f+0x3e0>
 80046f4:	ab5a      	add	r3, sp, #360	; 0x168
 80046f6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80046fa:	3f01      	subs	r7, #1
 80046fc:	f849 8ca0 	str.w	r8, [r9, #-160]
 8004700:	e723      	b.n	800454a <__kernel_rem_pio2f+0x262>
 8004702:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8004704:	2b02      	cmp	r3, #2
 8004706:	dc07      	bgt.n	8004718 <__kernel_rem_pio2f+0x430>
 8004708:	2b00      	cmp	r3, #0
 800470a:	dc4d      	bgt.n	80047a8 <__kernel_rem_pio2f+0x4c0>
 800470c:	d02e      	beq.n	800476c <__kernel_rem_pio2f+0x484>
 800470e:	f006 0007 	and.w	r0, r6, #7
 8004712:	b05b      	add	sp, #364	; 0x16c
 8004714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004718:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800471a:	2b03      	cmp	r3, #3
 800471c:	d1f7      	bne.n	800470e <__kernel_rem_pio2f+0x426>
 800471e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8004722:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8004726:	46b8      	mov	r8, r7
 8004728:	46a2      	mov	sl, r4
 800472a:	f1ba 0f00 	cmp.w	sl, #0
 800472e:	dc48      	bgt.n	80047c2 <__kernel_rem_pio2f+0x4da>
 8004730:	46a1      	mov	r9, r4
 8004732:	f1b9 0f01 	cmp.w	r9, #1
 8004736:	dc5f      	bgt.n	80047f8 <__kernel_rem_pio2f+0x510>
 8004738:	2000      	movs	r0, #0
 800473a:	2c01      	cmp	r4, #1
 800473c:	dc75      	bgt.n	800482a <__kernel_rem_pio2f+0x542>
 800473e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8004740:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8004742:	2d00      	cmp	r5, #0
 8004744:	d177      	bne.n	8004836 <__kernel_rem_pio2f+0x54e>
 8004746:	9900      	ldr	r1, [sp, #0]
 8004748:	600a      	str	r2, [r1, #0]
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	460a      	mov	r2, r1
 800474e:	6090      	str	r0, [r2, #8]
 8004750:	e7dd      	b.n	800470e <__kernel_rem_pio2f+0x426>
 8004752:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004756:	f7fc f8d7 	bl	8000908 <__addsf3>
 800475a:	3c01      	subs	r4, #1
 800475c:	2c00      	cmp	r4, #0
 800475e:	daf8      	bge.n	8004752 <__kernel_rem_pio2f+0x46a>
 8004760:	b10d      	cbz	r5, 8004766 <__kernel_rem_pio2f+0x47e>
 8004762:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	6018      	str	r0, [r3, #0]
 800476a:	e7d0      	b.n	800470e <__kernel_rem_pio2f+0x426>
 800476c:	2000      	movs	r0, #0
 800476e:	af32      	add	r7, sp, #200	; 0xc8
 8004770:	e7f4      	b.n	800475c <__kernel_rem_pio2f+0x474>
 8004772:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8004776:	f7fc f8c7 	bl	8000908 <__addsf3>
 800477a:	3f01      	subs	r7, #1
 800477c:	2f00      	cmp	r7, #0
 800477e:	daf8      	bge.n	8004772 <__kernel_rem_pio2f+0x48a>
 8004780:	b1bd      	cbz	r5, 80047b2 <__kernel_rem_pio2f+0x4ca>
 8004782:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8004786:	9a00      	ldr	r2, [sp, #0]
 8004788:	4601      	mov	r1, r0
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800478e:	f7fc f8b9 	bl	8000904 <__aeabi_fsub>
 8004792:	2701      	movs	r7, #1
 8004794:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004798:	42bc      	cmp	r4, r7
 800479a:	da0c      	bge.n	80047b6 <__kernel_rem_pio2f+0x4ce>
 800479c:	b10d      	cbz	r5, 80047a2 <__kernel_rem_pio2f+0x4ba>
 800479e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80047a2:	9b00      	ldr	r3, [sp, #0]
 80047a4:	6058      	str	r0, [r3, #4]
 80047a6:	e7b2      	b.n	800470e <__kernel_rem_pio2f+0x426>
 80047a8:	4627      	mov	r7, r4
 80047aa:	2000      	movs	r0, #0
 80047ac:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80047b0:	e7e4      	b.n	800477c <__kernel_rem_pio2f+0x494>
 80047b2:	4603      	mov	r3, r0
 80047b4:	e7e7      	b.n	8004786 <__kernel_rem_pio2f+0x49e>
 80047b6:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80047ba:	f7fc f8a5 	bl	8000908 <__addsf3>
 80047be:	3701      	adds	r7, #1
 80047c0:	e7ea      	b.n	8004798 <__kernel_rem_pio2f+0x4b0>
 80047c2:	f8d8 3000 	ldr.w	r3, [r8]
 80047c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	9201      	str	r2, [sp, #4]
 80047d2:	f7fc f899 	bl	8000908 <__addsf3>
 80047d6:	9a01      	ldr	r2, [sp, #4]
 80047d8:	4601      	mov	r1, r0
 80047da:	4681      	mov	r9, r0
 80047dc:	4610      	mov	r0, r2
 80047de:	f7fc f891 	bl	8000904 <__aeabi_fsub>
 80047e2:	9b02      	ldr	r3, [sp, #8]
 80047e4:	4619      	mov	r1, r3
 80047e6:	f7fc f88f 	bl	8000908 <__addsf3>
 80047ea:	f848 0904 	str.w	r0, [r8], #-4
 80047ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047f2:	f8c8 9000 	str.w	r9, [r8]
 80047f6:	e798      	b.n	800472a <__kernel_rem_pio2f+0x442>
 80047f8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80047fc:	f8d7 a000 	ldr.w	sl, [r7]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	4651      	mov	r1, sl
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc f87f 	bl	8000908 <__addsf3>
 800480a:	9b01      	ldr	r3, [sp, #4]
 800480c:	4601      	mov	r1, r0
 800480e:	4680      	mov	r8, r0
 8004810:	4618      	mov	r0, r3
 8004812:	f7fc f877 	bl	8000904 <__aeabi_fsub>
 8004816:	4651      	mov	r1, sl
 8004818:	f7fc f876 	bl	8000908 <__addsf3>
 800481c:	f847 0904 	str.w	r0, [r7], #-4
 8004820:	f109 39ff 	add.w	r9, r9, #4294967295
 8004824:	f8c7 8000 	str.w	r8, [r7]
 8004828:	e783      	b.n	8004732 <__kernel_rem_pio2f+0x44a>
 800482a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800482e:	f7fc f86b 	bl	8000908 <__addsf3>
 8004832:	3c01      	subs	r4, #1
 8004834:	e781      	b.n	800473a <__kernel_rem_pio2f+0x452>
 8004836:	9900      	ldr	r1, [sp, #0]
 8004838:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800483c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004840:	600a      	str	r2, [r1, #0]
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	460a      	mov	r2, r1
 8004846:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800484a:	e780      	b.n	800474e <__kernel_rem_pio2f+0x466>

0800484c <__kernel_sinf>:
 800484c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004850:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004854:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004858:	4604      	mov	r4, r0
 800485a:	460f      	mov	r7, r1
 800485c:	4691      	mov	r9, r2
 800485e:	da03      	bge.n	8004868 <__kernel_sinf+0x1c>
 8004860:	f7fc fb20 	bl	8000ea4 <__aeabi_f2iz>
 8004864:	2800      	cmp	r0, #0
 8004866:	d035      	beq.n	80048d4 <__kernel_sinf+0x88>
 8004868:	4621      	mov	r1, r4
 800486a:	4620      	mov	r0, r4
 800486c:	f7fc f954 	bl	8000b18 <__aeabi_fmul>
 8004870:	4605      	mov	r5, r0
 8004872:	4601      	mov	r1, r0
 8004874:	4620      	mov	r0, r4
 8004876:	f7fc f94f 	bl	8000b18 <__aeabi_fmul>
 800487a:	4929      	ldr	r1, [pc, #164]	; (8004920 <__kernel_sinf+0xd4>)
 800487c:	4606      	mov	r6, r0
 800487e:	4628      	mov	r0, r5
 8004880:	f7fc f94a 	bl	8000b18 <__aeabi_fmul>
 8004884:	4927      	ldr	r1, [pc, #156]	; (8004924 <__kernel_sinf+0xd8>)
 8004886:	f7fc f83d 	bl	8000904 <__aeabi_fsub>
 800488a:	4629      	mov	r1, r5
 800488c:	f7fc f944 	bl	8000b18 <__aeabi_fmul>
 8004890:	4925      	ldr	r1, [pc, #148]	; (8004928 <__kernel_sinf+0xdc>)
 8004892:	f7fc f839 	bl	8000908 <__addsf3>
 8004896:	4629      	mov	r1, r5
 8004898:	f7fc f93e 	bl	8000b18 <__aeabi_fmul>
 800489c:	4923      	ldr	r1, [pc, #140]	; (800492c <__kernel_sinf+0xe0>)
 800489e:	f7fc f831 	bl	8000904 <__aeabi_fsub>
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fc f938 	bl	8000b18 <__aeabi_fmul>
 80048a8:	4921      	ldr	r1, [pc, #132]	; (8004930 <__kernel_sinf+0xe4>)
 80048aa:	f7fc f82d 	bl	8000908 <__addsf3>
 80048ae:	4680      	mov	r8, r0
 80048b0:	f1b9 0f00 	cmp.w	r9, #0
 80048b4:	d111      	bne.n	80048da <__kernel_sinf+0x8e>
 80048b6:	4601      	mov	r1, r0
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7fc f92d 	bl	8000b18 <__aeabi_fmul>
 80048be:	491d      	ldr	r1, [pc, #116]	; (8004934 <__kernel_sinf+0xe8>)
 80048c0:	f7fc f820 	bl	8000904 <__aeabi_fsub>
 80048c4:	4631      	mov	r1, r6
 80048c6:	f7fc f927 	bl	8000b18 <__aeabi_fmul>
 80048ca:	4601      	mov	r1, r0
 80048cc:	4620      	mov	r0, r4
 80048ce:	f7fc f81b 	bl	8000908 <__addsf3>
 80048d2:	4604      	mov	r4, r0
 80048d4:	4620      	mov	r0, r4
 80048d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80048de:	4638      	mov	r0, r7
 80048e0:	f7fc f91a 	bl	8000b18 <__aeabi_fmul>
 80048e4:	4641      	mov	r1, r8
 80048e6:	4681      	mov	r9, r0
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7fc f915 	bl	8000b18 <__aeabi_fmul>
 80048ee:	4601      	mov	r1, r0
 80048f0:	4648      	mov	r0, r9
 80048f2:	f7fc f807 	bl	8000904 <__aeabi_fsub>
 80048f6:	4629      	mov	r1, r5
 80048f8:	f7fc f90e 	bl	8000b18 <__aeabi_fmul>
 80048fc:	4639      	mov	r1, r7
 80048fe:	f7fc f801 	bl	8000904 <__aeabi_fsub>
 8004902:	490c      	ldr	r1, [pc, #48]	; (8004934 <__kernel_sinf+0xe8>)
 8004904:	4605      	mov	r5, r0
 8004906:	4630      	mov	r0, r6
 8004908:	f7fc f906 	bl	8000b18 <__aeabi_fmul>
 800490c:	4601      	mov	r1, r0
 800490e:	4628      	mov	r0, r5
 8004910:	f7fb fffa 	bl	8000908 <__addsf3>
 8004914:	4601      	mov	r1, r0
 8004916:	4620      	mov	r0, r4
 8004918:	f7fb fff4 	bl	8000904 <__aeabi_fsub>
 800491c:	e7d9      	b.n	80048d2 <__kernel_sinf+0x86>
 800491e:	bf00      	nop
 8004920:	2f2ec9d3 	.word	0x2f2ec9d3
 8004924:	32d72f34 	.word	0x32d72f34
 8004928:	3638ef1b 	.word	0x3638ef1b
 800492c:	39500d01 	.word	0x39500d01
 8004930:	3c088889 	.word	0x3c088889
 8004934:	3e2aaaab 	.word	0x3e2aaaab

08004938 <fabsf>:
 8004938:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800493c:	4770      	bx	lr
	...

08004940 <floorf>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004946:	3d7f      	subs	r5, #127	; 0x7f
 8004948:	2d16      	cmp	r5, #22
 800494a:	4601      	mov	r1, r0
 800494c:	4604      	mov	r4, r0
 800494e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004952:	dc26      	bgt.n	80049a2 <floorf+0x62>
 8004954:	2d00      	cmp	r5, #0
 8004956:	da0e      	bge.n	8004976 <floorf+0x36>
 8004958:	4917      	ldr	r1, [pc, #92]	; (80049b8 <floorf+0x78>)
 800495a:	f7fb ffd5 	bl	8000908 <__addsf3>
 800495e:	2100      	movs	r1, #0
 8004960:	f7fc fa96 	bl	8000e90 <__aeabi_fcmpgt>
 8004964:	b128      	cbz	r0, 8004972 <floorf+0x32>
 8004966:	2c00      	cmp	r4, #0
 8004968:	da23      	bge.n	80049b2 <floorf+0x72>
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <floorf+0x7c>)
 800496c:	2e00      	cmp	r6, #0
 800496e:	bf18      	it	ne
 8004970:	461c      	movne	r4, r3
 8004972:	4621      	mov	r1, r4
 8004974:	e01b      	b.n	80049ae <floorf+0x6e>
 8004976:	4e12      	ldr	r6, [pc, #72]	; (80049c0 <floorf+0x80>)
 8004978:	412e      	asrs	r6, r5
 800497a:	4230      	tst	r0, r6
 800497c:	d017      	beq.n	80049ae <floorf+0x6e>
 800497e:	490e      	ldr	r1, [pc, #56]	; (80049b8 <floorf+0x78>)
 8004980:	f7fb ffc2 	bl	8000908 <__addsf3>
 8004984:	2100      	movs	r1, #0
 8004986:	f7fc fa83 	bl	8000e90 <__aeabi_fcmpgt>
 800498a:	2800      	cmp	r0, #0
 800498c:	d0f1      	beq.n	8004972 <floorf+0x32>
 800498e:	2c00      	cmp	r4, #0
 8004990:	bfbe      	ittt	lt
 8004992:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8004996:	fa43 f505 	asrlt.w	r5, r3, r5
 800499a:	1964      	addlt	r4, r4, r5
 800499c:	ea24 0406 	bic.w	r4, r4, r6
 80049a0:	e7e7      	b.n	8004972 <floorf+0x32>
 80049a2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80049a6:	d302      	bcc.n	80049ae <floorf+0x6e>
 80049a8:	f7fb ffae 	bl	8000908 <__addsf3>
 80049ac:	4601      	mov	r1, r0
 80049ae:	4608      	mov	r0, r1
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
 80049b2:	2400      	movs	r4, #0
 80049b4:	e7dd      	b.n	8004972 <floorf+0x32>
 80049b6:	bf00      	nop
 80049b8:	7149f2ca 	.word	0x7149f2ca
 80049bc:	bf800000 	.word	0xbf800000
 80049c0:	007fffff 	.word	0x007fffff

080049c4 <scalbnf>:
 80049c4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4603      	mov	r3, r0
 80049cc:	460d      	mov	r5, r1
 80049ce:	4604      	mov	r4, r0
 80049d0:	d02a      	beq.n	8004a28 <scalbnf+0x64>
 80049d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80049d6:	d304      	bcc.n	80049e2 <scalbnf+0x1e>
 80049d8:	4601      	mov	r1, r0
 80049da:	f7fb ff95 	bl	8000908 <__addsf3>
 80049de:	4603      	mov	r3, r0
 80049e0:	e022      	b.n	8004a28 <scalbnf+0x64>
 80049e2:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 80049e6:	d117      	bne.n	8004a18 <scalbnf+0x54>
 80049e8:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 80049ec:	f7fc f894 	bl	8000b18 <__aeabi_fmul>
 80049f0:	4a17      	ldr	r2, [pc, #92]	; (8004a50 <scalbnf+0x8c>)
 80049f2:	4295      	cmp	r5, r2
 80049f4:	4603      	mov	r3, r0
 80049f6:	db0b      	blt.n	8004a10 <scalbnf+0x4c>
 80049f8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80049fc:	4604      	mov	r4, r0
 80049fe:	3a19      	subs	r2, #25
 8004a00:	442a      	add	r2, r5
 8004a02:	2afe      	cmp	r2, #254	; 0xfe
 8004a04:	dd0a      	ble.n	8004a1c <scalbnf+0x58>
 8004a06:	4913      	ldr	r1, [pc, #76]	; (8004a54 <scalbnf+0x90>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f361 001e 	bfi	r0, r1, #0, #31
 8004a0e:	e000      	b.n	8004a12 <scalbnf+0x4e>
 8004a10:	4911      	ldr	r1, [pc, #68]	; (8004a58 <scalbnf+0x94>)
 8004a12:	f7fc f881 	bl	8000b18 <__aeabi_fmul>
 8004a16:	e7e2      	b.n	80049de <scalbnf+0x1a>
 8004a18:	0dd2      	lsrs	r2, r2, #23
 8004a1a:	e7f1      	b.n	8004a00 <scalbnf+0x3c>
 8004a1c:	2a00      	cmp	r2, #0
 8004a1e:	dd05      	ble.n	8004a2c <scalbnf+0x68>
 8004a20:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8004a24:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8004a28:	4618      	mov	r0, r3
 8004a2a:	bd38      	pop	{r3, r4, r5, pc}
 8004a2c:	f112 0f16 	cmn.w	r2, #22
 8004a30:	da05      	bge.n	8004a3e <scalbnf+0x7a>
 8004a32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004a36:	4295      	cmp	r5, r2
 8004a38:	dce5      	bgt.n	8004a06 <scalbnf+0x42>
 8004a3a:	4907      	ldr	r1, [pc, #28]	; (8004a58 <scalbnf+0x94>)
 8004a3c:	e7e4      	b.n	8004a08 <scalbnf+0x44>
 8004a3e:	3219      	adds	r2, #25
 8004a40:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004a44:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004a48:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8004a4c:	e7e1      	b.n	8004a12 <scalbnf+0x4e>
 8004a4e:	bf00      	nop
 8004a50:	ffff3cb0 	.word	0xffff3cb0
 8004a54:	7149f2ca 	.word	0x7149f2ca
 8004a58:	0da24260 	.word	0x0da24260

08004a5c <_init>:
 8004a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5e:	bf00      	nop
 8004a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a62:	bc08      	pop	{r3}
 8004a64:	469e      	mov	lr, r3
 8004a66:	4770      	bx	lr

08004a68 <_fini>:
 8004a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6a:	bf00      	nop
 8004a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6e:	bc08      	pop	{r3}
 8004a70:	469e      	mov	lr, r3
 8004a72:	4770      	bx	lr
