
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004924  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08004ac4  08004ac4  00014ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800506c  0800506c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800506c  0800506c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800506c  0800506c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  080050dc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080050dc  00020134  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003fe1  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d30  00000000  00000000  00024073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00024da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00025100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003efa  00000000  00000000  000253c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003edc  00000000  00000000  000292ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c60d  00000000  00000000  0002d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000397a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b80  00000000  00000000  000397f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004aac 	.word	0x08004aac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004aac 	.word	0x08004aac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_frsub>:
 80008fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000900:	e002      	b.n	8000908 <__addsf3>
 8000902:	bf00      	nop

08000904 <__aeabi_fsub>:
 8000904:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000908 <__addsf3>:
 8000908:	0042      	lsls	r2, r0, #1
 800090a:	bf1f      	itttt	ne
 800090c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000910:	ea92 0f03 	teqne	r2, r3
 8000914:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000918:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800091c:	d06a      	beq.n	80009f4 <__addsf3+0xec>
 800091e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000922:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000926:	bfc1      	itttt	gt
 8000928:	18d2      	addgt	r2, r2, r3
 800092a:	4041      	eorgt	r1, r0
 800092c:	4048      	eorgt	r0, r1
 800092e:	4041      	eorgt	r1, r0
 8000930:	bfb8      	it	lt
 8000932:	425b      	neglt	r3, r3
 8000934:	2b19      	cmp	r3, #25
 8000936:	bf88      	it	hi
 8000938:	4770      	bxhi	lr
 800093a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800093e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000942:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000946:	bf18      	it	ne
 8000948:	4240      	negne	r0, r0
 800094a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800094e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000952:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000956:	bf18      	it	ne
 8000958:	4249      	negne	r1, r1
 800095a:	ea92 0f03 	teq	r2, r3
 800095e:	d03f      	beq.n	80009e0 <__addsf3+0xd8>
 8000960:	f1a2 0201 	sub.w	r2, r2, #1
 8000964:	fa41 fc03 	asr.w	ip, r1, r3
 8000968:	eb10 000c 	adds.w	r0, r0, ip
 800096c:	f1c3 0320 	rsb	r3, r3, #32
 8000970:	fa01 f103 	lsl.w	r1, r1, r3
 8000974:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000978:	d502      	bpl.n	8000980 <__addsf3+0x78>
 800097a:	4249      	negs	r1, r1
 800097c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000980:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000984:	d313      	bcc.n	80009ae <__addsf3+0xa6>
 8000986:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800098a:	d306      	bcc.n	800099a <__addsf3+0x92>
 800098c:	0840      	lsrs	r0, r0, #1
 800098e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000992:	f102 0201 	add.w	r2, r2, #1
 8000996:	2afe      	cmp	r2, #254	; 0xfe
 8000998:	d251      	bcs.n	8000a3e <__addsf3+0x136>
 800099a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800099e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009a2:	bf08      	it	eq
 80009a4:	f020 0001 	biceq.w	r0, r0, #1
 80009a8:	ea40 0003 	orr.w	r0, r0, r3
 80009ac:	4770      	bx	lr
 80009ae:	0049      	lsls	r1, r1, #1
 80009b0:	eb40 0000 	adc.w	r0, r0, r0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	bf28      	it	cs
 80009b8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009bc:	d2ed      	bcs.n	800099a <__addsf3+0x92>
 80009be:	fab0 fc80 	clz	ip, r0
 80009c2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009c6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ca:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ce:	bfaa      	itet	ge
 80009d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009d4:	4252      	neglt	r2, r2
 80009d6:	4318      	orrge	r0, r3
 80009d8:	bfbc      	itt	lt
 80009da:	40d0      	lsrlt	r0, r2
 80009dc:	4318      	orrlt	r0, r3
 80009de:	4770      	bx	lr
 80009e0:	f092 0f00 	teq	r2, #0
 80009e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009e8:	bf06      	itte	eq
 80009ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009ee:	3201      	addeq	r2, #1
 80009f0:	3b01      	subne	r3, #1
 80009f2:	e7b5      	b.n	8000960 <__addsf3+0x58>
 80009f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009f8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009fc:	bf18      	it	ne
 80009fe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a02:	d021      	beq.n	8000a48 <__addsf3+0x140>
 8000a04:	ea92 0f03 	teq	r2, r3
 8000a08:	d004      	beq.n	8000a14 <__addsf3+0x10c>
 8000a0a:	f092 0f00 	teq	r2, #0
 8000a0e:	bf08      	it	eq
 8000a10:	4608      	moveq	r0, r1
 8000a12:	4770      	bx	lr
 8000a14:	ea90 0f01 	teq	r0, r1
 8000a18:	bf1c      	itt	ne
 8000a1a:	2000      	movne	r0, #0
 8000a1c:	4770      	bxne	lr
 8000a1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a22:	d104      	bne.n	8000a2e <__addsf3+0x126>
 8000a24:	0040      	lsls	r0, r0, #1
 8000a26:	bf28      	it	cs
 8000a28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a2c:	4770      	bx	lr
 8000a2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a32:	bf3c      	itt	cc
 8000a34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bxcc	lr
 8000a3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a46:	4770      	bx	lr
 8000a48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a4c:	bf16      	itet	ne
 8000a4e:	4608      	movne	r0, r1
 8000a50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a54:	4601      	movne	r1, r0
 8000a56:	0242      	lsls	r2, r0, #9
 8000a58:	bf06      	itte	eq
 8000a5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a5e:	ea90 0f01 	teqeq	r0, r1
 8000a62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_ui2f>:
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	e004      	b.n	8000a78 <__aeabi_i2f+0x8>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_i2f>:
 8000a70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a74:	bf48      	it	mi
 8000a76:	4240      	negmi	r0, r0
 8000a78:	ea5f 0c00 	movs.w	ip, r0
 8000a7c:	bf08      	it	eq
 8000a7e:	4770      	bxeq	lr
 8000a80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a84:	4601      	mov	r1, r0
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	e01c      	b.n	8000ac6 <__aeabi_l2f+0x2a>

08000a8c <__aeabi_ul2f>:
 8000a8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a90:	bf08      	it	eq
 8000a92:	4770      	bxeq	lr
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	e00a      	b.n	8000ab0 <__aeabi_l2f+0x14>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_l2f>:
 8000a9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000aa0:	bf08      	it	eq
 8000aa2:	4770      	bxeq	lr
 8000aa4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aa8:	d502      	bpl.n	8000ab0 <__aeabi_l2f+0x14>
 8000aaa:	4240      	negs	r0, r0
 8000aac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ab0:	ea5f 0c01 	movs.w	ip, r1
 8000ab4:	bf02      	ittt	eq
 8000ab6:	4684      	moveq	ip, r0
 8000ab8:	4601      	moveq	r1, r0
 8000aba:	2000      	moveq	r0, #0
 8000abc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ac0:	bf08      	it	eq
 8000ac2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aca:	fabc f28c 	clz	r2, ip
 8000ace:	3a08      	subs	r2, #8
 8000ad0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ad4:	db10      	blt.n	8000af8 <__aeabi_l2f+0x5c>
 8000ad6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ada:	4463      	add	r3, ip
 8000adc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ae0:	f1c2 0220 	rsb	r2, r2, #32
 8000ae4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ae8:	fa20 f202 	lsr.w	r2, r0, r2
 8000aec:	eb43 0002 	adc.w	r0, r3, r2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f102 0220 	add.w	r2, r2, #32
 8000afc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b08:	fa21 f202 	lsr.w	r2, r1, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_fmul>:
 8000b18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b20:	bf1e      	ittt	ne
 8000b22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b26:	ea92 0f0c 	teqne	r2, ip
 8000b2a:	ea93 0f0c 	teqne	r3, ip
 8000b2e:	d06f      	beq.n	8000c10 <__aeabi_fmul+0xf8>
 8000b30:	441a      	add	r2, r3
 8000b32:	ea80 0c01 	eor.w	ip, r0, r1
 8000b36:	0240      	lsls	r0, r0, #9
 8000b38:	bf18      	it	ne
 8000b3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b3e:	d01e      	beq.n	8000b7e <__aeabi_fmul+0x66>
 8000b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b58:	bf3e      	ittt	cc
 8000b5a:	0049      	lslcc	r1, r1, #1
 8000b5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b60:	005b      	lslcc	r3, r3, #1
 8000b62:	ea40 0001 	orr.w	r0, r0, r1
 8000b66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b6a:	2afd      	cmp	r2, #253	; 0xfd
 8000b6c:	d81d      	bhi.n	8000baa <__aeabi_fmul+0x92>
 8000b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b76:	bf08      	it	eq
 8000b78:	f020 0001 	biceq.w	r0, r0, #1
 8000b7c:	4770      	bx	lr
 8000b7e:	f090 0f00 	teq	r0, #0
 8000b82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b86:	bf08      	it	eq
 8000b88:	0249      	lsleq	r1, r1, #9
 8000b8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b92:	3a7f      	subs	r2, #127	; 0x7f
 8000b94:	bfc2      	ittt	gt
 8000b96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9e:	4770      	bxgt	lr
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	3a01      	subs	r2, #1
 8000baa:	dc5d      	bgt.n	8000c68 <__aeabi_fmul+0x150>
 8000bac:	f112 0f19 	cmn.w	r2, #25
 8000bb0:	bfdc      	itt	le
 8000bb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bxle	lr
 8000bb8:	f1c2 0200 	rsb	r2, r2, #0
 8000bbc:	0041      	lsls	r1, r0, #1
 8000bbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000bc2:	f1c2 0220 	rsb	r2, r2, #32
 8000bc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bce:	f140 0000 	adc.w	r0, r0, #0
 8000bd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bd6:	bf08      	it	eq
 8000bd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bdc:	4770      	bx	lr
 8000bde:	f092 0f00 	teq	r2, #0
 8000be2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000be6:	bf02      	ittt	eq
 8000be8:	0040      	lsleq	r0, r0, #1
 8000bea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bee:	3a01      	subeq	r2, #1
 8000bf0:	d0f9      	beq.n	8000be6 <__aeabi_fmul+0xce>
 8000bf2:	ea40 000c 	orr.w	r0, r0, ip
 8000bf6:	f093 0f00 	teq	r3, #0
 8000bfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bfe:	bf02      	ittt	eq
 8000c00:	0049      	lsleq	r1, r1, #1
 8000c02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c06:	3b01      	subeq	r3, #1
 8000c08:	d0f9      	beq.n	8000bfe <__aeabi_fmul+0xe6>
 8000c0a:	ea41 010c 	orr.w	r1, r1, ip
 8000c0e:	e78f      	b.n	8000b30 <__aeabi_fmul+0x18>
 8000c10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c14:	ea92 0f0c 	teq	r2, ip
 8000c18:	bf18      	it	ne
 8000c1a:	ea93 0f0c 	teqne	r3, ip
 8000c1e:	d00a      	beq.n	8000c36 <__aeabi_fmul+0x11e>
 8000c20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c24:	bf18      	it	ne
 8000c26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c2a:	d1d8      	bne.n	8000bde <__aeabi_fmul+0xc6>
 8000c2c:	ea80 0001 	eor.w	r0, r0, r1
 8000c30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c34:	4770      	bx	lr
 8000c36:	f090 0f00 	teq	r0, #0
 8000c3a:	bf17      	itett	ne
 8000c3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c40:	4608      	moveq	r0, r1
 8000c42:	f091 0f00 	teqne	r1, #0
 8000c46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c4a:	d014      	beq.n	8000c76 <__aeabi_fmul+0x15e>
 8000c4c:	ea92 0f0c 	teq	r2, ip
 8000c50:	d101      	bne.n	8000c56 <__aeabi_fmul+0x13e>
 8000c52:	0242      	lsls	r2, r0, #9
 8000c54:	d10f      	bne.n	8000c76 <__aeabi_fmul+0x15e>
 8000c56:	ea93 0f0c 	teq	r3, ip
 8000c5a:	d103      	bne.n	8000c64 <__aeabi_fmul+0x14c>
 8000c5c:	024b      	lsls	r3, r1, #9
 8000c5e:	bf18      	it	ne
 8000c60:	4608      	movne	r0, r1
 8000c62:	d108      	bne.n	8000c76 <__aeabi_fmul+0x15e>
 8000c64:	ea80 0001 	eor.w	r0, r0, r1
 8000c68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fdiv>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d069      	beq.n	8000d6c <__aeabi_fdiv+0xec>
 8000c98:	eba2 0203 	sub.w	r2, r2, r3
 8000c9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ca0:	0249      	lsls	r1, r1, #9
 8000ca2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ca6:	d037      	beq.n	8000d18 <__aeabi_fdiv+0x98>
 8000ca8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	bf38      	it	cc
 8000cbc:	005b      	lslcc	r3, r3, #1
 8000cbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cc2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	bf24      	itt	cs
 8000cca:	1a5b      	subcs	r3, r3, r1
 8000ccc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cd4:	bf24      	itt	cs
 8000cd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ce2:	bf24      	itt	cs
 8000ce4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ce8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000cf0:	bf24      	itt	cs
 8000cf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000cf6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	bf18      	it	ne
 8000cfe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d02:	d1e0      	bne.n	8000cc6 <__aeabi_fdiv+0x46>
 8000d04:	2afd      	cmp	r2, #253	; 0xfd
 8000d06:	f63f af50 	bhi.w	8000baa <__aeabi_fmul+0x92>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d20:	327f      	adds	r2, #127	; 0x7f
 8000d22:	bfc2      	ittt	gt
 8000d24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2c:	4770      	bxgt	lr
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	f04f 0300 	mov.w	r3, #0
 8000d36:	3a01      	subs	r2, #1
 8000d38:	e737      	b.n	8000baa <__aeabi_fmul+0x92>
 8000d3a:	f092 0f00 	teq	r2, #0
 8000d3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d42:	bf02      	ittt	eq
 8000d44:	0040      	lsleq	r0, r0, #1
 8000d46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d4a:	3a01      	subeq	r2, #1
 8000d4c:	d0f9      	beq.n	8000d42 <__aeabi_fdiv+0xc2>
 8000d4e:	ea40 000c 	orr.w	r0, r0, ip
 8000d52:	f093 0f00 	teq	r3, #0
 8000d56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d5a:	bf02      	ittt	eq
 8000d5c:	0049      	lsleq	r1, r1, #1
 8000d5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d62:	3b01      	subeq	r3, #1
 8000d64:	d0f9      	beq.n	8000d5a <__aeabi_fdiv+0xda>
 8000d66:	ea41 010c 	orr.w	r1, r1, ip
 8000d6a:	e795      	b.n	8000c98 <__aeabi_fdiv+0x18>
 8000d6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d70:	ea92 0f0c 	teq	r2, ip
 8000d74:	d108      	bne.n	8000d88 <__aeabi_fdiv+0x108>
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	f47f af7d 	bne.w	8000c76 <__aeabi_fmul+0x15e>
 8000d7c:	ea93 0f0c 	teq	r3, ip
 8000d80:	f47f af70 	bne.w	8000c64 <__aeabi_fmul+0x14c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e776      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000d88:	ea93 0f0c 	teq	r3, ip
 8000d8c:	d104      	bne.n	8000d98 <__aeabi_fdiv+0x118>
 8000d8e:	024b      	lsls	r3, r1, #9
 8000d90:	f43f af4c 	beq.w	8000c2c <__aeabi_fmul+0x114>
 8000d94:	4608      	mov	r0, r1
 8000d96:	e76e      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000d98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d9c:	bf18      	it	ne
 8000d9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000da2:	d1ca      	bne.n	8000d3a <__aeabi_fdiv+0xba>
 8000da4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000da8:	f47f af5c 	bne.w	8000c64 <__aeabi_fmul+0x14c>
 8000dac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000db0:	f47f af3c 	bne.w	8000c2c <__aeabi_fmul+0x114>
 8000db4:	e75f      	b.n	8000c76 <__aeabi_fmul+0x15e>
 8000db6:	bf00      	nop

08000db8 <__gesf2>:
 8000db8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dbc:	e006      	b.n	8000dcc <__cmpsf2+0x4>
 8000dbe:	bf00      	nop

08000dc0 <__lesf2>:
 8000dc0:	f04f 0c01 	mov.w	ip, #1
 8000dc4:	e002      	b.n	8000dcc <__cmpsf2+0x4>
 8000dc6:	bf00      	nop

08000dc8 <__cmpsf2>:
 8000dc8:	f04f 0c01 	mov.w	ip, #1
 8000dcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000dd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ddc:	bf18      	it	ne
 8000dde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000de2:	d011      	beq.n	8000e08 <__cmpsf2+0x40>
 8000de4:	b001      	add	sp, #4
 8000de6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dea:	bf18      	it	ne
 8000dec:	ea90 0f01 	teqne	r0, r1
 8000df0:	bf58      	it	pl
 8000df2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000df6:	bf88      	it	hi
 8000df8:	17c8      	asrhi	r0, r1, #31
 8000dfa:	bf38      	it	cc
 8000dfc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e00:	bf18      	it	ne
 8000e02:	f040 0001 	orrne.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	d102      	bne.n	8000e14 <__cmpsf2+0x4c>
 8000e0e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e12:	d105      	bne.n	8000e20 <__cmpsf2+0x58>
 8000e14:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e18:	d1e4      	bne.n	8000de4 <__cmpsf2+0x1c>
 8000e1a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e1e:	d0e1      	beq.n	8000de4 <__cmpsf2+0x1c>
 8000e20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <__aeabi_cfrcmple>:
 8000e28:	4684      	mov	ip, r0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4661      	mov	r1, ip
 8000e2e:	e7ff      	b.n	8000e30 <__aeabi_cfcmpeq>

08000e30 <__aeabi_cfcmpeq>:
 8000e30:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e32:	f7ff ffc9 	bl	8000dc8 <__cmpsf2>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	bf48      	it	mi
 8000e3a:	f110 0f00 	cmnmi.w	r0, #0
 8000e3e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e40 <__aeabi_fcmpeq>:
 8000e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e44:	f7ff fff4 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e48:	bf0c      	ite	eq
 8000e4a:	2001      	moveq	r0, #1
 8000e4c:	2000      	movne	r0, #0
 8000e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e52:	bf00      	nop

08000e54 <__aeabi_fcmplt>:
 8000e54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e58:	f7ff ffea 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e5c:	bf34      	ite	cc
 8000e5e:	2001      	movcc	r0, #1
 8000e60:	2000      	movcs	r0, #0
 8000e62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e66:	bf00      	nop

08000e68 <__aeabi_fcmple>:
 8000e68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e6c:	f7ff ffe0 	bl	8000e30 <__aeabi_cfcmpeq>
 8000e70:	bf94      	ite	ls
 8000e72:	2001      	movls	r0, #1
 8000e74:	2000      	movhi	r0, #0
 8000e76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7a:	bf00      	nop

08000e7c <__aeabi_fcmpge>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff ffd2 	bl	8000e28 <__aeabi_cfrcmple>
 8000e84:	bf94      	ite	ls
 8000e86:	2001      	movls	r0, #1
 8000e88:	2000      	movhi	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmpgt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffc8 	bl	8000e28 <__aeabi_cfrcmple>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_f2iz>:
 8000ea4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eac:	d30f      	bcc.n	8000ece <__aeabi_f2iz+0x2a>
 8000eae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eb6:	d90d      	bls.n	8000ed4 <__aeabi_f2iz+0x30>
 8000eb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ec4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec8:	bf18      	it	ne
 8000eca:	4240      	negne	r0, r0
 8000ecc:	4770      	bx	lr
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4770      	bx	lr
 8000ed4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed8:	d101      	bne.n	8000ede <__aeabi_f2iz+0x3a>
 8000eda:	0242      	lsls	r2, r0, #9
 8000edc:	d105      	bne.n	8000eea <__aeabi_f2iz+0x46>
 8000ede:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ee2:	bf08      	it	eq
 8000ee4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ee8:	4770      	bx	lr
 8000eea:	f04f 0000 	mov.w	r0, #0
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_f2uiz>:
 8000ef0:	0042      	lsls	r2, r0, #1
 8000ef2:	d20e      	bcs.n	8000f12 <__aeabi_f2uiz+0x22>
 8000ef4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ef8:	d30b      	bcc.n	8000f12 <__aeabi_f2uiz+0x22>
 8000efa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000efe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f02:	d409      	bmi.n	8000f18 <__aeabi_f2uiz+0x28>
 8000f04:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f10:	4770      	bx	lr
 8000f12:	f04f 0000 	mov.w	r0, #0
 8000f16:	4770      	bx	lr
 8000f18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f1c:	d101      	bne.n	8000f22 <__aeabi_f2uiz+0x32>
 8000f1e:	0242      	lsls	r2, r0, #9
 8000f20:	d102      	bne.n	8000f28 <__aeabi_f2uiz+0x38>
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	4770      	bx	lr
 8000f28:	f04f 0000 	mov.w	r0, #0
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d141      	bne.n	8000fc6 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a43      	ldr	r2, [pc, #268]	; (8001054 <GPIO_PeriClockControl+0x124>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d106      	bne.n	8000f58 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a42      	ldr	r2, [pc, #264]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 8000f56:	e077      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a40      	ldr	r2, [pc, #256]	; (800105c <GPIO_PeriClockControl+0x12c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f6c:	e06c      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a3b      	ldr	r2, [pc, #236]	; (8001060 <GPIO_PeriClockControl+0x130>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d106      	bne.n	8000f84 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f76:	4b38      	ldr	r3, [pc, #224]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a37      	ldr	r2, [pc, #220]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f82:	e061      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a37      	ldr	r2, [pc, #220]	; (8001064 <GPIO_PeriClockControl+0x134>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d106      	bne.n	8000f9a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a31      	ldr	r2, [pc, #196]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f98:	e056      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a32      	ldr	r2, [pc, #200]	; (8001068 <GPIO_PeriClockControl+0x138>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d106      	bne.n	8000fb0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fa8:	f043 0310 	orr.w	r3, r3, #16
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fae:	e04b      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a2e      	ldr	r2, [pc, #184]	; (800106c <GPIO_PeriClockControl+0x13c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d147      	bne.n	8001048 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fbe:	f043 0320 	orr.w	r3, r3, #32
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fc4:	e040      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a22      	ldr	r2, [pc, #136]	; (8001054 <GPIO_PeriClockControl+0x124>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d106      	bne.n	8000fdc <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fda:	e035      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <GPIO_PeriClockControl+0x12c>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d106      	bne.n	8000ff2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000fea:	f023 0302 	bic.w	r3, r3, #2
 8000fee:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff0:	e02a      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <GPIO_PeriClockControl+0x130>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d106      	bne.n	8001008 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a16      	ldr	r2, [pc, #88]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001006:	e01f      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a16      	ldr	r2, [pc, #88]	; (8001064 <GPIO_PeriClockControl+0x134>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d106      	bne.n	800101e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001016:	f023 0308 	bic.w	r3, r3, #8
 800101a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800101c:	e014      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <GPIO_PeriClockControl+0x138>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d106      	bne.n	8001034 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <GPIO_PeriClockControl+0x128>)
 800102c:	f023 0310 	bic.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001032:	e009      	b.n	8001048 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <GPIO_PeriClockControl+0x13c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d105      	bne.n	8001048 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <GPIO_PeriClockControl+0x128>)
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	4a05      	ldr	r2, [pc, #20]	; (8001058 <GPIO_PeriClockControl+0x128>)
 8001042:	f023 0320 	bic.w	r3, r3, #32
 8001046:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40020000 	.word	0x40020000
 8001058:	40023800 	.word	0x40023800
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400

08001070 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ff54 	bl	8000f30 <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	795b      	ldrb	r3, [r3, #5]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d820      	bhi.n	80010d2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	795b      	ldrb	r3, [r3, #5]
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2103      	movs	r1, #3
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	400a      	ands	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	e08c      	b.n	80011ec <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d117      	bne.n	800110a <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010da:	4b90      	ldr	r3, [pc, #576]	; (800131c <GPIO_Init+0x2ac>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	7912      	ldrb	r2, [r2, #4]
 80010e2:	4611      	mov	r1, r2
 80010e4:	2201      	movs	r2, #1
 80010e6:	408a      	lsls	r2, r1
 80010e8:	4611      	mov	r1, r2
 80010ea:	4a8c      	ldr	r2, [pc, #560]	; (800131c <GPIO_Init+0x2ac>)
 80010ec:	430b      	orrs	r3, r1
 80010ee:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010f0:	4b8a      	ldr	r3, [pc, #552]	; (800131c <GPIO_Init+0x2ac>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	7912      	ldrb	r2, [r2, #4]
 80010f8:	4611      	mov	r1, r2
 80010fa:	2201      	movs	r2, #1
 80010fc:	408a      	lsls	r2, r1
 80010fe:	43d2      	mvns	r2, r2
 8001100:	4611      	mov	r1, r2
 8001102:	4a86      	ldr	r2, [pc, #536]	; (800131c <GPIO_Init+0x2ac>)
 8001104:	400b      	ands	r3, r1
 8001106:	6093      	str	r3, [r2, #8]
 8001108:	e035      	b.n	8001176 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	795b      	ldrb	r3, [r3, #5]
 800110e:	2b05      	cmp	r3, #5
 8001110:	d117      	bne.n	8001142 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001112:	4b82      	ldr	r3, [pc, #520]	; (800131c <GPIO_Init+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	7912      	ldrb	r2, [r2, #4]
 800111a:	4611      	mov	r1, r2
 800111c:	2201      	movs	r2, #1
 800111e:	408a      	lsls	r2, r1
 8001120:	4611      	mov	r1, r2
 8001122:	4a7e      	ldr	r2, [pc, #504]	; (800131c <GPIO_Init+0x2ac>)
 8001124:	430b      	orrs	r3, r1
 8001126:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001128:	4b7c      	ldr	r3, [pc, #496]	; (800131c <GPIO_Init+0x2ac>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	7912      	ldrb	r2, [r2, #4]
 8001130:	4611      	mov	r1, r2
 8001132:	2201      	movs	r2, #1
 8001134:	408a      	lsls	r2, r1
 8001136:	43d2      	mvns	r2, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a78      	ldr	r2, [pc, #480]	; (800131c <GPIO_Init+0x2ac>)
 800113c:	400b      	ands	r3, r1
 800113e:	60d3      	str	r3, [r2, #12]
 8001140:	e019      	b.n	8001176 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	795b      	ldrb	r3, [r3, #5]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d115      	bne.n	8001176 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800114a:	4b74      	ldr	r3, [pc, #464]	; (800131c <GPIO_Init+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	7912      	ldrb	r2, [r2, #4]
 8001152:	4611      	mov	r1, r2
 8001154:	2201      	movs	r2, #1
 8001156:	408a      	lsls	r2, r1
 8001158:	4611      	mov	r1, r2
 800115a:	4a70      	ldr	r2, [pc, #448]	; (800131c <GPIO_Init+0x2ac>)
 800115c:	430b      	orrs	r3, r1
 800115e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001160:	4b6e      	ldr	r3, [pc, #440]	; (800131c <GPIO_Init+0x2ac>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	7912      	ldrb	r2, [r2, #4]
 8001168:	4611      	mov	r1, r2
 800116a:	2201      	movs	r2, #1
 800116c:	408a      	lsls	r2, r1
 800116e:	4611      	mov	r1, r2
 8001170:	4a6a      	ldr	r2, [pc, #424]	; (800131c <GPIO_Init+0x2ac>)
 8001172:	430b      	orrs	r3, r1
 8001174:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	791b      	ldrb	r3, [r3, #4]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a64      	ldr	r2, [pc, #400]	; (8001320 <GPIO_Init+0x2b0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00f      	beq.n	80011b2 <GPIO_Init+0x142>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a63      	ldr	r2, [pc, #396]	; (8001324 <GPIO_Init+0x2b4>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d008      	beq.n	80011ae <GPIO_Init+0x13e>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a61      	ldr	r2, [pc, #388]	; (8001328 <GPIO_Init+0x2b8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <GPIO_Init+0x13a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e004      	b.n	80011b4 <GPIO_Init+0x144>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e002      	b.n	80011b4 <GPIO_Init+0x144>
 80011ae:	2301      	movs	r3, #1
 80011b0:	e000      	b.n	80011b4 <GPIO_Init+0x144>
 80011b2:	2300      	movs	r3, #0
 80011b4:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011b6:	4b5d      	ldr	r3, [pc, #372]	; (800132c <GPIO_Init+0x2bc>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <GPIO_Init+0x2bc>)
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80011c2:	7c7a      	ldrb	r2, [r7, #17]
 80011c4:	7cbb      	ldrb	r3, [r7, #18]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	fa02 f103 	lsl.w	r1, r2, r3
 80011cc:	4a58      	ldr	r2, [pc, #352]	; (8001330 <GPIO_Init+0x2c0>)
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	3302      	adds	r3, #2
 80011d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80011d6:	4b51      	ldr	r3, [pc, #324]	; (800131c <GPIO_Init+0x2ac>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	7912      	ldrb	r2, [r2, #4]
 80011de:	4611      	mov	r1, r2
 80011e0:	2201      	movs	r2, #1
 80011e2:	408a      	lsls	r2, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	4a4d      	ldr	r2, [pc, #308]	; (800131c <GPIO_Init+0x2ac>)
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	791b      	ldrb	r3, [r3, #4]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2103      	movs	r1, #3
 800120c:	fa01 f303 	lsl.w	r3, r1, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	400a      	ands	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6899      	ldr	r1, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	430a      	orrs	r2, r1
 800122a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	79db      	ldrb	r3, [r3, #7]
 8001230:	461a      	mov	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	791b      	ldrb	r3, [r3, #4]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2103      	movs	r1, #3
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	400a      	ands	r2, r1
 800125a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	430a      	orrs	r2, r1
 800126a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	7a1b      	ldrb	r3, [r3, #8]
 8001270:	461a      	mov	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	791b      	ldrb	r3, [r3, #4]
 8001286:	4619      	mov	r1, r3
 8001288:	2301      	movs	r3, #1
 800128a:	408b      	lsls	r3, r1
 800128c:	43db      	mvns	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	400a      	ands	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6859      	ldr	r1, [r3, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d131      	bne.n	8001314 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	08db      	lsrs	r3, r3, #3
 80012b6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	791b      	ldrb	r3, [r3, #4]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	7c3a      	ldrb	r2, [r7, #16]
 80012c8:	3208      	adds	r2, #8
 80012ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	220f      	movs	r2, #15
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	7c3a      	ldrb	r2, [r7, #16]
 80012e2:	4001      	ands	r1, r0
 80012e4:	3208      	adds	r2, #8
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	7c3a      	ldrb	r2, [r7, #16]
 80012f0:	3208      	adds	r2, #8
 80012f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7a5b      	ldrb	r3, [r3, #9]
 80012fa:	461a      	mov	r2, r3
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7c3a      	ldrb	r2, [r7, #16]
 800130c:	4301      	orrs	r1, r0
 800130e:	3208      	adds	r2, #8
 8001310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40013c00 	.word	0x40013c00
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800

08001334 <GPIO_Write_Pin>:
	{
		GPIOH_REG_RESET();
	}
}

void GPIO_Write_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t STATE) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	70fb      	strb	r3, [r7, #3]
 8001340:	4613      	mov	r3, r2
 8001342:	70bb      	strb	r3, [r7, #2]
	if (STATE == SET) {
 8001344:	78bb      	ldrb	r3, [r7, #2]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d109      	bne.n	800135e <GPIO_Write_Pin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);   // Set the pin
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	78fa      	ldrb	r2, [r7, #3]
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}
 800135c:	e009      	b.n	8001372 <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	78fa      	ldrb	r2, [r7, #3]
 8001364:	2101      	movs	r1, #1
 8001366:	fa01 f202 	lsl.w	r2, r1, r2
 800136a:	43d2      	mvns	r2, r2
 800136c:	401a      	ands	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	615a      	str	r2, [r3, #20]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
    return value;
 800139a:	7bfb      	ldrb	r3, [r7, #15]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d809      	bhi.n	80013cc <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	78fa      	ldrb	r2, [r7, #3]
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	405a      	eors	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	e000      	b.n	80013ce <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 80013cc:	bf00      	nop
}
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
	...

080013d8 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d133      	bne.n	8001456 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b1f      	cmp	r3, #31
 80013f2:	d80a      	bhi.n	800140a <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80013f4:	4b34      	ldr	r3, [pc, #208]	; (80014c8 <GPIO_IRQInterruptConfig+0xf0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	2101      	movs	r1, #1
 80013fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001400:	4611      	mov	r1, r2
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <GPIO_IRQInterruptConfig+0xf0>)
 8001404:	430b      	orrs	r3, r1
 8001406:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8001408:	e059      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b1f      	cmp	r3, #31
 800140e:	d90f      	bls.n	8001430 <GPIO_IRQInterruptConfig+0x58>
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	2b3f      	cmp	r3, #63	; 0x3f
 8001414:	d80c      	bhi.n	8001430 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <GPIO_IRQInterruptConfig+0xf4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	f002 021f 	and.w	r2, r2, #31
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f202 	lsl.w	r2, r1, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4a28      	ldr	r2, [pc, #160]	; (80014cc <GPIO_IRQInterruptConfig+0xf4>)
 800142a:	430b      	orrs	r3, r1
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e046      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b3f      	cmp	r3, #63	; 0x3f
 8001434:	d943      	bls.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2b5f      	cmp	r3, #95	; 0x5f
 800143a:	d840      	bhi.n	80014be <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <GPIO_IRQInterruptConfig+0xf8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	79fa      	ldrb	r2, [r7, #7]
 8001442:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001446:	2101      	movs	r1, #1
 8001448:	fa01 f202 	lsl.w	r2, r1, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4a20      	ldr	r2, [pc, #128]	; (80014d0 <GPIO_IRQInterruptConfig+0xf8>)
 8001450:	430b      	orrs	r3, r1
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	e033      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b1f      	cmp	r3, #31
 800145a:	d80a      	bhi.n	8001472 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <GPIO_IRQInterruptConfig+0xfc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	79fa      	ldrb	r2, [r7, #7]
 8001462:	2101      	movs	r1, #1
 8001464:	fa01 f202 	lsl.w	r2, r1, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <GPIO_IRQInterruptConfig+0xfc>)
 800146c:	430b      	orrs	r3, r1
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	e025      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b1f      	cmp	r3, #31
 8001476:	d90f      	bls.n	8001498 <GPIO_IRQInterruptConfig+0xc0>
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b3f      	cmp	r3, #63	; 0x3f
 800147c:	d80c      	bhi.n	8001498 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <GPIO_IRQInterruptConfig+0x100>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <GPIO_IRQInterruptConfig+0x100>)
 8001492:	430b      	orrs	r3, r1
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e012      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b3f      	cmp	r3, #63	; 0x3f
 800149c:	d90f      	bls.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b5f      	cmp	r3, #95	; 0x5f
 80014a2:	d80c      	bhi.n	80014be <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <GPIO_IRQInterruptConfig+0x104>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014ae:	2101      	movs	r1, #1
 80014b0:	fa01 f202 	lsl.w	r2, r1, r2
 80014b4:	4611      	mov	r1, r2
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <GPIO_IRQInterruptConfig+0x104>)
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	e7ff      	b.n	80014be <GPIO_IRQInterruptConfig+0xe6>
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000e104 	.word	0xe000e104
 80014d0:	e000e108 	.word	0xe000e108
 80014d4:	e000e180 	.word	0xe000e180
 80014d8:	e000e184 	.word	0xe000e184
 80014dc:	e000e188 	.word	0xe000e188

080014e0 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <GPIO_IRQHandling+0x3c>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	79fa      	ldrb	r2, [r7, #7]
 80014f0:	2101      	movs	r1, #1
 80014f2:	fa01 f202 	lsl.w	r2, r1, r2
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d009      	beq.n	8001510 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <GPIO_IRQHandling+0x3c>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	79fa      	ldrb	r2, [r7, #7]
 8001502:	2101      	movs	r1, #1
 8001504:	fa01 f202 	lsl.w	r2, r1, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <GPIO_IRQHandling+0x3c>)
 800150c:	430b      	orrs	r3, r1
 800150e:	6153      	str	r3, [r2, #20]
	}
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40013c00 	.word	0x40013c00

08001520 <I2C_SM_INIT>:

}


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	// 1. Enable peripheral clock
	I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8001528:	4b18      	ldr	r3, [pc, #96]	; (800158c <I2C_SM_INIT+0x6c>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <I2C_SM_INIT+0x6c>)
 800152e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40

	// 2. Configure ACK
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a5b      	ldrb	r3, [r3, #9]
 800153e:	029b      	lsls	r3, r3, #10
 8001540:	4619      	mov	r1, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

	// 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
	pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2208      	movs	r2, #8
 8001550:	605a      	str	r2, [r3, #4]

	// 4. Configure CCR for Standard Mode
	uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4a0d      	ldr	r2, [pc, #52]	; (8001590 <I2C_SM_INIT+0x70>)
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	81fb      	strh	r3, [r7, #14]
	pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8001560:	89fa      	ldrh	r2, [r7, #14]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800156a:	61da      	str	r2, [r3, #28]

	// 5. Set TRISE
	// TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
	pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2209      	movs	r2, #9
 8001572:	621a      	str	r2, [r3, #32]

	// 6. Enable the peripheral
	pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	601a      	str	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	007a1200 	.word	0x007a1200

08001594 <drive_FWD>:
		__asm__("nop");
	}
}

//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 80015a4:	2200      	movs	r2, #0
 80015a6:	210f      	movs	r1, #15
 80015a8:	481d      	ldr	r0, [pc, #116]	; (8001620 <drive_FWD+0x8c>)
 80015aa:	f7ff fec3 	bl	8001334 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2100      	movs	r1, #0
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fa82 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2102      	movs	r1, #2
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fa7d 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa78 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2103      	movs	r1, #3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fa73 	bl	8001abc <GP_TIM_PWM_Control>


	// Enable CH1, CH3
	pGP_TIM_Handle->pTIMx->CCER |= (1 << (4 * CH1)) | (1 << (4 * CH3));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6213      	str	r3, [r2, #32]

	// Disable CH2, CH4
	pGP_TIM_Handle->pTIMx->CCER &= ~((1 << (4 * CH2)) | (1 << (4 * CH4)));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015f8:	f023 0310 	bic.w	r3, r3, #16
 80015fc:	6213      	str	r3, [r2, #32]


	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0201 	orr.w	r2, r2, #1
 800160c:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);//connected to sleep
 800160e:	2201      	movs	r2, #1
 8001610:	210f      	movs	r1, #15
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <drive_FWD+0x8c>)
 8001614:	f7ff fe8e 	bl	8001334 <GPIO_Write_Pin>
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40020400 	.word	0x40020400

08001624 <stop_FWD>:

void stop_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 800162c:	2200      	movs	r2, #0
 800162e:	210f      	movs	r1, #15
 8001630:	4818      	ldr	r0, [pc, #96]	; (8001694 <stop_FWD+0x70>)
 8001632:	f7ff fe7f 	bl	8001334 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_STOP);
 8001636:	2202      	movs	r2, #2
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fa3e 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_STOP);
 8001640:	2202      	movs	r2, #2
 8001642:	2102      	movs	r1, #2
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 fa39 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_STOP);
 800164a:	2202      	movs	r2, #2
 800164c:	2101      	movs	r1, #1
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fa34 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_STOP);
 8001654:	2202      	movs	r2, #2
 8001656:	2103      	movs	r1, #3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 fa2f 	bl	8001abc <GP_TIM_PWM_Control>

	pGP_TIM_Handle->pTIMx->CCER &= ~((1 << (4 * CH2)) | (1 << (4 * CH4)) | (1 << (4 * CH1)) | (1 << (4 * CH3)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166c:	f023 0311 	bic.w	r3, r3, #17
 8001670:	6213      	str	r3, [r2, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	615a      	str	r2, [r3, #20]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 8001682:	2201      	movs	r2, #1
 8001684:	210f      	movs	r1, #15
 8001686:	4803      	ldr	r0, [pc, #12]	; (8001694 <stop_FWD+0x70>)
 8001688:	f7ff fe54 	bl	8001334 <GPIO_Write_Pin>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020400 	.word	0x40020400

08001698 <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 80016a8:	2200      	movs	r2, #0
 80016aa:	210f      	movs	r1, #15
 80016ac:	4819      	ldr	r0, [pc, #100]	; (8001714 <turn_RGT+0x7c>)
 80016ae:	f7ff fe41 	bl	8001334 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2100      	movs	r1, #0
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 fa00 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 80016bc:	2200      	movs	r2, #0
 80016be:	2102      	movs	r1, #2
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f9fb 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f9f6 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 80016d0:	2201      	movs	r2, #1
 80016d2:	2103      	movs	r1, #3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f9f1 	bl	8001abc <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH4)) & ~((1 << 4 * CH3) | (1 << 4 * CH2));
 80016da:	f241 0301 	movw	r3, #4097	; 0x1001
 80016de:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6a19      	ldr	r1, [r3, #32]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 8001700:	2201      	movs	r2, #1
 8001702:	210f      	movs	r1, #15
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <turn_RGT+0x7c>)
 8001706:	f7ff fe15 	bl	8001334 <GPIO_Write_Pin>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020400 	.word	0x40020400

08001718 <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 8001728:	2200      	movs	r2, #0
 800172a:	210f      	movs	r1, #15
 800172c:	4819      	ldr	r0, [pc, #100]	; (8001794 <turn_LFT+0x7c>)
 800172e:	f7ff fe01 	bl	8001334 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f9c0 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 800173c:	2201      	movs	r2, #1
 800173e:	2102      	movs	r1, #2
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f9bb 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8001746:	2201      	movs	r2, #1
 8001748:	2101      	movs	r1, #1
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f9b6 	bl	8001abc <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8001750:	2200      	movs	r2, #0
 8001752:	2103      	movs	r1, #3
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f9b1 	bl	8001abc <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH3) | (1 << 4 * CH2)) & ~((1 << 4 * CH4) | (1 << 4 * CH1));
 800175a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800175e:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6a19      	ldr	r1, [r3, #32]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	430a      	orrs	r2, r1
 800176e:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 8001780:	2201      	movs	r2, #1
 8001782:	210f      	movs	r1, #15
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <turn_LFT+0x7c>)
 8001786:	f7ff fdd5 	bl	8001334 <GPIO_Write_Pin>
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020400 	.word	0x40020400

08001798 <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80017ac:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 80017b4:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d125      	bne.n	8001810 <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 80017d4:	bf00      	nop
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f8      	beq.n	80017d6 <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f022 0203 	bic.w	r2, r2, #3
 80017f2:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6892      	ldr	r2, [r2, #8]
 80017fe:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8001800:	bf00      	nop
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f8      	bne.n	8001802 <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
	...

0800181c <AD_TIM_FreeRun_INIT>:
}




void AD_TIM_FreeRun_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    if (pAD_TIM_Handle->pTIMx == TIM1) {
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <AD_TIM_FreeRun_INIT+0x7c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d105      	bne.n	800183a <AD_TIM_FreeRun_INIT+0x1e>
        TIM1_PCLK_EN();
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <AD_TIM_FreeRun_INIT+0x80>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <AD_TIM_FreeRun_INIT+0x80>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6453      	str	r3, [r2, #68]	; 0x44
    }

    // Count up
    pAD_TIM_Handle->pTIMx->CR1 &= ~TIM_CR1_DIR;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0208 	bic.w	r2, r2, #8
 8001848:	601a      	str	r2, [r3, #0]

    // Auto-Reload Preload
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001858:	601a      	str	r2, [r3, #0]

    // Max ARR
    pAD_TIM_Handle->pTIMx->ARR = 0xFFFF;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c

    // Prescaler (set before calling or assign here)
    pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	889a      	ldrh	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28

    // Load PSC and ARR immediately
    pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	615a      	str	r2, [r3, #20]

    // Start free-running timer
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_CEN;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40010000 	.word	0x40010000
 800189c:	40023800 	.word	0x40023800

080018a0 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b0:	d106      	bne.n	80018c0 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <GP_TIM_PWM_INIT+0x108>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a3c      	ldr	r2, [pc, #240]	; (80019a8 <GP_TIM_PWM_INIT+0x108>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	e00a      	b.n	80018d6 <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a39      	ldr	r2, [pc, #228]	; (80019ac <GP_TIM_PWM_INIT+0x10c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d105      	bne.n	80018d6 <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <GP_TIM_PWM_INIT+0x108>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a36      	ldr	r2, [pc, #216]	; (80019a8 <GP_TIM_PWM_INIT+0x108>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 80018d6:	bf00      	nop
 80018d8:	4b33      	ldr	r3, [pc, #204]	; (80019a8 <GP_TIM_PWM_INIT+0x108>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f9      	beq.n	80018d8 <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f2:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	889a      	ldrh	r2, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	88db      	ldrh	r3, [r3, #6]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e03c      	b.n	800198a <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3302      	adds	r3, #2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	88db      	ldrh	r3, [r3, #6]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff f8a3 	bl	8000a68 <__aeabi_ui2f>
 8001922:	4603      	mov	r3, r0
 8001924:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <GP_TIM_PWM_INIT+0x110>)
 8001928:	6938      	ldr	r0, [r7, #16]
 800192a:	f7ff f9a9 	bl	8000c80 <__aeabi_fdiv>
 800192e:	4603      	mov	r3, r0
 8001930:	461c      	mov	r4, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	88db      	ldrh	r3, [r3, #6]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f89a 	bl	8000a70 <__aeabi_i2f>
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff f8e9 	bl	8000b18 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fad1 	bl	8000ef0 <__aeabi_f2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	3302      	adds	r3, #2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	795b      	ldrb	r3, [r3, #5]
 800195e:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3302      	adds	r3, #2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	791b      	ldrb	r3, [r3, #4]
 800196c:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	b2d9      	uxtb	r1, r3
 8001976:	7b7c      	ldrb	r4, [r7, #13]
 8001978:	89fa      	ldrh	r2, [r7, #14]
 800197a:	7b3b      	ldrb	r3, [r7, #12]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4623      	mov	r3, r4
 8001980:	f000 f818 	bl	80019b4 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2b03      	cmp	r3, #3
 800198e:	ddbf      	ble.n	8001910 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	615a      	str	r2, [r3, #20]

}
 80019a0:	bf00      	nop
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40000400 	.word	0x40000400
 80019b0:	42c80000 	.word	0x42c80000

080019b4 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 80019b4:	b480      	push	{r7}
 80019b6:	b087      	sub	sp, #28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	70fb      	strb	r3, [r7, #3]
 80019c6:	460b      	mov	r3, r1
 80019c8:	803b      	strh	r3, [r7, #0]
 80019ca:	4613      	mov	r3, r2
 80019cc:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d802      	bhi.n	80019da <GP_TIM_SetChannel+0x26>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3318      	adds	r3, #24
 80019d8:	e001      	b.n	80019de <GP_TIM_SetChannel+0x2a>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	331c      	adds	r3, #28
 80019de:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d864      	bhi.n	8001ab0 <GP_TIM_SetChannel+0xfc>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <GP_TIM_SetChannel+0x38>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	080019fd 	.word	0x080019fd
 80019f0:	08001a0d 	.word	0x08001a0d
 80019f4:	08001a1d 	.word	0x08001a1d
 80019f8:	08001a2f 	.word	0x08001a2f
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3334      	adds	r3, #52	; 0x34
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	2304      	movs	r3, #4
 8001a04:	74fb      	strb	r3, [r7, #19]
 8001a06:	2301      	movs	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e019      	b.n	8001a40 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3338      	adds	r3, #56	; 0x38
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	230c      	movs	r3, #12
 8001a14:	74fb      	strb	r3, [r7, #19]
 8001a16:	2310      	movs	r3, #16
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e011      	b.n	8001a40 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	333c      	adds	r3, #60	; 0x3c
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	2304      	movs	r3, #4
 8001a24:	74fb      	strb	r3, [r7, #19]
 8001a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e008      	b.n	8001a40 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3340      	adds	r3, #64	; 0x40
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	230c      	movs	r3, #12
 8001a36:	74fb      	strb	r3, [r7, #19]
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8001a40:	883a      	ldrh	r2, [r7, #0]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	7cfa      	ldrb	r2, [r7, #19]
 8001a4c:	2107      	movs	r1, #7
 8001a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a52:	43d2      	mvns	r2, r2
 8001a54:	401a      	ands	r2, r3
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	78ba      	ldrb	r2, [r7, #2]
 8001a60:	2a00      	cmp	r2, #0
 8001a62:	d101      	bne.n	8001a68 <GP_TIM_SetChannel+0xb4>
 8001a64:	2106      	movs	r1, #6
 8001a66:	e000      	b.n	8001a6a <GP_TIM_SetChannel+0xb6>
 8001a68:	2107      	movs	r1, #7
 8001a6a:	7cfa      	ldrb	r2, [r7, #19]
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	7cfa      	ldrb	r2, [r7, #19]
 8001a7c:	3a01      	subs	r2, #1
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	431a      	orrs	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 8001a8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	621a      	str	r2, [r3, #32]
 8001a9e:	e008      	b.n	8001ab2 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1a      	ldr	r2, [r3, #32]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	621a      	str	r2, [r3, #32]
 8001aae:	e000      	b.n	8001ab2 <GP_TIM_SetChannel+0xfe>
	default: return;
 8001ab0:	bf00      	nop
	}
}
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop

08001abc <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_STATE) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d86c      	bhi.n	8001bac <GP_TIM_PWM_Control+0xf0>

	//		uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit

	if (PWM_STATE == PWM_OUTPUT) {
 8001ad2:	78bb      	ldrb	r3, [r7, #2]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d141      	bne.n	8001b5c <GP_TIM_PWM_Control+0xa0>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	3302      	adds	r3, #2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	88db      	ldrh	r3, [r3, #6]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe ffc3 	bl	8000a70 <__aeabi_i2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4931      	ldr	r1, [pc, #196]	; (8001bb4 <GP_TIM_PWM_Control+0xf8>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f8c6 	bl	8000c80 <__aeabi_fdiv>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe ffb7 	bl	8000a70 <__aeabi_i2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff f806 	bl	8000b18 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f9ee 	bl	8000ef0 <__aeabi_f2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	81bb      	strh	r3, [r7, #12]
		switch(channel) {
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d847      	bhi.n	8001bae <GP_TIM_PWM_Control+0xf2>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <GP_TIM_PWM_Control+0x68>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b3f 	.word	0x08001b3f
 8001b2c:	08001b49 	.word	0x08001b49
 8001b30:	08001b53 	.word	0x08001b53
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	89ba      	ldrh	r2, [r7, #12]
 8001b3a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3c:	e037      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	89ba      	ldrh	r2, [r7, #12]
 8001b44:	639a      	str	r2, [r3, #56]	; 0x38
 8001b46:	e032      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	89ba      	ldrh	r2, [r7, #12]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b50:	e02d      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	89ba      	ldrh	r2, [r7, #12]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5a:	e028      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		}

		//		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
	} else if(PWM_STATE == PWM_STOP)
 8001b5c:	78bb      	ldrb	r3, [r7, #2]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d125      	bne.n	8001bae <GP_TIM_PWM_Control+0xf2>
	{
		uint16_t duty = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	81fb      	strh	r3, [r7, #14]
		switch(channel) {
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d820      	bhi.n	8001bae <GP_TIM_PWM_Control+0xf2>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <GP_TIM_PWM_Control+0xb8>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b8f 	.word	0x08001b8f
 8001b7c:	08001b99 	.word	0x08001b99
 8001b80:	08001ba3 	.word	0x08001ba3
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	89fa      	ldrh	r2, [r7, #14]
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8c:	e00f      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	89fa      	ldrh	r2, [r7, #14]
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
 8001b96:	e00a      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	89fa      	ldrh	r2, [r7, #14]
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba0:	e005      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8001baa:	e000      	b.n	8001bae <GP_TIM_PWM_Control+0xf2>
	if (channel > 3) return;
 8001bac:	bf00      	nop
	{
		//pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
	}


}
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd90      	pop	{r4, r7, pc}
 8001bb4:	42c80000 	.word	0x42c80000

08001bb8 <USART_SetBaudRate>:

#include "USART.h"


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]

	uint32_t PCLKx = APB2_CLOCK_FREQ;	//APB2_CLOCK_FREQ_MHZ
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <USART_SetBaudRate+0xc0>)
 8001bc4:	617b      	str	r3, [r7, #20]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <USART_SetBaudRate+0x36>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009a      	lsls	r2, r3, #2
 8001be0:	441a      	add	r2, r3
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	e00a      	b.n	8001c04 <USART_SetBaudRate+0x4c>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009a      	lsls	r2, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	4a1d      	ldr	r2, [pc, #116]	; (8001c7c <USART_SetBaudRate+0xc4>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	095b      	lsrs	r3, r3, #5
 8001c0e:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2264      	movs	r2, #100	; 0x64
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00a      	beq.n	8001c4a <USART_SetBaudRate+0x92>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	3332      	adds	r3, #50	; 0x32
 8001c3a:	4a10      	ldr	r2, [pc, #64]	; (8001c7c <USART_SetBaudRate+0xc4>)
 8001c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e009      	b.n	8001c5e <USART_SetBaudRate+0xa6>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	3332      	adds	r3, #50	; 0x32
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <USART_SetBaudRate+0xc4>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]
}
 8001c6c:	bf00      	nop
 8001c6e:	3724      	adds	r7, #36	; 0x24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	51eb851f 	.word	0x51eb851f

08001c80 <USART_INIT>:


void USART_INIT(USART_Handle_t *pUSARTHandle){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

	uint32_t tempreg=0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
	//ENABLE PERIPHERAL
	USART1_PCLK_EN();
 8001c8c:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <USART_INIT+0xa4>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c90:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <USART_INIT+0xa4>)
 8001c92:	f043 0310 	orr.w	r3, r3, #16
 8001c96:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d104      	bne.n	8001caa <USART_INIT+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	e010      	b.n	8001ccc <USART_INIT+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	791b      	ldrb	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <USART_INIT+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f043 0308 	orr.w	r3, r3, #8
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	e007      	b.n	8001ccc <USART_INIT+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d103      	bne.n	8001ccc <USART_INIT+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f043 030c 	orr.w	r3, r3, #12
 8001cca:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7b5b      	ldrb	r3, [r3, #13]
 8001cd0:	031b      	lsls	r3, r3, #12
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	60da      	str	r2, [r3, #12]

	tempreg=0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7b1b      	ldrb	r3, [r3, #12]
 8001cea:	031b      	lsls	r3, r3, #12
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	611a      	str	r2, [r3, #16]


	//no hw flow control

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f7ff ff56 	bl	8001bb8 <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << 13);  // UE
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d1a:	60da      	str	r2, [r3, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800

08001d28 <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <USART_SendData>:


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e031      	b.n	8001dc6 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001d62:	bf00      	nop
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ffdc 	bl	8001d28 <USART_GetFlagStatus>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f6      	beq.n	8001d64 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	7b5b      	ldrb	r3, [r3, #13]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d118      	bne.n	8001db0 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d90:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	7b9b      	ldrb	r3, [r3, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	e00b      	b.n	8001dc0 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	e007      	b.n	8001dc0 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3c9      	bcc.n	8001d62 <USART_SendData+0x12>
		}

	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001dce:	bf00      	nop
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2140      	movs	r1, #64	; 0x40
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ffa6 	bl	8001d28 <USART_GetFlagStatus>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f6      	beq.n	8001dd0 <USART_SendData+0x80>

}
 8001de2:	bf00      	nop
 8001de4:	bf00      	nop
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <USART_ReceiveData>:

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e045      	b.n	8001e8a <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8001dfe:	bf00      	nop
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2120      	movs	r1, #32
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff8e 	bl	8001d28 <USART_GetFlagStatus>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f6      	beq.n	8001e00 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	7b5b      	ldrb	r3, [r3, #13]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d11d      	bne.n	8001e56 <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	7b9b      	ldrb	r3, [r3, #14]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10f      	bne.n	8001e42 <USART_ReceiveData+0x56>
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	3301      	adds	r3, #1
 8001e38:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	e020      	b.n	8001e84 <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	e016      	b.n	8001e84 <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	7b9b      	ldrb	r3, [r3, #14]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	701a      	strb	r2, [r3, #0]
 8001e6a:	e008      	b.n	8001e7e <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	3301      	adds	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d3b5      	bcc.n	8001dfe <USART_ReceiveData+0x12>
		}
	}

}
 8001e92:	bf00      	nop
 8001e94:	bf00      	nop
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <init_random_seed>:
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);
void Full_USART_Config(void);
uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start);

void init_random_seed(void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	srand(TIM1_TMR.pTIMx->CNT);  // Seed with x,y coords/angle
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <init_random_seed+0x14>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fdbc 	bl	8002a24 <srand>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200000a4 	.word	0x200000a4

08001eb4 <get_random_direction>:

uint16_t get_random_direction(void) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	return 150 + (rand() % 450);  // Between 50 - 200 ms lets say
 8001eb8:	f000 fde2 	bl	8002a80 <rand>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <get_random_direction+0x2c>)
 8001ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ec4:	441a      	add	r2, r3
 8001ec6:	1211      	asrs	r1, r2, #8
 8001ec8:	17da      	asrs	r2, r3, #31
 8001eca:	1a8a      	subs	r2, r1, r2
 8001ecc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001ed0:	fb01 f202 	mul.w	r2, r1, r2
 8001ed4:	1a9a      	subs	r2, r3, r2
 8001ed6:	b293      	uxth	r3, r2
 8001ed8:	3396      	adds	r3, #150	; 0x96
 8001eda:	b29b      	uxth	r3, r3
	//what is maximum rand value?
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	91a2b3c5 	.word	0x91a2b3c5

08001ee4 <ms_delay>:

uint16_t calc_rotation(uint32_t duration_ms, float angular_velocity_dps) {
	return (uint16_t)((duration_ms / 1000.0f) * angular_velocity_dps);  // degrees = time * speed
}

void ms_delay(uint32_t time_ms) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e003      	b.n	8001efa <ms_delay+0x16>
		__asm__("nop");
 8001ef2:	bf00      	nop
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	1a9a      	subs	r2, r3, r2
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f2      	bhi.n	8001ef2 <ms_delay+0xe>
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <get_current_time>:

uint16_t get_current_time(AD_TIM_RegDef_t *pTIMx)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	uint16_t time = pTIMx->CNT;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	81fb      	strh	r3, [r7, #14]
	return time;
 8001f26:	89fb      	ldrh	r3, [r7, #14]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <get_elapsed_time>:


uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b085      	sub	sp, #20
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	807b      	strh	r3, [r7, #2]
	uint16_t now = pTIMx->CNT;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	81bb      	strh	r3, [r7, #12]
	uint16_t elapsed;

	if (now >= start) {
 8001f44:	89ba      	ldrh	r2, [r7, #12]
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d304      	bcc.n	8001f56 <get_elapsed_time+0x24>
		elapsed = now - start;
 8001f4c:	89ba      	ldrh	r2, [r7, #12]
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	81fb      	strh	r3, [r7, #14]
 8001f54:	e003      	b.n	8001f5e <get_elapsed_time+0x2c>
	} else {
		elapsed = (0xFFFF - start) + now + 1; // handle overflow
 8001f56:	89ba      	ldrh	r2, [r7, #12]
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	81fb      	strh	r3, [r7, #14]
	}
	return elapsed - 25;//error
 8001f5e:	89fb      	ldrh	r3, [r7, #14]
 8001f60:	3b19      	subs	r3, #25
 8001f62:	b29b      	uxth	r3, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <send_coordinates>:

void send_coordinates()
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
	//X_POINT = X_POINT + DRIVING_ELAPSED_TIME * speed * sinf(ANGLE * (M_PI / 180.0f);
	//X_POINT = Y_POINT + DRIVING_ELAPSED_TIME * speed * cosf(ANGLE * (M_PI / 180.0f);

	//char msg[32];

	X_POINT = X_POINT + (DRIVING_ELAPSED_TIME /100) * sinf(ANGLE * (M_PI / 180.0f));
 8001f76:	4b74      	ldr	r3, [pc, #464]	; (8002148 <send_coordinates+0x1d8>)
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fd77 	bl	8000a70 <__aeabi_i2f>
 8001f82:	4604      	mov	r4, r0
 8001f84:	4b71      	ldr	r3, [pc, #452]	; (800214c <send_coordinates+0x1dc>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4a71      	ldr	r2, [pc, #452]	; (8002150 <send_coordinates+0x1e0>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fd6b 	bl	8000a70 <__aeabi_i2f>
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	4b6d      	ldr	r3, [pc, #436]	; (8002154 <send_coordinates+0x1e4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fc03 	bl	80007ac <__aeabi_f2d>
 8001fa6:	a366      	add	r3, pc, #408	; (adr r3, 8002140 <send_coordinates+0x1d0>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe f970 	bl	8000290 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe fc50 	bl	800085c <__aeabi_d2f>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 ffa2 	bl	8003f08 <sinf>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4628      	mov	r0, r5
 8001fca:	f7fe fda5 	bl	8000b18 <__aeabi_fmul>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7fe fc98 	bl	8000908 <__addsf3>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ff62 	bl	8000ea4 <__aeabi_f2iz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b21a      	sxth	r2, r3
 8001fe4:	4b58      	ldr	r3, [pc, #352]	; (8002148 <send_coordinates+0x1d8>)
 8001fe6:	801a      	strh	r2, [r3, #0]
	Y_POINT = Y_POINT + (DRIVING_ELAPSED_TIME /100) * cosf(ANGLE * (M_PI / 180.0f));
 8001fe8:	4b5b      	ldr	r3, [pc, #364]	; (8002158 <send_coordinates+0x1e8>)
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fd3e 	bl	8000a70 <__aeabi_i2f>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4b55      	ldr	r3, [pc, #340]	; (800214c <send_coordinates+0x1dc>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4a54      	ldr	r2, [pc, #336]	; (8002150 <send_coordinates+0x1e0>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	b29b      	uxth	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fd32 	bl	8000a70 <__aeabi_i2f>
 800200c:	4605      	mov	r5, r0
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <send_coordinates+0x1e4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fbca 	bl	80007ac <__aeabi_f2d>
 8002018:	a349      	add	r3, pc, #292	; (adr r3, 8002140 <send_coordinates+0x1d0>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe f937 	bl	8000290 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4610      	mov	r0, r2
 8002028:	4619      	mov	r1, r3
 800202a:	f7fe fc17 	bl	800085c <__aeabi_d2f>
 800202e:	4603      	mov	r3, r0
 8002030:	4618      	mov	r0, r3
 8002032:	f001 ff31 	bl	8003e98 <cosf>
 8002036:	4603      	mov	r3, r0
 8002038:	4619      	mov	r1, r3
 800203a:	4628      	mov	r0, r5
 800203c:	f7fe fd6c 	bl	8000b18 <__aeabi_fmul>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f7fe fc5f 	bl	8000908 <__addsf3>
 800204a:	4603      	mov	r3, r0
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe ff29 	bl	8000ea4 <__aeabi_f2iz>
 8002052:	4603      	mov	r3, r0
 8002054:	b21a      	sxth	r2, r3
 8002056:	4b40      	ldr	r3, [pc, #256]	; (8002158 <send_coordinates+0x1e8>)
 8002058:	801a      	strh	r2, [r3, #0]

	int16_t COORD_X = X_POINT + (int16_t)(7.0f * sinf(ANGLE * (M_PI / 180.0f)));
 800205a:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <send_coordinates+0x1e4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fba4 	bl	80007ac <__aeabi_f2d>
 8002064:	a336      	add	r3, pc, #216	; (adr r3, 8002140 <send_coordinates+0x1d0>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe f911 	bl	8000290 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fbf1 	bl	800085c <__aeabi_d2f>
 800207a:	4603      	mov	r3, r0
 800207c:	4618      	mov	r0, r3
 800207e:	f001 ff43 	bl	8003f08 <sinf>
 8002082:	4603      	mov	r3, r0
 8002084:	4935      	ldr	r1, [pc, #212]	; (800215c <send_coordinates+0x1ec>)
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fd46 	bl	8000b18 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ff08 	bl	8000ea4 <__aeabi_f2iz>
 8002094:	4603      	mov	r3, r0
 8002096:	b21b      	sxth	r3, r3
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <send_coordinates+0x1d8>)
 800209c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	81fb      	strh	r3, [r7, #14]
	int16_t COORD_Y = Y_POINT + (int16_t)(7.0f * cosf(ANGLE * (M_PI / 180.0f)));
 80020a8:	4b2a      	ldr	r3, [pc, #168]	; (8002154 <send_coordinates+0x1e4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fb7d 	bl	80007ac <__aeabi_f2d>
 80020b2:	a323      	add	r3, pc, #140	; (adr r3, 8002140 <send_coordinates+0x1d0>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe f8ea 	bl	8000290 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fbca 	bl	800085c <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 fee4 	bl	8003e98 <cosf>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4922      	ldr	r1, [pc, #136]	; (800215c <send_coordinates+0x1ec>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fd1f 	bl	8000b18 <__aeabi_fmul>
 80020da:	4603      	mov	r3, r0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fee1 	bl	8000ea4 <__aeabi_f2iz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	b21b      	sxth	r3, r3
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <send_coordinates+0x1e8>)
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4413      	add	r3, r2
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	81bb      	strh	r3, [r7, #12]
	//	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
	//	sprintf(msg, "COORD_Y: %d\r\n", COORD_Y);
	//	USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));


	DRIVING_ELAPSED_TIME = 0;
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <send_coordinates+0x1dc>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	801a      	strh	r2, [r3, #0]
	DRIVING_START_TIME = 0;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <send_coordinates+0x1f0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]

	//Build packet
	uint8_t data[5];
	data[0] = '!'; // Start byte
 8002102:	2321      	movs	r3, #33	; 0x21
 8002104:	713b      	strb	r3, [r7, #4]

	data[1] = (uint8_t)((COORD_X >> 8) & 0xFF); // X high byte
 8002106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210a:	121b      	asrs	r3, r3, #8
 800210c:	b21b      	sxth	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	717b      	strb	r3, [r7, #5]
	data[2] = (uint8_t)(COORD_X & 0xFF);        // X low byte
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	71bb      	strb	r3, [r7, #6]

	data[3] = (uint8_t)((COORD_Y >> 8) & 0xFF); // Y high byte
 8002118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800211c:	121b      	asrs	r3, r3, #8
 800211e:	b21b      	sxth	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	71fb      	strb	r3, [r7, #7]
	data[4] = (uint8_t)(COORD_Y & 0xFF);        // Y low byte
 8002124:	89bb      	ldrh	r3, [r7, #12]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	723b      	strb	r3, [r7, #8]

	// Send 5 bytes over USART
	USART_SendData(&USART1_TXRX, data, 5);
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	2205      	movs	r2, #5
 800212e:	4619      	mov	r1, r3
 8002130:	480c      	ldr	r0, [pc, #48]	; (8002164 <send_coordinates+0x1f4>)
 8002132:	f7ff fe0d 	bl	8001d50 <USART_SendData>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bdb0      	pop	{r4, r5, r7, pc}
 800213e:	bf00      	nop
 8002140:	a2529d39 	.word	0xa2529d39
 8002144:	3f91df46 	.word	0x3f91df46
 8002148:	20000110 	.word	0x20000110
 800214c:	20000116 	.word	0x20000116
 8002150:	51eb851f 	.word	0x51eb851f
 8002154:	20000000 	.word	0x20000000
 8002158:	20000112 	.word	0x20000112
 800215c:	40e00000 	.word	0x40e00000
 8002160:	20000114 	.word	0x20000114
 8002164:	200000ec 	.word	0x200000ec

08002168 <main>:

uint8_t password = 0;



int main(void) {
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af00      	add	r7, sp, #0

	//while(1);

	Full_RCC_Config();
 800216e:	f000 f9a5 	bl	80024bc <Full_RCC_Config>
	Full_AD_TIM_Config();
 8002172:	f000 faf5 	bl	8002760 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 8002176:	f000 f9b9 	bl	80024ec <Full_GPIO_Config>
	Full_GP_TIM_Config();
 800217a:	f000 fab9 	bl	80026f0 <Full_GP_TIM_Config>
	Full_USART_Config();
 800217e:	f000 fb17 	bl	80027b0 <Full_USART_Config>
	Full_I2C_Config();
 8002182:	f000 faff 	bl	8002784 <Full_I2C_Config>
	init_random_seed();
 8002186:	f7ff fe89 	bl	8001e9c <init_random_seed>
	ms_delay(500);
 800218a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800218e:	f7ff fea9 	bl	8001ee4 <ms_delay>

		//		if(send_coords_flag){
		//			send_coordinates();
		//		}

		if(calc_angle_flag){
 8002192:	4b29      	ldr	r3, [pc, #164]	; (8002238 <main+0xd0>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00c      	beq.n	80021b6 <main+0x4e>
			//use ELAPSED TIME and angular_velocity to calc angle
			//calc_angle();
			calc_angle_flag = 0;
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <main+0xd0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
			DRIVING_START_TIME = get_current_time(TIM1);
 80021a2:	4826      	ldr	r0, [pc, #152]	; (800223c <main+0xd4>)
 80021a4:	f7ff feb8 	bl	8001f18 <get_current_time>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <main+0xd8>)
 80021ae:	801a      	strh	r2, [r3, #0]
			DRIVING_ELAPSED_TIME = 0;
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <main+0xdc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	801a      	strh	r2, [r3, #0]
		}

		if(current_state == STATE_DRIVING)
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <main+0xe0>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d038      	beq.n	8002230 <main+0xc8>
			//			float angle_rad = ANGLE * (M_PI / 180.0f);
			//			X_POINT += (int16_t)(INCREMENT * sinf(angle_rad));
			//			Y_POINT += (int16_t)(INCREMENT * cosf(angle_rad));
			//every 50 ms
		}
		else if(current_state == STATE_TURNING)
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <main+0xe0>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d034      	beq.n	8002230 <main+0xc8>
		{
			//float gyro_dps = raw_gyro / 65.5f;  // if FSR = ±500°/s
			//angular_velocity = read_w_gyro(); => Z, last 2 bytes of the 6 read
		}
		else if(current_state == STATE_IDLE)
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <main+0xe0>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d130      	bne.n	8002230 <main+0xc8>
		{
			USART_ReceiveData(&USART1_TXRX, &password, 1);
 80021ce:	2201      	movs	r2, #1
 80021d0:	491e      	ldr	r1, [pc, #120]	; (800224c <main+0xe4>)
 80021d2:	481f      	ldr	r0, [pc, #124]	; (8002250 <main+0xe8>)
 80021d4:	f7ff fe0a 	bl	8001dec <USART_ReceiveData>
			GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 80021d8:	210d      	movs	r1, #13
 80021da:	481e      	ldr	r0, [pc, #120]	; (8002254 <main+0xec>)
 80021dc:	f7ff f8e3 	bl	80013a6 <GPIO_Toggle_Pin>
			if(password == START_PSW)
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <main+0xe4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d123      	bne.n	8002230 <main+0xc8>
			{
				//START CONDITION basically
				current_state = STATE_DRIVING;
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <main+0xe0>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	701a      	strb	r2, [r3, #0]
				char msg[32];
				drive_FWD(&TIM2_PWM);
 80021ee:	481a      	ldr	r0, [pc, #104]	; (8002258 <main+0xf0>)
 80021f0:	f7ff f9d0 	bl	8001594 <drive_FWD>
				//measure acceleration here??
				DRIVING_START_TIME = get_current_time(TIM1);
 80021f4:	4811      	ldr	r0, [pc, #68]	; (800223c <main+0xd4>)
 80021f6:	f7ff fe8f 	bl	8001f18 <get_current_time>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <main+0xd8>)
 8002200:	801a      	strh	r2, [r3, #0]
				sprintf(msg, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <main+0xd8>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	461a      	mov	r2, r3
 800220a:	463b      	mov	r3, r7
 800220c:	4913      	ldr	r1, [pc, #76]	; (800225c <main+0xf4>)
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fc74 	bl	8002afc <siprintf>
				USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
 8002214:	463b      	mov	r3, r7
 8002216:	4618      	mov	r0, r3
 8002218:	f7fd ffe2 	bl	80001e0 <strlen>
 800221c:	4602      	mov	r2, r0
 800221e:	463b      	mov	r3, r7
 8002220:	4619      	mov	r1, r3
 8002222:	480b      	ldr	r0, [pc, #44]	; (8002250 <main+0xe8>)
 8002224:	f7ff fd94 	bl	8001d50 <USART_SendData>
				GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
 8002228:	2101      	movs	r1, #1
 800222a:	200a      	movs	r0, #10
 800222c:	f7ff f8d4 	bl	80013d8 <GPIO_IRQInterruptConfig>
		else if(current_state == STATE_STOPPED)
		{

		}

		ms_delay(50);
 8002230:	2032      	movs	r0, #50	; 0x32
 8002232:	f7ff fe57 	bl	8001ee4 <ms_delay>
		if(calc_angle_flag){
 8002236:	e7ac      	b.n	8002192 <main+0x2a>
 8002238:	2000011c 	.word	0x2000011c
 800223c:	40010000 	.word	0x40010000
 8002240:	20000114 	.word	0x20000114
 8002244:	20000116 	.word	0x20000116
 8002248:	20000085 	.word	0x20000085
 800224c:	2000011e 	.word	0x2000011e
 8002250:	200000ec 	.word	0x200000ec
 8002254:	40020800 	.word	0x40020800
 8002258:	20000088 	.word	0x20000088
 800225c:	08004ac4 	.word	0x08004ac4

08002260 <EXTI4_IRQHandler>:
}



void EXTI4_IRQHandler(void) //WALL SENSED
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, DISABLE);
	GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,DISABLE);
 8002266:	2200      	movs	r2, #0
 8002268:	210d      	movs	r1, #13
 800226a:	4880      	ldr	r0, [pc, #512]	; (800246c <EXTI4_IRQHandler+0x20c>)
 800226c:	f7ff f862 	bl	8001334 <GPIO_Write_Pin>

	//send coords here maybe

	if(!GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 8002270:	2104      	movs	r1, #4
 8002272:	487f      	ldr	r0, [pc, #508]	; (8002470 <EXTI4_IRQHandler+0x210>)
 8002274:	f7ff f882 	bl	800137c <GPIO_Read_Pin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 8089 	bne.w	8002392 <EXTI4_IRQHandler+0x132>
		wall_sensed = 1;
 8002280:	4b7c      	ldr	r3, [pc, #496]	; (8002474 <EXTI4_IRQHandler+0x214>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
		char msg2[32];
		sprintf(msg2, "StoppedDrivingAt %u\r\n", get_current_time(TIM1));
 8002286:	487c      	ldr	r0, [pc, #496]	; (8002478 <EXTI4_IRQHandler+0x218>)
 8002288:	f7ff fe46 	bl	8001f18 <get_current_time>
 800228c:	4603      	mov	r3, r0
 800228e:	461a      	mov	r2, r3
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	497a      	ldr	r1, [pc, #488]	; (800247c <EXTI4_IRQHandler+0x21c>)
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fc31 	bl	8002afc <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4618      	mov	r0, r3
 800229e:	f7fd ff9f 	bl	80001e0 <strlen>
 80022a2:	4602      	mov	r2, r0
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4875      	ldr	r0, [pc, #468]	; (8002480 <EXTI4_IRQHandler+0x220>)
 80022aa:	f7ff fd51 	bl	8001d50 <USART_SendData>
		stop_FWD(&TIM2_PWM);//driving stops here
 80022ae:	4875      	ldr	r0, [pc, #468]	; (8002484 <EXTI4_IRQHandler+0x224>)
 80022b0:	f7ff f9b8 	bl	8001624 <stop_FWD>
		DRIVING_ELAPSED_TIME = get_elapsed_time(TIM1, DRIVING_START_TIME);//how long driving took place
 80022b4:	4b74      	ldr	r3, [pc, #464]	; (8002488 <EXTI4_IRQHandler+0x228>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4619      	mov	r1, r3
 80022bc:	486e      	ldr	r0, [pc, #440]	; (8002478 <EXTI4_IRQHandler+0x218>)
 80022be:	f7ff fe38 	bl	8001f32 <get_elapsed_time>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b71      	ldr	r3, [pc, #452]	; (800248c <EXTI4_IRQHandler+0x22c>)
 80022c8:	801a      	strh	r2, [r3, #0]
		sprintf(msg2, "DroveFor %u\r\n", DRIVING_ELAPSED_TIME);
 80022ca:	4b70      	ldr	r3, [pc, #448]	; (800248c <EXTI4_IRQHandler+0x22c>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	1d3b      	adds	r3, r7, #4
 80022d4:	496e      	ldr	r1, [pc, #440]	; (8002490 <EXTI4_IRQHandler+0x230>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fc10 	bl	8002afc <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 80022dc:	1d3b      	adds	r3, r7, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff7e 	bl	80001e0 <strlen>
 80022e4:	4602      	mov	r2, r0
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4865      	ldr	r0, [pc, #404]	; (8002480 <EXTI4_IRQHandler+0x220>)
 80022ec:	f7ff fd30 	bl	8001d50 <USART_SendData>

		send_coordinates();
 80022f0:	f7ff fe3e 	bl	8001f70 <send_coordinates>
		ms_delay(500);
 80022f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022f8:	f7ff fdf4 	bl	8001ee4 <ms_delay>

		//send_coords_flag = 1;
		//send coords here

		current_state = STATE_TURNING;
 80022fc:	4b65      	ldr	r3, [pc, #404]	; (8002494 <EXTI4_IRQHandler+0x234>)
 80022fe:	2202      	movs	r2, #2
 8002300:	701a      	strb	r2, [r3, #0]
		calc_angle_flag = 0;
 8002302:	4b65      	ldr	r3, [pc, #404]	; (8002498 <EXTI4_IRQHandler+0x238>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
		TURNING_ELAPSED_TIME = 0;
 8002308:	4b64      	ldr	r3, [pc, #400]	; (800249c <EXTI4_IRQHandler+0x23c>)
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]
		uint16_t turn_dir = get_random_direction();
 800230e:	f7ff fdd1 	bl	8001eb4 <get_random_direction>
 8002312:	4603      	mov	r3, r0
 8002314:	84fb      	strh	r3, [r7, #38]	; 0x26
		sprintf(msg2, "RandomDir: %u\r\n", (uint16_t)turn_dir);
 8002316:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4961      	ldr	r1, [pc, #388]	; (80024a0 <EXTI4_IRQHandler+0x240>)
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fbed 	bl	8002afc <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4618      	mov	r0, r3
 8002326:	f7fd ff5b 	bl	80001e0 <strlen>
 800232a:	4602      	mov	r2, r0
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4619      	mov	r1, r3
 8002330:	4853      	ldr	r0, [pc, #332]	; (8002480 <EXTI4_IRQHandler+0x220>)
 8002332:	f7ff fd0d 	bl	8001d50 <USART_SendData>

		if(!(turn_dir % 2))
 8002336:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <EXTI4_IRQHandler+0xf0>
		{
			direction_state = TURNING_RIGHT;
 8002342:	4b58      	ldr	r3, [pc, #352]	; (80024a4 <EXTI4_IRQHandler+0x244>)
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
			turn_RGT(&TIM2_PWM);
 8002348:	484e      	ldr	r0, [pc, #312]	; (8002484 <EXTI4_IRQHandler+0x224>)
 800234a:	f7ff f9a5 	bl	8001698 <turn_RGT>
 800234e:	e005      	b.n	800235c <EXTI4_IRQHandler+0xfc>
		}
		else
		{
			direction_state = TURNING_LEFT;
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <EXTI4_IRQHandler+0x244>)
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
			turn_LFT(&TIM2_PWM);
 8002356:	484b      	ldr	r0, [pc, #300]	; (8002484 <EXTI4_IRQHandler+0x224>)
 8002358:	f7ff f9de 	bl	8001718 <turn_LFT>
		}
		TURNING_START_TIME = get_current_time(TIM1);
 800235c:	4846      	ldr	r0, [pc, #280]	; (8002478 <EXTI4_IRQHandler+0x218>)
 800235e:	f7ff fddb 	bl	8001f18 <get_current_time>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <EXTI4_IRQHandler+0x248>)
 8002368:	801a      	strh	r2, [r3, #0]
		sprintf(msg2, "StartedTurningAt %u\r\n", TURNING_START_TIME);
 800236a:	4b4f      	ldr	r3, [pc, #316]	; (80024a8 <EXTI4_IRQHandler+0x248>)
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <EXTI4_IRQHandler+0x24c>)
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fbc0 	bl	8002afc <siprintf>
		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ff2e 	bl	80001e0 <strlen>
 8002384:	4602      	mov	r2, r0
 8002386:	1d3b      	adds	r3, r7, #4
 8002388:	4619      	mov	r1, r3
 800238a:	483d      	ldr	r0, [pc, #244]	; (8002480 <EXTI4_IRQHandler+0x220>)
 800238c:	f7ff fce0 	bl	8001d50 <USART_SendData>
 8002390:	e065      	b.n	800245e <EXTI4_IRQHandler+0x1fe>
	}
	else{
		if(wall_sensed){
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <EXTI4_IRQHandler+0x214>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d060      	beq.n	800245e <EXTI4_IRQHandler+0x1fe>
			wall_sensed = 0;
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <EXTI4_IRQHandler+0x214>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			char msg3[32];
			stop_FWD(&TIM2_PWM);//turning stops here
 80023a2:	4838      	ldr	r0, [pc, #224]	; (8002484 <EXTI4_IRQHandler+0x224>)
 80023a4:	f7ff f93e 	bl	8001624 <stop_FWD>
			sprintf(msg3, "StoppedTurningAt %u\r\n", get_current_time(TIM1));
 80023a8:	4833      	ldr	r0, [pc, #204]	; (8002478 <EXTI4_IRQHandler+0x218>)
 80023aa:	f7ff fdb5 	bl	8001f18 <get_current_time>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	493e      	ldr	r1, [pc, #248]	; (80024b0 <EXTI4_IRQHandler+0x250>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fba0 	bl	8002afc <siprintf>
			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fd ff0e 	bl	80001e0 <strlen>
 80023c4:	4602      	mov	r2, r0
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	4619      	mov	r1, r3
 80023ca:	482d      	ldr	r0, [pc, #180]	; (8002480 <EXTI4_IRQHandler+0x220>)
 80023cc:	f7ff fcc0 	bl	8001d50 <USART_SendData>
			TURNING_ELAPSED_TIME = get_elapsed_time(TIM1,TURNING_START_TIME);
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <EXTI4_IRQHandler+0x248>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	4827      	ldr	r0, [pc, #156]	; (8002478 <EXTI4_IRQHandler+0x218>)
 80023da:	f7ff fdaa 	bl	8001f32 <get_elapsed_time>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <EXTI4_IRQHandler+0x23c>)
 80023e4:	801a      	strh	r2, [r3, #0]
			sprintf(msg3, "TurnedFor %u\r\n", TURNING_ELAPSED_TIME);
 80023e6:	4b2d      	ldr	r3, [pc, #180]	; (800249c <EXTI4_IRQHandler+0x23c>)
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4930      	ldr	r1, [pc, #192]	; (80024b4 <EXTI4_IRQHandler+0x254>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fb82 	bl	8002afc <siprintf>
			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fd fef0 	bl	80001e0 <strlen>
 8002400:	4602      	mov	r2, r0
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	4619      	mov	r1, r3
 8002406:	481e      	ldr	r0, [pc, #120]	; (8002480 <EXTI4_IRQHandler+0x220>)
 8002408:	f7ff fca2 	bl	8001d50 <USART_SendData>

			//calc_angle();
			//calc angle using TURNING_ELAPSED_TIME & angular_velocity, some error is expected

			ms_delay(500);
 800240c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002410:	f7ff fd68 	bl	8001ee4 <ms_delay>

			current_state = STATE_DRIVING;
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <EXTI4_IRQHandler+0x234>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
			DRIVING_START_TIME = get_current_time(TIM1);
 800241a:	4817      	ldr	r0, [pc, #92]	; (8002478 <EXTI4_IRQHandler+0x218>)
 800241c:	f7ff fd7c 	bl	8001f18 <get_current_time>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <EXTI4_IRQHandler+0x228>)
 8002426:	801a      	strh	r2, [r3, #0]
			drive_FWD(&TIM2_PWM);
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <EXTI4_IRQHandler+0x224>)
 800242a:	f7ff f8b3 	bl	8001594 <drive_FWD>
			sprintf(msg3, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <EXTI4_IRQHandler+0x228>)
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	491f      	ldr	r1, [pc, #124]	; (80024b8 <EXTI4_IRQHandler+0x258>)
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fb5e 	bl	8002afc <siprintf>
			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd fecc 	bl	80001e0 <strlen>
 8002448:	4602      	mov	r2, r0
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	480c      	ldr	r0, [pc, #48]	; (8002480 <EXTI4_IRQHandler+0x220>)
 8002450:	f7ff fc7e 	bl	8001d50 <USART_SendData>
			GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,ENABLE);
 8002454:	2201      	movs	r2, #1
 8002456:	210d      	movs	r1, #13
 8002458:	4804      	ldr	r0, [pc, #16]	; (800246c <EXTI4_IRQHandler+0x20c>)
 800245a:	f7fe ff6b 	bl	8001334 <GPIO_Write_Pin>
		}
	}
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 800245e:	2004      	movs	r0, #4
 8002460:	f7ff f83e 	bl	80014e0 <GPIO_IRQHandling>
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);

	//SHOULD ADD FLAGS FOR SAFETY => TURNING/DRIVING STARTED = 1

}
 8002464:	bf00      	nop
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40020800 	.word	0x40020800
 8002470:	40020000 	.word	0x40020000
 8002474:	2000011d 	.word	0x2000011d
 8002478:	40010000 	.word	0x40010000
 800247c:	08004adc 	.word	0x08004adc
 8002480:	200000ec 	.word	0x200000ec
 8002484:	20000088 	.word	0x20000088
 8002488:	20000114 	.word	0x20000114
 800248c:	20000116 	.word	0x20000116
 8002490:	08004af4 	.word	0x08004af4
 8002494:	20000085 	.word	0x20000085
 8002498:	2000011c 	.word	0x2000011c
 800249c:	2000011a 	.word	0x2000011a
 80024a0:	08004b04 	.word	0x08004b04
 80024a4:	20000084 	.word	0x20000084
 80024a8:	20000118 	.word	0x20000118
 80024ac:	08004b14 	.word	0x08004b14
 80024b0:	08004b2c 	.word	0x08004b2c
 80024b4:	08004b44 	.word	0x08004b44
 80024b8:	08004ac4 	.word	0x08004ac4

080024bc <Full_RCC_Config>:

void Full_RCC_Config(void){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <Full_RCC_Config+0x2c>)
 80024c4:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 80024c6:	2300      	movs	r3, #0
 80024c8:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 80024ce:	2304      	movs	r3, #4
 80024d0:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 80024d2:	2304      	movs	r3, #4
 80024d4:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 80024d6:	463b      	mov	r3, r7
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff f95d 	bl	8001798 <RCC_Clock_Config>
}
 80024de:	bf00      	nop
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b0a2      	sub	sp, #136	; 0x88
 80024f0:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 80024f2:	4b7c      	ldr	r3, [pc, #496]	; (80026e4 <Full_GPIO_Config+0x1f8>)
 80024f4:	67fb      	str	r3, [r7, #124]	; 0x7c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80024f6:	230d      	movs	r3, #13
 80024f8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8002502:	2303      	movs	r3, #3
 8002504:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002508:	2300      	movs	r3, #0
 800250a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800250e:	2300      	movs	r3, #0
 8002510:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PA4 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 8002516:	673b      	str	r3, [r7, #112]	; 0x70
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8002518:	2304      	movs	r3, #4
 800251a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RFT;
 800251e:	2306      	movs	r3, #6
 8002520:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


	// SLP CONTROL CONFIG
	// GPIO Configuration for GpioSensor PB15
	GPIO_Handle_t GpioSleep;
	GpioSleep.pGPIOx = GPIOB;
 8002530:	4b6e      	ldr	r3, [pc, #440]	; (80026ec <Full_GPIO_Config+0x200>)
 8002532:	667b      	str	r3, [r7, #100]	; 0x64
	GpioSleep.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8002534:	230f      	movs	r3, #15
 8002536:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	GpioSleep.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	GpioSleep.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8002540:	2303      	movs	r3, #3
 8002542:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	GpioSleep.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	GpioSleep.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	// UART CONFIG
	// GPIO Configuration for UART_TX PA9 = UART_TX
	GPIO_Handle_t GpioTX;
	GpioTX.pGPIOx = GPIOA;
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 8002554:	65bb      	str	r3, [r7, #88]	; 0x58
	GpioTX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8002556:	2309      	movs	r3, #9
 8002558:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GpioTX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 800255c:	2302      	movs	r3, #2
 800255e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GpioTX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8002562:	2307      	movs	r3, #7
 8002564:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	GpioTX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GpioTX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// GPIO Configuration for GpioSensor PA10 = UART_RX
	GPIO_Handle_t GpioRX;
	GpioRX.pGPIOx = GPIOA;
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
	GpioRX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8002578:	230a      	movs	r3, #10
 800257a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	GpioRX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 800257e:	2302      	movs	r3, #2
 8002580:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioRX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8002584:	2307      	movs	r3, #7
 8002586:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GpioRX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	GpioRX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 8002596:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 8002598:	643b      	str	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800259a:	2303      	movs	r3, #3
 800259c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025a0:	2302      	movs	r3, #2
 80025a2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025a6:	2303      	movs	r3, #3
 80025a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80025c2:	2302      	movs	r3, #2
 80025c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025c8:	2302      	movs	r3, #2
 80025ca:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025ce:	2303      	movs	r3, #3
 80025d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <Full_GPIO_Config+0x200>)
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80025ea:	2303      	movs	r3, #3
 80025ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80025f0:	2302      	movs	r3, #2
 80025f2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80025f6:	2303      	movs	r3, #3
 80025f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8002602:	2301      	movs	r3, #1
 8002604:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <Full_GPIO_Config+0x1fc>)
 8002610:	61fb      	str	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002618:	2302      	movs	r3, #2
 800261a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800261e:	2303      	movs	r3, #3
 8002620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <Full_GPIO_Config+0x200>)
 8002638:	613b      	str	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800263a:	2306      	movs	r3, #6
 800263c:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800263e:	2302      	movs	r3, #2
 8002640:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002642:	2303      	movs	r3, #3
 8002644:	75bb      	strb	r3, [r7, #22]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002646:	2300      	movs	r3, #0
 8002648:	763b      	strb	r3, [r7, #24]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 800264a:	2304      	movs	r3, #4
 800264c:	767b      	strb	r3, [r7, #25]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800264e:	2300      	movs	r3, #0
 8002650:	75fb      	strb	r3, [r7, #23]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <Full_GPIO_Config+0x200>)
 8002654:	607b      	str	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8002656:	2307      	movs	r3, #7
 8002658:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800265a:	2302      	movs	r3, #2
 800265c:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800265e:	2303      	movs	r3, #3
 8002660:	72bb      	strb	r3, [r7, #10]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002662:	2300      	movs	r3, #0
 8002664:	733b      	strb	r3, [r7, #12]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8002666:	2304      	movs	r3, #4
 8002668:	737b      	strb	r3, [r7, #13]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800266a:	2300      	movs	r3, #0
 800266c:	72fb      	strb	r3, [r7, #11]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 800266e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fcfc 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSensor);
 8002678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800267c:	4618      	mov	r0, r3
 800267e:	f7fe fcf7 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH3);
 8002682:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe fcf2 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH2);
 800268c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fced 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH1);
 8002696:	f107 031c 	add.w	r3, r7, #28
 800269a:	4618      	mov	r0, r3
 800269c:	f7fe fce8 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80026a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fce3 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSCL);
 80026aa:	f107 0310 	add.w	r3, r7, #16
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fcde 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fcda 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioTX);
 80026bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fcd5 	bl	8001070 <GPIO_Init>
	GPIO_Init(&GpioRX);
 80026c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fcd0 	bl	8001070 <GPIO_Init>

	GPIO_Init(&GpioSleep);
 80026d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fe fccb 	bl	8001070 <GPIO_Init>

	//GPIO_IRQInterruptConfig(EXTI15_10_IRQ, ENABLE);
}
 80026da:	bf00      	nop
 80026dc:	3788      	adds	r7, #136	; 0x88
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400

080026f0 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <Full_GP_TIM_Config+0x6c>)
 80026f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026fa:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <Full_GP_TIM_Config+0x6c>)
 80026fe:	2204      	movs	r2, #4
 8002700:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 3200;
 8002702:	4b16      	ldr	r3, [pc, #88]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002704:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002708:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <Full_GP_TIM_Config+0x6c>)
 800270c:	2201      	movs	r2, #1
 800270e:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002712:	2200      	movs	r2, #0
 8002714:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = 10;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002718:	220a      	movs	r2, #10
 800271a:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <Full_GP_TIM_Config+0x6c>)
 800271e:	2201      	movs	r2, #1
 8002720:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002724:	2200      	movs	r2, #0
 8002726:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = 10;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <Full_GP_TIM_Config+0x6c>)
 800272a:	220a      	movs	r2, #10
 800272c:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002730:	2201      	movs	r2, #1
 8002732:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002736:	2200      	movs	r2, #0
 8002738:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = 10;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <Full_GP_TIM_Config+0x6c>)
 800273c:	220a      	movs	r2, #10
 800273e:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002742:	2201      	movs	r2, #1
 8002744:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002748:	2200      	movs	r2, #0
 800274a:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = 10;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <Full_GP_TIM_Config+0x6c>)
 800274e:	220a      	movs	r2, #10
 8002750:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8002752:	4802      	ldr	r0, [pc, #8]	; (800275c <Full_GP_TIM_Config+0x6c>)
 8002754:	f7ff f8a4 	bl	80018a0 <GP_TIM_PWM_INIT>
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	20000088 	.word	0x20000088

08002760 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_TMR.pTIMx = TIM1;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <Full_AD_TIM_Config+0x1c>)
 8002766:	4a06      	ldr	r2, [pc, #24]	; (8002780 <Full_AD_TIM_Config+0x20>)
 8002768:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_TMR.AD_TIM_Config.Prescaler = PRESCALER_16K;
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <Full_AD_TIM_Config+0x1c>)
 800276c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002770:	809a      	strh	r2, [r3, #4]
	AD_TIM_FreeRun_INIT(&TIM1_TMR);
 8002772:	4802      	ldr	r0, [pc, #8]	; (800277c <Full_AD_TIM_Config+0x1c>)
 8002774:	f7ff f852 	bl	800181c <AD_TIM_FreeRun_INIT>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200000a4 	.word	0x200000a4
 8002780:	40010000 	.word	0x40010000

08002784 <Full_I2C_Config>:


void Full_I2C_Config(void){
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <Full_I2C_Config+0x20>)
 800278a:	4a07      	ldr	r2, [pc, #28]	; (80027a8 <Full_I2C_Config+0x24>)
 800278c:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <Full_I2C_Config+0x20>)
 8002790:	2201      	movs	r2, #1
 8002792:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <Full_I2C_Config+0x20>)
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <Full_I2C_Config+0x28>)
 8002798:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 800279a:	4802      	ldr	r0, [pc, #8]	; (80027a4 <Full_I2C_Config+0x20>)
 800279c:	f7fe fec0 	bl	8001520 <I2C_SM_INIT>
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	200000c4 	.word	0x200000c4
 80027a8:	40005400 	.word	0x40005400
 80027ac:	000186a0 	.word	0x000186a0

080027b0 <Full_USART_Config>:

void Full_USART_Config(void){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

	USART1_TXRX.pUSARTx = USART1;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <Full_USART_Config+0x34>)
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <Full_USART_Config+0x38>)
 80027b8:	601a      	str	r2, [r3, #0]
	USART1_TXRX.USART_Config.USART_Mode = USART_MODE_TXRX;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <Full_USART_Config+0x34>)
 80027bc:	2202      	movs	r2, #2
 80027be:	711a      	strb	r2, [r3, #4]
	USART1_TXRX.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <Full_USART_Config+0x34>)
 80027c2:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80027c6:	609a      	str	r2, [r3, #8]
	USART1_TXRX.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <Full_USART_Config+0x34>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	735a      	strb	r2, [r3, #13]
	USART1_TXRX.USART_Config.USART_NoOfStopBits	= USART_STOPBITS_1;
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <Full_USART_Config+0x34>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	731a      	strb	r2, [r3, #12]
	USART1_TXRX.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <Full_USART_Config+0x34>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	739a      	strb	r2, [r3, #14]
	//enable peripheral via cr1?

	USART_INIT(&USART1_TXRX);
 80027da:	4802      	ldr	r0, [pc, #8]	; (80027e4 <Full_USART_Config+0x34>)
 80027dc:	f7ff fa50 	bl	8001c80 <USART_INIT>
	//USART1_TXRX.pUSARTx->CR1 |= (1 << 13);
}
 80027e0:	bf00      	nop
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	200000ec 	.word	0x200000ec
 80027e8:	40011000 	.word	0x40011000

080027ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return 1;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <_kill>:

int _kill(int pid, int sig)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b082      	sub	sp, #8
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002804:	f000 f8dc 	bl	80029c0 <__errno>
 8002808:	4603      	mov	r3, r0
 800280a:	2216      	movs	r2, #22
 800280c:	601a      	str	r2, [r3, #0]
  return -1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_exit>:

void _exit (int status)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002822:	f04f 31ff 	mov.w	r1, #4294967295
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff ffe7 	bl	80027fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800282c:	e7fe      	b.n	800282c <_exit+0x12>

0800282e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e00a      	b.n	8002856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002840:	f3af 8000 	nop.w
 8002844:	4601      	mov	r1, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	60ba      	str	r2, [r7, #8]
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dbf0      	blt.n	8002840 <_read+0x12>
  }

  return len;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e009      	b.n	800288e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	60ba      	str	r2, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	dbf1      	blt.n	800287a <_write+0x12>
  }
  return len;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_close>:

int _close(int file)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028c6:	605a      	str	r2, [r3, #4]
  return 0;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <_isatty>:

int _isatty(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <_sbrk+0x5c>)
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <_sbrk+0x60>)
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002914:	4b13      	ldr	r3, [pc, #76]	; (8002964 <_sbrk+0x64>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <_sbrk+0x64>)
 800291e:	4a12      	ldr	r2, [pc, #72]	; (8002968 <_sbrk+0x68>)
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	429a      	cmp	r2, r3
 800292e:	d207      	bcs.n	8002940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002930:	f000 f846 	bl	80029c0 <__errno>
 8002934:	4603      	mov	r3, r0
 8002936:	220c      	movs	r2, #12
 8002938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	e009      	b.n	8002954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <_sbrk+0x64>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	4a05      	ldr	r2, [pc, #20]	; (8002964 <_sbrk+0x64>)
 8002950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002952:	68fb      	ldr	r3, [r7, #12]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20018000 	.word	0x20018000
 8002960:	00000400 	.word	0x00000400
 8002964:	20000120 	.word	0x20000120
 8002968:	20000138 	.word	0x20000138

0800296c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800296c:	480d      	ldr	r0, [pc, #52]	; (80029a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800296e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002970:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002976:	490d      	ldr	r1, [pc, #52]	; (80029ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <LoopForever+0xe>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800298c:	4c0a      	ldr	r4, [pc, #40]	; (80029b8 <LoopForever+0x16>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800299a:	f000 f817 	bl	80029cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299e:	f7ff fbe3 	bl	8002168 <main>

080029a2 <LoopForever>:

LoopForever:
  b LoopForever
 80029a2:	e7fe      	b.n	80029a2 <LoopForever>
  ldr   r0, =_estack
 80029a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80029b0:	08005074 	.word	0x08005074
  ldr r2, =_sbss
 80029b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80029b8:	20000134 	.word	0x20000134

080029bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC_IRQHandler>
	...

080029c0 <__errno>:
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <__errno+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000004 	.word	0x20000004

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4d0d      	ldr	r5, [pc, #52]	; (8002a04 <__libc_init_array+0x38>)
 80029d0:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d2:	1b64      	subs	r4, r4, r5
 80029d4:	10a4      	asrs	r4, r4, #2
 80029d6:	2600      	movs	r6, #0
 80029d8:	42a6      	cmp	r6, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	4d0b      	ldr	r5, [pc, #44]	; (8002a0c <__libc_init_array+0x40>)
 80029de:	4c0c      	ldr	r4, [pc, #48]	; (8002a10 <__libc_init_array+0x44>)
 80029e0:	f002 f864 	bl	8004aac <_init>
 80029e4:	1b64      	subs	r4, r4, r5
 80029e6:	10a4      	asrs	r4, r4, #2
 80029e8:	2600      	movs	r6, #0
 80029ea:	42a6      	cmp	r6, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f4:	4798      	blx	r3
 80029f6:	3601      	adds	r6, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fe:	4798      	blx	r3
 8002a00:	3601      	adds	r6, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	0800506c 	.word	0x0800506c
 8002a08:	0800506c 	.word	0x0800506c
 8002a0c:	0800506c 	.word	0x0800506c
 8002a10:	08005070 	.word	0x08005070

08002a14 <memset>:
 8002a14:	4402      	add	r2, r0
 8002a16:	4603      	mov	r3, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <srand>:
 8002a24:	b538      	push	{r3, r4, r5, lr}
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <srand+0x44>)
 8002a28:	681d      	ldr	r5, [r3, #0]
 8002a2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	b9b3      	cbnz	r3, 8002a5e <srand+0x3a>
 8002a30:	2018      	movs	r0, #24
 8002a32:	f000 f8b3 	bl	8002b9c <malloc>
 8002a36:	4602      	mov	r2, r0
 8002a38:	63a8      	str	r0, [r5, #56]	; 0x38
 8002a3a:	b920      	cbnz	r0, 8002a46 <srand+0x22>
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <srand+0x48>)
 8002a3e:	480c      	ldr	r0, [pc, #48]	; (8002a70 <srand+0x4c>)
 8002a40:	2142      	movs	r1, #66	; 0x42
 8002a42:	f000 f87b 	bl	8002b3c <__assert_func>
 8002a46:	490b      	ldr	r1, [pc, #44]	; (8002a74 <srand+0x50>)
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <srand+0x54>)
 8002a4a:	e9c0 1300 	strd	r1, r3, [r0]
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <srand+0x58>)
 8002a50:	6083      	str	r3, [r0, #8]
 8002a52:	230b      	movs	r3, #11
 8002a54:	8183      	strh	r3, [r0, #12]
 8002a56:	2100      	movs	r1, #0
 8002a58:	2001      	movs	r0, #1
 8002a5a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002a5e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002a60:	2200      	movs	r2, #0
 8002a62:	611c      	str	r4, [r3, #16]
 8002a64:	615a      	str	r2, [r3, #20]
 8002a66:	bd38      	pop	{r3, r4, r5, pc}
 8002a68:	20000004 	.word	0x20000004
 8002a6c:	08004b58 	.word	0x08004b58
 8002a70:	08004b6f 	.word	0x08004b6f
 8002a74:	abcd330e 	.word	0xabcd330e
 8002a78:	e66d1234 	.word	0xe66d1234
 8002a7c:	0005deec 	.word	0x0005deec

08002a80 <rand>:
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <rand+0x5c>)
 8002a82:	b510      	push	{r4, lr}
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a88:	b9b3      	cbnz	r3, 8002ab8 <rand+0x38>
 8002a8a:	2018      	movs	r0, #24
 8002a8c:	f000 f886 	bl	8002b9c <malloc>
 8002a90:	4602      	mov	r2, r0
 8002a92:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a94:	b920      	cbnz	r0, 8002aa0 <rand+0x20>
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <rand+0x60>)
 8002a98:	4812      	ldr	r0, [pc, #72]	; (8002ae4 <rand+0x64>)
 8002a9a:	214e      	movs	r1, #78	; 0x4e
 8002a9c:	f000 f84e 	bl	8002b3c <__assert_func>
 8002aa0:	4911      	ldr	r1, [pc, #68]	; (8002ae8 <rand+0x68>)
 8002aa2:	4b12      	ldr	r3, [pc, #72]	; (8002aec <rand+0x6c>)
 8002aa4:	e9c0 1300 	strd	r1, r3, [r0]
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <rand+0x70>)
 8002aaa:	6083      	str	r3, [r0, #8]
 8002aac:	230b      	movs	r3, #11
 8002aae:	8183      	strh	r3, [r0, #12]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002ab8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <rand+0x74>)
 8002abc:	6920      	ldr	r0, [r4, #16]
 8002abe:	6963      	ldr	r3, [r4, #20]
 8002ac0:	490d      	ldr	r1, [pc, #52]	; (8002af8 <rand+0x78>)
 8002ac2:	4342      	muls	r2, r0
 8002ac4:	fb01 2203 	mla	r2, r1, r3, r2
 8002ac8:	fba0 0101 	umull	r0, r1, r0, r1
 8002acc:	1c43      	adds	r3, r0, #1
 8002ace:	eb42 0001 	adc.w	r0, r2, r1
 8002ad2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8002ad6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002ada:	bd10      	pop	{r4, pc}
 8002adc:	20000004 	.word	0x20000004
 8002ae0:	08004b58 	.word	0x08004b58
 8002ae4:	08004b6f 	.word	0x08004b6f
 8002ae8:	abcd330e 	.word	0xabcd330e
 8002aec:	e66d1234 	.word	0xe66d1234
 8002af0:	0005deec 	.word	0x0005deec
 8002af4:	5851f42d 	.word	0x5851f42d
 8002af8:	4c957f2d 	.word	0x4c957f2d

08002afc <siprintf>:
 8002afc:	b40e      	push	{r1, r2, r3}
 8002afe:	b500      	push	{lr}
 8002b00:	b09c      	sub	sp, #112	; 0x70
 8002b02:	ab1d      	add	r3, sp, #116	; 0x74
 8002b04:	9002      	str	r0, [sp, #8]
 8002b06:	9006      	str	r0, [sp, #24]
 8002b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b0c:	4809      	ldr	r0, [pc, #36]	; (8002b34 <siprintf+0x38>)
 8002b0e:	9107      	str	r1, [sp, #28]
 8002b10:	9104      	str	r1, [sp, #16]
 8002b12:	4909      	ldr	r1, [pc, #36]	; (8002b38 <siprintf+0x3c>)
 8002b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b18:	9105      	str	r1, [sp, #20]
 8002b1a:	6800      	ldr	r0, [r0, #0]
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	a902      	add	r1, sp, #8
 8002b20:	f000 f97e 	bl	8002e20 <_svfiprintf_r>
 8002b24:	9b02      	ldr	r3, [sp, #8]
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	b01c      	add	sp, #112	; 0x70
 8002b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b30:	b003      	add	sp, #12
 8002b32:	4770      	bx	lr
 8002b34:	20000004 	.word	0x20000004
 8002b38:	ffff0208 	.word	0xffff0208

08002b3c <__assert_func>:
 8002b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b3e:	4614      	mov	r4, r2
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <__assert_func+0x2c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4605      	mov	r5, r0
 8002b48:	68d8      	ldr	r0, [r3, #12]
 8002b4a:	b14c      	cbz	r4, 8002b60 <__assert_func+0x24>
 8002b4c:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <__assert_func+0x30>)
 8002b4e:	9100      	str	r1, [sp, #0]
 8002b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002b54:	4906      	ldr	r1, [pc, #24]	; (8002b70 <__assert_func+0x34>)
 8002b56:	462b      	mov	r3, r5
 8002b58:	f000 f80e 	bl	8002b78 <fiprintf>
 8002b5c:	f000 fe1c 	bl	8003798 <abort>
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__assert_func+0x38>)
 8002b62:	461c      	mov	r4, r3
 8002b64:	e7f3      	b.n	8002b4e <__assert_func+0x12>
 8002b66:	bf00      	nop
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	08004bca 	.word	0x08004bca
 8002b70:	08004bd7 	.word	0x08004bd7
 8002b74:	08004c05 	.word	0x08004c05

08002b78 <fiprintf>:
 8002b78:	b40e      	push	{r1, r2, r3}
 8002b7a:	b503      	push	{r0, r1, lr}
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	ab03      	add	r3, sp, #12
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <fiprintf+0x20>)
 8002b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b86:	6800      	ldr	r0, [r0, #0]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f000 fa71 	bl	8003070 <_vfiprintf_r>
 8002b8e:	b002      	add	sp, #8
 8002b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b94:	b003      	add	sp, #12
 8002b96:	4770      	bx	lr
 8002b98:	20000004 	.word	0x20000004

08002b9c <malloc>:
 8002b9c:	4b02      	ldr	r3, [pc, #8]	; (8002ba8 <malloc+0xc>)
 8002b9e:	4601      	mov	r1, r0
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f000 b86d 	b.w	8002c80 <_malloc_r>
 8002ba6:	bf00      	nop
 8002ba8:	20000004 	.word	0x20000004

08002bac <_free_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4605      	mov	r5, r0
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	d041      	beq.n	8002c38 <_free_r+0x8c>
 8002bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bb8:	1f0c      	subs	r4, r1, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	bfb8      	it	lt
 8002bbe:	18e4      	addlt	r4, r4, r3
 8002bc0:	f001 f836 	bl	8003c30 <__malloc_lock>
 8002bc4:	4a1d      	ldr	r2, [pc, #116]	; (8002c3c <_free_r+0x90>)
 8002bc6:	6813      	ldr	r3, [r2, #0]
 8002bc8:	b933      	cbnz	r3, 8002bd8 <_free_r+0x2c>
 8002bca:	6063      	str	r3, [r4, #4]
 8002bcc:	6014      	str	r4, [r2, #0]
 8002bce:	4628      	mov	r0, r5
 8002bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bd4:	f001 b832 	b.w	8003c3c <__malloc_unlock>
 8002bd8:	42a3      	cmp	r3, r4
 8002bda:	d908      	bls.n	8002bee <_free_r+0x42>
 8002bdc:	6820      	ldr	r0, [r4, #0]
 8002bde:	1821      	adds	r1, r4, r0
 8002be0:	428b      	cmp	r3, r1
 8002be2:	bf01      	itttt	eq
 8002be4:	6819      	ldreq	r1, [r3, #0]
 8002be6:	685b      	ldreq	r3, [r3, #4]
 8002be8:	1809      	addeq	r1, r1, r0
 8002bea:	6021      	streq	r1, [r4, #0]
 8002bec:	e7ed      	b.n	8002bca <_free_r+0x1e>
 8002bee:	461a      	mov	r2, r3
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	b10b      	cbz	r3, 8002bf8 <_free_r+0x4c>
 8002bf4:	42a3      	cmp	r3, r4
 8002bf6:	d9fa      	bls.n	8002bee <_free_r+0x42>
 8002bf8:	6811      	ldr	r1, [r2, #0]
 8002bfa:	1850      	adds	r0, r2, r1
 8002bfc:	42a0      	cmp	r0, r4
 8002bfe:	d10b      	bne.n	8002c18 <_free_r+0x6c>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	4401      	add	r1, r0
 8002c04:	1850      	adds	r0, r2, r1
 8002c06:	4283      	cmp	r3, r0
 8002c08:	6011      	str	r1, [r2, #0]
 8002c0a:	d1e0      	bne.n	8002bce <_free_r+0x22>
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	6053      	str	r3, [r2, #4]
 8002c12:	4401      	add	r1, r0
 8002c14:	6011      	str	r1, [r2, #0]
 8002c16:	e7da      	b.n	8002bce <_free_r+0x22>
 8002c18:	d902      	bls.n	8002c20 <_free_r+0x74>
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	602b      	str	r3, [r5, #0]
 8002c1e:	e7d6      	b.n	8002bce <_free_r+0x22>
 8002c20:	6820      	ldr	r0, [r4, #0]
 8002c22:	1821      	adds	r1, r4, r0
 8002c24:	428b      	cmp	r3, r1
 8002c26:	bf04      	itt	eq
 8002c28:	6819      	ldreq	r1, [r3, #0]
 8002c2a:	685b      	ldreq	r3, [r3, #4]
 8002c2c:	6063      	str	r3, [r4, #4]
 8002c2e:	bf04      	itt	eq
 8002c30:	1809      	addeq	r1, r1, r0
 8002c32:	6021      	streq	r1, [r4, #0]
 8002c34:	6054      	str	r4, [r2, #4]
 8002c36:	e7ca      	b.n	8002bce <_free_r+0x22>
 8002c38:	bd38      	pop	{r3, r4, r5, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000124 	.word	0x20000124

08002c40 <sbrk_aligned>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	4e0e      	ldr	r6, [pc, #56]	; (8002c7c <sbrk_aligned+0x3c>)
 8002c44:	460c      	mov	r4, r1
 8002c46:	6831      	ldr	r1, [r6, #0]
 8002c48:	4605      	mov	r5, r0
 8002c4a:	b911      	cbnz	r1, 8002c52 <sbrk_aligned+0x12>
 8002c4c:	f000 fcd4 	bl	80035f8 <_sbrk_r>
 8002c50:	6030      	str	r0, [r6, #0]
 8002c52:	4621      	mov	r1, r4
 8002c54:	4628      	mov	r0, r5
 8002c56:	f000 fccf 	bl	80035f8 <_sbrk_r>
 8002c5a:	1c43      	adds	r3, r0, #1
 8002c5c:	d00a      	beq.n	8002c74 <sbrk_aligned+0x34>
 8002c5e:	1cc4      	adds	r4, r0, #3
 8002c60:	f024 0403 	bic.w	r4, r4, #3
 8002c64:	42a0      	cmp	r0, r4
 8002c66:	d007      	beq.n	8002c78 <sbrk_aligned+0x38>
 8002c68:	1a21      	subs	r1, r4, r0
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f000 fcc4 	bl	80035f8 <_sbrk_r>
 8002c70:	3001      	adds	r0, #1
 8002c72:	d101      	bne.n	8002c78 <sbrk_aligned+0x38>
 8002c74:	f04f 34ff 	mov.w	r4, #4294967295
 8002c78:	4620      	mov	r0, r4
 8002c7a:	bd70      	pop	{r4, r5, r6, pc}
 8002c7c:	20000128 	.word	0x20000128

08002c80 <_malloc_r>:
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c84:	1ccd      	adds	r5, r1, #3
 8002c86:	f025 0503 	bic.w	r5, r5, #3
 8002c8a:	3508      	adds	r5, #8
 8002c8c:	2d0c      	cmp	r5, #12
 8002c8e:	bf38      	it	cc
 8002c90:	250c      	movcc	r5, #12
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	4607      	mov	r7, r0
 8002c96:	db01      	blt.n	8002c9c <_malloc_r+0x1c>
 8002c98:	42a9      	cmp	r1, r5
 8002c9a:	d905      	bls.n	8002ca8 <_malloc_r+0x28>
 8002c9c:	230c      	movs	r3, #12
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ca8:	4e2e      	ldr	r6, [pc, #184]	; (8002d64 <_malloc_r+0xe4>)
 8002caa:	f000 ffc1 	bl	8003c30 <__malloc_lock>
 8002cae:	6833      	ldr	r3, [r6, #0]
 8002cb0:	461c      	mov	r4, r3
 8002cb2:	bb34      	cbnz	r4, 8002d02 <_malloc_r+0x82>
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4638      	mov	r0, r7
 8002cb8:	f7ff ffc2 	bl	8002c40 <sbrk_aligned>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	d14d      	bne.n	8002d5e <_malloc_r+0xde>
 8002cc2:	6834      	ldr	r4, [r6, #0]
 8002cc4:	4626      	mov	r6, r4
 8002cc6:	2e00      	cmp	r6, #0
 8002cc8:	d140      	bne.n	8002d4c <_malloc_r+0xcc>
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4638      	mov	r0, r7
 8002cd0:	eb04 0803 	add.w	r8, r4, r3
 8002cd4:	f000 fc90 	bl	80035f8 <_sbrk_r>
 8002cd8:	4580      	cmp	r8, r0
 8002cda:	d13a      	bne.n	8002d52 <_malloc_r+0xd2>
 8002cdc:	6821      	ldr	r1, [r4, #0]
 8002cde:	3503      	adds	r5, #3
 8002ce0:	1a6d      	subs	r5, r5, r1
 8002ce2:	f025 0503 	bic.w	r5, r5, #3
 8002ce6:	3508      	adds	r5, #8
 8002ce8:	2d0c      	cmp	r5, #12
 8002cea:	bf38      	it	cc
 8002cec:	250c      	movcc	r5, #12
 8002cee:	4629      	mov	r1, r5
 8002cf0:	4638      	mov	r0, r7
 8002cf2:	f7ff ffa5 	bl	8002c40 <sbrk_aligned>
 8002cf6:	3001      	adds	r0, #1
 8002cf8:	d02b      	beq.n	8002d52 <_malloc_r+0xd2>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	442b      	add	r3, r5
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	e00e      	b.n	8002d20 <_malloc_r+0xa0>
 8002d02:	6822      	ldr	r2, [r4, #0]
 8002d04:	1b52      	subs	r2, r2, r5
 8002d06:	d41e      	bmi.n	8002d46 <_malloc_r+0xc6>
 8002d08:	2a0b      	cmp	r2, #11
 8002d0a:	d916      	bls.n	8002d3a <_malloc_r+0xba>
 8002d0c:	1961      	adds	r1, r4, r5
 8002d0e:	42a3      	cmp	r3, r4
 8002d10:	6025      	str	r5, [r4, #0]
 8002d12:	bf18      	it	ne
 8002d14:	6059      	strne	r1, [r3, #4]
 8002d16:	6863      	ldr	r3, [r4, #4]
 8002d18:	bf08      	it	eq
 8002d1a:	6031      	streq	r1, [r6, #0]
 8002d1c:	5162      	str	r2, [r4, r5]
 8002d1e:	604b      	str	r3, [r1, #4]
 8002d20:	4638      	mov	r0, r7
 8002d22:	f104 060b 	add.w	r6, r4, #11
 8002d26:	f000 ff89 	bl	8003c3c <__malloc_unlock>
 8002d2a:	f026 0607 	bic.w	r6, r6, #7
 8002d2e:	1d23      	adds	r3, r4, #4
 8002d30:	1af2      	subs	r2, r6, r3
 8002d32:	d0b6      	beq.n	8002ca2 <_malloc_r+0x22>
 8002d34:	1b9b      	subs	r3, r3, r6
 8002d36:	50a3      	str	r3, [r4, r2]
 8002d38:	e7b3      	b.n	8002ca2 <_malloc_r+0x22>
 8002d3a:	6862      	ldr	r2, [r4, #4]
 8002d3c:	42a3      	cmp	r3, r4
 8002d3e:	bf0c      	ite	eq
 8002d40:	6032      	streq	r2, [r6, #0]
 8002d42:	605a      	strne	r2, [r3, #4]
 8002d44:	e7ec      	b.n	8002d20 <_malloc_r+0xa0>
 8002d46:	4623      	mov	r3, r4
 8002d48:	6864      	ldr	r4, [r4, #4]
 8002d4a:	e7b2      	b.n	8002cb2 <_malloc_r+0x32>
 8002d4c:	4634      	mov	r4, r6
 8002d4e:	6876      	ldr	r6, [r6, #4]
 8002d50:	e7b9      	b.n	8002cc6 <_malloc_r+0x46>
 8002d52:	230c      	movs	r3, #12
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4638      	mov	r0, r7
 8002d58:	f000 ff70 	bl	8003c3c <__malloc_unlock>
 8002d5c:	e7a1      	b.n	8002ca2 <_malloc_r+0x22>
 8002d5e:	6025      	str	r5, [r4, #0]
 8002d60:	e7de      	b.n	8002d20 <_malloc_r+0xa0>
 8002d62:	bf00      	nop
 8002d64:	20000124 	.word	0x20000124

08002d68 <__ssputs_r>:
 8002d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d6c:	688e      	ldr	r6, [r1, #8]
 8002d6e:	429e      	cmp	r6, r3
 8002d70:	4682      	mov	sl, r0
 8002d72:	460c      	mov	r4, r1
 8002d74:	4690      	mov	r8, r2
 8002d76:	461f      	mov	r7, r3
 8002d78:	d838      	bhi.n	8002dec <__ssputs_r+0x84>
 8002d7a:	898a      	ldrh	r2, [r1, #12]
 8002d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d80:	d032      	beq.n	8002de8 <__ssputs_r+0x80>
 8002d82:	6825      	ldr	r5, [r4, #0]
 8002d84:	6909      	ldr	r1, [r1, #16]
 8002d86:	eba5 0901 	sub.w	r9, r5, r1
 8002d8a:	6965      	ldr	r5, [r4, #20]
 8002d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d94:	3301      	adds	r3, #1
 8002d96:	444b      	add	r3, r9
 8002d98:	106d      	asrs	r5, r5, #1
 8002d9a:	429d      	cmp	r5, r3
 8002d9c:	bf38      	it	cc
 8002d9e:	461d      	movcc	r5, r3
 8002da0:	0553      	lsls	r3, r2, #21
 8002da2:	d531      	bpl.n	8002e08 <__ssputs_r+0xa0>
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7ff ff6b 	bl	8002c80 <_malloc_r>
 8002daa:	4606      	mov	r6, r0
 8002dac:	b950      	cbnz	r0, 8002dc4 <__ssputs_r+0x5c>
 8002dae:	230c      	movs	r3, #12
 8002db0:	f8ca 3000 	str.w	r3, [sl]
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc4:	6921      	ldr	r1, [r4, #16]
 8002dc6:	464a      	mov	r2, r9
 8002dc8:	f000 ff0a 	bl	8003be0 <memcpy>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd6:	81a3      	strh	r3, [r4, #12]
 8002dd8:	6126      	str	r6, [r4, #16]
 8002dda:	6165      	str	r5, [r4, #20]
 8002ddc:	444e      	add	r6, r9
 8002dde:	eba5 0509 	sub.w	r5, r5, r9
 8002de2:	6026      	str	r6, [r4, #0]
 8002de4:	60a5      	str	r5, [r4, #8]
 8002de6:	463e      	mov	r6, r7
 8002de8:	42be      	cmp	r6, r7
 8002dea:	d900      	bls.n	8002dee <__ssputs_r+0x86>
 8002dec:	463e      	mov	r6, r7
 8002dee:	6820      	ldr	r0, [r4, #0]
 8002df0:	4632      	mov	r2, r6
 8002df2:	4641      	mov	r1, r8
 8002df4:	f000 ff02 	bl	8003bfc <memmove>
 8002df8:	68a3      	ldr	r3, [r4, #8]
 8002dfa:	1b9b      	subs	r3, r3, r6
 8002dfc:	60a3      	str	r3, [r4, #8]
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	4433      	add	r3, r6
 8002e02:	6023      	str	r3, [r4, #0]
 8002e04:	2000      	movs	r0, #0
 8002e06:	e7db      	b.n	8002dc0 <__ssputs_r+0x58>
 8002e08:	462a      	mov	r2, r5
 8002e0a:	f000 ff1d 	bl	8003c48 <_realloc_r>
 8002e0e:	4606      	mov	r6, r0
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d1e1      	bne.n	8002dd8 <__ssputs_r+0x70>
 8002e14:	6921      	ldr	r1, [r4, #16]
 8002e16:	4650      	mov	r0, sl
 8002e18:	f7ff fec8 	bl	8002bac <_free_r>
 8002e1c:	e7c7      	b.n	8002dae <__ssputs_r+0x46>
	...

08002e20 <_svfiprintf_r>:
 8002e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e24:	4698      	mov	r8, r3
 8002e26:	898b      	ldrh	r3, [r1, #12]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	b09d      	sub	sp, #116	; 0x74
 8002e2c:	4607      	mov	r7, r0
 8002e2e:	460d      	mov	r5, r1
 8002e30:	4614      	mov	r4, r2
 8002e32:	d50e      	bpl.n	8002e52 <_svfiprintf_r+0x32>
 8002e34:	690b      	ldr	r3, [r1, #16]
 8002e36:	b963      	cbnz	r3, 8002e52 <_svfiprintf_r+0x32>
 8002e38:	2140      	movs	r1, #64	; 0x40
 8002e3a:	f7ff ff21 	bl	8002c80 <_malloc_r>
 8002e3e:	6028      	str	r0, [r5, #0]
 8002e40:	6128      	str	r0, [r5, #16]
 8002e42:	b920      	cbnz	r0, 8002e4e <_svfiprintf_r+0x2e>
 8002e44:	230c      	movs	r3, #12
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	e0d1      	b.n	8002ff2 <_svfiprintf_r+0x1d2>
 8002e4e:	2340      	movs	r3, #64	; 0x40
 8002e50:	616b      	str	r3, [r5, #20]
 8002e52:	2300      	movs	r3, #0
 8002e54:	9309      	str	r3, [sp, #36]	; 0x24
 8002e56:	2320      	movs	r3, #32
 8002e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e60:	2330      	movs	r3, #48	; 0x30
 8002e62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800300c <_svfiprintf_r+0x1ec>
 8002e66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e6a:	f04f 0901 	mov.w	r9, #1
 8002e6e:	4623      	mov	r3, r4
 8002e70:	469a      	mov	sl, r3
 8002e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e76:	b10a      	cbz	r2, 8002e7c <_svfiprintf_r+0x5c>
 8002e78:	2a25      	cmp	r2, #37	; 0x25
 8002e7a:	d1f9      	bne.n	8002e70 <_svfiprintf_r+0x50>
 8002e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8002e80:	d00b      	beq.n	8002e9a <_svfiprintf_r+0x7a>
 8002e82:	465b      	mov	r3, fp
 8002e84:	4622      	mov	r2, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	4638      	mov	r0, r7
 8002e8a:	f7ff ff6d 	bl	8002d68 <__ssputs_r>
 8002e8e:	3001      	adds	r0, #1
 8002e90:	f000 80aa 	beq.w	8002fe8 <_svfiprintf_r+0x1c8>
 8002e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e96:	445a      	add	r2, fp
 8002e98:	9209      	str	r2, [sp, #36]	; 0x24
 8002e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80a2 	beq.w	8002fe8 <_svfiprintf_r+0x1c8>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002eae:	f10a 0a01 	add.w	sl, sl, #1
 8002eb2:	9304      	str	r3, [sp, #16]
 8002eb4:	9307      	str	r3, [sp, #28]
 8002eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002eba:	931a      	str	r3, [sp, #104]	; 0x68
 8002ebc:	4654      	mov	r4, sl
 8002ebe:	2205      	movs	r2, #5
 8002ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec4:	4851      	ldr	r0, [pc, #324]	; (800300c <_svfiprintf_r+0x1ec>)
 8002ec6:	f7fd f993 	bl	80001f0 <memchr>
 8002eca:	9a04      	ldr	r2, [sp, #16]
 8002ecc:	b9d8      	cbnz	r0, 8002f06 <_svfiprintf_r+0xe6>
 8002ece:	06d0      	lsls	r0, r2, #27
 8002ed0:	bf44      	itt	mi
 8002ed2:	2320      	movmi	r3, #32
 8002ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed8:	0711      	lsls	r1, r2, #28
 8002eda:	bf44      	itt	mi
 8002edc:	232b      	movmi	r3, #43	; 0x2b
 8002ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee8:	d015      	beq.n	8002f16 <_svfiprintf_r+0xf6>
 8002eea:	9a07      	ldr	r2, [sp, #28]
 8002eec:	4654      	mov	r4, sl
 8002eee:	2000      	movs	r0, #0
 8002ef0:	f04f 0c0a 	mov.w	ip, #10
 8002ef4:	4621      	mov	r1, r4
 8002ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002efa:	3b30      	subs	r3, #48	; 0x30
 8002efc:	2b09      	cmp	r3, #9
 8002efe:	d94e      	bls.n	8002f9e <_svfiprintf_r+0x17e>
 8002f00:	b1b0      	cbz	r0, 8002f30 <_svfiprintf_r+0x110>
 8002f02:	9207      	str	r2, [sp, #28]
 8002f04:	e014      	b.n	8002f30 <_svfiprintf_r+0x110>
 8002f06:	eba0 0308 	sub.w	r3, r0, r8
 8002f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	9304      	str	r3, [sp, #16]
 8002f12:	46a2      	mov	sl, r4
 8002f14:	e7d2      	b.n	8002ebc <_svfiprintf_r+0x9c>
 8002f16:	9b03      	ldr	r3, [sp, #12]
 8002f18:	1d19      	adds	r1, r3, #4
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	9103      	str	r1, [sp, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfbb      	ittet	lt
 8002f22:	425b      	neglt	r3, r3
 8002f24:	f042 0202 	orrlt.w	r2, r2, #2
 8002f28:	9307      	strge	r3, [sp, #28]
 8002f2a:	9307      	strlt	r3, [sp, #28]
 8002f2c:	bfb8      	it	lt
 8002f2e:	9204      	strlt	r2, [sp, #16]
 8002f30:	7823      	ldrb	r3, [r4, #0]
 8002f32:	2b2e      	cmp	r3, #46	; 0x2e
 8002f34:	d10c      	bne.n	8002f50 <_svfiprintf_r+0x130>
 8002f36:	7863      	ldrb	r3, [r4, #1]
 8002f38:	2b2a      	cmp	r3, #42	; 0x2a
 8002f3a:	d135      	bne.n	8002fa8 <_svfiprintf_r+0x188>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	1d1a      	adds	r2, r3, #4
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	9203      	str	r2, [sp, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bfb8      	it	lt
 8002f48:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f4c:	3402      	adds	r4, #2
 8002f4e:	9305      	str	r3, [sp, #20]
 8002f50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003010 <_svfiprintf_r+0x1f0>
 8002f54:	7821      	ldrb	r1, [r4, #0]
 8002f56:	2203      	movs	r2, #3
 8002f58:	4650      	mov	r0, sl
 8002f5a:	f7fd f949 	bl	80001f0 <memchr>
 8002f5e:	b140      	cbz	r0, 8002f72 <_svfiprintf_r+0x152>
 8002f60:	2340      	movs	r3, #64	; 0x40
 8002f62:	eba0 000a 	sub.w	r0, r0, sl
 8002f66:	fa03 f000 	lsl.w	r0, r3, r0
 8002f6a:	9b04      	ldr	r3, [sp, #16]
 8002f6c:	4303      	orrs	r3, r0
 8002f6e:	3401      	adds	r4, #1
 8002f70:	9304      	str	r3, [sp, #16]
 8002f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f76:	4827      	ldr	r0, [pc, #156]	; (8003014 <_svfiprintf_r+0x1f4>)
 8002f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	f7fd f937 	bl	80001f0 <memchr>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d038      	beq.n	8002ff8 <_svfiprintf_r+0x1d8>
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <_svfiprintf_r+0x1f8>)
 8002f88:	bb1b      	cbnz	r3, 8002fd2 <_svfiprintf_r+0x1b2>
 8002f8a:	9b03      	ldr	r3, [sp, #12]
 8002f8c:	3307      	adds	r3, #7
 8002f8e:	f023 0307 	bic.w	r3, r3, #7
 8002f92:	3308      	adds	r3, #8
 8002f94:	9303      	str	r3, [sp, #12]
 8002f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f98:	4433      	add	r3, r6
 8002f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f9c:	e767      	b.n	8002e6e <_svfiprintf_r+0x4e>
 8002f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	e7a5      	b.n	8002ef4 <_svfiprintf_r+0xd4>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	3401      	adds	r4, #1
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f04f 0c0a 	mov.w	ip, #10
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fba:	3a30      	subs	r2, #48	; 0x30
 8002fbc:	2a09      	cmp	r2, #9
 8002fbe:	d903      	bls.n	8002fc8 <_svfiprintf_r+0x1a8>
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0c5      	beq.n	8002f50 <_svfiprintf_r+0x130>
 8002fc4:	9105      	str	r1, [sp, #20]
 8002fc6:	e7c3      	b.n	8002f50 <_svfiprintf_r+0x130>
 8002fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fcc:	4604      	mov	r4, r0
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e7f0      	b.n	8002fb4 <_svfiprintf_r+0x194>
 8002fd2:	ab03      	add	r3, sp, #12
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	462a      	mov	r2, r5
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <_svfiprintf_r+0x1fc>)
 8002fda:	a904      	add	r1, sp, #16
 8002fdc:	4638      	mov	r0, r7
 8002fde:	f3af 8000 	nop.w
 8002fe2:	1c42      	adds	r2, r0, #1
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	d1d6      	bne.n	8002f96 <_svfiprintf_r+0x176>
 8002fe8:	89ab      	ldrh	r3, [r5, #12]
 8002fea:	065b      	lsls	r3, r3, #25
 8002fec:	f53f af2c 	bmi.w	8002e48 <_svfiprintf_r+0x28>
 8002ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff2:	b01d      	add	sp, #116	; 0x74
 8002ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ff8:	ab03      	add	r3, sp, #12
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	462a      	mov	r2, r5
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_svfiprintf_r+0x1fc>)
 8003000:	a904      	add	r1, sp, #16
 8003002:	4638      	mov	r0, r7
 8003004:	f000 f9d2 	bl	80033ac <_printf_i>
 8003008:	e7eb      	b.n	8002fe2 <_svfiprintf_r+0x1c2>
 800300a:	bf00      	nop
 800300c:	08004c06 	.word	0x08004c06
 8003010:	08004c0c 	.word	0x08004c0c
 8003014:	08004c10 	.word	0x08004c10
 8003018:	00000000 	.word	0x00000000
 800301c:	08002d69 	.word	0x08002d69

08003020 <__sfputc_r>:
 8003020:	6893      	ldr	r3, [r2, #8]
 8003022:	3b01      	subs	r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	b410      	push	{r4}
 8003028:	6093      	str	r3, [r2, #8]
 800302a:	da07      	bge.n	800303c <__sfputc_r+0x1c>
 800302c:	6994      	ldr	r4, [r2, #24]
 800302e:	42a3      	cmp	r3, r4
 8003030:	db01      	blt.n	8003036 <__sfputc_r+0x16>
 8003032:	290a      	cmp	r1, #10
 8003034:	d102      	bne.n	800303c <__sfputc_r+0x1c>
 8003036:	bc10      	pop	{r4}
 8003038:	f000 baee 	b.w	8003618 <__swbuf_r>
 800303c:	6813      	ldr	r3, [r2, #0]
 800303e:	1c58      	adds	r0, r3, #1
 8003040:	6010      	str	r0, [r2, #0]
 8003042:	7019      	strb	r1, [r3, #0]
 8003044:	4608      	mov	r0, r1
 8003046:	bc10      	pop	{r4}
 8003048:	4770      	bx	lr

0800304a <__sfputs_r>:
 800304a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304c:	4606      	mov	r6, r0
 800304e:	460f      	mov	r7, r1
 8003050:	4614      	mov	r4, r2
 8003052:	18d5      	adds	r5, r2, r3
 8003054:	42ac      	cmp	r4, r5
 8003056:	d101      	bne.n	800305c <__sfputs_r+0x12>
 8003058:	2000      	movs	r0, #0
 800305a:	e007      	b.n	800306c <__sfputs_r+0x22>
 800305c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003060:	463a      	mov	r2, r7
 8003062:	4630      	mov	r0, r6
 8003064:	f7ff ffdc 	bl	8003020 <__sfputc_r>
 8003068:	1c43      	adds	r3, r0, #1
 800306a:	d1f3      	bne.n	8003054 <__sfputs_r+0xa>
 800306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003070 <_vfiprintf_r>:
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	460d      	mov	r5, r1
 8003076:	b09d      	sub	sp, #116	; 0x74
 8003078:	4614      	mov	r4, r2
 800307a:	4698      	mov	r8, r3
 800307c:	4606      	mov	r6, r0
 800307e:	b118      	cbz	r0, 8003088 <_vfiprintf_r+0x18>
 8003080:	6983      	ldr	r3, [r0, #24]
 8003082:	b90b      	cbnz	r3, 8003088 <_vfiprintf_r+0x18>
 8003084:	f000 fca6 	bl	80039d4 <__sinit>
 8003088:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <_vfiprintf_r+0x240>)
 800308a:	429d      	cmp	r5, r3
 800308c:	d11b      	bne.n	80030c6 <_vfiprintf_r+0x56>
 800308e:	6875      	ldr	r5, [r6, #4]
 8003090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003092:	07d9      	lsls	r1, r3, #31
 8003094:	d405      	bmi.n	80030a2 <_vfiprintf_r+0x32>
 8003096:	89ab      	ldrh	r3, [r5, #12]
 8003098:	059a      	lsls	r2, r3, #22
 800309a:	d402      	bmi.n	80030a2 <_vfiprintf_r+0x32>
 800309c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800309e:	f000 fd37 	bl	8003b10 <__retarget_lock_acquire_recursive>
 80030a2:	89ab      	ldrh	r3, [r5, #12]
 80030a4:	071b      	lsls	r3, r3, #28
 80030a6:	d501      	bpl.n	80030ac <_vfiprintf_r+0x3c>
 80030a8:	692b      	ldr	r3, [r5, #16]
 80030aa:	b9eb      	cbnz	r3, 80030e8 <_vfiprintf_r+0x78>
 80030ac:	4629      	mov	r1, r5
 80030ae:	4630      	mov	r0, r6
 80030b0:	f000 fb04 	bl	80036bc <__swsetup_r>
 80030b4:	b1c0      	cbz	r0, 80030e8 <_vfiprintf_r+0x78>
 80030b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030b8:	07dc      	lsls	r4, r3, #31
 80030ba:	d50e      	bpl.n	80030da <_vfiprintf_r+0x6a>
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	b01d      	add	sp, #116	; 0x74
 80030c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c6:	4b7b      	ldr	r3, [pc, #492]	; (80032b4 <_vfiprintf_r+0x244>)
 80030c8:	429d      	cmp	r5, r3
 80030ca:	d101      	bne.n	80030d0 <_vfiprintf_r+0x60>
 80030cc:	68b5      	ldr	r5, [r6, #8]
 80030ce:	e7df      	b.n	8003090 <_vfiprintf_r+0x20>
 80030d0:	4b79      	ldr	r3, [pc, #484]	; (80032b8 <_vfiprintf_r+0x248>)
 80030d2:	429d      	cmp	r5, r3
 80030d4:	bf08      	it	eq
 80030d6:	68f5      	ldreq	r5, [r6, #12]
 80030d8:	e7da      	b.n	8003090 <_vfiprintf_r+0x20>
 80030da:	89ab      	ldrh	r3, [r5, #12]
 80030dc:	0598      	lsls	r0, r3, #22
 80030de:	d4ed      	bmi.n	80030bc <_vfiprintf_r+0x4c>
 80030e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80030e2:	f000 fd16 	bl	8003b12 <__retarget_lock_release_recursive>
 80030e6:	e7e9      	b.n	80030bc <_vfiprintf_r+0x4c>
 80030e8:	2300      	movs	r3, #0
 80030ea:	9309      	str	r3, [sp, #36]	; 0x24
 80030ec:	2320      	movs	r3, #32
 80030ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80030f6:	2330      	movs	r3, #48	; 0x30
 80030f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80032bc <_vfiprintf_r+0x24c>
 80030fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003100:	f04f 0901 	mov.w	r9, #1
 8003104:	4623      	mov	r3, r4
 8003106:	469a      	mov	sl, r3
 8003108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800310c:	b10a      	cbz	r2, 8003112 <_vfiprintf_r+0xa2>
 800310e:	2a25      	cmp	r2, #37	; 0x25
 8003110:	d1f9      	bne.n	8003106 <_vfiprintf_r+0x96>
 8003112:	ebba 0b04 	subs.w	fp, sl, r4
 8003116:	d00b      	beq.n	8003130 <_vfiprintf_r+0xc0>
 8003118:	465b      	mov	r3, fp
 800311a:	4622      	mov	r2, r4
 800311c:	4629      	mov	r1, r5
 800311e:	4630      	mov	r0, r6
 8003120:	f7ff ff93 	bl	800304a <__sfputs_r>
 8003124:	3001      	adds	r0, #1
 8003126:	f000 80aa 	beq.w	800327e <_vfiprintf_r+0x20e>
 800312a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800312c:	445a      	add	r2, fp
 800312e:	9209      	str	r2, [sp, #36]	; 0x24
 8003130:	f89a 3000 	ldrb.w	r3, [sl]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a2 	beq.w	800327e <_vfiprintf_r+0x20e>
 800313a:	2300      	movs	r3, #0
 800313c:	f04f 32ff 	mov.w	r2, #4294967295
 8003140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003144:	f10a 0a01 	add.w	sl, sl, #1
 8003148:	9304      	str	r3, [sp, #16]
 800314a:	9307      	str	r3, [sp, #28]
 800314c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003150:	931a      	str	r3, [sp, #104]	; 0x68
 8003152:	4654      	mov	r4, sl
 8003154:	2205      	movs	r2, #5
 8003156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800315a:	4858      	ldr	r0, [pc, #352]	; (80032bc <_vfiprintf_r+0x24c>)
 800315c:	f7fd f848 	bl	80001f0 <memchr>
 8003160:	9a04      	ldr	r2, [sp, #16]
 8003162:	b9d8      	cbnz	r0, 800319c <_vfiprintf_r+0x12c>
 8003164:	06d1      	lsls	r1, r2, #27
 8003166:	bf44      	itt	mi
 8003168:	2320      	movmi	r3, #32
 800316a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800316e:	0713      	lsls	r3, r2, #28
 8003170:	bf44      	itt	mi
 8003172:	232b      	movmi	r3, #43	; 0x2b
 8003174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003178:	f89a 3000 	ldrb.w	r3, [sl]
 800317c:	2b2a      	cmp	r3, #42	; 0x2a
 800317e:	d015      	beq.n	80031ac <_vfiprintf_r+0x13c>
 8003180:	9a07      	ldr	r2, [sp, #28]
 8003182:	4654      	mov	r4, sl
 8003184:	2000      	movs	r0, #0
 8003186:	f04f 0c0a 	mov.w	ip, #10
 800318a:	4621      	mov	r1, r4
 800318c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003190:	3b30      	subs	r3, #48	; 0x30
 8003192:	2b09      	cmp	r3, #9
 8003194:	d94e      	bls.n	8003234 <_vfiprintf_r+0x1c4>
 8003196:	b1b0      	cbz	r0, 80031c6 <_vfiprintf_r+0x156>
 8003198:	9207      	str	r2, [sp, #28]
 800319a:	e014      	b.n	80031c6 <_vfiprintf_r+0x156>
 800319c:	eba0 0308 	sub.w	r3, r0, r8
 80031a0:	fa09 f303 	lsl.w	r3, r9, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	46a2      	mov	sl, r4
 80031aa:	e7d2      	b.n	8003152 <_vfiprintf_r+0xe2>
 80031ac:	9b03      	ldr	r3, [sp, #12]
 80031ae:	1d19      	adds	r1, r3, #4
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	9103      	str	r1, [sp, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	bfbb      	ittet	lt
 80031b8:	425b      	neglt	r3, r3
 80031ba:	f042 0202 	orrlt.w	r2, r2, #2
 80031be:	9307      	strge	r3, [sp, #28]
 80031c0:	9307      	strlt	r3, [sp, #28]
 80031c2:	bfb8      	it	lt
 80031c4:	9204      	strlt	r2, [sp, #16]
 80031c6:	7823      	ldrb	r3, [r4, #0]
 80031c8:	2b2e      	cmp	r3, #46	; 0x2e
 80031ca:	d10c      	bne.n	80031e6 <_vfiprintf_r+0x176>
 80031cc:	7863      	ldrb	r3, [r4, #1]
 80031ce:	2b2a      	cmp	r3, #42	; 0x2a
 80031d0:	d135      	bne.n	800323e <_vfiprintf_r+0x1ce>
 80031d2:	9b03      	ldr	r3, [sp, #12]
 80031d4:	1d1a      	adds	r2, r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	9203      	str	r2, [sp, #12]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfb8      	it	lt
 80031de:	f04f 33ff 	movlt.w	r3, #4294967295
 80031e2:	3402      	adds	r4, #2
 80031e4:	9305      	str	r3, [sp, #20]
 80031e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80032c0 <_vfiprintf_r+0x250>
 80031ea:	7821      	ldrb	r1, [r4, #0]
 80031ec:	2203      	movs	r2, #3
 80031ee:	4650      	mov	r0, sl
 80031f0:	f7fc fffe 	bl	80001f0 <memchr>
 80031f4:	b140      	cbz	r0, 8003208 <_vfiprintf_r+0x198>
 80031f6:	2340      	movs	r3, #64	; 0x40
 80031f8:	eba0 000a 	sub.w	r0, r0, sl
 80031fc:	fa03 f000 	lsl.w	r0, r3, r0
 8003200:	9b04      	ldr	r3, [sp, #16]
 8003202:	4303      	orrs	r3, r0
 8003204:	3401      	adds	r4, #1
 8003206:	9304      	str	r3, [sp, #16]
 8003208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320c:	482d      	ldr	r0, [pc, #180]	; (80032c4 <_vfiprintf_r+0x254>)
 800320e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003212:	2206      	movs	r2, #6
 8003214:	f7fc ffec 	bl	80001f0 <memchr>
 8003218:	2800      	cmp	r0, #0
 800321a:	d03f      	beq.n	800329c <_vfiprintf_r+0x22c>
 800321c:	4b2a      	ldr	r3, [pc, #168]	; (80032c8 <_vfiprintf_r+0x258>)
 800321e:	bb1b      	cbnz	r3, 8003268 <_vfiprintf_r+0x1f8>
 8003220:	9b03      	ldr	r3, [sp, #12]
 8003222:	3307      	adds	r3, #7
 8003224:	f023 0307 	bic.w	r3, r3, #7
 8003228:	3308      	adds	r3, #8
 800322a:	9303      	str	r3, [sp, #12]
 800322c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800322e:	443b      	add	r3, r7
 8003230:	9309      	str	r3, [sp, #36]	; 0x24
 8003232:	e767      	b.n	8003104 <_vfiprintf_r+0x94>
 8003234:	fb0c 3202 	mla	r2, ip, r2, r3
 8003238:	460c      	mov	r4, r1
 800323a:	2001      	movs	r0, #1
 800323c:	e7a5      	b.n	800318a <_vfiprintf_r+0x11a>
 800323e:	2300      	movs	r3, #0
 8003240:	3401      	adds	r4, #1
 8003242:	9305      	str	r3, [sp, #20]
 8003244:	4619      	mov	r1, r3
 8003246:	f04f 0c0a 	mov.w	ip, #10
 800324a:	4620      	mov	r0, r4
 800324c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003250:	3a30      	subs	r2, #48	; 0x30
 8003252:	2a09      	cmp	r2, #9
 8003254:	d903      	bls.n	800325e <_vfiprintf_r+0x1ee>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0c5      	beq.n	80031e6 <_vfiprintf_r+0x176>
 800325a:	9105      	str	r1, [sp, #20]
 800325c:	e7c3      	b.n	80031e6 <_vfiprintf_r+0x176>
 800325e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003262:	4604      	mov	r4, r0
 8003264:	2301      	movs	r3, #1
 8003266:	e7f0      	b.n	800324a <_vfiprintf_r+0x1da>
 8003268:	ab03      	add	r3, sp, #12
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	462a      	mov	r2, r5
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <_vfiprintf_r+0x25c>)
 8003270:	a904      	add	r1, sp, #16
 8003272:	4630      	mov	r0, r6
 8003274:	f3af 8000 	nop.w
 8003278:	4607      	mov	r7, r0
 800327a:	1c78      	adds	r0, r7, #1
 800327c:	d1d6      	bne.n	800322c <_vfiprintf_r+0x1bc>
 800327e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003280:	07d9      	lsls	r1, r3, #31
 8003282:	d405      	bmi.n	8003290 <_vfiprintf_r+0x220>
 8003284:	89ab      	ldrh	r3, [r5, #12]
 8003286:	059a      	lsls	r2, r3, #22
 8003288:	d402      	bmi.n	8003290 <_vfiprintf_r+0x220>
 800328a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800328c:	f000 fc41 	bl	8003b12 <__retarget_lock_release_recursive>
 8003290:	89ab      	ldrh	r3, [r5, #12]
 8003292:	065b      	lsls	r3, r3, #25
 8003294:	f53f af12 	bmi.w	80030bc <_vfiprintf_r+0x4c>
 8003298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329a:	e711      	b.n	80030c0 <_vfiprintf_r+0x50>
 800329c:	ab03      	add	r3, sp, #12
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	462a      	mov	r2, r5
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <_vfiprintf_r+0x25c>)
 80032a4:	a904      	add	r1, sp, #16
 80032a6:	4630      	mov	r0, r6
 80032a8:	f000 f880 	bl	80033ac <_printf_i>
 80032ac:	e7e4      	b.n	8003278 <_vfiprintf_r+0x208>
 80032ae:	bf00      	nop
 80032b0:	08004c5c 	.word	0x08004c5c
 80032b4:	08004c7c 	.word	0x08004c7c
 80032b8:	08004c3c 	.word	0x08004c3c
 80032bc:	08004c06 	.word	0x08004c06
 80032c0:	08004c0c 	.word	0x08004c0c
 80032c4:	08004c10 	.word	0x08004c10
 80032c8:	00000000 	.word	0x00000000
 80032cc:	0800304b 	.word	0x0800304b

080032d0 <_printf_common>:
 80032d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d4:	4616      	mov	r6, r2
 80032d6:	4699      	mov	r9, r3
 80032d8:	688a      	ldr	r2, [r1, #8]
 80032da:	690b      	ldr	r3, [r1, #16]
 80032dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bfb8      	it	lt
 80032e4:	4613      	movlt	r3, r2
 80032e6:	6033      	str	r3, [r6, #0]
 80032e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032ec:	4607      	mov	r7, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	b10a      	cbz	r2, 80032f6 <_printf_common+0x26>
 80032f2:	3301      	adds	r3, #1
 80032f4:	6033      	str	r3, [r6, #0]
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	0699      	lsls	r1, r3, #26
 80032fa:	bf42      	ittt	mi
 80032fc:	6833      	ldrmi	r3, [r6, #0]
 80032fe:	3302      	addmi	r3, #2
 8003300:	6033      	strmi	r3, [r6, #0]
 8003302:	6825      	ldr	r5, [r4, #0]
 8003304:	f015 0506 	ands.w	r5, r5, #6
 8003308:	d106      	bne.n	8003318 <_printf_common+0x48>
 800330a:	f104 0a19 	add.w	sl, r4, #25
 800330e:	68e3      	ldr	r3, [r4, #12]
 8003310:	6832      	ldr	r2, [r6, #0]
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	42ab      	cmp	r3, r5
 8003316:	dc26      	bgt.n	8003366 <_printf_common+0x96>
 8003318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800331c:	1e13      	subs	r3, r2, #0
 800331e:	6822      	ldr	r2, [r4, #0]
 8003320:	bf18      	it	ne
 8003322:	2301      	movne	r3, #1
 8003324:	0692      	lsls	r2, r2, #26
 8003326:	d42b      	bmi.n	8003380 <_printf_common+0xb0>
 8003328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332c:	4649      	mov	r1, r9
 800332e:	4638      	mov	r0, r7
 8003330:	47c0      	blx	r8
 8003332:	3001      	adds	r0, #1
 8003334:	d01e      	beq.n	8003374 <_printf_common+0xa4>
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	68e5      	ldr	r5, [r4, #12]
 800333a:	6832      	ldr	r2, [r6, #0]
 800333c:	f003 0306 	and.w	r3, r3, #6
 8003340:	2b04      	cmp	r3, #4
 8003342:	bf08      	it	eq
 8003344:	1aad      	subeq	r5, r5, r2
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	6922      	ldr	r2, [r4, #16]
 800334a:	bf0c      	ite	eq
 800334c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003350:	2500      	movne	r5, #0
 8003352:	4293      	cmp	r3, r2
 8003354:	bfc4      	itt	gt
 8003356:	1a9b      	subgt	r3, r3, r2
 8003358:	18ed      	addgt	r5, r5, r3
 800335a:	2600      	movs	r6, #0
 800335c:	341a      	adds	r4, #26
 800335e:	42b5      	cmp	r5, r6
 8003360:	d11a      	bne.n	8003398 <_printf_common+0xc8>
 8003362:	2000      	movs	r0, #0
 8003364:	e008      	b.n	8003378 <_printf_common+0xa8>
 8003366:	2301      	movs	r3, #1
 8003368:	4652      	mov	r2, sl
 800336a:	4649      	mov	r1, r9
 800336c:	4638      	mov	r0, r7
 800336e:	47c0      	blx	r8
 8003370:	3001      	adds	r0, #1
 8003372:	d103      	bne.n	800337c <_printf_common+0xac>
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	3501      	adds	r5, #1
 800337e:	e7c6      	b.n	800330e <_printf_common+0x3e>
 8003380:	18e1      	adds	r1, r4, r3
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	2030      	movs	r0, #48	; 0x30
 8003386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800338a:	4422      	add	r2, r4
 800338c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003394:	3302      	adds	r3, #2
 8003396:	e7c7      	b.n	8003328 <_printf_common+0x58>
 8003398:	2301      	movs	r3, #1
 800339a:	4622      	mov	r2, r4
 800339c:	4649      	mov	r1, r9
 800339e:	4638      	mov	r0, r7
 80033a0:	47c0      	blx	r8
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0e6      	beq.n	8003374 <_printf_common+0xa4>
 80033a6:	3601      	adds	r6, #1
 80033a8:	e7d9      	b.n	800335e <_printf_common+0x8e>
	...

080033ac <_printf_i>:
 80033ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	7e0f      	ldrb	r7, [r1, #24]
 80033b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033b4:	2f78      	cmp	r7, #120	; 0x78
 80033b6:	4691      	mov	r9, r2
 80033b8:	4680      	mov	r8, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	469a      	mov	sl, r3
 80033be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033c2:	d807      	bhi.n	80033d4 <_printf_i+0x28>
 80033c4:	2f62      	cmp	r7, #98	; 0x62
 80033c6:	d80a      	bhi.n	80033de <_printf_i+0x32>
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	f000 80d8 	beq.w	800357e <_printf_i+0x1d2>
 80033ce:	2f58      	cmp	r7, #88	; 0x58
 80033d0:	f000 80a3 	beq.w	800351a <_printf_i+0x16e>
 80033d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033dc:	e03a      	b.n	8003454 <_printf_i+0xa8>
 80033de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033e2:	2b15      	cmp	r3, #21
 80033e4:	d8f6      	bhi.n	80033d4 <_printf_i+0x28>
 80033e6:	a101      	add	r1, pc, #4	; (adr r1, 80033ec <_printf_i+0x40>)
 80033e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033ec:	08003445 	.word	0x08003445
 80033f0:	08003459 	.word	0x08003459
 80033f4:	080033d5 	.word	0x080033d5
 80033f8:	080033d5 	.word	0x080033d5
 80033fc:	080033d5 	.word	0x080033d5
 8003400:	080033d5 	.word	0x080033d5
 8003404:	08003459 	.word	0x08003459
 8003408:	080033d5 	.word	0x080033d5
 800340c:	080033d5 	.word	0x080033d5
 8003410:	080033d5 	.word	0x080033d5
 8003414:	080033d5 	.word	0x080033d5
 8003418:	08003565 	.word	0x08003565
 800341c:	08003489 	.word	0x08003489
 8003420:	08003547 	.word	0x08003547
 8003424:	080033d5 	.word	0x080033d5
 8003428:	080033d5 	.word	0x080033d5
 800342c:	08003587 	.word	0x08003587
 8003430:	080033d5 	.word	0x080033d5
 8003434:	08003489 	.word	0x08003489
 8003438:	080033d5 	.word	0x080033d5
 800343c:	080033d5 	.word	0x080033d5
 8003440:	0800354f 	.word	0x0800354f
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	602a      	str	r2, [r5, #0]
 800344c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003454:	2301      	movs	r3, #1
 8003456:	e0a3      	b.n	80035a0 <_printf_i+0x1f4>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	6829      	ldr	r1, [r5, #0]
 800345c:	0606      	lsls	r6, r0, #24
 800345e:	f101 0304 	add.w	r3, r1, #4
 8003462:	d50a      	bpl.n	800347a <_printf_i+0xce>
 8003464:	680e      	ldr	r6, [r1, #0]
 8003466:	602b      	str	r3, [r5, #0]
 8003468:	2e00      	cmp	r6, #0
 800346a:	da03      	bge.n	8003474 <_printf_i+0xc8>
 800346c:	232d      	movs	r3, #45	; 0x2d
 800346e:	4276      	negs	r6, r6
 8003470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003474:	485e      	ldr	r0, [pc, #376]	; (80035f0 <_printf_i+0x244>)
 8003476:	230a      	movs	r3, #10
 8003478:	e019      	b.n	80034ae <_printf_i+0x102>
 800347a:	680e      	ldr	r6, [r1, #0]
 800347c:	602b      	str	r3, [r5, #0]
 800347e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003482:	bf18      	it	ne
 8003484:	b236      	sxthne	r6, r6
 8003486:	e7ef      	b.n	8003468 <_printf_i+0xbc>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	1d19      	adds	r1, r3, #4
 800348e:	6029      	str	r1, [r5, #0]
 8003490:	0601      	lsls	r1, r0, #24
 8003492:	d501      	bpl.n	8003498 <_printf_i+0xec>
 8003494:	681e      	ldr	r6, [r3, #0]
 8003496:	e002      	b.n	800349e <_printf_i+0xf2>
 8003498:	0646      	lsls	r6, r0, #25
 800349a:	d5fb      	bpl.n	8003494 <_printf_i+0xe8>
 800349c:	881e      	ldrh	r6, [r3, #0]
 800349e:	4854      	ldr	r0, [pc, #336]	; (80035f0 <_printf_i+0x244>)
 80034a0:	2f6f      	cmp	r7, #111	; 0x6f
 80034a2:	bf0c      	ite	eq
 80034a4:	2308      	moveq	r3, #8
 80034a6:	230a      	movne	r3, #10
 80034a8:	2100      	movs	r1, #0
 80034aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034ae:	6865      	ldr	r5, [r4, #4]
 80034b0:	60a5      	str	r5, [r4, #8]
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	bfa2      	ittt	ge
 80034b6:	6821      	ldrge	r1, [r4, #0]
 80034b8:	f021 0104 	bicge.w	r1, r1, #4
 80034bc:	6021      	strge	r1, [r4, #0]
 80034be:	b90e      	cbnz	r6, 80034c4 <_printf_i+0x118>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d04d      	beq.n	8003560 <_printf_i+0x1b4>
 80034c4:	4615      	mov	r5, r2
 80034c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80034ca:	fb03 6711 	mls	r7, r3, r1, r6
 80034ce:	5dc7      	ldrb	r7, [r0, r7]
 80034d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034d4:	4637      	mov	r7, r6
 80034d6:	42bb      	cmp	r3, r7
 80034d8:	460e      	mov	r6, r1
 80034da:	d9f4      	bls.n	80034c6 <_printf_i+0x11a>
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d10b      	bne.n	80034f8 <_printf_i+0x14c>
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	07de      	lsls	r6, r3, #31
 80034e4:	d508      	bpl.n	80034f8 <_printf_i+0x14c>
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	6861      	ldr	r1, [r4, #4]
 80034ea:	4299      	cmp	r1, r3
 80034ec:	bfde      	ittt	le
 80034ee:	2330      	movle	r3, #48	; 0x30
 80034f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034f8:	1b52      	subs	r2, r2, r5
 80034fa:	6122      	str	r2, [r4, #16]
 80034fc:	f8cd a000 	str.w	sl, [sp]
 8003500:	464b      	mov	r3, r9
 8003502:	aa03      	add	r2, sp, #12
 8003504:	4621      	mov	r1, r4
 8003506:	4640      	mov	r0, r8
 8003508:	f7ff fee2 	bl	80032d0 <_printf_common>
 800350c:	3001      	adds	r0, #1
 800350e:	d14c      	bne.n	80035aa <_printf_i+0x1fe>
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	b004      	add	sp, #16
 8003516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351a:	4835      	ldr	r0, [pc, #212]	; (80035f0 <_printf_i+0x244>)
 800351c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003520:	6829      	ldr	r1, [r5, #0]
 8003522:	6823      	ldr	r3, [r4, #0]
 8003524:	f851 6b04 	ldr.w	r6, [r1], #4
 8003528:	6029      	str	r1, [r5, #0]
 800352a:	061d      	lsls	r5, r3, #24
 800352c:	d514      	bpl.n	8003558 <_printf_i+0x1ac>
 800352e:	07df      	lsls	r7, r3, #31
 8003530:	bf44      	itt	mi
 8003532:	f043 0320 	orrmi.w	r3, r3, #32
 8003536:	6023      	strmi	r3, [r4, #0]
 8003538:	b91e      	cbnz	r6, 8003542 <_printf_i+0x196>
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f023 0320 	bic.w	r3, r3, #32
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	2310      	movs	r3, #16
 8003544:	e7b0      	b.n	80034a8 <_printf_i+0xfc>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	f043 0320 	orr.w	r3, r3, #32
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	2378      	movs	r3, #120	; 0x78
 8003550:	4828      	ldr	r0, [pc, #160]	; (80035f4 <_printf_i+0x248>)
 8003552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003556:	e7e3      	b.n	8003520 <_printf_i+0x174>
 8003558:	0659      	lsls	r1, r3, #25
 800355a:	bf48      	it	mi
 800355c:	b2b6      	uxthmi	r6, r6
 800355e:	e7e6      	b.n	800352e <_printf_i+0x182>
 8003560:	4615      	mov	r5, r2
 8003562:	e7bb      	b.n	80034dc <_printf_i+0x130>
 8003564:	682b      	ldr	r3, [r5, #0]
 8003566:	6826      	ldr	r6, [r4, #0]
 8003568:	6961      	ldr	r1, [r4, #20]
 800356a:	1d18      	adds	r0, r3, #4
 800356c:	6028      	str	r0, [r5, #0]
 800356e:	0635      	lsls	r5, r6, #24
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	d501      	bpl.n	8003578 <_printf_i+0x1cc>
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	e002      	b.n	800357e <_printf_i+0x1d2>
 8003578:	0670      	lsls	r0, r6, #25
 800357a:	d5fb      	bpl.n	8003574 <_printf_i+0x1c8>
 800357c:	8019      	strh	r1, [r3, #0]
 800357e:	2300      	movs	r3, #0
 8003580:	6123      	str	r3, [r4, #16]
 8003582:	4615      	mov	r5, r2
 8003584:	e7ba      	b.n	80034fc <_printf_i+0x150>
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	1d1a      	adds	r2, r3, #4
 800358a:	602a      	str	r2, [r5, #0]
 800358c:	681d      	ldr	r5, [r3, #0]
 800358e:	6862      	ldr	r2, [r4, #4]
 8003590:	2100      	movs	r1, #0
 8003592:	4628      	mov	r0, r5
 8003594:	f7fc fe2c 	bl	80001f0 <memchr>
 8003598:	b108      	cbz	r0, 800359e <_printf_i+0x1f2>
 800359a:	1b40      	subs	r0, r0, r5
 800359c:	6060      	str	r0, [r4, #4]
 800359e:	6863      	ldr	r3, [r4, #4]
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	2300      	movs	r3, #0
 80035a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a8:	e7a8      	b.n	80034fc <_printf_i+0x150>
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	462a      	mov	r2, r5
 80035ae:	4649      	mov	r1, r9
 80035b0:	4640      	mov	r0, r8
 80035b2:	47d0      	blx	sl
 80035b4:	3001      	adds	r0, #1
 80035b6:	d0ab      	beq.n	8003510 <_printf_i+0x164>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	079b      	lsls	r3, r3, #30
 80035bc:	d413      	bmi.n	80035e6 <_printf_i+0x23a>
 80035be:	68e0      	ldr	r0, [r4, #12]
 80035c0:	9b03      	ldr	r3, [sp, #12]
 80035c2:	4298      	cmp	r0, r3
 80035c4:	bfb8      	it	lt
 80035c6:	4618      	movlt	r0, r3
 80035c8:	e7a4      	b.n	8003514 <_printf_i+0x168>
 80035ca:	2301      	movs	r3, #1
 80035cc:	4632      	mov	r2, r6
 80035ce:	4649      	mov	r1, r9
 80035d0:	4640      	mov	r0, r8
 80035d2:	47d0      	blx	sl
 80035d4:	3001      	adds	r0, #1
 80035d6:	d09b      	beq.n	8003510 <_printf_i+0x164>
 80035d8:	3501      	adds	r5, #1
 80035da:	68e3      	ldr	r3, [r4, #12]
 80035dc:	9903      	ldr	r1, [sp, #12]
 80035de:	1a5b      	subs	r3, r3, r1
 80035e0:	42ab      	cmp	r3, r5
 80035e2:	dcf2      	bgt.n	80035ca <_printf_i+0x21e>
 80035e4:	e7eb      	b.n	80035be <_printf_i+0x212>
 80035e6:	2500      	movs	r5, #0
 80035e8:	f104 0619 	add.w	r6, r4, #25
 80035ec:	e7f5      	b.n	80035da <_printf_i+0x22e>
 80035ee:	bf00      	nop
 80035f0:	08004c17 	.word	0x08004c17
 80035f4:	08004c28 	.word	0x08004c28

080035f8 <_sbrk_r>:
 80035f8:	b538      	push	{r3, r4, r5, lr}
 80035fa:	4d06      	ldr	r5, [pc, #24]	; (8003614 <_sbrk_r+0x1c>)
 80035fc:	2300      	movs	r3, #0
 80035fe:	4604      	mov	r4, r0
 8003600:	4608      	mov	r0, r1
 8003602:	602b      	str	r3, [r5, #0]
 8003604:	f7ff f97c 	bl	8002900 <_sbrk>
 8003608:	1c43      	adds	r3, r0, #1
 800360a:	d102      	bne.n	8003612 <_sbrk_r+0x1a>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	b103      	cbz	r3, 8003612 <_sbrk_r+0x1a>
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	bd38      	pop	{r3, r4, r5, pc}
 8003614:	20000130 	.word	0x20000130

08003618 <__swbuf_r>:
 8003618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361a:	460e      	mov	r6, r1
 800361c:	4614      	mov	r4, r2
 800361e:	4605      	mov	r5, r0
 8003620:	b118      	cbz	r0, 800362a <__swbuf_r+0x12>
 8003622:	6983      	ldr	r3, [r0, #24]
 8003624:	b90b      	cbnz	r3, 800362a <__swbuf_r+0x12>
 8003626:	f000 f9d5 	bl	80039d4 <__sinit>
 800362a:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <__swbuf_r+0x98>)
 800362c:	429c      	cmp	r4, r3
 800362e:	d12b      	bne.n	8003688 <__swbuf_r+0x70>
 8003630:	686c      	ldr	r4, [r5, #4]
 8003632:	69a3      	ldr	r3, [r4, #24]
 8003634:	60a3      	str	r3, [r4, #8]
 8003636:	89a3      	ldrh	r3, [r4, #12]
 8003638:	071a      	lsls	r2, r3, #28
 800363a:	d52f      	bpl.n	800369c <__swbuf_r+0x84>
 800363c:	6923      	ldr	r3, [r4, #16]
 800363e:	b36b      	cbz	r3, 800369c <__swbuf_r+0x84>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	1ac0      	subs	r0, r0, r3
 8003646:	6963      	ldr	r3, [r4, #20]
 8003648:	b2f6      	uxtb	r6, r6
 800364a:	4283      	cmp	r3, r0
 800364c:	4637      	mov	r7, r6
 800364e:	dc04      	bgt.n	800365a <__swbuf_r+0x42>
 8003650:	4621      	mov	r1, r4
 8003652:	4628      	mov	r0, r5
 8003654:	f000 f92a 	bl	80038ac <_fflush_r>
 8003658:	bb30      	cbnz	r0, 80036a8 <__swbuf_r+0x90>
 800365a:	68a3      	ldr	r3, [r4, #8]
 800365c:	3b01      	subs	r3, #1
 800365e:	60a3      	str	r3, [r4, #8]
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	6022      	str	r2, [r4, #0]
 8003666:	701e      	strb	r6, [r3, #0]
 8003668:	6963      	ldr	r3, [r4, #20]
 800366a:	3001      	adds	r0, #1
 800366c:	4283      	cmp	r3, r0
 800366e:	d004      	beq.n	800367a <__swbuf_r+0x62>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	07db      	lsls	r3, r3, #31
 8003674:	d506      	bpl.n	8003684 <__swbuf_r+0x6c>
 8003676:	2e0a      	cmp	r6, #10
 8003678:	d104      	bne.n	8003684 <__swbuf_r+0x6c>
 800367a:	4621      	mov	r1, r4
 800367c:	4628      	mov	r0, r5
 800367e:	f000 f915 	bl	80038ac <_fflush_r>
 8003682:	b988      	cbnz	r0, 80036a8 <__swbuf_r+0x90>
 8003684:	4638      	mov	r0, r7
 8003686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <__swbuf_r+0x9c>)
 800368a:	429c      	cmp	r4, r3
 800368c:	d101      	bne.n	8003692 <__swbuf_r+0x7a>
 800368e:	68ac      	ldr	r4, [r5, #8]
 8003690:	e7cf      	b.n	8003632 <__swbuf_r+0x1a>
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <__swbuf_r+0xa0>)
 8003694:	429c      	cmp	r4, r3
 8003696:	bf08      	it	eq
 8003698:	68ec      	ldreq	r4, [r5, #12]
 800369a:	e7ca      	b.n	8003632 <__swbuf_r+0x1a>
 800369c:	4621      	mov	r1, r4
 800369e:	4628      	mov	r0, r5
 80036a0:	f000 f80c 	bl	80036bc <__swsetup_r>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d0cb      	beq.n	8003640 <__swbuf_r+0x28>
 80036a8:	f04f 37ff 	mov.w	r7, #4294967295
 80036ac:	e7ea      	b.n	8003684 <__swbuf_r+0x6c>
 80036ae:	bf00      	nop
 80036b0:	08004c5c 	.word	0x08004c5c
 80036b4:	08004c7c 	.word	0x08004c7c
 80036b8:	08004c3c 	.word	0x08004c3c

080036bc <__swsetup_r>:
 80036bc:	4b32      	ldr	r3, [pc, #200]	; (8003788 <__swsetup_r+0xcc>)
 80036be:	b570      	push	{r4, r5, r6, lr}
 80036c0:	681d      	ldr	r5, [r3, #0]
 80036c2:	4606      	mov	r6, r0
 80036c4:	460c      	mov	r4, r1
 80036c6:	b125      	cbz	r5, 80036d2 <__swsetup_r+0x16>
 80036c8:	69ab      	ldr	r3, [r5, #24]
 80036ca:	b913      	cbnz	r3, 80036d2 <__swsetup_r+0x16>
 80036cc:	4628      	mov	r0, r5
 80036ce:	f000 f981 	bl	80039d4 <__sinit>
 80036d2:	4b2e      	ldr	r3, [pc, #184]	; (800378c <__swsetup_r+0xd0>)
 80036d4:	429c      	cmp	r4, r3
 80036d6:	d10f      	bne.n	80036f8 <__swsetup_r+0x3c>
 80036d8:	686c      	ldr	r4, [r5, #4]
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036e0:	0719      	lsls	r1, r3, #28
 80036e2:	d42c      	bmi.n	800373e <__swsetup_r+0x82>
 80036e4:	06dd      	lsls	r5, r3, #27
 80036e6:	d411      	bmi.n	800370c <__swsetup_r+0x50>
 80036e8:	2309      	movs	r3, #9
 80036ea:	6033      	str	r3, [r6, #0]
 80036ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80036f0:	81a3      	strh	r3, [r4, #12]
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	e03e      	b.n	8003776 <__swsetup_r+0xba>
 80036f8:	4b25      	ldr	r3, [pc, #148]	; (8003790 <__swsetup_r+0xd4>)
 80036fa:	429c      	cmp	r4, r3
 80036fc:	d101      	bne.n	8003702 <__swsetup_r+0x46>
 80036fe:	68ac      	ldr	r4, [r5, #8]
 8003700:	e7eb      	b.n	80036da <__swsetup_r+0x1e>
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <__swsetup_r+0xd8>)
 8003704:	429c      	cmp	r4, r3
 8003706:	bf08      	it	eq
 8003708:	68ec      	ldreq	r4, [r5, #12]
 800370a:	e7e6      	b.n	80036da <__swsetup_r+0x1e>
 800370c:	0758      	lsls	r0, r3, #29
 800370e:	d512      	bpl.n	8003736 <__swsetup_r+0x7a>
 8003710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003712:	b141      	cbz	r1, 8003726 <__swsetup_r+0x6a>
 8003714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003718:	4299      	cmp	r1, r3
 800371a:	d002      	beq.n	8003722 <__swsetup_r+0x66>
 800371c:	4630      	mov	r0, r6
 800371e:	f7ff fa45 	bl	8002bac <_free_r>
 8003722:	2300      	movs	r3, #0
 8003724:	6363      	str	r3, [r4, #52]	; 0x34
 8003726:	89a3      	ldrh	r3, [r4, #12]
 8003728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800372c:	81a3      	strh	r3, [r4, #12]
 800372e:	2300      	movs	r3, #0
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6923      	ldr	r3, [r4, #16]
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	b94b      	cbnz	r3, 8003756 <__swsetup_r+0x9a>
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800374c:	d003      	beq.n	8003756 <__swsetup_r+0x9a>
 800374e:	4621      	mov	r1, r4
 8003750:	4630      	mov	r0, r6
 8003752:	f000 fa05 	bl	8003b60 <__smakebuf_r>
 8003756:	89a0      	ldrh	r0, [r4, #12]
 8003758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800375c:	f010 0301 	ands.w	r3, r0, #1
 8003760:	d00a      	beq.n	8003778 <__swsetup_r+0xbc>
 8003762:	2300      	movs	r3, #0
 8003764:	60a3      	str	r3, [r4, #8]
 8003766:	6963      	ldr	r3, [r4, #20]
 8003768:	425b      	negs	r3, r3
 800376a:	61a3      	str	r3, [r4, #24]
 800376c:	6923      	ldr	r3, [r4, #16]
 800376e:	b943      	cbnz	r3, 8003782 <__swsetup_r+0xc6>
 8003770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003774:	d1ba      	bne.n	80036ec <__swsetup_r+0x30>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	0781      	lsls	r1, r0, #30
 800377a:	bf58      	it	pl
 800377c:	6963      	ldrpl	r3, [r4, #20]
 800377e:	60a3      	str	r3, [r4, #8]
 8003780:	e7f4      	b.n	800376c <__swsetup_r+0xb0>
 8003782:	2000      	movs	r0, #0
 8003784:	e7f7      	b.n	8003776 <__swsetup_r+0xba>
 8003786:	bf00      	nop
 8003788:	20000004 	.word	0x20000004
 800378c:	08004c5c 	.word	0x08004c5c
 8003790:	08004c7c 	.word	0x08004c7c
 8003794:	08004c3c 	.word	0x08004c3c

08003798 <abort>:
 8003798:	b508      	push	{r3, lr}
 800379a:	2006      	movs	r0, #6
 800379c:	f000 faac 	bl	8003cf8 <raise>
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7ff f83a 	bl	800281a <_exit>
	...

080037a8 <__sflush_r>:
 80037a8:	898a      	ldrh	r2, [r1, #12]
 80037aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ac:	4605      	mov	r5, r0
 80037ae:	0710      	lsls	r0, r2, #28
 80037b0:	460c      	mov	r4, r1
 80037b2:	d457      	bmi.n	8003864 <__sflush_r+0xbc>
 80037b4:	684b      	ldr	r3, [r1, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dc04      	bgt.n	80037c4 <__sflush_r+0x1c>
 80037ba:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	dc01      	bgt.n	80037c4 <__sflush_r+0x1c>
 80037c0:	2000      	movs	r0, #0
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037c6:	2e00      	cmp	r6, #0
 80037c8:	d0fa      	beq.n	80037c0 <__sflush_r+0x18>
 80037ca:	2300      	movs	r3, #0
 80037cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037d0:	682f      	ldr	r7, [r5, #0]
 80037d2:	602b      	str	r3, [r5, #0]
 80037d4:	d032      	beq.n	800383c <__sflush_r+0x94>
 80037d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037d8:	89a3      	ldrh	r3, [r4, #12]
 80037da:	075a      	lsls	r2, r3, #29
 80037dc:	d505      	bpl.n	80037ea <__sflush_r+0x42>
 80037de:	6863      	ldr	r3, [r4, #4]
 80037e0:	1ac0      	subs	r0, r0, r3
 80037e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80037e4:	b10b      	cbz	r3, 80037ea <__sflush_r+0x42>
 80037e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e8:	1ac0      	subs	r0, r0, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	4602      	mov	r2, r0
 80037ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037f0:	6a21      	ldr	r1, [r4, #32]
 80037f2:	4628      	mov	r0, r5
 80037f4:	47b0      	blx	r6
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	d106      	bne.n	800380a <__sflush_r+0x62>
 80037fc:	6829      	ldr	r1, [r5, #0]
 80037fe:	291d      	cmp	r1, #29
 8003800:	d82c      	bhi.n	800385c <__sflush_r+0xb4>
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <__sflush_r+0x100>)
 8003804:	40ca      	lsrs	r2, r1
 8003806:	07d6      	lsls	r6, r2, #31
 8003808:	d528      	bpl.n	800385c <__sflush_r+0xb4>
 800380a:	2200      	movs	r2, #0
 800380c:	6062      	str	r2, [r4, #4]
 800380e:	04d9      	lsls	r1, r3, #19
 8003810:	6922      	ldr	r2, [r4, #16]
 8003812:	6022      	str	r2, [r4, #0]
 8003814:	d504      	bpl.n	8003820 <__sflush_r+0x78>
 8003816:	1c42      	adds	r2, r0, #1
 8003818:	d101      	bne.n	800381e <__sflush_r+0x76>
 800381a:	682b      	ldr	r3, [r5, #0]
 800381c:	b903      	cbnz	r3, 8003820 <__sflush_r+0x78>
 800381e:	6560      	str	r0, [r4, #84]	; 0x54
 8003820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003822:	602f      	str	r7, [r5, #0]
 8003824:	2900      	cmp	r1, #0
 8003826:	d0cb      	beq.n	80037c0 <__sflush_r+0x18>
 8003828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800382c:	4299      	cmp	r1, r3
 800382e:	d002      	beq.n	8003836 <__sflush_r+0x8e>
 8003830:	4628      	mov	r0, r5
 8003832:	f7ff f9bb 	bl	8002bac <_free_r>
 8003836:	2000      	movs	r0, #0
 8003838:	6360      	str	r0, [r4, #52]	; 0x34
 800383a:	e7c2      	b.n	80037c2 <__sflush_r+0x1a>
 800383c:	6a21      	ldr	r1, [r4, #32]
 800383e:	2301      	movs	r3, #1
 8003840:	4628      	mov	r0, r5
 8003842:	47b0      	blx	r6
 8003844:	1c41      	adds	r1, r0, #1
 8003846:	d1c7      	bne.n	80037d8 <__sflush_r+0x30>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c4      	beq.n	80037d8 <__sflush_r+0x30>
 800384e:	2b1d      	cmp	r3, #29
 8003850:	d001      	beq.n	8003856 <__sflush_r+0xae>
 8003852:	2b16      	cmp	r3, #22
 8003854:	d101      	bne.n	800385a <__sflush_r+0xb2>
 8003856:	602f      	str	r7, [r5, #0]
 8003858:	e7b2      	b.n	80037c0 <__sflush_r+0x18>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003860:	81a3      	strh	r3, [r4, #12]
 8003862:	e7ae      	b.n	80037c2 <__sflush_r+0x1a>
 8003864:	690f      	ldr	r7, [r1, #16]
 8003866:	2f00      	cmp	r7, #0
 8003868:	d0aa      	beq.n	80037c0 <__sflush_r+0x18>
 800386a:	0793      	lsls	r3, r2, #30
 800386c:	680e      	ldr	r6, [r1, #0]
 800386e:	bf08      	it	eq
 8003870:	694b      	ldreq	r3, [r1, #20]
 8003872:	600f      	str	r7, [r1, #0]
 8003874:	bf18      	it	ne
 8003876:	2300      	movne	r3, #0
 8003878:	1bf6      	subs	r6, r6, r7
 800387a:	608b      	str	r3, [r1, #8]
 800387c:	2e00      	cmp	r6, #0
 800387e:	dd9f      	ble.n	80037c0 <__sflush_r+0x18>
 8003880:	6a21      	ldr	r1, [r4, #32]
 8003882:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003886:	4633      	mov	r3, r6
 8003888:	463a      	mov	r2, r7
 800388a:	4628      	mov	r0, r5
 800388c:	47e0      	blx	ip
 800388e:	2800      	cmp	r0, #0
 8003890:	dc06      	bgt.n	80038a0 <__sflush_r+0xf8>
 8003892:	89a3      	ldrh	r3, [r4, #12]
 8003894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003898:	81a3      	strh	r3, [r4, #12]
 800389a:	f04f 30ff 	mov.w	r0, #4294967295
 800389e:	e790      	b.n	80037c2 <__sflush_r+0x1a>
 80038a0:	4407      	add	r7, r0
 80038a2:	1a36      	subs	r6, r6, r0
 80038a4:	e7ea      	b.n	800387c <__sflush_r+0xd4>
 80038a6:	bf00      	nop
 80038a8:	20400001 	.word	0x20400001

080038ac <_fflush_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	690b      	ldr	r3, [r1, #16]
 80038b0:	4605      	mov	r5, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b913      	cbnz	r3, 80038bc <_fflush_r+0x10>
 80038b6:	2500      	movs	r5, #0
 80038b8:	4628      	mov	r0, r5
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	b118      	cbz	r0, 80038c6 <_fflush_r+0x1a>
 80038be:	6983      	ldr	r3, [r0, #24]
 80038c0:	b90b      	cbnz	r3, 80038c6 <_fflush_r+0x1a>
 80038c2:	f000 f887 	bl	80039d4 <__sinit>
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <_fflush_r+0x6c>)
 80038c8:	429c      	cmp	r4, r3
 80038ca:	d11b      	bne.n	8003904 <_fflush_r+0x58>
 80038cc:	686c      	ldr	r4, [r5, #4]
 80038ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0ef      	beq.n	80038b6 <_fflush_r+0xa>
 80038d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80038d8:	07d0      	lsls	r0, r2, #31
 80038da:	d404      	bmi.n	80038e6 <_fflush_r+0x3a>
 80038dc:	0599      	lsls	r1, r3, #22
 80038de:	d402      	bmi.n	80038e6 <_fflush_r+0x3a>
 80038e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038e2:	f000 f915 	bl	8003b10 <__retarget_lock_acquire_recursive>
 80038e6:	4628      	mov	r0, r5
 80038e8:	4621      	mov	r1, r4
 80038ea:	f7ff ff5d 	bl	80037a8 <__sflush_r>
 80038ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038f0:	07da      	lsls	r2, r3, #31
 80038f2:	4605      	mov	r5, r0
 80038f4:	d4e0      	bmi.n	80038b8 <_fflush_r+0xc>
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	059b      	lsls	r3, r3, #22
 80038fa:	d4dd      	bmi.n	80038b8 <_fflush_r+0xc>
 80038fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fe:	f000 f908 	bl	8003b12 <__retarget_lock_release_recursive>
 8003902:	e7d9      	b.n	80038b8 <_fflush_r+0xc>
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <_fflush_r+0x70>)
 8003906:	429c      	cmp	r4, r3
 8003908:	d101      	bne.n	800390e <_fflush_r+0x62>
 800390a:	68ac      	ldr	r4, [r5, #8]
 800390c:	e7df      	b.n	80038ce <_fflush_r+0x22>
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <_fflush_r+0x74>)
 8003910:	429c      	cmp	r4, r3
 8003912:	bf08      	it	eq
 8003914:	68ec      	ldreq	r4, [r5, #12]
 8003916:	e7da      	b.n	80038ce <_fflush_r+0x22>
 8003918:	08004c5c 	.word	0x08004c5c
 800391c:	08004c7c 	.word	0x08004c7c
 8003920:	08004c3c 	.word	0x08004c3c

08003924 <std>:
 8003924:	2300      	movs	r3, #0
 8003926:	b510      	push	{r4, lr}
 8003928:	4604      	mov	r4, r0
 800392a:	e9c0 3300 	strd	r3, r3, [r0]
 800392e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003932:	6083      	str	r3, [r0, #8]
 8003934:	8181      	strh	r1, [r0, #12]
 8003936:	6643      	str	r3, [r0, #100]	; 0x64
 8003938:	81c2      	strh	r2, [r0, #14]
 800393a:	6183      	str	r3, [r0, #24]
 800393c:	4619      	mov	r1, r3
 800393e:	2208      	movs	r2, #8
 8003940:	305c      	adds	r0, #92	; 0x5c
 8003942:	f7ff f867 	bl	8002a14 <memset>
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <std+0x38>)
 8003948:	6263      	str	r3, [r4, #36]	; 0x24
 800394a:	4b05      	ldr	r3, [pc, #20]	; (8003960 <std+0x3c>)
 800394c:	62a3      	str	r3, [r4, #40]	; 0x28
 800394e:	4b05      	ldr	r3, [pc, #20]	; (8003964 <std+0x40>)
 8003950:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <std+0x44>)
 8003954:	6224      	str	r4, [r4, #32]
 8003956:	6323      	str	r3, [r4, #48]	; 0x30
 8003958:	bd10      	pop	{r4, pc}
 800395a:	bf00      	nop
 800395c:	08003d31 	.word	0x08003d31
 8003960:	08003d53 	.word	0x08003d53
 8003964:	08003d8b 	.word	0x08003d8b
 8003968:	08003daf 	.word	0x08003daf

0800396c <_cleanup_r>:
 800396c:	4901      	ldr	r1, [pc, #4]	; (8003974 <_cleanup_r+0x8>)
 800396e:	f000 b8af 	b.w	8003ad0 <_fwalk_reent>
 8003972:	bf00      	nop
 8003974:	080038ad 	.word	0x080038ad

08003978 <__sfmoreglue>:
 8003978:	b570      	push	{r4, r5, r6, lr}
 800397a:	2268      	movs	r2, #104	; 0x68
 800397c:	1e4d      	subs	r5, r1, #1
 800397e:	4355      	muls	r5, r2
 8003980:	460e      	mov	r6, r1
 8003982:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003986:	f7ff f97b 	bl	8002c80 <_malloc_r>
 800398a:	4604      	mov	r4, r0
 800398c:	b140      	cbz	r0, 80039a0 <__sfmoreglue+0x28>
 800398e:	2100      	movs	r1, #0
 8003990:	e9c0 1600 	strd	r1, r6, [r0]
 8003994:	300c      	adds	r0, #12
 8003996:	60a0      	str	r0, [r4, #8]
 8003998:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800399c:	f7ff f83a 	bl	8002a14 <memset>
 80039a0:	4620      	mov	r0, r4
 80039a2:	bd70      	pop	{r4, r5, r6, pc}

080039a4 <__sfp_lock_acquire>:
 80039a4:	4801      	ldr	r0, [pc, #4]	; (80039ac <__sfp_lock_acquire+0x8>)
 80039a6:	f000 b8b3 	b.w	8003b10 <__retarget_lock_acquire_recursive>
 80039aa:	bf00      	nop
 80039ac:	2000012d 	.word	0x2000012d

080039b0 <__sfp_lock_release>:
 80039b0:	4801      	ldr	r0, [pc, #4]	; (80039b8 <__sfp_lock_release+0x8>)
 80039b2:	f000 b8ae 	b.w	8003b12 <__retarget_lock_release_recursive>
 80039b6:	bf00      	nop
 80039b8:	2000012d 	.word	0x2000012d

080039bc <__sinit_lock_acquire>:
 80039bc:	4801      	ldr	r0, [pc, #4]	; (80039c4 <__sinit_lock_acquire+0x8>)
 80039be:	f000 b8a7 	b.w	8003b10 <__retarget_lock_acquire_recursive>
 80039c2:	bf00      	nop
 80039c4:	2000012e 	.word	0x2000012e

080039c8 <__sinit_lock_release>:
 80039c8:	4801      	ldr	r0, [pc, #4]	; (80039d0 <__sinit_lock_release+0x8>)
 80039ca:	f000 b8a2 	b.w	8003b12 <__retarget_lock_release_recursive>
 80039ce:	bf00      	nop
 80039d0:	2000012e 	.word	0x2000012e

080039d4 <__sinit>:
 80039d4:	b510      	push	{r4, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	f7ff fff0 	bl	80039bc <__sinit_lock_acquire>
 80039dc:	69a3      	ldr	r3, [r4, #24]
 80039de:	b11b      	cbz	r3, 80039e8 <__sinit+0x14>
 80039e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e4:	f7ff bff0 	b.w	80039c8 <__sinit_lock_release>
 80039e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80039ec:	6523      	str	r3, [r4, #80]	; 0x50
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <__sinit+0x68>)
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <__sinit+0x6c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80039f6:	42a3      	cmp	r3, r4
 80039f8:	bf04      	itt	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	61a3      	streq	r3, [r4, #24]
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 f820 	bl	8003a44 <__sfp>
 8003a04:	6060      	str	r0, [r4, #4]
 8003a06:	4620      	mov	r0, r4
 8003a08:	f000 f81c 	bl	8003a44 <__sfp>
 8003a0c:	60a0      	str	r0, [r4, #8]
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 f818 	bl	8003a44 <__sfp>
 8003a14:	2200      	movs	r2, #0
 8003a16:	60e0      	str	r0, [r4, #12]
 8003a18:	2104      	movs	r1, #4
 8003a1a:	6860      	ldr	r0, [r4, #4]
 8003a1c:	f7ff ff82 	bl	8003924 <std>
 8003a20:	68a0      	ldr	r0, [r4, #8]
 8003a22:	2201      	movs	r2, #1
 8003a24:	2109      	movs	r1, #9
 8003a26:	f7ff ff7d 	bl	8003924 <std>
 8003a2a:	68e0      	ldr	r0, [r4, #12]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	2112      	movs	r1, #18
 8003a30:	f7ff ff78 	bl	8003924 <std>
 8003a34:	2301      	movs	r3, #1
 8003a36:	61a3      	str	r3, [r4, #24]
 8003a38:	e7d2      	b.n	80039e0 <__sinit+0xc>
 8003a3a:	bf00      	nop
 8003a3c:	08004b54 	.word	0x08004b54
 8003a40:	0800396d 	.word	0x0800396d

08003a44 <__sfp>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	4607      	mov	r7, r0
 8003a48:	f7ff ffac 	bl	80039a4 <__sfp_lock_acquire>
 8003a4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ac8 <__sfp+0x84>)
 8003a4e:	681e      	ldr	r6, [r3, #0]
 8003a50:	69b3      	ldr	r3, [r6, #24]
 8003a52:	b913      	cbnz	r3, 8003a5a <__sfp+0x16>
 8003a54:	4630      	mov	r0, r6
 8003a56:	f7ff ffbd 	bl	80039d4 <__sinit>
 8003a5a:	3648      	adds	r6, #72	; 0x48
 8003a5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	d503      	bpl.n	8003a6c <__sfp+0x28>
 8003a64:	6833      	ldr	r3, [r6, #0]
 8003a66:	b30b      	cbz	r3, 8003aac <__sfp+0x68>
 8003a68:	6836      	ldr	r6, [r6, #0]
 8003a6a:	e7f7      	b.n	8003a5c <__sfp+0x18>
 8003a6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a70:	b9d5      	cbnz	r5, 8003aa8 <__sfp+0x64>
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <__sfp+0x88>)
 8003a74:	60e3      	str	r3, [r4, #12]
 8003a76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a7a:	6665      	str	r5, [r4, #100]	; 0x64
 8003a7c:	f000 f847 	bl	8003b0e <__retarget_lock_init_recursive>
 8003a80:	f7ff ff96 	bl	80039b0 <__sfp_lock_release>
 8003a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a8c:	6025      	str	r5, [r4, #0]
 8003a8e:	61a5      	str	r5, [r4, #24]
 8003a90:	2208      	movs	r2, #8
 8003a92:	4629      	mov	r1, r5
 8003a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a98:	f7fe ffbc 	bl	8002a14 <memset>
 8003a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa8:	3468      	adds	r4, #104	; 0x68
 8003aaa:	e7d9      	b.n	8003a60 <__sfp+0x1c>
 8003aac:	2104      	movs	r1, #4
 8003aae:	4638      	mov	r0, r7
 8003ab0:	f7ff ff62 	bl	8003978 <__sfmoreglue>
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	6030      	str	r0, [r6, #0]
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d1d5      	bne.n	8003a68 <__sfp+0x24>
 8003abc:	f7ff ff78 	bl	80039b0 <__sfp_lock_release>
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	e7ee      	b.n	8003aa4 <__sfp+0x60>
 8003ac6:	bf00      	nop
 8003ac8:	08004b54 	.word	0x08004b54
 8003acc:	ffff0001 	.word	0xffff0001

08003ad0 <_fwalk_reent>:
 8003ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	4688      	mov	r8, r1
 8003ad8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003adc:	2700      	movs	r7, #0
 8003ade:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ae2:	f1b9 0901 	subs.w	r9, r9, #1
 8003ae6:	d505      	bpl.n	8003af4 <_fwalk_reent+0x24>
 8003ae8:	6824      	ldr	r4, [r4, #0]
 8003aea:	2c00      	cmp	r4, #0
 8003aec:	d1f7      	bne.n	8003ade <_fwalk_reent+0xe>
 8003aee:	4638      	mov	r0, r7
 8003af0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af4:	89ab      	ldrh	r3, [r5, #12]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d907      	bls.n	8003b0a <_fwalk_reent+0x3a>
 8003afa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003afe:	3301      	adds	r3, #1
 8003b00:	d003      	beq.n	8003b0a <_fwalk_reent+0x3a>
 8003b02:	4629      	mov	r1, r5
 8003b04:	4630      	mov	r0, r6
 8003b06:	47c0      	blx	r8
 8003b08:	4307      	orrs	r7, r0
 8003b0a:	3568      	adds	r5, #104	; 0x68
 8003b0c:	e7e9      	b.n	8003ae2 <_fwalk_reent+0x12>

08003b0e <__retarget_lock_init_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <__retarget_lock_acquire_recursive>:
 8003b10:	4770      	bx	lr

08003b12 <__retarget_lock_release_recursive>:
 8003b12:	4770      	bx	lr

08003b14 <__swhatbuf_r>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	460e      	mov	r6, r1
 8003b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	b096      	sub	sp, #88	; 0x58
 8003b20:	4614      	mov	r4, r2
 8003b22:	461d      	mov	r5, r3
 8003b24:	da08      	bge.n	8003b38 <__swhatbuf_r+0x24>
 8003b26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	602a      	str	r2, [r5, #0]
 8003b2e:	061a      	lsls	r2, r3, #24
 8003b30:	d410      	bmi.n	8003b54 <__swhatbuf_r+0x40>
 8003b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b36:	e00e      	b.n	8003b56 <__swhatbuf_r+0x42>
 8003b38:	466a      	mov	r2, sp
 8003b3a:	f000 f95f 	bl	8003dfc <_fstat_r>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	dbf1      	blt.n	8003b26 <__swhatbuf_r+0x12>
 8003b42:	9a01      	ldr	r2, [sp, #4]
 8003b44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b4c:	425a      	negs	r2, r3
 8003b4e:	415a      	adcs	r2, r3
 8003b50:	602a      	str	r2, [r5, #0]
 8003b52:	e7ee      	b.n	8003b32 <__swhatbuf_r+0x1e>
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	2000      	movs	r0, #0
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	b016      	add	sp, #88	; 0x58
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b60 <__smakebuf_r>:
 8003b60:	898b      	ldrh	r3, [r1, #12]
 8003b62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b64:	079d      	lsls	r5, r3, #30
 8003b66:	4606      	mov	r6, r0
 8003b68:	460c      	mov	r4, r1
 8003b6a:	d507      	bpl.n	8003b7c <__smakebuf_r+0x1c>
 8003b6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	6123      	str	r3, [r4, #16]
 8003b74:	2301      	movs	r3, #1
 8003b76:	6163      	str	r3, [r4, #20]
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	ab01      	add	r3, sp, #4
 8003b7e:	466a      	mov	r2, sp
 8003b80:	f7ff ffc8 	bl	8003b14 <__swhatbuf_r>
 8003b84:	9900      	ldr	r1, [sp, #0]
 8003b86:	4605      	mov	r5, r0
 8003b88:	4630      	mov	r0, r6
 8003b8a:	f7ff f879 	bl	8002c80 <_malloc_r>
 8003b8e:	b948      	cbnz	r0, 8003ba4 <__smakebuf_r+0x44>
 8003b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b94:	059a      	lsls	r2, r3, #22
 8003b96:	d4ef      	bmi.n	8003b78 <__smakebuf_r+0x18>
 8003b98:	f023 0303 	bic.w	r3, r3, #3
 8003b9c:	f043 0302 	orr.w	r3, r3, #2
 8003ba0:	81a3      	strh	r3, [r4, #12]
 8003ba2:	e7e3      	b.n	8003b6c <__smakebuf_r+0xc>
 8003ba4:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <__smakebuf_r+0x7c>)
 8003ba6:	62b3      	str	r3, [r6, #40]	; 0x28
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	6020      	str	r0, [r4, #0]
 8003bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bb0:	81a3      	strh	r3, [r4, #12]
 8003bb2:	9b00      	ldr	r3, [sp, #0]
 8003bb4:	6163      	str	r3, [r4, #20]
 8003bb6:	9b01      	ldr	r3, [sp, #4]
 8003bb8:	6120      	str	r0, [r4, #16]
 8003bba:	b15b      	cbz	r3, 8003bd4 <__smakebuf_r+0x74>
 8003bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f000 f92d 	bl	8003e20 <_isatty_r>
 8003bc6:	b128      	cbz	r0, 8003bd4 <__smakebuf_r+0x74>
 8003bc8:	89a3      	ldrh	r3, [r4, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	81a3      	strh	r3, [r4, #12]
 8003bd4:	89a0      	ldrh	r0, [r4, #12]
 8003bd6:	4305      	orrs	r5, r0
 8003bd8:	81a5      	strh	r5, [r4, #12]
 8003bda:	e7cd      	b.n	8003b78 <__smakebuf_r+0x18>
 8003bdc:	0800396d 	.word	0x0800396d

08003be0 <memcpy>:
 8003be0:	440a      	add	r2, r1
 8003be2:	4291      	cmp	r1, r2
 8003be4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003be8:	d100      	bne.n	8003bec <memcpy+0xc>
 8003bea:	4770      	bx	lr
 8003bec:	b510      	push	{r4, lr}
 8003bee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bf6:	4291      	cmp	r1, r2
 8003bf8:	d1f9      	bne.n	8003bee <memcpy+0xe>
 8003bfa:	bd10      	pop	{r4, pc}

08003bfc <memmove>:
 8003bfc:	4288      	cmp	r0, r1
 8003bfe:	b510      	push	{r4, lr}
 8003c00:	eb01 0402 	add.w	r4, r1, r2
 8003c04:	d902      	bls.n	8003c0c <memmove+0x10>
 8003c06:	4284      	cmp	r4, r0
 8003c08:	4623      	mov	r3, r4
 8003c0a:	d807      	bhi.n	8003c1c <memmove+0x20>
 8003c0c:	1e43      	subs	r3, r0, #1
 8003c0e:	42a1      	cmp	r1, r4
 8003c10:	d008      	beq.n	8003c24 <memmove+0x28>
 8003c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c1a:	e7f8      	b.n	8003c0e <memmove+0x12>
 8003c1c:	4402      	add	r2, r0
 8003c1e:	4601      	mov	r1, r0
 8003c20:	428a      	cmp	r2, r1
 8003c22:	d100      	bne.n	8003c26 <memmove+0x2a>
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c2e:	e7f7      	b.n	8003c20 <memmove+0x24>

08003c30 <__malloc_lock>:
 8003c30:	4801      	ldr	r0, [pc, #4]	; (8003c38 <__malloc_lock+0x8>)
 8003c32:	f7ff bf6d 	b.w	8003b10 <__retarget_lock_acquire_recursive>
 8003c36:	bf00      	nop
 8003c38:	2000012c 	.word	0x2000012c

08003c3c <__malloc_unlock>:
 8003c3c:	4801      	ldr	r0, [pc, #4]	; (8003c44 <__malloc_unlock+0x8>)
 8003c3e:	f7ff bf68 	b.w	8003b12 <__retarget_lock_release_recursive>
 8003c42:	bf00      	nop
 8003c44:	2000012c 	.word	0x2000012c

08003c48 <_realloc_r>:
 8003c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c4c:	4680      	mov	r8, r0
 8003c4e:	4614      	mov	r4, r2
 8003c50:	460e      	mov	r6, r1
 8003c52:	b921      	cbnz	r1, 8003c5e <_realloc_r+0x16>
 8003c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c58:	4611      	mov	r1, r2
 8003c5a:	f7ff b811 	b.w	8002c80 <_malloc_r>
 8003c5e:	b92a      	cbnz	r2, 8003c6c <_realloc_r+0x24>
 8003c60:	f7fe ffa4 	bl	8002bac <_free_r>
 8003c64:	4625      	mov	r5, r4
 8003c66:	4628      	mov	r0, r5
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	f000 f8fa 	bl	8003e64 <_malloc_usable_size_r>
 8003c70:	4284      	cmp	r4, r0
 8003c72:	4607      	mov	r7, r0
 8003c74:	d802      	bhi.n	8003c7c <_realloc_r+0x34>
 8003c76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c7a:	d812      	bhi.n	8003ca2 <_realloc_r+0x5a>
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f7fe fffe 	bl	8002c80 <_malloc_r>
 8003c84:	4605      	mov	r5, r0
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0ed      	beq.n	8003c66 <_realloc_r+0x1e>
 8003c8a:	42bc      	cmp	r4, r7
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	4631      	mov	r1, r6
 8003c90:	bf28      	it	cs
 8003c92:	463a      	movcs	r2, r7
 8003c94:	f7ff ffa4 	bl	8003be0 <memcpy>
 8003c98:	4631      	mov	r1, r6
 8003c9a:	4640      	mov	r0, r8
 8003c9c:	f7fe ff86 	bl	8002bac <_free_r>
 8003ca0:	e7e1      	b.n	8003c66 <_realloc_r+0x1e>
 8003ca2:	4635      	mov	r5, r6
 8003ca4:	e7df      	b.n	8003c66 <_realloc_r+0x1e>

08003ca6 <_raise_r>:
 8003ca6:	291f      	cmp	r1, #31
 8003ca8:	b538      	push	{r3, r4, r5, lr}
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	d904      	bls.n	8003cba <_raise_r+0x14>
 8003cb0:	2316      	movs	r3, #22
 8003cb2:	6003      	str	r3, [r0, #0]
 8003cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003cbc:	b112      	cbz	r2, 8003cc4 <_raise_r+0x1e>
 8003cbe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003cc2:	b94b      	cbnz	r3, 8003cd8 <_raise_r+0x32>
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f000 f831 	bl	8003d2c <_getpid_r>
 8003cca:	462a      	mov	r2, r5
 8003ccc:	4601      	mov	r1, r0
 8003cce:	4620      	mov	r0, r4
 8003cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cd4:	f000 b818 	b.w	8003d08 <_kill_r>
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d00a      	beq.n	8003cf2 <_raise_r+0x4c>
 8003cdc:	1c59      	adds	r1, r3, #1
 8003cde:	d103      	bne.n	8003ce8 <_raise_r+0x42>
 8003ce0:	2316      	movs	r3, #22
 8003ce2:	6003      	str	r3, [r0, #0]
 8003ce4:	2001      	movs	r0, #1
 8003ce6:	e7e7      	b.n	8003cb8 <_raise_r+0x12>
 8003ce8:	2400      	movs	r4, #0
 8003cea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003cee:	4628      	mov	r0, r5
 8003cf0:	4798      	blx	r3
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e7e0      	b.n	8003cb8 <_raise_r+0x12>
	...

08003cf8 <raise>:
 8003cf8:	4b02      	ldr	r3, [pc, #8]	; (8003d04 <raise+0xc>)
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	6818      	ldr	r0, [r3, #0]
 8003cfe:	f7ff bfd2 	b.w	8003ca6 <_raise_r>
 8003d02:	bf00      	nop
 8003d04:	20000004 	.word	0x20000004

08003d08 <_kill_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4d07      	ldr	r5, [pc, #28]	; (8003d28 <_kill_r+0x20>)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	602b      	str	r3, [r5, #0]
 8003d16:	f7fe fd70 	bl	80027fa <_kill>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	d102      	bne.n	8003d24 <_kill_r+0x1c>
 8003d1e:	682b      	ldr	r3, [r5, #0]
 8003d20:	b103      	cbz	r3, 8003d24 <_kill_r+0x1c>
 8003d22:	6023      	str	r3, [r4, #0]
 8003d24:	bd38      	pop	{r3, r4, r5, pc}
 8003d26:	bf00      	nop
 8003d28:	20000130 	.word	0x20000130

08003d2c <_getpid_r>:
 8003d2c:	f7fe bd5e 	b.w	80027ec <_getpid>

08003d30 <__sread>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	460c      	mov	r4, r1
 8003d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d38:	f000 f89c 	bl	8003e74 <_read_r>
 8003d3c:	2800      	cmp	r0, #0
 8003d3e:	bfab      	itete	ge
 8003d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d42:	89a3      	ldrhlt	r3, [r4, #12]
 8003d44:	181b      	addge	r3, r3, r0
 8003d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d4a:	bfac      	ite	ge
 8003d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d4e:	81a3      	strhlt	r3, [r4, #12]
 8003d50:	bd10      	pop	{r4, pc}

08003d52 <__swrite>:
 8003d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d56:	461f      	mov	r7, r3
 8003d58:	898b      	ldrh	r3, [r1, #12]
 8003d5a:	05db      	lsls	r3, r3, #23
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	4616      	mov	r6, r2
 8003d62:	d505      	bpl.n	8003d70 <__swrite+0x1e>
 8003d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f000 f868 	bl	8003e40 <_lseek_r>
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d7a:	81a3      	strh	r3, [r4, #12]
 8003d7c:	4632      	mov	r2, r6
 8003d7e:	463b      	mov	r3, r7
 8003d80:	4628      	mov	r0, r5
 8003d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d86:	f000 b817 	b.w	8003db8 <_write_r>

08003d8a <__sseek>:
 8003d8a:	b510      	push	{r4, lr}
 8003d8c:	460c      	mov	r4, r1
 8003d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d92:	f000 f855 	bl	8003e40 <_lseek_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	bf15      	itete	ne
 8003d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003da6:	81a3      	strheq	r3, [r4, #12]
 8003da8:	bf18      	it	ne
 8003daa:	81a3      	strhne	r3, [r4, #12]
 8003dac:	bd10      	pop	{r4, pc}

08003dae <__sclose>:
 8003dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003db2:	f000 b813 	b.w	8003ddc <_close_r>
	...

08003db8 <_write_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d07      	ldr	r5, [pc, #28]	; (8003dd8 <_write_r+0x20>)
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	4608      	mov	r0, r1
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f7fe fd4e 	bl	8002868 <_write>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_write_r+0x1e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_write_r+0x1e>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000130 	.word	0x20000130

08003ddc <_close_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4d06      	ldr	r5, [pc, #24]	; (8003df8 <_close_r+0x1c>)
 8003de0:	2300      	movs	r3, #0
 8003de2:	4604      	mov	r4, r0
 8003de4:	4608      	mov	r0, r1
 8003de6:	602b      	str	r3, [r5, #0]
 8003de8:	f7fe fd5a 	bl	80028a0 <_close>
 8003dec:	1c43      	adds	r3, r0, #1
 8003dee:	d102      	bne.n	8003df6 <_close_r+0x1a>
 8003df0:	682b      	ldr	r3, [r5, #0]
 8003df2:	b103      	cbz	r3, 8003df6 <_close_r+0x1a>
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	bd38      	pop	{r3, r4, r5, pc}
 8003df8:	20000130 	.word	0x20000130

08003dfc <_fstat_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d07      	ldr	r5, [pc, #28]	; (8003e1c <_fstat_r+0x20>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	f7fe fd54 	bl	80028b6 <_fstat>
 8003e0e:	1c43      	adds	r3, r0, #1
 8003e10:	d102      	bne.n	8003e18 <_fstat_r+0x1c>
 8003e12:	682b      	ldr	r3, [r5, #0]
 8003e14:	b103      	cbz	r3, 8003e18 <_fstat_r+0x1c>
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	bd38      	pop	{r3, r4, r5, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000130 	.word	0x20000130

08003e20 <_isatty_r>:
 8003e20:	b538      	push	{r3, r4, r5, lr}
 8003e22:	4d06      	ldr	r5, [pc, #24]	; (8003e3c <_isatty_r+0x1c>)
 8003e24:	2300      	movs	r3, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	4608      	mov	r0, r1
 8003e2a:	602b      	str	r3, [r5, #0]
 8003e2c:	f7fe fd52 	bl	80028d4 <_isatty>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_isatty_r+0x1a>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_isatty_r+0x1a>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20000130 	.word	0x20000130

08003e40 <_lseek_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d07      	ldr	r5, [pc, #28]	; (8003e60 <_lseek_r+0x20>)
 8003e44:	4604      	mov	r4, r0
 8003e46:	4608      	mov	r0, r1
 8003e48:	4611      	mov	r1, r2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	602a      	str	r2, [r5, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f7fe fd4a 	bl	80028e8 <_lseek>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_lseek_r+0x1e>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_lseek_r+0x1e>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000130 	.word	0x20000130

08003e64 <_malloc_usable_size_r>:
 8003e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e68:	1f18      	subs	r0, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bfbc      	itt	lt
 8003e6e:	580b      	ldrlt	r3, [r1, r0]
 8003e70:	18c0      	addlt	r0, r0, r3
 8003e72:	4770      	bx	lr

08003e74 <_read_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	4d07      	ldr	r5, [pc, #28]	; (8003e94 <_read_r+0x20>)
 8003e78:	4604      	mov	r4, r0
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	2200      	movs	r2, #0
 8003e80:	602a      	str	r2, [r5, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f7fe fcd3 	bl	800282e <_read>
 8003e88:	1c43      	adds	r3, r0, #1
 8003e8a:	d102      	bne.n	8003e92 <_read_r+0x1e>
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	b103      	cbz	r3, 8003e92 <_read_r+0x1e>
 8003e90:	6023      	str	r3, [r4, #0]
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	20000130 	.word	0x20000130

08003e98 <cosf>:
 8003e98:	b507      	push	{r0, r1, r2, lr}
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <cosf+0x6c>)
 8003e9c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	4601      	mov	r1, r0
 8003ea4:	dc05      	bgt.n	8003eb2 <cosf+0x1a>
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	b003      	add	sp, #12
 8003eaa:	f85d eb04 	ldr.w	lr, [sp], #4
 8003eae:	f000 b9c3 	b.w	8004238 <__kernel_cosf>
 8003eb2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003eb6:	db04      	blt.n	8003ec2 <cosf+0x2a>
 8003eb8:	f7fc fd24 	bl	8000904 <__aeabi_fsub>
 8003ebc:	b003      	add	sp, #12
 8003ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ec2:	4669      	mov	r1, sp
 8003ec4:	f000 f85a 	bl	8003f7c <__ieee754_rem_pio2f>
 8003ec8:	f000 0203 	and.w	r2, r0, #3
 8003ecc:	2a01      	cmp	r2, #1
 8003ece:	d007      	beq.n	8003ee0 <cosf+0x48>
 8003ed0:	2a02      	cmp	r2, #2
 8003ed2:	d00c      	beq.n	8003eee <cosf+0x56>
 8003ed4:	b982      	cbnz	r2, 8003ef8 <cosf+0x60>
 8003ed6:	9901      	ldr	r1, [sp, #4]
 8003ed8:	9800      	ldr	r0, [sp, #0]
 8003eda:	f000 f9ad 	bl	8004238 <__kernel_cosf>
 8003ede:	e7ed      	b.n	8003ebc <cosf+0x24>
 8003ee0:	9901      	ldr	r1, [sp, #4]
 8003ee2:	9800      	ldr	r0, [sp, #0]
 8003ee4:	f000 fcda 	bl	800489c <__kernel_sinf>
 8003ee8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003eec:	e7e6      	b.n	8003ebc <cosf+0x24>
 8003eee:	9901      	ldr	r1, [sp, #4]
 8003ef0:	9800      	ldr	r0, [sp, #0]
 8003ef2:	f000 f9a1 	bl	8004238 <__kernel_cosf>
 8003ef6:	e7f7      	b.n	8003ee8 <cosf+0x50>
 8003ef8:	9901      	ldr	r1, [sp, #4]
 8003efa:	9800      	ldr	r0, [sp, #0]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f000 fccd 	bl	800489c <__kernel_sinf>
 8003f02:	e7db      	b.n	8003ebc <cosf+0x24>
 8003f04:	3f490fd8 	.word	0x3f490fd8

08003f08 <sinf>:
 8003f08:	b507      	push	{r0, r1, r2, lr}
 8003f0a:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <sinf+0x70>)
 8003f0c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003f10:	4293      	cmp	r3, r2
 8003f12:	4601      	mov	r1, r0
 8003f14:	dc06      	bgt.n	8003f24 <sinf+0x1c>
 8003f16:	2200      	movs	r2, #0
 8003f18:	2100      	movs	r1, #0
 8003f1a:	b003      	add	sp, #12
 8003f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f20:	f000 bcbc 	b.w	800489c <__kernel_sinf>
 8003f24:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003f28:	db04      	blt.n	8003f34 <sinf+0x2c>
 8003f2a:	f7fc fceb 	bl	8000904 <__aeabi_fsub>
 8003f2e:	b003      	add	sp, #12
 8003f30:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f34:	4669      	mov	r1, sp
 8003f36:	f000 f821 	bl	8003f7c <__ieee754_rem_pio2f>
 8003f3a:	f000 0003 	and.w	r0, r0, #3
 8003f3e:	2801      	cmp	r0, #1
 8003f40:	d008      	beq.n	8003f54 <sinf+0x4c>
 8003f42:	2802      	cmp	r0, #2
 8003f44:	d00b      	beq.n	8003f5e <sinf+0x56>
 8003f46:	b990      	cbnz	r0, 8003f6e <sinf+0x66>
 8003f48:	9901      	ldr	r1, [sp, #4]
 8003f4a:	9800      	ldr	r0, [sp, #0]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f000 fca5 	bl	800489c <__kernel_sinf>
 8003f52:	e7ec      	b.n	8003f2e <sinf+0x26>
 8003f54:	9901      	ldr	r1, [sp, #4]
 8003f56:	9800      	ldr	r0, [sp, #0]
 8003f58:	f000 f96e 	bl	8004238 <__kernel_cosf>
 8003f5c:	e7e7      	b.n	8003f2e <sinf+0x26>
 8003f5e:	9901      	ldr	r1, [sp, #4]
 8003f60:	9800      	ldr	r0, [sp, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f000 fc9a 	bl	800489c <__kernel_sinf>
 8003f68:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003f6c:	e7df      	b.n	8003f2e <sinf+0x26>
 8003f6e:	9901      	ldr	r1, [sp, #4]
 8003f70:	9800      	ldr	r0, [sp, #0]
 8003f72:	f000 f961 	bl	8004238 <__kernel_cosf>
 8003f76:	e7f7      	b.n	8003f68 <sinf+0x60>
 8003f78:	3f490fd8 	.word	0x3f490fd8

08003f7c <__ieee754_rem_pio2f>:
 8003f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f80:	4aa0      	ldr	r2, [pc, #640]	; (8004204 <__ieee754_rem_pio2f+0x288>)
 8003f82:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003f86:	4296      	cmp	r6, r2
 8003f88:	b087      	sub	sp, #28
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	4682      	mov	sl, r0
 8003f8e:	dc04      	bgt.n	8003f9a <__ieee754_rem_pio2f+0x1e>
 8003f90:	2300      	movs	r3, #0
 8003f92:	6008      	str	r0, [r1, #0]
 8003f94:	604b      	str	r3, [r1, #4]
 8003f96:	2500      	movs	r5, #0
 8003f98:	e01a      	b.n	8003fd0 <__ieee754_rem_pio2f+0x54>
 8003f9a:	4a9b      	ldr	r2, [pc, #620]	; (8004208 <__ieee754_rem_pio2f+0x28c>)
 8003f9c:	4296      	cmp	r6, r2
 8003f9e:	dc4b      	bgt.n	8004038 <__ieee754_rem_pio2f+0xbc>
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	499a      	ldr	r1, [pc, #616]	; (800420c <__ieee754_rem_pio2f+0x290>)
 8003fa4:	4f9a      	ldr	r7, [pc, #616]	; (8004210 <__ieee754_rem_pio2f+0x294>)
 8003fa6:	f026 060f 	bic.w	r6, r6, #15
 8003faa:	dd23      	ble.n	8003ff4 <__ieee754_rem_pio2f+0x78>
 8003fac:	f7fc fcaa 	bl	8000904 <__aeabi_fsub>
 8003fb0:	42be      	cmp	r6, r7
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	d010      	beq.n	8003fd8 <__ieee754_rem_pio2f+0x5c>
 8003fb6:	4997      	ldr	r1, [pc, #604]	; (8004214 <__ieee754_rem_pio2f+0x298>)
 8003fb8:	f7fc fca4 	bl	8000904 <__aeabi_fsub>
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	6020      	str	r0, [r4, #0]
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	f7fc fc9f 	bl	8000904 <__aeabi_fsub>
 8003fc6:	4993      	ldr	r1, [pc, #588]	; (8004214 <__ieee754_rem_pio2f+0x298>)
 8003fc8:	f7fc fc9c 	bl	8000904 <__aeabi_fsub>
 8003fcc:	2501      	movs	r5, #1
 8003fce:	6060      	str	r0, [r4, #4]
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	b007      	add	sp, #28
 8003fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	498f      	ldr	r1, [pc, #572]	; (8004218 <__ieee754_rem_pio2f+0x29c>)
 8003fda:	f7fc fc93 	bl	8000904 <__aeabi_fsub>
 8003fde:	498f      	ldr	r1, [pc, #572]	; (800421c <__ieee754_rem_pio2f+0x2a0>)
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	f7fc fc8f 	bl	8000904 <__aeabi_fsub>
 8003fe6:	4601      	mov	r1, r0
 8003fe8:	6020      	str	r0, [r4, #0]
 8003fea:	4628      	mov	r0, r5
 8003fec:	f7fc fc8a 	bl	8000904 <__aeabi_fsub>
 8003ff0:	498a      	ldr	r1, [pc, #552]	; (800421c <__ieee754_rem_pio2f+0x2a0>)
 8003ff2:	e7e9      	b.n	8003fc8 <__ieee754_rem_pio2f+0x4c>
 8003ff4:	f7fc fc88 	bl	8000908 <__addsf3>
 8003ff8:	42be      	cmp	r6, r7
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	d00e      	beq.n	800401c <__ieee754_rem_pio2f+0xa0>
 8003ffe:	4985      	ldr	r1, [pc, #532]	; (8004214 <__ieee754_rem_pio2f+0x298>)
 8004000:	f7fc fc82 	bl	8000908 <__addsf3>
 8004004:	4601      	mov	r1, r0
 8004006:	6020      	str	r0, [r4, #0]
 8004008:	4628      	mov	r0, r5
 800400a:	f7fc fc7b 	bl	8000904 <__aeabi_fsub>
 800400e:	4981      	ldr	r1, [pc, #516]	; (8004214 <__ieee754_rem_pio2f+0x298>)
 8004010:	f7fc fc7a 	bl	8000908 <__addsf3>
 8004014:	f04f 35ff 	mov.w	r5, #4294967295
 8004018:	6060      	str	r0, [r4, #4]
 800401a:	e7d9      	b.n	8003fd0 <__ieee754_rem_pio2f+0x54>
 800401c:	497e      	ldr	r1, [pc, #504]	; (8004218 <__ieee754_rem_pio2f+0x29c>)
 800401e:	f7fc fc73 	bl	8000908 <__addsf3>
 8004022:	497e      	ldr	r1, [pc, #504]	; (800421c <__ieee754_rem_pio2f+0x2a0>)
 8004024:	4605      	mov	r5, r0
 8004026:	f7fc fc6f 	bl	8000908 <__addsf3>
 800402a:	4601      	mov	r1, r0
 800402c:	6020      	str	r0, [r4, #0]
 800402e:	4628      	mov	r0, r5
 8004030:	f7fc fc68 	bl	8000904 <__aeabi_fsub>
 8004034:	4979      	ldr	r1, [pc, #484]	; (800421c <__ieee754_rem_pio2f+0x2a0>)
 8004036:	e7eb      	b.n	8004010 <__ieee754_rem_pio2f+0x94>
 8004038:	4a79      	ldr	r2, [pc, #484]	; (8004220 <__ieee754_rem_pio2f+0x2a4>)
 800403a:	4296      	cmp	r6, r2
 800403c:	f300 8091 	bgt.w	8004162 <__ieee754_rem_pio2f+0x1e6>
 8004040:	f000 fca2 	bl	8004988 <fabsf>
 8004044:	4977      	ldr	r1, [pc, #476]	; (8004224 <__ieee754_rem_pio2f+0x2a8>)
 8004046:	4607      	mov	r7, r0
 8004048:	f7fc fd66 	bl	8000b18 <__aeabi_fmul>
 800404c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004050:	f7fc fc5a 	bl	8000908 <__addsf3>
 8004054:	f7fc ff26 	bl	8000ea4 <__aeabi_f2iz>
 8004058:	4605      	mov	r5, r0
 800405a:	f7fc fd09 	bl	8000a70 <__aeabi_i2f>
 800405e:	496b      	ldr	r1, [pc, #428]	; (800420c <__ieee754_rem_pio2f+0x290>)
 8004060:	4681      	mov	r9, r0
 8004062:	f7fc fd59 	bl	8000b18 <__aeabi_fmul>
 8004066:	4601      	mov	r1, r0
 8004068:	4638      	mov	r0, r7
 800406a:	f7fc fc4b 	bl	8000904 <__aeabi_fsub>
 800406e:	4969      	ldr	r1, [pc, #420]	; (8004214 <__ieee754_rem_pio2f+0x298>)
 8004070:	4680      	mov	r8, r0
 8004072:	4648      	mov	r0, r9
 8004074:	f7fc fd50 	bl	8000b18 <__aeabi_fmul>
 8004078:	2d1f      	cmp	r5, #31
 800407a:	4607      	mov	r7, r0
 800407c:	dc0c      	bgt.n	8004098 <__ieee754_rem_pio2f+0x11c>
 800407e:	4a6a      	ldr	r2, [pc, #424]	; (8004228 <__ieee754_rem_pio2f+0x2ac>)
 8004080:	1e69      	subs	r1, r5, #1
 8004082:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8004086:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <__ieee754_rem_pio2f+0x11c>
 800408e:	4639      	mov	r1, r7
 8004090:	4640      	mov	r0, r8
 8004092:	f7fc fc37 	bl	8000904 <__aeabi_fsub>
 8004096:	e00b      	b.n	80040b0 <__ieee754_rem_pio2f+0x134>
 8004098:	4639      	mov	r1, r7
 800409a:	4640      	mov	r0, r8
 800409c:	f7fc fc32 	bl	8000904 <__aeabi_fsub>
 80040a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80040a4:	ea4f 5be6 	mov.w	fp, r6, asr #23
 80040a8:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 80040ac:	2e08      	cmp	r6, #8
 80040ae:	dc01      	bgt.n	80040b4 <__ieee754_rem_pio2f+0x138>
 80040b0:	6020      	str	r0, [r4, #0]
 80040b2:	e026      	b.n	8004102 <__ieee754_rem_pio2f+0x186>
 80040b4:	4958      	ldr	r1, [pc, #352]	; (8004218 <__ieee754_rem_pio2f+0x29c>)
 80040b6:	4648      	mov	r0, r9
 80040b8:	f7fc fd2e 	bl	8000b18 <__aeabi_fmul>
 80040bc:	4607      	mov	r7, r0
 80040be:	4601      	mov	r1, r0
 80040c0:	4640      	mov	r0, r8
 80040c2:	f7fc fc1f 	bl	8000904 <__aeabi_fsub>
 80040c6:	4601      	mov	r1, r0
 80040c8:	4606      	mov	r6, r0
 80040ca:	4640      	mov	r0, r8
 80040cc:	f7fc fc1a 	bl	8000904 <__aeabi_fsub>
 80040d0:	4639      	mov	r1, r7
 80040d2:	f7fc fc17 	bl	8000904 <__aeabi_fsub>
 80040d6:	4951      	ldr	r1, [pc, #324]	; (800421c <__ieee754_rem_pio2f+0x2a0>)
 80040d8:	4607      	mov	r7, r0
 80040da:	4648      	mov	r0, r9
 80040dc:	f7fc fd1c 	bl	8000b18 <__aeabi_fmul>
 80040e0:	4639      	mov	r1, r7
 80040e2:	f7fc fc0f 	bl	8000904 <__aeabi_fsub>
 80040e6:	4601      	mov	r1, r0
 80040e8:	4607      	mov	r7, r0
 80040ea:	4630      	mov	r0, r6
 80040ec:	f7fc fc0a 	bl	8000904 <__aeabi_fsub>
 80040f0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80040f4:	ebab 0b03 	sub.w	fp, fp, r3
 80040f8:	f1bb 0f19 	cmp.w	fp, #25
 80040fc:	dc16      	bgt.n	800412c <__ieee754_rem_pio2f+0x1b0>
 80040fe:	6020      	str	r0, [r4, #0]
 8004100:	46b0      	mov	r8, r6
 8004102:	6826      	ldr	r6, [r4, #0]
 8004104:	4640      	mov	r0, r8
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc fbfc 	bl	8000904 <__aeabi_fsub>
 800410c:	4639      	mov	r1, r7
 800410e:	f7fc fbf9 	bl	8000904 <__aeabi_fsub>
 8004112:	f1ba 0f00 	cmp.w	sl, #0
 8004116:	6060      	str	r0, [r4, #4]
 8004118:	f6bf af5a 	bge.w	8003fd0 <__ieee754_rem_pio2f+0x54>
 800411c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8004120:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004124:	6026      	str	r6, [r4, #0]
 8004126:	6060      	str	r0, [r4, #4]
 8004128:	426d      	negs	r5, r5
 800412a:	e751      	b.n	8003fd0 <__ieee754_rem_pio2f+0x54>
 800412c:	493f      	ldr	r1, [pc, #252]	; (800422c <__ieee754_rem_pio2f+0x2b0>)
 800412e:	4648      	mov	r0, r9
 8004130:	f7fc fcf2 	bl	8000b18 <__aeabi_fmul>
 8004134:	4607      	mov	r7, r0
 8004136:	4601      	mov	r1, r0
 8004138:	4630      	mov	r0, r6
 800413a:	f7fc fbe3 	bl	8000904 <__aeabi_fsub>
 800413e:	4601      	mov	r1, r0
 8004140:	4680      	mov	r8, r0
 8004142:	4630      	mov	r0, r6
 8004144:	f7fc fbde 	bl	8000904 <__aeabi_fsub>
 8004148:	4639      	mov	r1, r7
 800414a:	f7fc fbdb 	bl	8000904 <__aeabi_fsub>
 800414e:	4938      	ldr	r1, [pc, #224]	; (8004230 <__ieee754_rem_pio2f+0x2b4>)
 8004150:	4606      	mov	r6, r0
 8004152:	4648      	mov	r0, r9
 8004154:	f7fc fce0 	bl	8000b18 <__aeabi_fmul>
 8004158:	4631      	mov	r1, r6
 800415a:	f7fc fbd3 	bl	8000904 <__aeabi_fsub>
 800415e:	4607      	mov	r7, r0
 8004160:	e795      	b.n	800408e <__ieee754_rem_pio2f+0x112>
 8004162:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004166:	db05      	blt.n	8004174 <__ieee754_rem_pio2f+0x1f8>
 8004168:	4601      	mov	r1, r0
 800416a:	f7fc fbcb 	bl	8000904 <__aeabi_fsub>
 800416e:	6060      	str	r0, [r4, #4]
 8004170:	6020      	str	r0, [r4, #0]
 8004172:	e710      	b.n	8003f96 <__ieee754_rem_pio2f+0x1a>
 8004174:	15f7      	asrs	r7, r6, #23
 8004176:	3f86      	subs	r7, #134	; 0x86
 8004178:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800417c:	4630      	mov	r0, r6
 800417e:	f7fc fe91 	bl	8000ea4 <__aeabi_f2iz>
 8004182:	f7fc fc75 	bl	8000a70 <__aeabi_i2f>
 8004186:	4601      	mov	r1, r0
 8004188:	9003      	str	r0, [sp, #12]
 800418a:	4630      	mov	r0, r6
 800418c:	f7fc fbba 	bl	8000904 <__aeabi_fsub>
 8004190:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004194:	f7fc fcc0 	bl	8000b18 <__aeabi_fmul>
 8004198:	4606      	mov	r6, r0
 800419a:	f7fc fe83 	bl	8000ea4 <__aeabi_f2iz>
 800419e:	f7fc fc67 	bl	8000a70 <__aeabi_i2f>
 80041a2:	4601      	mov	r1, r0
 80041a4:	9004      	str	r0, [sp, #16]
 80041a6:	4605      	mov	r5, r0
 80041a8:	4630      	mov	r0, r6
 80041aa:	f7fc fbab 	bl	8000904 <__aeabi_fsub>
 80041ae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80041b2:	f7fc fcb1 	bl	8000b18 <__aeabi_fmul>
 80041b6:	2100      	movs	r1, #0
 80041b8:	9005      	str	r0, [sp, #20]
 80041ba:	f7fc fe41 	bl	8000e40 <__aeabi_fcmpeq>
 80041be:	b1f0      	cbz	r0, 80041fe <__ieee754_rem_pio2f+0x282>
 80041c0:	2100      	movs	r1, #0
 80041c2:	4628      	mov	r0, r5
 80041c4:	f7fc fe3c 	bl	8000e40 <__aeabi_fcmpeq>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2302      	moveq	r3, #2
 80041d0:	4a18      	ldr	r2, [pc, #96]	; (8004234 <__ieee754_rem_pio2f+0x2b8>)
 80041d2:	9201      	str	r2, [sp, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	9200      	str	r2, [sp, #0]
 80041d8:	4621      	mov	r1, r4
 80041da:	463a      	mov	r2, r7
 80041dc:	a803      	add	r0, sp, #12
 80041de:	f000 f8ab 	bl	8004338 <__kernel_rem_pio2f>
 80041e2:	f1ba 0f00 	cmp.w	sl, #0
 80041e6:	4605      	mov	r5, r0
 80041e8:	f6bf aef2 	bge.w	8003fd0 <__ieee754_rem_pio2f+0x54>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	e794      	b.n	8004128 <__ieee754_rem_pio2f+0x1ac>
 80041fe:	2303      	movs	r3, #3
 8004200:	e7e6      	b.n	80041d0 <__ieee754_rem_pio2f+0x254>
 8004202:	bf00      	nop
 8004204:	3f490fd8 	.word	0x3f490fd8
 8004208:	4016cbe3 	.word	0x4016cbe3
 800420c:	3fc90f80 	.word	0x3fc90f80
 8004210:	3fc90fd0 	.word	0x3fc90fd0
 8004214:	37354443 	.word	0x37354443
 8004218:	37354400 	.word	0x37354400
 800421c:	2e85a308 	.word	0x2e85a308
 8004220:	43490f80 	.word	0x43490f80
 8004224:	3f22f984 	.word	0x3f22f984
 8004228:	08004c9c 	.word	0x08004c9c
 800422c:	2e85a300 	.word	0x2e85a300
 8004230:	248d3132 	.word	0x248d3132
 8004234:	08004d1c 	.word	0x08004d1c

08004238 <__kernel_cosf>:
 8004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8004240:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8004244:	4606      	mov	r6, r0
 8004246:	4688      	mov	r8, r1
 8004248:	da03      	bge.n	8004252 <__kernel_cosf+0x1a>
 800424a:	f7fc fe2b 	bl	8000ea4 <__aeabi_f2iz>
 800424e:	2800      	cmp	r0, #0
 8004250:	d05c      	beq.n	800430c <__kernel_cosf+0xd4>
 8004252:	4631      	mov	r1, r6
 8004254:	4630      	mov	r0, r6
 8004256:	f7fc fc5f 	bl	8000b18 <__aeabi_fmul>
 800425a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800425e:	4605      	mov	r5, r0
 8004260:	f7fc fc5a 	bl	8000b18 <__aeabi_fmul>
 8004264:	492b      	ldr	r1, [pc, #172]	; (8004314 <__kernel_cosf+0xdc>)
 8004266:	4607      	mov	r7, r0
 8004268:	4628      	mov	r0, r5
 800426a:	f7fc fc55 	bl	8000b18 <__aeabi_fmul>
 800426e:	492a      	ldr	r1, [pc, #168]	; (8004318 <__kernel_cosf+0xe0>)
 8004270:	f7fc fb4a 	bl	8000908 <__addsf3>
 8004274:	4629      	mov	r1, r5
 8004276:	f7fc fc4f 	bl	8000b18 <__aeabi_fmul>
 800427a:	4928      	ldr	r1, [pc, #160]	; (800431c <__kernel_cosf+0xe4>)
 800427c:	f7fc fb42 	bl	8000904 <__aeabi_fsub>
 8004280:	4629      	mov	r1, r5
 8004282:	f7fc fc49 	bl	8000b18 <__aeabi_fmul>
 8004286:	4926      	ldr	r1, [pc, #152]	; (8004320 <__kernel_cosf+0xe8>)
 8004288:	f7fc fb3e 	bl	8000908 <__addsf3>
 800428c:	4629      	mov	r1, r5
 800428e:	f7fc fc43 	bl	8000b18 <__aeabi_fmul>
 8004292:	4924      	ldr	r1, [pc, #144]	; (8004324 <__kernel_cosf+0xec>)
 8004294:	f7fc fb36 	bl	8000904 <__aeabi_fsub>
 8004298:	4629      	mov	r1, r5
 800429a:	f7fc fc3d 	bl	8000b18 <__aeabi_fmul>
 800429e:	4922      	ldr	r1, [pc, #136]	; (8004328 <__kernel_cosf+0xf0>)
 80042a0:	f7fc fb32 	bl	8000908 <__addsf3>
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7fc fc37 	bl	8000b18 <__aeabi_fmul>
 80042aa:	4629      	mov	r1, r5
 80042ac:	f7fc fc34 	bl	8000b18 <__aeabi_fmul>
 80042b0:	4641      	mov	r1, r8
 80042b2:	4605      	mov	r5, r0
 80042b4:	4630      	mov	r0, r6
 80042b6:	f7fc fc2f 	bl	8000b18 <__aeabi_fmul>
 80042ba:	4601      	mov	r1, r0
 80042bc:	4628      	mov	r0, r5
 80042be:	f7fc fb21 	bl	8000904 <__aeabi_fsub>
 80042c2:	4b1a      	ldr	r3, [pc, #104]	; (800432c <__kernel_cosf+0xf4>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	4605      	mov	r5, r0
 80042c8:	dc0a      	bgt.n	80042e0 <__kernel_cosf+0xa8>
 80042ca:	4601      	mov	r1, r0
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7fc fb19 	bl	8000904 <__aeabi_fsub>
 80042d2:	4601      	mov	r1, r0
 80042d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042d8:	f7fc fb14 	bl	8000904 <__aeabi_fsub>
 80042dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <__kernel_cosf+0xf8>)
 80042e2:	429c      	cmp	r4, r3
 80042e4:	bfcc      	ite	gt
 80042e6:	4c13      	ldrgt	r4, [pc, #76]	; (8004334 <__kernel_cosf+0xfc>)
 80042e8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 80042ec:	4621      	mov	r1, r4
 80042ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80042f2:	f7fc fb07 	bl	8000904 <__aeabi_fsub>
 80042f6:	4621      	mov	r1, r4
 80042f8:	4606      	mov	r6, r0
 80042fa:	4638      	mov	r0, r7
 80042fc:	f7fc fb02 	bl	8000904 <__aeabi_fsub>
 8004300:	4629      	mov	r1, r5
 8004302:	f7fc faff 	bl	8000904 <__aeabi_fsub>
 8004306:	4601      	mov	r1, r0
 8004308:	4630      	mov	r0, r6
 800430a:	e7e5      	b.n	80042d8 <__kernel_cosf+0xa0>
 800430c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004310:	e7e4      	b.n	80042dc <__kernel_cosf+0xa4>
 8004312:	bf00      	nop
 8004314:	ad47d74e 	.word	0xad47d74e
 8004318:	310f74f6 	.word	0x310f74f6
 800431c:	3493f27c 	.word	0x3493f27c
 8004320:	37d00d01 	.word	0x37d00d01
 8004324:	3ab60b61 	.word	0x3ab60b61
 8004328:	3d2aaaab 	.word	0x3d2aaaab
 800432c:	3e999999 	.word	0x3e999999
 8004330:	3f480000 	.word	0x3f480000
 8004334:	3e900000 	.word	0x3e900000

08004338 <__kernel_rem_pio2f>:
 8004338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433c:	b0db      	sub	sp, #364	; 0x16c
 800433e:	9202      	str	r2, [sp, #8]
 8004340:	9304      	str	r3, [sp, #16]
 8004342:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004344:	4bb2      	ldr	r3, [pc, #712]	; (8004610 <__kernel_rem_pio2f+0x2d8>)
 8004346:	9005      	str	r0, [sp, #20]
 8004348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	9b04      	ldr	r3, [sp, #16]
 8004350:	9100      	str	r1, [sp, #0]
 8004352:	3b01      	subs	r3, #1
 8004354:	9303      	str	r3, [sp, #12]
 8004356:	9b02      	ldr	r3, [sp, #8]
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	f2c0 809b 	blt.w	8004494 <__kernel_rem_pio2f+0x15c>
 800435e:	1edc      	subs	r4, r3, #3
 8004360:	bf48      	it	mi
 8004362:	1d1c      	addmi	r4, r3, #4
 8004364:	10e4      	asrs	r4, r4, #3
 8004366:	1c67      	adds	r7, r4, #1
 8004368:	00fb      	lsls	r3, r7, #3
 800436a:	9306      	str	r3, [sp, #24]
 800436c:	9b02      	ldr	r3, [sp, #8]
 800436e:	9a03      	ldr	r2, [sp, #12]
 8004370:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004374:	9b01      	ldr	r3, [sp, #4]
 8004376:	eb03 0902 	add.w	r9, r3, r2
 800437a:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800437c:	eba4 0802 	sub.w	r8, r4, r2
 8004380:	ae1e      	add	r6, sp, #120	; 0x78
 8004382:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004386:	2500      	movs	r5, #0
 8004388:	f04f 0b00 	mov.w	fp, #0
 800438c:	454d      	cmp	r5, r9
 800438e:	f340 8083 	ble.w	8004498 <__kernel_rem_pio2f+0x160>
 8004392:	9a04      	ldr	r2, [sp, #16]
 8004394:	ab1e      	add	r3, sp, #120	; 0x78
 8004396:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800439a:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	2300      	movs	r3, #0
 80043a4:	9a01      	ldr	r2, [sp, #4]
 80043a6:	4591      	cmp	r9, r2
 80043a8:	f340 809e 	ble.w	80044e8 <__kernel_rem_pio2f+0x1b0>
 80043ac:	4613      	mov	r3, r2
 80043ae:	aa0a      	add	r2, sp, #40	; 0x28
 80043b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80043b4:	9308      	str	r3, [sp, #32]
 80043b6:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80043b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80043bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80043c0:	9307      	str	r3, [sp, #28]
 80043c2:	ab5a      	add	r3, sp, #360	; 0x168
 80043c4:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80043c8:	ac0a      	add	r4, sp, #40	; 0x28
 80043ca:	f853 5c50 	ldr.w	r5, [r3, #-80]
 80043ce:	4626      	mov	r6, r4
 80043d0:	46c3      	mov	fp, r8
 80043d2:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 80043d6:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 80043da:	f1bb 0f00 	cmp.w	fp, #0
 80043de:	f300 8088 	bgt.w	80044f2 <__kernel_rem_pio2f+0x1ba>
 80043e2:	4639      	mov	r1, r7
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 fb15 	bl	8004a14 <scalbnf>
 80043ea:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 80043ee:	4605      	mov	r5, r0
 80043f0:	f7fc fb92 	bl	8000b18 <__aeabi_fmul>
 80043f4:	f000 facc 	bl	8004990 <floorf>
 80043f8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80043fc:	f7fc fb8c 	bl	8000b18 <__aeabi_fmul>
 8004400:	4601      	mov	r1, r0
 8004402:	4628      	mov	r0, r5
 8004404:	f7fc fa7e 	bl	8000904 <__aeabi_fsub>
 8004408:	4605      	mov	r5, r0
 800440a:	f7fc fd4b 	bl	8000ea4 <__aeabi_f2iz>
 800440e:	4606      	mov	r6, r0
 8004410:	f7fc fb2e 	bl	8000a70 <__aeabi_i2f>
 8004414:	4601      	mov	r1, r0
 8004416:	4628      	mov	r0, r5
 8004418:	f7fc fa74 	bl	8000904 <__aeabi_fsub>
 800441c:	2f00      	cmp	r7, #0
 800441e:	4681      	mov	r9, r0
 8004420:	f340 8086 	ble.w	8004530 <__kernel_rem_pio2f+0x1f8>
 8004424:	f108 32ff 	add.w	r2, r8, #4294967295
 8004428:	ab0a      	add	r3, sp, #40	; 0x28
 800442a:	f1c7 0108 	rsb	r1, r7, #8
 800442e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8004432:	fa45 f301 	asr.w	r3, r5, r1
 8004436:	441e      	add	r6, r3
 8004438:	408b      	lsls	r3, r1
 800443a:	1aed      	subs	r5, r5, r3
 800443c:	ab0a      	add	r3, sp, #40	; 0x28
 800443e:	f1c7 0007 	rsb	r0, r7, #7
 8004442:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004446:	4105      	asrs	r5, r0
 8004448:	2d00      	cmp	r5, #0
 800444a:	dd7f      	ble.n	800454c <__kernel_rem_pio2f+0x214>
 800444c:	2200      	movs	r2, #0
 800444e:	3601      	adds	r6, #1
 8004450:	4692      	mov	sl, r2
 8004452:	4590      	cmp	r8, r2
 8004454:	f300 80b0 	bgt.w	80045b8 <__kernel_rem_pio2f+0x280>
 8004458:	2f00      	cmp	r7, #0
 800445a:	dd05      	ble.n	8004468 <__kernel_rem_pio2f+0x130>
 800445c:	2f01      	cmp	r7, #1
 800445e:	f000 80bd 	beq.w	80045dc <__kernel_rem_pio2f+0x2a4>
 8004462:	2f02      	cmp	r7, #2
 8004464:	f000 80c5 	beq.w	80045f2 <__kernel_rem_pio2f+0x2ba>
 8004468:	2d02      	cmp	r5, #2
 800446a:	d16f      	bne.n	800454c <__kernel_rem_pio2f+0x214>
 800446c:	4649      	mov	r1, r9
 800446e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004472:	f7fc fa47 	bl	8000904 <__aeabi_fsub>
 8004476:	4681      	mov	r9, r0
 8004478:	f1ba 0f00 	cmp.w	sl, #0
 800447c:	d066      	beq.n	800454c <__kernel_rem_pio2f+0x214>
 800447e:	4639      	mov	r1, r7
 8004480:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004484:	f000 fac6 	bl	8004a14 <scalbnf>
 8004488:	4601      	mov	r1, r0
 800448a:	4648      	mov	r0, r9
 800448c:	f7fc fa3a 	bl	8000904 <__aeabi_fsub>
 8004490:	4681      	mov	r9, r0
 8004492:	e05b      	b.n	800454c <__kernel_rem_pio2f+0x214>
 8004494:	2400      	movs	r4, #0
 8004496:	e766      	b.n	8004366 <__kernel_rem_pio2f+0x2e>
 8004498:	eb18 0f05 	cmn.w	r8, r5
 800449c:	d407      	bmi.n	80044ae <__kernel_rem_pio2f+0x176>
 800449e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80044a2:	f7fc fae5 	bl	8000a70 <__aeabi_i2f>
 80044a6:	f846 0b04 	str.w	r0, [r6], #4
 80044aa:	3501      	adds	r5, #1
 80044ac:	e76e      	b.n	800438c <__kernel_rem_pio2f+0x54>
 80044ae:	4658      	mov	r0, fp
 80044b0:	e7f9      	b.n	80044a6 <__kernel_rem_pio2f+0x16e>
 80044b2:	9307      	str	r3, [sp, #28]
 80044b4:	9b05      	ldr	r3, [sp, #20]
 80044b6:	f8da 1000 	ldr.w	r1, [sl]
 80044ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80044be:	f7fc fb2b 	bl	8000b18 <__aeabi_fmul>
 80044c2:	4601      	mov	r1, r0
 80044c4:	4630      	mov	r0, r6
 80044c6:	f7fc fa1f 	bl	8000908 <__addsf3>
 80044ca:	9b07      	ldr	r3, [sp, #28]
 80044cc:	4606      	mov	r6, r0
 80044ce:	f108 0801 	add.w	r8, r8, #1
 80044d2:	9a03      	ldr	r2, [sp, #12]
 80044d4:	4590      	cmp	r8, r2
 80044d6:	f1aa 0a04 	sub.w	sl, sl, #4
 80044da:	ddea      	ble.n	80044b2 <__kernel_rem_pio2f+0x17a>
 80044dc:	f84b 6b04 	str.w	r6, [fp], #4
 80044e0:	f109 0901 	add.w	r9, r9, #1
 80044e4:	3504      	adds	r5, #4
 80044e6:	e75d      	b.n	80043a4 <__kernel_rem_pio2f+0x6c>
 80044e8:	46aa      	mov	sl, r5
 80044ea:	461e      	mov	r6, r3
 80044ec:	f04f 0800 	mov.w	r8, #0
 80044f0:	e7ef      	b.n	80044d2 <__kernel_rem_pio2f+0x19a>
 80044f2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80044f6:	4628      	mov	r0, r5
 80044f8:	f7fc fb0e 	bl	8000b18 <__aeabi_fmul>
 80044fc:	f7fc fcd2 	bl	8000ea4 <__aeabi_f2iz>
 8004500:	f7fc fab6 	bl	8000a70 <__aeabi_i2f>
 8004504:	4649      	mov	r1, r9
 8004506:	9009      	str	r0, [sp, #36]	; 0x24
 8004508:	f7fc fb06 	bl	8000b18 <__aeabi_fmul>
 800450c:	4601      	mov	r1, r0
 800450e:	4628      	mov	r0, r5
 8004510:	f7fc f9f8 	bl	8000904 <__aeabi_fsub>
 8004514:	f7fc fcc6 	bl	8000ea4 <__aeabi_f2iz>
 8004518:	f10b 3bff 	add.w	fp, fp, #4294967295
 800451c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800451e:	f846 0b04 	str.w	r0, [r6], #4
 8004522:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fc f9ee 	bl	8000908 <__addsf3>
 800452c:	4605      	mov	r5, r0
 800452e:	e754      	b.n	80043da <__kernel_rem_pio2f+0xa2>
 8004530:	d106      	bne.n	8004540 <__kernel_rem_pio2f+0x208>
 8004532:	f108 33ff 	add.w	r3, r8, #4294967295
 8004536:	aa0a      	add	r2, sp, #40	; 0x28
 8004538:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800453c:	11ed      	asrs	r5, r5, #7
 800453e:	e783      	b.n	8004448 <__kernel_rem_pio2f+0x110>
 8004540:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004544:	f7fc fc9a 	bl	8000e7c <__aeabi_fcmpge>
 8004548:	4605      	mov	r5, r0
 800454a:	bb98      	cbnz	r0, 80045b4 <__kernel_rem_pio2f+0x27c>
 800454c:	2100      	movs	r1, #0
 800454e:	4648      	mov	r0, r9
 8004550:	f7fc fc76 	bl	8000e40 <__aeabi_fcmpeq>
 8004554:	2800      	cmp	r0, #0
 8004556:	f000 8098 	beq.w	800468a <__kernel_rem_pio2f+0x352>
 800455a:	f108 34ff 	add.w	r4, r8, #4294967295
 800455e:	4623      	mov	r3, r4
 8004560:	2200      	movs	r2, #0
 8004562:	9901      	ldr	r1, [sp, #4]
 8004564:	428b      	cmp	r3, r1
 8004566:	da4c      	bge.n	8004602 <__kernel_rem_pio2f+0x2ca>
 8004568:	2a00      	cmp	r2, #0
 800456a:	d07a      	beq.n	8004662 <__kernel_rem_pio2f+0x32a>
 800456c:	ab0a      	add	r3, sp, #40	; 0x28
 800456e:	3f08      	subs	r7, #8
 8004570:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 8086 	beq.w	8004686 <__kernel_rem_pio2f+0x34e>
 800457a:	4639      	mov	r1, r7
 800457c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004580:	f000 fa48 	bl	8004a14 <scalbnf>
 8004584:	46a2      	mov	sl, r4
 8004586:	4681      	mov	r9, r0
 8004588:	af46      	add	r7, sp, #280	; 0x118
 800458a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 800458e:	f1ba 0f00 	cmp.w	sl, #0
 8004592:	f280 80af 	bge.w	80046f4 <__kernel_rem_pio2f+0x3bc>
 8004596:	4627      	mov	r7, r4
 8004598:	2200      	movs	r2, #0
 800459a:	2f00      	cmp	r7, #0
 800459c:	f2c0 80d9 	blt.w	8004752 <__kernel_rem_pio2f+0x41a>
 80045a0:	a946      	add	r1, sp, #280	; 0x118
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <__kernel_rem_pio2f+0x2dc>)
 80045a4:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80045a8:	4690      	mov	r8, r2
 80045aa:	f04f 0a00 	mov.w	sl, #0
 80045ae:	eba4 0907 	sub.w	r9, r4, r7
 80045b2:	e0c2      	b.n	800473a <__kernel_rem_pio2f+0x402>
 80045b4:	2502      	movs	r5, #2
 80045b6:	e749      	b.n	800444c <__kernel_rem_pio2f+0x114>
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	f1ba 0f00 	cmp.w	sl, #0
 80045be:	d108      	bne.n	80045d2 <__kernel_rem_pio2f+0x29a>
 80045c0:	b11b      	cbz	r3, 80045ca <__kernel_rem_pio2f+0x292>
 80045c2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	2301      	movs	r3, #1
 80045ca:	3201      	adds	r2, #1
 80045cc:	3404      	adds	r4, #4
 80045ce:	469a      	mov	sl, r3
 80045d0:	e73f      	b.n	8004452 <__kernel_rem_pio2f+0x11a>
 80045d2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	4653      	mov	r3, sl
 80045da:	e7f6      	b.n	80045ca <__kernel_rem_pio2f+0x292>
 80045dc:	f108 32ff 	add.w	r2, r8, #4294967295
 80045e0:	ab0a      	add	r3, sp, #40	; 0x28
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ea:	a90a      	add	r1, sp, #40	; 0x28
 80045ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045f0:	e73a      	b.n	8004468 <__kernel_rem_pio2f+0x130>
 80045f2:	f108 32ff 	add.w	r2, r8, #4294967295
 80045f6:	ab0a      	add	r3, sp, #40	; 0x28
 80045f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004600:	e7f3      	b.n	80045ea <__kernel_rem_pio2f+0x2b2>
 8004602:	a90a      	add	r1, sp, #40	; 0x28
 8004604:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004608:	3b01      	subs	r3, #1
 800460a:	430a      	orrs	r2, r1
 800460c:	e7a9      	b.n	8004562 <__kernel_rem_pio2f+0x22a>
 800460e:	bf00      	nop
 8004610:	08005060 	.word	0x08005060
 8004614:	08005034 	.word	0x08005034
 8004618:	3301      	adds	r3, #1
 800461a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800461e:	2900      	cmp	r1, #0
 8004620:	d0fa      	beq.n	8004618 <__kernel_rem_pio2f+0x2e0>
 8004622:	9a04      	ldr	r2, [sp, #16]
 8004624:	eb08 0402 	add.w	r4, r8, r2
 8004628:	aa1e      	add	r2, sp, #120	; 0x78
 800462a:	f108 0501 	add.w	r5, r8, #1
 800462e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004632:	4498      	add	r8, r3
 8004634:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8004638:	45a8      	cmp	r8, r5
 800463a:	f6ff aec2 	blt.w	80043c2 <__kernel_rem_pio2f+0x8a>
 800463e:	9b07      	ldr	r3, [sp, #28]
 8004640:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004644:	f7fc fa14 	bl	8000a70 <__aeabi_i2f>
 8004648:	46a3      	mov	fp, r4
 800464a:	6020      	str	r0, [r4, #0]
 800464c:	f04f 0a00 	mov.w	sl, #0
 8004650:	2600      	movs	r6, #0
 8004652:	9b03      	ldr	r3, [sp, #12]
 8004654:	459a      	cmp	sl, r3
 8004656:	dd07      	ble.n	8004668 <__kernel_rem_pio2f+0x330>
 8004658:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 800465c:	3404      	adds	r4, #4
 800465e:	3501      	adds	r5, #1
 8004660:	e7ea      	b.n	8004638 <__kernel_rem_pio2f+0x300>
 8004662:	9a08      	ldr	r2, [sp, #32]
 8004664:	2301      	movs	r3, #1
 8004666:	e7d8      	b.n	800461a <__kernel_rem_pio2f+0x2e2>
 8004668:	9b05      	ldr	r3, [sp, #20]
 800466a:	f85b 0904 	ldr.w	r0, [fp], #-4
 800466e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8004672:	f7fc fa51 	bl	8000b18 <__aeabi_fmul>
 8004676:	4601      	mov	r1, r0
 8004678:	4630      	mov	r0, r6
 800467a:	f7fc f945 	bl	8000908 <__addsf3>
 800467e:	f10a 0a01 	add.w	sl, sl, #1
 8004682:	4606      	mov	r6, r0
 8004684:	e7e5      	b.n	8004652 <__kernel_rem_pio2f+0x31a>
 8004686:	3c01      	subs	r4, #1
 8004688:	e770      	b.n	800456c <__kernel_rem_pio2f+0x234>
 800468a:	9b06      	ldr	r3, [sp, #24]
 800468c:	9a02      	ldr	r2, [sp, #8]
 800468e:	4648      	mov	r0, r9
 8004690:	1a99      	subs	r1, r3, r2
 8004692:	f000 f9bf 	bl	8004a14 <scalbnf>
 8004696:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800469a:	4604      	mov	r4, r0
 800469c:	f7fc fbee 	bl	8000e7c <__aeabi_fcmpge>
 80046a0:	b300      	cbz	r0, 80046e4 <__kernel_rem_pio2f+0x3ac>
 80046a2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80046a6:	4620      	mov	r0, r4
 80046a8:	f7fc fa36 	bl	8000b18 <__aeabi_fmul>
 80046ac:	f7fc fbfa 	bl	8000ea4 <__aeabi_f2iz>
 80046b0:	f7fc f9de 	bl	8000a70 <__aeabi_i2f>
 80046b4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80046b8:	4681      	mov	r9, r0
 80046ba:	f7fc fa2d 	bl	8000b18 <__aeabi_fmul>
 80046be:	4601      	mov	r1, r0
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7fc f91f 	bl	8000904 <__aeabi_fsub>
 80046c6:	f7fc fbed 	bl	8000ea4 <__aeabi_f2iz>
 80046ca:	ab0a      	add	r3, sp, #40	; 0x28
 80046cc:	f108 0401 	add.w	r4, r8, #1
 80046d0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80046d4:	4648      	mov	r0, r9
 80046d6:	f7fc fbe5 	bl	8000ea4 <__aeabi_f2iz>
 80046da:	ab0a      	add	r3, sp, #40	; 0x28
 80046dc:	3708      	adds	r7, #8
 80046de:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80046e2:	e74a      	b.n	800457a <__kernel_rem_pio2f+0x242>
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7fc fbdd 	bl	8000ea4 <__aeabi_f2iz>
 80046ea:	ab0a      	add	r3, sp, #40	; 0x28
 80046ec:	4644      	mov	r4, r8
 80046ee:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80046f2:	e742      	b.n	800457a <__kernel_rem_pio2f+0x242>
 80046f4:	ab0a      	add	r3, sp, #40	; 0x28
 80046f6:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80046fa:	f7fc f9b9 	bl	8000a70 <__aeabi_i2f>
 80046fe:	4649      	mov	r1, r9
 8004700:	f7fc fa0a 	bl	8000b18 <__aeabi_fmul>
 8004704:	4641      	mov	r1, r8
 8004706:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800470a:	4648      	mov	r0, r9
 800470c:	f7fc fa04 	bl	8000b18 <__aeabi_fmul>
 8004710:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004714:	4681      	mov	r9, r0
 8004716:	e73a      	b.n	800458e <__kernel_rem_pio2f+0x256>
 8004718:	f853 0b04 	ldr.w	r0, [r3], #4
 800471c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004720:	9203      	str	r2, [sp, #12]
 8004722:	9302      	str	r3, [sp, #8]
 8004724:	f7fc f9f8 	bl	8000b18 <__aeabi_fmul>
 8004728:	4601      	mov	r1, r0
 800472a:	4640      	mov	r0, r8
 800472c:	f7fc f8ec 	bl	8000908 <__addsf3>
 8004730:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004734:	4680      	mov	r8, r0
 8004736:	f10a 0a01 	add.w	sl, sl, #1
 800473a:	9901      	ldr	r1, [sp, #4]
 800473c:	458a      	cmp	sl, r1
 800473e:	dc01      	bgt.n	8004744 <__kernel_rem_pio2f+0x40c>
 8004740:	45ca      	cmp	sl, r9
 8004742:	dde9      	ble.n	8004718 <__kernel_rem_pio2f+0x3e0>
 8004744:	ab5a      	add	r3, sp, #360	; 0x168
 8004746:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800474a:	3f01      	subs	r7, #1
 800474c:	f849 8ca0 	str.w	r8, [r9, #-160]
 8004750:	e723      	b.n	800459a <__kernel_rem_pio2f+0x262>
 8004752:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8004754:	2b02      	cmp	r3, #2
 8004756:	dc07      	bgt.n	8004768 <__kernel_rem_pio2f+0x430>
 8004758:	2b00      	cmp	r3, #0
 800475a:	dc4d      	bgt.n	80047f8 <__kernel_rem_pio2f+0x4c0>
 800475c:	d02e      	beq.n	80047bc <__kernel_rem_pio2f+0x484>
 800475e:	f006 0007 	and.w	r0, r6, #7
 8004762:	b05b      	add	sp, #364	; 0x16c
 8004764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004768:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800476a:	2b03      	cmp	r3, #3
 800476c:	d1f7      	bne.n	800475e <__kernel_rem_pio2f+0x426>
 800476e:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8004772:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8004776:	46b8      	mov	r8, r7
 8004778:	46a2      	mov	sl, r4
 800477a:	f1ba 0f00 	cmp.w	sl, #0
 800477e:	dc48      	bgt.n	8004812 <__kernel_rem_pio2f+0x4da>
 8004780:	46a1      	mov	r9, r4
 8004782:	f1b9 0f01 	cmp.w	r9, #1
 8004786:	dc5f      	bgt.n	8004848 <__kernel_rem_pio2f+0x510>
 8004788:	2000      	movs	r0, #0
 800478a:	2c01      	cmp	r4, #1
 800478c:	dc75      	bgt.n	800487a <__kernel_rem_pio2f+0x542>
 800478e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8004790:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8004792:	2d00      	cmp	r5, #0
 8004794:	d177      	bne.n	8004886 <__kernel_rem_pio2f+0x54e>
 8004796:	9900      	ldr	r1, [sp, #0]
 8004798:	600a      	str	r2, [r1, #0]
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	460a      	mov	r2, r1
 800479e:	6090      	str	r0, [r2, #8]
 80047a0:	e7dd      	b.n	800475e <__kernel_rem_pio2f+0x426>
 80047a2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 80047a6:	f7fc f8af 	bl	8000908 <__addsf3>
 80047aa:	3c01      	subs	r4, #1
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	daf8      	bge.n	80047a2 <__kernel_rem_pio2f+0x46a>
 80047b0:	b10d      	cbz	r5, 80047b6 <__kernel_rem_pio2f+0x47e>
 80047b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80047b6:	9b00      	ldr	r3, [sp, #0]
 80047b8:	6018      	str	r0, [r3, #0]
 80047ba:	e7d0      	b.n	800475e <__kernel_rem_pio2f+0x426>
 80047bc:	2000      	movs	r0, #0
 80047be:	af32      	add	r7, sp, #200	; 0xc8
 80047c0:	e7f4      	b.n	80047ac <__kernel_rem_pio2f+0x474>
 80047c2:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80047c6:	f7fc f89f 	bl	8000908 <__addsf3>
 80047ca:	3f01      	subs	r7, #1
 80047cc:	2f00      	cmp	r7, #0
 80047ce:	daf8      	bge.n	80047c2 <__kernel_rem_pio2f+0x48a>
 80047d0:	b1bd      	cbz	r5, 8004802 <__kernel_rem_pio2f+0x4ca>
 80047d2:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80047d6:	9a00      	ldr	r2, [sp, #0]
 80047d8:	4601      	mov	r1, r0
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80047de:	f7fc f891 	bl	8000904 <__aeabi_fsub>
 80047e2:	2701      	movs	r7, #1
 80047e4:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 80047e8:	42bc      	cmp	r4, r7
 80047ea:	da0c      	bge.n	8004806 <__kernel_rem_pio2f+0x4ce>
 80047ec:	b10d      	cbz	r5, 80047f2 <__kernel_rem_pio2f+0x4ba>
 80047ee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80047f2:	9b00      	ldr	r3, [sp, #0]
 80047f4:	6058      	str	r0, [r3, #4]
 80047f6:	e7b2      	b.n	800475e <__kernel_rem_pio2f+0x426>
 80047f8:	4627      	mov	r7, r4
 80047fa:	2000      	movs	r0, #0
 80047fc:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004800:	e7e4      	b.n	80047cc <__kernel_rem_pio2f+0x494>
 8004802:	4603      	mov	r3, r0
 8004804:	e7e7      	b.n	80047d6 <__kernel_rem_pio2f+0x49e>
 8004806:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800480a:	f7fc f87d 	bl	8000908 <__addsf3>
 800480e:	3701      	adds	r7, #1
 8004810:	e7ea      	b.n	80047e8 <__kernel_rem_pio2f+0x4b0>
 8004812:	f8d8 3000 	ldr.w	r3, [r8]
 8004816:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800481a:	9302      	str	r3, [sp, #8]
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	9201      	str	r2, [sp, #4]
 8004822:	f7fc f871 	bl	8000908 <__addsf3>
 8004826:	9a01      	ldr	r2, [sp, #4]
 8004828:	4601      	mov	r1, r0
 800482a:	4681      	mov	r9, r0
 800482c:	4610      	mov	r0, r2
 800482e:	f7fc f869 	bl	8000904 <__aeabi_fsub>
 8004832:	9b02      	ldr	r3, [sp, #8]
 8004834:	4619      	mov	r1, r3
 8004836:	f7fc f867 	bl	8000908 <__addsf3>
 800483a:	f848 0904 	str.w	r0, [r8], #-4
 800483e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004842:	f8c8 9000 	str.w	r9, [r8]
 8004846:	e798      	b.n	800477a <__kernel_rem_pio2f+0x442>
 8004848:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800484c:	f8d7 a000 	ldr.w	sl, [r7]
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	4651      	mov	r1, sl
 8004854:	4618      	mov	r0, r3
 8004856:	f7fc f857 	bl	8000908 <__addsf3>
 800485a:	9b01      	ldr	r3, [sp, #4]
 800485c:	4601      	mov	r1, r0
 800485e:	4680      	mov	r8, r0
 8004860:	4618      	mov	r0, r3
 8004862:	f7fc f84f 	bl	8000904 <__aeabi_fsub>
 8004866:	4651      	mov	r1, sl
 8004868:	f7fc f84e 	bl	8000908 <__addsf3>
 800486c:	f847 0904 	str.w	r0, [r7], #-4
 8004870:	f109 39ff 	add.w	r9, r9, #4294967295
 8004874:	f8c7 8000 	str.w	r8, [r7]
 8004878:	e783      	b.n	8004782 <__kernel_rem_pio2f+0x44a>
 800487a:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800487e:	f7fc f843 	bl	8000908 <__addsf3>
 8004882:	3c01      	subs	r4, #1
 8004884:	e781      	b.n	800478a <__kernel_rem_pio2f+0x452>
 8004886:	9900      	ldr	r1, [sp, #0]
 8004888:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800488c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004890:	600a      	str	r2, [r1, #0]
 8004892:	604b      	str	r3, [r1, #4]
 8004894:	460a      	mov	r2, r1
 8004896:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800489a:	e780      	b.n	800479e <__kernel_rem_pio2f+0x466>

0800489c <__kernel_sinf>:
 800489c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80048a4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80048a8:	4604      	mov	r4, r0
 80048aa:	460f      	mov	r7, r1
 80048ac:	4691      	mov	r9, r2
 80048ae:	da03      	bge.n	80048b8 <__kernel_sinf+0x1c>
 80048b0:	f7fc faf8 	bl	8000ea4 <__aeabi_f2iz>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	d035      	beq.n	8004924 <__kernel_sinf+0x88>
 80048b8:	4621      	mov	r1, r4
 80048ba:	4620      	mov	r0, r4
 80048bc:	f7fc f92c 	bl	8000b18 <__aeabi_fmul>
 80048c0:	4605      	mov	r5, r0
 80048c2:	4601      	mov	r1, r0
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7fc f927 	bl	8000b18 <__aeabi_fmul>
 80048ca:	4929      	ldr	r1, [pc, #164]	; (8004970 <__kernel_sinf+0xd4>)
 80048cc:	4606      	mov	r6, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f7fc f922 	bl	8000b18 <__aeabi_fmul>
 80048d4:	4927      	ldr	r1, [pc, #156]	; (8004974 <__kernel_sinf+0xd8>)
 80048d6:	f7fc f815 	bl	8000904 <__aeabi_fsub>
 80048da:	4629      	mov	r1, r5
 80048dc:	f7fc f91c 	bl	8000b18 <__aeabi_fmul>
 80048e0:	4925      	ldr	r1, [pc, #148]	; (8004978 <__kernel_sinf+0xdc>)
 80048e2:	f7fc f811 	bl	8000908 <__addsf3>
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fc f916 	bl	8000b18 <__aeabi_fmul>
 80048ec:	4923      	ldr	r1, [pc, #140]	; (800497c <__kernel_sinf+0xe0>)
 80048ee:	f7fc f809 	bl	8000904 <__aeabi_fsub>
 80048f2:	4629      	mov	r1, r5
 80048f4:	f7fc f910 	bl	8000b18 <__aeabi_fmul>
 80048f8:	4921      	ldr	r1, [pc, #132]	; (8004980 <__kernel_sinf+0xe4>)
 80048fa:	f7fc f805 	bl	8000908 <__addsf3>
 80048fe:	4680      	mov	r8, r0
 8004900:	f1b9 0f00 	cmp.w	r9, #0
 8004904:	d111      	bne.n	800492a <__kernel_sinf+0x8e>
 8004906:	4601      	mov	r1, r0
 8004908:	4628      	mov	r0, r5
 800490a:	f7fc f905 	bl	8000b18 <__aeabi_fmul>
 800490e:	491d      	ldr	r1, [pc, #116]	; (8004984 <__kernel_sinf+0xe8>)
 8004910:	f7fb fff8 	bl	8000904 <__aeabi_fsub>
 8004914:	4631      	mov	r1, r6
 8004916:	f7fc f8ff 	bl	8000b18 <__aeabi_fmul>
 800491a:	4601      	mov	r1, r0
 800491c:	4620      	mov	r0, r4
 800491e:	f7fb fff3 	bl	8000908 <__addsf3>
 8004922:	4604      	mov	r4, r0
 8004924:	4620      	mov	r0, r4
 8004926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800492a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800492e:	4638      	mov	r0, r7
 8004930:	f7fc f8f2 	bl	8000b18 <__aeabi_fmul>
 8004934:	4641      	mov	r1, r8
 8004936:	4681      	mov	r9, r0
 8004938:	4630      	mov	r0, r6
 800493a:	f7fc f8ed 	bl	8000b18 <__aeabi_fmul>
 800493e:	4601      	mov	r1, r0
 8004940:	4648      	mov	r0, r9
 8004942:	f7fb ffdf 	bl	8000904 <__aeabi_fsub>
 8004946:	4629      	mov	r1, r5
 8004948:	f7fc f8e6 	bl	8000b18 <__aeabi_fmul>
 800494c:	4639      	mov	r1, r7
 800494e:	f7fb ffd9 	bl	8000904 <__aeabi_fsub>
 8004952:	490c      	ldr	r1, [pc, #48]	; (8004984 <__kernel_sinf+0xe8>)
 8004954:	4605      	mov	r5, r0
 8004956:	4630      	mov	r0, r6
 8004958:	f7fc f8de 	bl	8000b18 <__aeabi_fmul>
 800495c:	4601      	mov	r1, r0
 800495e:	4628      	mov	r0, r5
 8004960:	f7fb ffd2 	bl	8000908 <__addsf3>
 8004964:	4601      	mov	r1, r0
 8004966:	4620      	mov	r0, r4
 8004968:	f7fb ffcc 	bl	8000904 <__aeabi_fsub>
 800496c:	e7d9      	b.n	8004922 <__kernel_sinf+0x86>
 800496e:	bf00      	nop
 8004970:	2f2ec9d3 	.word	0x2f2ec9d3
 8004974:	32d72f34 	.word	0x32d72f34
 8004978:	3638ef1b 	.word	0x3638ef1b
 800497c:	39500d01 	.word	0x39500d01
 8004980:	3c088889 	.word	0x3c088889
 8004984:	3e2aaaab 	.word	0x3e2aaaab

08004988 <fabsf>:
 8004988:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800498c:	4770      	bx	lr
	...

08004990 <floorf>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004996:	3d7f      	subs	r5, #127	; 0x7f
 8004998:	2d16      	cmp	r5, #22
 800499a:	4601      	mov	r1, r0
 800499c:	4604      	mov	r4, r0
 800499e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80049a2:	dc26      	bgt.n	80049f2 <floorf+0x62>
 80049a4:	2d00      	cmp	r5, #0
 80049a6:	da0e      	bge.n	80049c6 <floorf+0x36>
 80049a8:	4917      	ldr	r1, [pc, #92]	; (8004a08 <floorf+0x78>)
 80049aa:	f7fb ffad 	bl	8000908 <__addsf3>
 80049ae:	2100      	movs	r1, #0
 80049b0:	f7fc fa6e 	bl	8000e90 <__aeabi_fcmpgt>
 80049b4:	b128      	cbz	r0, 80049c2 <floorf+0x32>
 80049b6:	2c00      	cmp	r4, #0
 80049b8:	da23      	bge.n	8004a02 <floorf+0x72>
 80049ba:	4b14      	ldr	r3, [pc, #80]	; (8004a0c <floorf+0x7c>)
 80049bc:	2e00      	cmp	r6, #0
 80049be:	bf18      	it	ne
 80049c0:	461c      	movne	r4, r3
 80049c2:	4621      	mov	r1, r4
 80049c4:	e01b      	b.n	80049fe <floorf+0x6e>
 80049c6:	4e12      	ldr	r6, [pc, #72]	; (8004a10 <floorf+0x80>)
 80049c8:	412e      	asrs	r6, r5
 80049ca:	4230      	tst	r0, r6
 80049cc:	d017      	beq.n	80049fe <floorf+0x6e>
 80049ce:	490e      	ldr	r1, [pc, #56]	; (8004a08 <floorf+0x78>)
 80049d0:	f7fb ff9a 	bl	8000908 <__addsf3>
 80049d4:	2100      	movs	r1, #0
 80049d6:	f7fc fa5b 	bl	8000e90 <__aeabi_fcmpgt>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d0f1      	beq.n	80049c2 <floorf+0x32>
 80049de:	2c00      	cmp	r4, #0
 80049e0:	bfbe      	ittt	lt
 80049e2:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80049e6:	fa43 f505 	asrlt.w	r5, r3, r5
 80049ea:	1964      	addlt	r4, r4, r5
 80049ec:	ea24 0406 	bic.w	r4, r4, r6
 80049f0:	e7e7      	b.n	80049c2 <floorf+0x32>
 80049f2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80049f6:	d302      	bcc.n	80049fe <floorf+0x6e>
 80049f8:	f7fb ff86 	bl	8000908 <__addsf3>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4608      	mov	r0, r1
 8004a00:	bd70      	pop	{r4, r5, r6, pc}
 8004a02:	2400      	movs	r4, #0
 8004a04:	e7dd      	b.n	80049c2 <floorf+0x32>
 8004a06:	bf00      	nop
 8004a08:	7149f2ca 	.word	0x7149f2ca
 8004a0c:	bf800000 	.word	0xbf800000
 8004a10:	007fffff 	.word	0x007fffff

08004a14 <scalbnf>:
 8004a14:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	460d      	mov	r5, r1
 8004a1e:	4604      	mov	r4, r0
 8004a20:	d02a      	beq.n	8004a78 <scalbnf+0x64>
 8004a22:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004a26:	d304      	bcc.n	8004a32 <scalbnf+0x1e>
 8004a28:	4601      	mov	r1, r0
 8004a2a:	f7fb ff6d 	bl	8000908 <__addsf3>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	e022      	b.n	8004a78 <scalbnf+0x64>
 8004a32:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8004a36:	d117      	bne.n	8004a68 <scalbnf+0x54>
 8004a38:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8004a3c:	f7fc f86c 	bl	8000b18 <__aeabi_fmul>
 8004a40:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <scalbnf+0x8c>)
 8004a42:	4295      	cmp	r5, r2
 8004a44:	4603      	mov	r3, r0
 8004a46:	db0b      	blt.n	8004a60 <scalbnf+0x4c>
 8004a48:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	3a19      	subs	r2, #25
 8004a50:	442a      	add	r2, r5
 8004a52:	2afe      	cmp	r2, #254	; 0xfe
 8004a54:	dd0a      	ble.n	8004a6c <scalbnf+0x58>
 8004a56:	4913      	ldr	r1, [pc, #76]	; (8004aa4 <scalbnf+0x90>)
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f361 001e 	bfi	r0, r1, #0, #31
 8004a5e:	e000      	b.n	8004a62 <scalbnf+0x4e>
 8004a60:	4911      	ldr	r1, [pc, #68]	; (8004aa8 <scalbnf+0x94>)
 8004a62:	f7fc f859 	bl	8000b18 <__aeabi_fmul>
 8004a66:	e7e2      	b.n	8004a2e <scalbnf+0x1a>
 8004a68:	0dd2      	lsrs	r2, r2, #23
 8004a6a:	e7f1      	b.n	8004a50 <scalbnf+0x3c>
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	dd05      	ble.n	8004a7c <scalbnf+0x68>
 8004a70:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8004a74:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd38      	pop	{r3, r4, r5, pc}
 8004a7c:	f112 0f16 	cmn.w	r2, #22
 8004a80:	da05      	bge.n	8004a8e <scalbnf+0x7a>
 8004a82:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004a86:	4295      	cmp	r5, r2
 8004a88:	dce5      	bgt.n	8004a56 <scalbnf+0x42>
 8004a8a:	4907      	ldr	r1, [pc, #28]	; (8004aa8 <scalbnf+0x94>)
 8004a8c:	e7e4      	b.n	8004a58 <scalbnf+0x44>
 8004a8e:	3219      	adds	r2, #25
 8004a90:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004a94:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8004a98:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8004a9c:	e7e1      	b.n	8004a62 <scalbnf+0x4e>
 8004a9e:	bf00      	nop
 8004aa0:	ffff3cb0 	.word	0xffff3cb0
 8004aa4:	7149f2ca 	.word	0x7149f2ca
 8004aa8:	0da24260 	.word	0x0da24260

08004aac <_init>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	bf00      	nop
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr

08004ab8 <_fini>:
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	bf00      	nop
 8004abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004abe:	bc08      	pop	{r3}
 8004ac0:	469e      	mov	lr, r3
 8004ac2:	4770      	bx	lr
