
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002598  08002598  00012598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e0  080026e0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080026e0  080026e0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e0  080026e0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080026e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000064  0800274c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  0800274c  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000281a  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000862  00000000  00000000  000228a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00023110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00023350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000350b  00000000  00000000  00023518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002d95  00000000  00000000  00026a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a9a1  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00034159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000119c  00000000  00000000  000341ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002580 	.word	0x08002580

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002580 	.word	0x08002580

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_PeriClockControl>:
#include "F401RE_GPIO.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d141      	bne.n	8000812 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <GPIO_PeriClockControl+0x130>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d147      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000836:	f023 0302 	bic.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <GPIO_PeriClockControl+0x130>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400

080008bc <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d81f      	bhi.n	800091c <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
	}else{
		//this part will code later . ( interrupt mode)
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	799b      	ldrb	r3, [r3, #6]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2103      	movs	r1, #3
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	400a      	ands	r2, r1
 800094a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6899      	ldr	r1, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	430a      	orrs	r2, r1
 800095a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68d9      	ldr	r1, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a1b      	ldrb	r3, [r3, #8]
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2301      	movs	r3, #1
 80009ba:	408b      	lsls	r3, r1
 80009bc:	43db      	mvns	r3, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	400a      	ands	r2, r1
 80009c6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6859      	ldr	r1, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d131      	bne.n	8000a44 <GPIO_Init+0x188>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	7afa      	ldrb	r2, [r7, #11]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fe:	7abb      	ldrb	r3, [r7, #10]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	7afa      	ldrb	r2, [r7, #11]
 8000a12:	4001      	ands	r1, r0
 8000a14:	3208      	adds	r2, #8
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7afa      	ldrb	r2, [r7, #11]
 8000a20:	3208      	adds	r2, #8
 8000a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a5b      	ldrb	r3, [r3, #9]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7afa      	ldrb	r2, [r7, #11]
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	3208      	adds	r2, #8
 8000a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <GPIO_Toggle_Pin>:
    } else {
        pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
    }
}

void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
    if (PinNumber > 15) return;
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d809      	bhi.n	8000a72 <GPIO_Toggle_Pin+0x26>
    pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	78fa      	ldrb	r2, [r7, #3]
 8000a64:	2101      	movs	r1, #1
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	405a      	eors	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	e000      	b.n	8000a74 <GPIO_Toggle_Pin+0x28>
    if (PinNumber > 15) return;
 8000a72:	bf00      	nop
}
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <RCC_Clock_Config>:

#include "F401RE_RCC.h"

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000a90:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000a98:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	791b      	ldrb	r3, [r3, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d126      	bne.n	8000af6 <RCC_Clock_Config+0x7a>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0201 	orr.w	r2, r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000ab8:	bf00      	nop
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f8      	beq.n	8000aba <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f022 0203 	bic.w	r2, r2, #3
 8000ad6:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	6892      	ldr	r2, [r2, #8]
 8000ae2:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000ae4:	bf00      	nop
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1f8      	bne.n	8000ae6 <RCC_Clock_Config+0x6a>

		// 5. Wait until PLL is used as the system clock
		//3 << 2
		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
	}
}
 8000af4:	e05c      	b.n	8000bb0 <RCC_Clock_Config+0x134>
	} else if (pRCC_Handle_t->RCC_Config.CLK_Source == PLLCLK) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d158      	bne.n	8000bb0 <RCC_Clock_Config+0x134>
		if (!(pRCC_Handle_t->pRCC->PLLCFGR & ~RCC_PLLCFGR_PLLSRC_HSI)) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d10f      	bne.n	8000b2c <RCC_Clock_Config+0xb0>
			pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0201 	orr.w	r2, r2, #1
 8000b1a:	601a      	str	r2, [r3, #0]
			while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000b1c:	bf00      	nop
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f8      	beq.n	8000b1e <RCC_Clock_Config+0xa2>
		pRCC_Handle_t->pRCC->PLLCFGR &= RCC_PLLCFGR_PLLSRC_HSI;  // Ensure HSI is selected as PLL source
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000b3a:	605a      	str	r2, [r3, #4]
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_M |
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6899      	ldr	r1, [r3, #8]
				(pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_N << 6) |
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	019b      	lsls	r3, r3, #6
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_M |
 8000b4c:	4319      	orrs	r1, r3
				(pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_P << 16));
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	691b      	ldr	r3, [r3, #16]
 8000b52:	041b      	lsls	r3, r3, #16
				(pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_N << 6) |
 8000b54:	430b      	orrs	r3, r1
 8000b56:	4619      	mov	r1, r3
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Factors.PLL_M |
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	605a      	str	r2, [r3, #4]
		pRCC_Handle_t->pRCC->CR |= RCC_CR_PLLON;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000b6e:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_PLLRDY)); // Wait until PLL is ready
 8000b70:	bf00      	nop
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0f8      	beq.n	8000b72 <RCC_Clock_Config+0xf6>
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0203 	bic.w	r2, r2, #3
 8000b8e:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as system clock source
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0202 	orr.w	r2, r2, #2
 8000b9e:	609a      	str	r2, [r3, #8]
		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
 8000ba0:	bf00      	nop
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b0a      	cmp	r3, #10
 8000bae:	d1f8      	bne.n	8000ba2 <RCC_Clock_Config+0x126>
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr

08000bba <AD_TIM_Start_Countdown>:



#include "F401RE_TIMER.h"

void AD_TIM_Start_Countdown(AD_TIM_Handle_t *pAD_TIM_Handle, uint32_t time_ms) {
 8000bba:	b480      	push	{r7}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
 8000bc2:	6039      	str	r1, [r7, #0]
	pAD_TIM_Handle->pTIMx->CR1 &= ~TIM_CR1_CEN;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0201 	bic.w	r2, r2, #1
 8000bd2:	601a      	str	r2, [r3, #0]
	while((pAD_TIM_Handle->pTIMx->CR1 & TIM_CR1_CEN) != 0);
 8000bd4:	bf00      	nop
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d1f8      	bne.n	8000bd6 <AD_TIM_Start_Countdown+0x1c>
	// Clear any pending update flag
	pAD_TIM_Handle->pTIMx->SR &= ~TIM_SR_UIF;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	691a      	ldr	r2, [r3, #16]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f022 0201 	bic.w	r2, r2, #1
 8000bf2:	611a      	str	r2, [r3, #16]

	// Configure for single countdown
	pAD_TIM_Handle->pTIMx->CNT = time_ms - 1;;  // Load counter this doesnt set count to 0...
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	3a01      	subs	r2, #1
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
	pAD_TIM_Handle->pTIMx->ARR = time_ms - 1;  // Count from this value down to 0
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	683a      	ldr	r2, [r7, #0]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
	// Generate update to load registers
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0201 	orr.w	r2, r2, #1
 8000c16:	615a      	str	r2, [r3, #20]


	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_CEN;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0201 	orr.w	r2, r2, #1
 8000c26:	601a      	str	r2, [r3, #0]
	while((pAD_TIM_Handle->pTIMx->CR1 & TIM_CR1_CEN) == 0);
 8000c28:	bf00      	nop
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f8      	beq.n	8000c2a <AD_TIM_Start_Countdown+0x70>
	// Clear update flag
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <AD_TIM_CDN_INIT>:

void AD_TIM_CDN_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

	if (pAD_TIM_Handle->pTIMx == TIM1) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <AD_TIM_CDN_INIT+0x90>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d105      	bne.n	8000c62 <AD_TIM_CDN_INIT+0x1e>
		TIM1_PCLK_EN();
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <AD_TIM_CDN_INIT+0x94>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <AD_TIM_CDN_INIT+0x94>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6453      	str	r3, [r2, #68]	; 0x44
	}

	//HANDLE INTERRUPTS
	*NVIC_ISER0 |= TIM1_UP_IRQ;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <AD_TIM_CDN_INIT+0x98>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1d      	ldr	r2, [pc, #116]	; (8000cdc <AD_TIM_CDN_INIT+0x98>)
 8000c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c6c:	6013      	str	r3, [r2, #0]
	pAD_TIM_Handle->pTIMx->DIER |= TIM_DIER_UIE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f042 0201 	orr.w	r2, r2, #1
 8000c7c:	60da      	str	r2, [r3, #12]
	//IS CLOCK NEEDED FORE SETTING REGS?

	// Set timer UEV to only overflow
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_URS;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0204 	orr.w	r2, r2, #4
 8000c8c:	601a      	str	r2, [r3, #0]

	// Set timer direction to downcounting
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_DIR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f042 0208 	orr.w	r2, r2, #8
 8000c9c:	601a      	str	r2, [r3, #0]

	// Enable Auto-Reload Preload (recommended for stability)
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cac:	601a      	str	r2, [r3, #0]

	// Set prescaler
	pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	889a      	ldrh	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28

	// Force update event to load PSC immediately
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	615a      	str	r2, [r3, #20]

}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40010000 	.word	0x40010000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af02      	add	r7, sp, #8
 8000ce6:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf0:	d106      	bne.n	8000d00 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	; (8000de8 <GP_TIM_PWM_INIT+0x108>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a3c      	ldr	r2, [pc, #240]	; (8000de8 <GP_TIM_PWM_INIT+0x108>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	e00a      	b.n	8000d16 <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <GP_TIM_PWM_INIT+0x10c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d105      	bne.n	8000d16 <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 8000d0a:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <GP_TIM_PWM_INIT+0x108>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <GP_TIM_PWM_INIT+0x108>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 8000d16:	bf00      	nop
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <GP_TIM_PWM_INIT+0x108>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f9      	beq.n	8000d18 <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d32:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	889a      	ldrh	r2, [r3, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	88db      	ldrh	r3, [r3, #6]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	e03b      	b.n	8000dc8 <GP_TIM_PWM_INIT+0xe8>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3302      	adds	r3, #2
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	4413      	add	r3, r2
 8000d5a:	88db      	ldrh	r3, [r3, #6]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fb45 	bl	80003ec <__aeabi_ui2f>
 8000d62:	4603      	mov	r3, r0
 8000d64:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 8000d66:	4922      	ldr	r1, [pc, #136]	; (8000df0 <GP_TIM_PWM_INIT+0x110>)
 8000d68:	6938      	ldr	r0, [r7, #16]
 8000d6a:	f7ff fc4b 	bl	8000604 <__aeabi_fdiv>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461c      	mov	r4, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	88db      	ldrh	r3, [r3, #6]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb3c 	bl	80003f4 <__aeabi_i2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fb8b 	bl	800049c <__aeabi_fmul>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fcd7 	bl	800073c <__aeabi_f2uiz>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3302      	adds	r3, #2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	795b      	ldrb	r3, [r3, #5]
 8000d9e:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3302      	adds	r3, #2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	791b      	ldrb	r3, [r3, #4]
 8000dac:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle, ch, duty, mode, enabled);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	b2d9      	uxtb	r1, r3
 8000db2:	7b78      	ldrb	r0, [r7, #13]
 8000db4:	89fa      	ldrh	r2, [r7, #14]
 8000db6:	7b3b      	ldrb	r3, [r7, #12]
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 f819 	bl	8000df4 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	ddc0      	ble.n	8000d50 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	695a      	ldr	r2, [r3, #20]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f042 0201 	orr.w	r2, r2, #1
 8000ddc:	615a      	str	r2, [r3, #20]

}
 8000dde:	bf00      	nop
 8000de0:	371c      	adds	r7, #28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd90      	pop	{r4, r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40000400 	.word	0x40000400
 8000df0:	42c80000 	.word	0x42c80000

08000df4 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	4611      	mov	r1, r2
 8000e00:	461a      	mov	r2, r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	70fb      	strb	r3, [r7, #3]
 8000e06:	460b      	mov	r3, r1
 8000e08:	803b      	strh	r3, [r7, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pGP_TIM_Handle->pTIMx->CCMR1 : &pGP_TIM_Handle->pTIMx->CCMR2;
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d803      	bhi.n	8000e1c <GP_TIM_SetChannel+0x28>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3318      	adds	r3, #24
 8000e1a:	e002      	b.n	8000e22 <GP_TIM_SetChannel+0x2e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	331c      	adds	r3, #28
 8000e22:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d86c      	bhi.n	8000f04 <GP_TIM_SetChannel+0x110>
 8000e2a:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <GP_TIM_SetChannel+0x3c>)
 8000e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000e53 	.word	0x08000e53
 8000e38:	08000e65 	.word	0x08000e65
 8000e3c:	08000e79 	.word	0x08000e79
	case CH1: ccr = &pGP_TIM_Handle->pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3334      	adds	r3, #52	; 0x34
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	2304      	movs	r3, #4
 8000e4a:	74fb      	strb	r3, [r7, #19]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	e01c      	b.n	8000e8c <GP_TIM_SetChannel+0x98>
	case CH2: ccr = &pGP_TIM_Handle->pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3338      	adds	r3, #56	; 0x38
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	74fb      	strb	r3, [r7, #19]
 8000e5e:	2310      	movs	r3, #16
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e013      	b.n	8000e8c <GP_TIM_SetChannel+0x98>
	case CH3: ccr = &pGP_TIM_Handle->pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	333c      	adds	r3, #60	; 0x3c
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	74fb      	strb	r3, [r7, #19]
 8000e70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	e009      	b.n	8000e8c <GP_TIM_SetChannel+0x98>
	case CH4: ccr = &pGP_TIM_Handle->pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3340      	adds	r3, #64	; 0x40
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	230c      	movs	r3, #12
 8000e82:	74fb      	strb	r3, [r7, #19]
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8000e8c:	883a      	ldrh	r2, [r7, #0]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	7cfa      	ldrb	r2, [r7, #19]
 8000e98:	2107      	movs	r1, #7
 8000e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9e:	43d2      	mvns	r2, r2
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	78ba      	ldrb	r2, [r7, #2]
 8000eac:	2a00      	cmp	r2, #0
 8000eae:	d101      	bne.n	8000eb4 <GP_TIM_SetChannel+0xc0>
 8000eb0:	2106      	movs	r1, #6
 8000eb2:	e000      	b.n	8000eb6 <GP_TIM_SetChannel+0xc2>
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	7cfa      	ldrb	r2, [r7, #19]
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	7cfa      	ldrb	r2, [r7, #19]
 8000ec8:	3a01      	subs	r2, #1
 8000eca:	2101      	movs	r1, #1
 8000ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 8000ed6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <GP_TIM_SetChannel+0xfc>
		pGP_TIM_Handle->pTIMx->CCER |= enable_bit;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6a19      	ldr	r1, [r3, #32]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	430a      	orrs	r2, r1
 8000eec:	621a      	str	r2, [r3, #32]
 8000eee:	e00a      	b.n	8000f06 <GP_TIM_SetChannel+0x112>
	} else {
		pGP_TIM_Handle->pTIMx->CCER &= ~enable_bit;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a19      	ldr	r1, [r3, #32]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43da      	mvns	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	400a      	ands	r2, r1
 8000f00:	621a      	str	r2, [r3, #32]
 8000f02:	e000      	b.n	8000f06 <GP_TIM_SetChannel+0x112>
	default: return;
 8000f04:	bf00      	nop
	}
}
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <GP_TIM_PWM_Control>:
		pGP_TIM_Handle->pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pGP_TIM_Handle->pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_ON) {
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d85d      	bhi.n	8000fe2 <GP_TIM_PWM_Control+0xd2>

	uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	60fb      	str	r3, [r7, #12]

	if (PWM_ON) {
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d04a      	beq.n	8000fce <GP_TIM_PWM_Control+0xbe>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	88db      	ldrh	r3, [r3, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa55 	bl	80003f4 <__aeabi_i2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4927      	ldr	r1, [pc, #156]	; (8000fec <GP_TIM_PWM_Control+0xdc>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb58 	bl	8000604 <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa49 	bl	80003f4 <__aeabi_i2f>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fa98 	bl	800049c <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fbe4 	bl	800073c <__aeabi_f2uiz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	817b      	strh	r3, [r7, #10]
		switch(channel) {
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d81e      	bhi.n	8000fbc <GP_TIM_PWM_Control+0xac>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <GP_TIM_PWM_Control+0x74>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08000f9f 	.word	0x08000f9f
 8000f8c:	08000fa9 	.word	0x08000fa9
 8000f90:	08000fb3 	.word	0x08000fb3
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	897a      	ldrh	r2, [r7, #10]
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9c:	e00e      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	897a      	ldrh	r2, [r7, #10]
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa6:	e009      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	897a      	ldrh	r2, [r7, #10]
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb0:	e004      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	897a      	ldrh	r2, [r7, #10]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fba:	bf00      	nop
		}

		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a19      	ldr	r1, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	e00a      	b.n	8000fe4 <GP_TIM_PWM_Control+0xd4>
		//case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
		//case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
		//case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
		//case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
		//}
		pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a19      	ldr	r1, [r3, #32]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	400a      	ands	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
 8000fe0:	e000      	b.n	8000fe4 <GP_TIM_PWM_Control+0xd4>
	if (channel > 3) return;
 8000fe2:	bf00      	nop
	}


}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	42c80000 	.word	0x42c80000

08000ff0 <drive_FWD>:
} //would rather turn right and left alternatively and usew random to calc he turn time => angle



//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	//GP_TIM_Control(pGP_TIM_Handle, DISABLE);
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff87 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8001002:	2201      	movs	r2, #1
 8001004:	2102      	movs	r1, #2
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff82 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OFF);//this doesnt stop pwm output...
 800100c:	2200      	movs	r2, #0
 800100e:	2101      	movs	r1, #1
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff7d 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OFF);
 8001016:	2200      	movs	r2, #0
 8001018:	2103      	movs	r1, #3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff78 	bl	8000f10 <GP_TIM_PWM_Control>
	//GP_TIM_Control(pGP_TIM_Handle, ENABLE);
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <main>:
void Full_RCC_Config(void);
void Full_GPIO_Config(void);
void Full_GP_TIM_Config(void);
void Full_AD_TIM_Config(void);

int main(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0

	init_random_seed();
 800102c:	f000 f812 	bl	8001054 <init_random_seed>
	Full_RCC_Config();
 8001030:	f000 f850 	bl	80010d4 <Full_RCC_Config>
	Full_AD_TIM_Config();
 8001034:	f000 f918 	bl	8001268 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 8001038:	f000 f864 	bl	8001104 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 800103c:	f000 f8dc 	bl	80011f8 <Full_GP_TIM_Config>

	AD_TIM_Start_Countdown(&TIM1_CDN,get_random_duration());
 8001040:	f000 f810 	bl	8001064 <get_random_duration>
 8001044:	4603      	mov	r3, r0
 8001046:	4619      	mov	r1, r3
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <main+0x28>)
 800104a:	f7ff fdb6 	bl	8000bba <AD_TIM_Start_Countdown>

	/* Loop forever */
	//an ISR should set START to 1, another should set it to 0
	while (1) {
 800104e:	e7fe      	b.n	800104e <main+0x26>
 8001050:	2000009c 	.word	0x2000009c

08001054 <init_random_seed>:
	//after init drive_fwd() is called directly
	//then algorithm should start after first sensorISR

	return 0;
}
void init_random_seed(void) {
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	srand(69);  // Seed with timer count for variability
 8001058:	2045      	movs	r0, #69	; 0x45
 800105a:	f000 fa33 	bl	80014c4 <srand>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <get_random_duration>:

uint32_t get_random_duration(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return 550 + (rand() % 3100);  // Between 1000 and 4999 ms
 8001068:	f000 fa5a 	bl	8001520 <rand>
 800106c:	4603      	mov	r3, r0
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <get_random_duration+0x2c>)
 8001070:	fb82 1203 	smull	r1, r2, r2, r3
 8001074:	441a      	add	r2, r3
 8001076:	12d1      	asrs	r1, r2, #11
 8001078:	17da      	asrs	r2, r3, #31
 800107a:	1a8a      	subs	r2, r1, r2
 800107c:	f640 411c 	movw	r1, #3100	; 0xc1c
 8001080:	fb01 f202 	mul.w	r2, r1, r2
 8001084:	1a9a      	subs	r2, r3, r2
 8001086:	f202 2326 	addw	r3, r2, #550	; 0x226
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	a9200a93 	.word	0xa9200a93

08001094 <TIM1_UP_TIM10_IRQHandler>:

void TIM1_UP_TIM10_IRQHandler(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	//TIMER_ISR()
	//exit TURN_STATE
	GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 8001098:	210d      	movs	r1, #13
 800109a:	480b      	ldr	r0, [pc, #44]	; (80010c8 <TIM1_UP_TIM10_IRQHandler+0x34>)
 800109c:	f7ff fcd6 	bl	8000a4c <GPIO_Toggle_Pin>
	drive_FWD(&TIM2_PWM);
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <TIM1_UP_TIM10_IRQHandler+0x38>)
 80010a2:	f7ff ffa5 	bl	8000ff0 <drive_FWD>
	TIM1_CDN.pTIMx->SR &= ~TIM_SR_UIF;
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	611a      	str	r2, [r3, #16]
	AD_TIM_Start_Countdown(&TIM1_CDN,get_random_duration());
 80010b6:	f7ff ffd5 	bl	8001064 <get_random_duration>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4619      	mov	r1, r3
 80010be:	4804      	ldr	r0, [pc, #16]	; (80010d0 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80010c0:	f7ff fd7b 	bl	8000bba <AD_TIM_Start_Countdown>
	//receive new angle from giroscope
	//set increment_enable TRUE
	//drive_FWD()
	//increment coordinates based on angle (in while loop maybe)
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020800 	.word	0x40020800
 80010cc:	20000080 	.word	0x20000080
 80010d0:	2000009c 	.word	0x2000009c

080010d4 <Full_RCC_Config>:
void Full_RCC_Config(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <Full_RCC_Config+0x2c>)
 80010dc:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 80010de:	2300      	movs	r3, #0
 80010e0:	713b      	strb	r3, [r7, #4]
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_M = 16;
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_N = 400;
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_P = 3;
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 80010e6:	2304      	movs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 80010ea:	2304      	movs	r3, #4
 80010ec:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 80010ee:	463b      	mov	r3, r7
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fcc3 	bl	8000a7c <RCC_Clock_Config>
}
 80010f6:	bf00      	nop
 80010f8:	3720      	adds	r7, #32
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	b090      	sub	sp, #64	; 0x40
 8001108:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <Full_GPIO_Config+0xe8>)
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800110e:	230d      	movs	r3, #13
 8001110:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800111a:	2303      	movs	r3, #3
 800111c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b


	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 800112c:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <Full_GPIO_Config+0xec>)
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8001130:	2302      	movs	r3, #2
 8001132:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001136:	2302      	movs	r3, #2
 8001138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800113c:	2303      	movs	r3, #3
 800113e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001142:	2300      	movs	r3, #0
 8001144:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001148:	2301      	movs	r3, #1
 800114a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// GPIO Configuration for TIM2 CH2 (PA1)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <Full_GPIO_Config+0xf0>)
 8001156:	61fb      	str	r3, [r7, #28]
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001158:	2303      	movs	r3, #3
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800115e:	2302      	movs	r3, #2
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001164:	2303      	movs	r3, #3
 8001166:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001170:	2301      	movs	r3, #1
 8001172:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001176:	2300      	movs	r3, #0
 8001178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <Full_GPIO_Config+0xec>)
 800117e:	613b      	str	r3, [r7, #16]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001180:	2300      	movs	r3, #0
 8001182:	753b      	strb	r3, [r7, #20]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001184:	2302      	movs	r3, #2
 8001186:	757b      	strb	r3, [r7, #21]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001188:	2303      	movs	r3, #3
 800118a:	75bb      	strb	r3, [r7, #22]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800118c:	2300      	movs	r3, #0
 800118e:	763b      	strb	r3, [r7, #24]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001190:	2301      	movs	r3, #1
 8001192:	767b      	strb	r3, [r7, #25]
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001194:	2300      	movs	r3, #0
 8001196:	75fb      	strb	r3, [r7, #23]

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <Full_GPIO_Config+0xec>)
 800119a:	607b      	str	r3, [r7, #4]
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800119c:	2303      	movs	r3, #3
 800119e:	723b      	strb	r3, [r7, #8]
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80011a0:	2302      	movs	r3, #2
 80011a2:	727b      	strb	r3, [r7, #9]
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80011a4:	2303      	movs	r3, #3
 80011a6:	72bb      	strb	r3, [r7, #10]
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80011a8:	2300      	movs	r3, #0
 80011aa:	733b      	strb	r3, [r7, #12]
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80011ac:	2301      	movs	r3, #1
 80011ae:	737b      	strb	r3, [r7, #13]
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011b0:	2300      	movs	r3, #0
 80011b2:	72fb      	strb	r3, [r7, #11]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 80011b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fb7f 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH3);
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fb7a 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH2);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fb75 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH1);
 80011d2:	f107 0310 	add.w	r3, r7, #16
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fb70 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb6c 	bl	80008bc <GPIO_Init>
}
 80011e4:	bf00      	nop
 80011e6:	3740      	adds	r7, #64	; 0x40
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020800 	.word	0x40020800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400

080011f8 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 80011fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001202:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001206:	2204      	movs	r2, #4
 8001208:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 100;
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800120c:	2264      	movs	r2, #100	; 0x64
 800120e:	80da      	strh	r2, [r3, #6]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001212:	2201      	movs	r2, #1
 8001214:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001218:	2201      	movs	r2, #1
 800121a:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800121e:	2201      	movs	r2, #1
 8001220:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001224:	2201      	movs	r2, #1
 8001226:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8001228:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800122a:	2200      	movs	r2, #0
 800122c:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = DutyCycle_60;  // 80% Duty
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001230:	223c      	movs	r2, #60	; 0x3c
 8001232:	81da      	strh	r2, [r3, #14]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001236:	2200      	movs	r2, #0
 8001238:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = DutyCycle_60;  // 80% Duty
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800123c:	223c      	movs	r2, #60	; 0x3c
 800123e:	825a      	strh	r2, [r3, #18]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001242:	2200      	movs	r2, #0
 8001244:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = DutyCycle_60;  // 80% Duty
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001248:	223c      	movs	r2, #60	; 0x3c
 800124a:	82da      	strh	r2, [r3, #22]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800124e:	2200      	movs	r2, #0
 8001250:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = DutyCycle_60;  // 80% Duty
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 8001254:	223c      	movs	r2, #60	; 0x3c
 8001256:	835a      	strh	r2, [r3, #26]
	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Full_GP_TIM_Config+0x6c>)
 800125a:	f7ff fd41 	bl	8000ce0 <GP_TIM_PWM_INIT>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000080 	.word	0x20000080

08001268 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	// AD Timer Configuration
	TIM1_CDN.pTIMx = TIM1;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <Full_AD_TIM_Config+0x1c>)
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <Full_AD_TIM_Config+0x20>)
 8001270:	601a      	str	r2, [r3, #0]
	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_CDN.AD_TIM_Config.Prescaler = PRESCALER_16K;
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <Full_AD_TIM_Config+0x1c>)
 8001274:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001278:	809a      	strh	r2, [r3, #4]
	AD_TIM_CDN_INIT(&TIM1_CDN);
 800127a:	4802      	ldr	r0, [pc, #8]	; (8001284 <Full_AD_TIM_Config+0x1c>)
 800127c:	f7ff fce2 	bl	8000c44 <AD_TIM_CDN_INIT>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2000009c 	.word	0x2000009c
 8001288:	40010000 	.word	0x40010000

0800128c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return 1;
 8001290:	2301      	movs	r3, #1
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <_kill>:

int _kill(int pid, int sig)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a4:	f000 f8dc 	bl	8001460 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2216      	movs	r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_exit>:

void _exit (int status)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c2:	f04f 31ff 	mov.w	r1, #4294967295
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffe7 	bl	800129a <_kill>
  while (1) {}    /* Make sure we hang here */
 80012cc:	e7fe      	b.n	80012cc <_exit+0x12>

080012ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e00a      	b.n	80012f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e0:	f3af 8000 	nop.w
 80012e4:	4601      	mov	r1, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	b2ca      	uxtb	r2, r1
 80012ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbf0      	blt.n	80012e0 <_read+0x12>
  }

  return len;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e009      	b.n	800132e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	429a      	cmp	r2, r3
 8001334:	dbf1      	blt.n	800131a <_write+0x12>
  }
  return len;
 8001336:	687b      	ldr	r3, [r7, #4]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_close>:

int _close(int file)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001366:	605a      	str	r2, [r3, #4]
  return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <_isatty>:

int _isatty(int file)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800137c:	2301      	movs	r3, #1
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f000 f846 	bl	8001460 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20018000 	.word	0x20018000
 8001400:	00000400 	.word	0x00000400
 8001404:	200000bc 	.word	0x200000bc
 8001408:	200000d0 	.word	0x200000d0

0800140c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800140e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001410:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <LoopForever+0x6>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	; (800144c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <LoopForever+0xe>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	; (8001458 <LoopForever+0x16>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800143a:	f000 f817 	bl	800146c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800143e:	f7ff fdf3 	bl	8001028 <main>

08001442 <LoopForever>:

LoopForever:
  b LoopForever
 8001442:	e7fe      	b.n	8001442 <LoopForever>
  ldr   r0, =_estack
 8001444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001450:	080026e8 	.word	0x080026e8
  ldr r2, =_sbss
 8001454:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001458:	200000d0 	.word	0x200000d0

0800145c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <__errno>:
 8001460:	4b01      	ldr	r3, [pc, #4]	; (8001468 <__errno+0x8>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000000 	.word	0x20000000

0800146c <__libc_init_array>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	4d0d      	ldr	r5, [pc, #52]	; (80014a4 <__libc_init_array+0x38>)
 8001470:	4c0d      	ldr	r4, [pc, #52]	; (80014a8 <__libc_init_array+0x3c>)
 8001472:	1b64      	subs	r4, r4, r5
 8001474:	10a4      	asrs	r4, r4, #2
 8001476:	2600      	movs	r6, #0
 8001478:	42a6      	cmp	r6, r4
 800147a:	d109      	bne.n	8001490 <__libc_init_array+0x24>
 800147c:	4d0b      	ldr	r5, [pc, #44]	; (80014ac <__libc_init_array+0x40>)
 800147e:	4c0c      	ldr	r4, [pc, #48]	; (80014b0 <__libc_init_array+0x44>)
 8001480:	f001 f87e 	bl	8002580 <_init>
 8001484:	1b64      	subs	r4, r4, r5
 8001486:	10a4      	asrs	r4, r4, #2
 8001488:	2600      	movs	r6, #0
 800148a:	42a6      	cmp	r6, r4
 800148c:	d105      	bne.n	800149a <__libc_init_array+0x2e>
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	f855 3b04 	ldr.w	r3, [r5], #4
 8001494:	4798      	blx	r3
 8001496:	3601      	adds	r6, #1
 8001498:	e7ee      	b.n	8001478 <__libc_init_array+0xc>
 800149a:	f855 3b04 	ldr.w	r3, [r5], #4
 800149e:	4798      	blx	r3
 80014a0:	3601      	adds	r6, #1
 80014a2:	e7f2      	b.n	800148a <__libc_init_array+0x1e>
 80014a4:	080026e0 	.word	0x080026e0
 80014a8:	080026e0 	.word	0x080026e0
 80014ac:	080026e0 	.word	0x080026e0
 80014b0:	080026e4 	.word	0x080026e4

080014b4 <memset>:
 80014b4:	4402      	add	r2, r0
 80014b6:	4603      	mov	r3, r0
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d100      	bne.n	80014be <memset+0xa>
 80014bc:	4770      	bx	lr
 80014be:	f803 1b01 	strb.w	r1, [r3], #1
 80014c2:	e7f9      	b.n	80014b8 <memset+0x4>

080014c4 <srand>:
 80014c4:	b538      	push	{r3, r4, r5, lr}
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <srand+0x44>)
 80014c8:	681d      	ldr	r5, [r3, #0]
 80014ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80014cc:	4604      	mov	r4, r0
 80014ce:	b9b3      	cbnz	r3, 80014fe <srand+0x3a>
 80014d0:	2018      	movs	r0, #24
 80014d2:	f000 f893 	bl	80015fc <malloc>
 80014d6:	4602      	mov	r2, r0
 80014d8:	63a8      	str	r0, [r5, #56]	; 0x38
 80014da:	b920      	cbnz	r0, 80014e6 <srand+0x22>
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <srand+0x48>)
 80014de:	480c      	ldr	r0, [pc, #48]	; (8001510 <srand+0x4c>)
 80014e0:	2142      	movs	r1, #66	; 0x42
 80014e2:	f000 f85b 	bl	800159c <__assert_func>
 80014e6:	490b      	ldr	r1, [pc, #44]	; (8001514 <srand+0x50>)
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <srand+0x54>)
 80014ea:	e9c0 1300 	strd	r1, r3, [r0]
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <srand+0x58>)
 80014f0:	6083      	str	r3, [r0, #8]
 80014f2:	230b      	movs	r3, #11
 80014f4:	8183      	strh	r3, [r0, #12]
 80014f6:	2100      	movs	r1, #0
 80014f8:	2001      	movs	r0, #1
 80014fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80014fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	611c      	str	r4, [r3, #16]
 8001504:	615a      	str	r2, [r3, #20]
 8001506:	bd38      	pop	{r3, r4, r5, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	0800259c 	.word	0x0800259c
 8001510:	080025b3 	.word	0x080025b3
 8001514:	abcd330e 	.word	0xabcd330e
 8001518:	e66d1234 	.word	0xe66d1234
 800151c:	0005deec 	.word	0x0005deec

08001520 <rand>:
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <rand+0x5c>)
 8001522:	b510      	push	{r4, lr}
 8001524:	681c      	ldr	r4, [r3, #0]
 8001526:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001528:	b9b3      	cbnz	r3, 8001558 <rand+0x38>
 800152a:	2018      	movs	r0, #24
 800152c:	f000 f866 	bl	80015fc <malloc>
 8001530:	4602      	mov	r2, r0
 8001532:	63a0      	str	r0, [r4, #56]	; 0x38
 8001534:	b920      	cbnz	r0, 8001540 <rand+0x20>
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <rand+0x60>)
 8001538:	4812      	ldr	r0, [pc, #72]	; (8001584 <rand+0x64>)
 800153a:	214e      	movs	r1, #78	; 0x4e
 800153c:	f000 f82e 	bl	800159c <__assert_func>
 8001540:	4911      	ldr	r1, [pc, #68]	; (8001588 <rand+0x68>)
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <rand+0x6c>)
 8001544:	e9c0 1300 	strd	r1, r3, [r0]
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <rand+0x70>)
 800154a:	6083      	str	r3, [r0, #8]
 800154c:	230b      	movs	r3, #11
 800154e:	8183      	strh	r3, [r0, #12]
 8001550:	2100      	movs	r1, #0
 8001552:	2001      	movs	r0, #1
 8001554:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001558:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800155a:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <rand+0x74>)
 800155c:	6920      	ldr	r0, [r4, #16]
 800155e:	6963      	ldr	r3, [r4, #20]
 8001560:	490d      	ldr	r1, [pc, #52]	; (8001598 <rand+0x78>)
 8001562:	4342      	muls	r2, r0
 8001564:	fb01 2203 	mla	r2, r1, r3, r2
 8001568:	fba0 0101 	umull	r0, r1, r0, r1
 800156c:	1c43      	adds	r3, r0, #1
 800156e:	eb42 0001 	adc.w	r0, r2, r1
 8001572:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001576:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800157a:	bd10      	pop	{r4, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	0800259c 	.word	0x0800259c
 8001584:	080025b3 	.word	0x080025b3
 8001588:	abcd330e 	.word	0xabcd330e
 800158c:	e66d1234 	.word	0xe66d1234
 8001590:	0005deec 	.word	0x0005deec
 8001594:	5851f42d 	.word	0x5851f42d
 8001598:	4c957f2d 	.word	0x4c957f2d

0800159c <__assert_func>:
 800159c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800159e:	4614      	mov	r4, r2
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <__assert_func+0x2c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4605      	mov	r5, r0
 80015a8:	68d8      	ldr	r0, [r3, #12]
 80015aa:	b14c      	cbz	r4, 80015c0 <__assert_func+0x24>
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <__assert_func+0x30>)
 80015ae:	9100      	str	r1, [sp, #0]
 80015b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80015b4:	4906      	ldr	r1, [pc, #24]	; (80015d0 <__assert_func+0x34>)
 80015b6:	462b      	mov	r3, r5
 80015b8:	f000 f80e 	bl	80015d8 <fiprintf>
 80015bc:	f000 fcc0 	bl	8001f40 <abort>
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__assert_func+0x38>)
 80015c2:	461c      	mov	r4, r3
 80015c4:	e7f3      	b.n	80015ae <__assert_func+0x12>
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000
 80015cc:	0800260e 	.word	0x0800260e
 80015d0:	0800261b 	.word	0x0800261b
 80015d4:	08002649 	.word	0x08002649

080015d8 <fiprintf>:
 80015d8:	b40e      	push	{r1, r2, r3}
 80015da:	b503      	push	{r0, r1, lr}
 80015dc:	4601      	mov	r1, r0
 80015de:	ab03      	add	r3, sp, #12
 80015e0:	4805      	ldr	r0, [pc, #20]	; (80015f8 <fiprintf+0x20>)
 80015e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80015e6:	6800      	ldr	r0, [r0, #0]
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f000 f915 	bl	8001818 <_vfiprintf_r>
 80015ee:	b002      	add	sp, #8
 80015f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80015f4:	b003      	add	sp, #12
 80015f6:	4770      	bx	lr
 80015f8:	20000000 	.word	0x20000000

080015fc <malloc>:
 80015fc:	4b02      	ldr	r3, [pc, #8]	; (8001608 <malloc+0xc>)
 80015fe:	4601      	mov	r1, r0
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f000 b86d 	b.w	80016e0 <_malloc_r>
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000

0800160c <_free_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4605      	mov	r5, r0
 8001610:	2900      	cmp	r1, #0
 8001612:	d041      	beq.n	8001698 <_free_r+0x8c>
 8001614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001618:	1f0c      	subs	r4, r1, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfb8      	it	lt
 800161e:	18e4      	addlt	r4, r4, r3
 8001620:	f000 feb2 	bl	8002388 <__malloc_lock>
 8001624:	4a1d      	ldr	r2, [pc, #116]	; (800169c <_free_r+0x90>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	b933      	cbnz	r3, 8001638 <_free_r+0x2c>
 800162a:	6063      	str	r3, [r4, #4]
 800162c:	6014      	str	r4, [r2, #0]
 800162e:	4628      	mov	r0, r5
 8001630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001634:	f000 beae 	b.w	8002394 <__malloc_unlock>
 8001638:	42a3      	cmp	r3, r4
 800163a:	d908      	bls.n	800164e <_free_r+0x42>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	1821      	adds	r1, r4, r0
 8001640:	428b      	cmp	r3, r1
 8001642:	bf01      	itttt	eq
 8001644:	6819      	ldreq	r1, [r3, #0]
 8001646:	685b      	ldreq	r3, [r3, #4]
 8001648:	1809      	addeq	r1, r1, r0
 800164a:	6021      	streq	r1, [r4, #0]
 800164c:	e7ed      	b.n	800162a <_free_r+0x1e>
 800164e:	461a      	mov	r2, r3
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	b10b      	cbz	r3, 8001658 <_free_r+0x4c>
 8001654:	42a3      	cmp	r3, r4
 8001656:	d9fa      	bls.n	800164e <_free_r+0x42>
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	1850      	adds	r0, r2, r1
 800165c:	42a0      	cmp	r0, r4
 800165e:	d10b      	bne.n	8001678 <_free_r+0x6c>
 8001660:	6820      	ldr	r0, [r4, #0]
 8001662:	4401      	add	r1, r0
 8001664:	1850      	adds	r0, r2, r1
 8001666:	4283      	cmp	r3, r0
 8001668:	6011      	str	r1, [r2, #0]
 800166a:	d1e0      	bne.n	800162e <_free_r+0x22>
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	6053      	str	r3, [r2, #4]
 8001672:	4401      	add	r1, r0
 8001674:	6011      	str	r1, [r2, #0]
 8001676:	e7da      	b.n	800162e <_free_r+0x22>
 8001678:	d902      	bls.n	8001680 <_free_r+0x74>
 800167a:	230c      	movs	r3, #12
 800167c:	602b      	str	r3, [r5, #0]
 800167e:	e7d6      	b.n	800162e <_free_r+0x22>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	1821      	adds	r1, r4, r0
 8001684:	428b      	cmp	r3, r1
 8001686:	bf04      	itt	eq
 8001688:	6819      	ldreq	r1, [r3, #0]
 800168a:	685b      	ldreq	r3, [r3, #4]
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	bf04      	itt	eq
 8001690:	1809      	addeq	r1, r1, r0
 8001692:	6021      	streq	r1, [r4, #0]
 8001694:	6054      	str	r4, [r2, #4]
 8001696:	e7ca      	b.n	800162e <_free_r+0x22>
 8001698:	bd38      	pop	{r3, r4, r5, pc}
 800169a:	bf00      	nop
 800169c:	200000c0 	.word	0x200000c0

080016a0 <sbrk_aligned>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	4e0e      	ldr	r6, [pc, #56]	; (80016dc <sbrk_aligned+0x3c>)
 80016a4:	460c      	mov	r4, r1
 80016a6:	6831      	ldr	r1, [r6, #0]
 80016a8:	4605      	mov	r5, r0
 80016aa:	b911      	cbnz	r1, 80016b2 <sbrk_aligned+0x12>
 80016ac:	f000 fb78 	bl	8001da0 <_sbrk_r>
 80016b0:	6030      	str	r0, [r6, #0]
 80016b2:	4621      	mov	r1, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 fb73 	bl	8001da0 <_sbrk_r>
 80016ba:	1c43      	adds	r3, r0, #1
 80016bc:	d00a      	beq.n	80016d4 <sbrk_aligned+0x34>
 80016be:	1cc4      	adds	r4, r0, #3
 80016c0:	f024 0403 	bic.w	r4, r4, #3
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d007      	beq.n	80016d8 <sbrk_aligned+0x38>
 80016c8:	1a21      	subs	r1, r4, r0
 80016ca:	4628      	mov	r0, r5
 80016cc:	f000 fb68 	bl	8001da0 <_sbrk_r>
 80016d0:	3001      	adds	r0, #1
 80016d2:	d101      	bne.n	80016d8 <sbrk_aligned+0x38>
 80016d4:	f04f 34ff 	mov.w	r4, #4294967295
 80016d8:	4620      	mov	r0, r4
 80016da:	bd70      	pop	{r4, r5, r6, pc}
 80016dc:	200000c4 	.word	0x200000c4

080016e0 <_malloc_r>:
 80016e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016e4:	1ccd      	adds	r5, r1, #3
 80016e6:	f025 0503 	bic.w	r5, r5, #3
 80016ea:	3508      	adds	r5, #8
 80016ec:	2d0c      	cmp	r5, #12
 80016ee:	bf38      	it	cc
 80016f0:	250c      	movcc	r5, #12
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	4607      	mov	r7, r0
 80016f6:	db01      	blt.n	80016fc <_malloc_r+0x1c>
 80016f8:	42a9      	cmp	r1, r5
 80016fa:	d905      	bls.n	8001708 <_malloc_r+0x28>
 80016fc:	230c      	movs	r3, #12
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	2600      	movs	r6, #0
 8001702:	4630      	mov	r0, r6
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001708:	4e2e      	ldr	r6, [pc, #184]	; (80017c4 <_malloc_r+0xe4>)
 800170a:	f000 fe3d 	bl	8002388 <__malloc_lock>
 800170e:	6833      	ldr	r3, [r6, #0]
 8001710:	461c      	mov	r4, r3
 8001712:	bb34      	cbnz	r4, 8001762 <_malloc_r+0x82>
 8001714:	4629      	mov	r1, r5
 8001716:	4638      	mov	r0, r7
 8001718:	f7ff ffc2 	bl	80016a0 <sbrk_aligned>
 800171c:	1c43      	adds	r3, r0, #1
 800171e:	4604      	mov	r4, r0
 8001720:	d14d      	bne.n	80017be <_malloc_r+0xde>
 8001722:	6834      	ldr	r4, [r6, #0]
 8001724:	4626      	mov	r6, r4
 8001726:	2e00      	cmp	r6, #0
 8001728:	d140      	bne.n	80017ac <_malloc_r+0xcc>
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	4631      	mov	r1, r6
 800172e:	4638      	mov	r0, r7
 8001730:	eb04 0803 	add.w	r8, r4, r3
 8001734:	f000 fb34 	bl	8001da0 <_sbrk_r>
 8001738:	4580      	cmp	r8, r0
 800173a:	d13a      	bne.n	80017b2 <_malloc_r+0xd2>
 800173c:	6821      	ldr	r1, [r4, #0]
 800173e:	3503      	adds	r5, #3
 8001740:	1a6d      	subs	r5, r5, r1
 8001742:	f025 0503 	bic.w	r5, r5, #3
 8001746:	3508      	adds	r5, #8
 8001748:	2d0c      	cmp	r5, #12
 800174a:	bf38      	it	cc
 800174c:	250c      	movcc	r5, #12
 800174e:	4629      	mov	r1, r5
 8001750:	4638      	mov	r0, r7
 8001752:	f7ff ffa5 	bl	80016a0 <sbrk_aligned>
 8001756:	3001      	adds	r0, #1
 8001758:	d02b      	beq.n	80017b2 <_malloc_r+0xd2>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	442b      	add	r3, r5
 800175e:	6023      	str	r3, [r4, #0]
 8001760:	e00e      	b.n	8001780 <_malloc_r+0xa0>
 8001762:	6822      	ldr	r2, [r4, #0]
 8001764:	1b52      	subs	r2, r2, r5
 8001766:	d41e      	bmi.n	80017a6 <_malloc_r+0xc6>
 8001768:	2a0b      	cmp	r2, #11
 800176a:	d916      	bls.n	800179a <_malloc_r+0xba>
 800176c:	1961      	adds	r1, r4, r5
 800176e:	42a3      	cmp	r3, r4
 8001770:	6025      	str	r5, [r4, #0]
 8001772:	bf18      	it	ne
 8001774:	6059      	strne	r1, [r3, #4]
 8001776:	6863      	ldr	r3, [r4, #4]
 8001778:	bf08      	it	eq
 800177a:	6031      	streq	r1, [r6, #0]
 800177c:	5162      	str	r2, [r4, r5]
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	4638      	mov	r0, r7
 8001782:	f104 060b 	add.w	r6, r4, #11
 8001786:	f000 fe05 	bl	8002394 <__malloc_unlock>
 800178a:	f026 0607 	bic.w	r6, r6, #7
 800178e:	1d23      	adds	r3, r4, #4
 8001790:	1af2      	subs	r2, r6, r3
 8001792:	d0b6      	beq.n	8001702 <_malloc_r+0x22>
 8001794:	1b9b      	subs	r3, r3, r6
 8001796:	50a3      	str	r3, [r4, r2]
 8001798:	e7b3      	b.n	8001702 <_malloc_r+0x22>
 800179a:	6862      	ldr	r2, [r4, #4]
 800179c:	42a3      	cmp	r3, r4
 800179e:	bf0c      	ite	eq
 80017a0:	6032      	streq	r2, [r6, #0]
 80017a2:	605a      	strne	r2, [r3, #4]
 80017a4:	e7ec      	b.n	8001780 <_malloc_r+0xa0>
 80017a6:	4623      	mov	r3, r4
 80017a8:	6864      	ldr	r4, [r4, #4]
 80017aa:	e7b2      	b.n	8001712 <_malloc_r+0x32>
 80017ac:	4634      	mov	r4, r6
 80017ae:	6876      	ldr	r6, [r6, #4]
 80017b0:	e7b9      	b.n	8001726 <_malloc_r+0x46>
 80017b2:	230c      	movs	r3, #12
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4638      	mov	r0, r7
 80017b8:	f000 fdec 	bl	8002394 <__malloc_unlock>
 80017bc:	e7a1      	b.n	8001702 <_malloc_r+0x22>
 80017be:	6025      	str	r5, [r4, #0]
 80017c0:	e7de      	b.n	8001780 <_malloc_r+0xa0>
 80017c2:	bf00      	nop
 80017c4:	200000c0 	.word	0x200000c0

080017c8 <__sfputc_r>:
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	b410      	push	{r4}
 80017d0:	6093      	str	r3, [r2, #8]
 80017d2:	da07      	bge.n	80017e4 <__sfputc_r+0x1c>
 80017d4:	6994      	ldr	r4, [r2, #24]
 80017d6:	42a3      	cmp	r3, r4
 80017d8:	db01      	blt.n	80017de <__sfputc_r+0x16>
 80017da:	290a      	cmp	r1, #10
 80017dc:	d102      	bne.n	80017e4 <__sfputc_r+0x1c>
 80017de:	bc10      	pop	{r4}
 80017e0:	f000 baee 	b.w	8001dc0 <__swbuf_r>
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	1c58      	adds	r0, r3, #1
 80017e8:	6010      	str	r0, [r2, #0]
 80017ea:	7019      	strb	r1, [r3, #0]
 80017ec:	4608      	mov	r0, r1
 80017ee:	bc10      	pop	{r4}
 80017f0:	4770      	bx	lr

080017f2 <__sfputs_r>:
 80017f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f4:	4606      	mov	r6, r0
 80017f6:	460f      	mov	r7, r1
 80017f8:	4614      	mov	r4, r2
 80017fa:	18d5      	adds	r5, r2, r3
 80017fc:	42ac      	cmp	r4, r5
 80017fe:	d101      	bne.n	8001804 <__sfputs_r+0x12>
 8001800:	2000      	movs	r0, #0
 8001802:	e007      	b.n	8001814 <__sfputs_r+0x22>
 8001804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001808:	463a      	mov	r2, r7
 800180a:	4630      	mov	r0, r6
 800180c:	f7ff ffdc 	bl	80017c8 <__sfputc_r>
 8001810:	1c43      	adds	r3, r0, #1
 8001812:	d1f3      	bne.n	80017fc <__sfputs_r+0xa>
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001818 <_vfiprintf_r>:
 8001818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800181c:	460d      	mov	r5, r1
 800181e:	b09d      	sub	sp, #116	; 0x74
 8001820:	4614      	mov	r4, r2
 8001822:	4698      	mov	r8, r3
 8001824:	4606      	mov	r6, r0
 8001826:	b118      	cbz	r0, 8001830 <_vfiprintf_r+0x18>
 8001828:	6983      	ldr	r3, [r0, #24]
 800182a:	b90b      	cbnz	r3, 8001830 <_vfiprintf_r+0x18>
 800182c:	f000 fca6 	bl	800217c <__sinit>
 8001830:	4b89      	ldr	r3, [pc, #548]	; (8001a58 <_vfiprintf_r+0x240>)
 8001832:	429d      	cmp	r5, r3
 8001834:	d11b      	bne.n	800186e <_vfiprintf_r+0x56>
 8001836:	6875      	ldr	r5, [r6, #4]
 8001838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800183a:	07d9      	lsls	r1, r3, #31
 800183c:	d405      	bmi.n	800184a <_vfiprintf_r+0x32>
 800183e:	89ab      	ldrh	r3, [r5, #12]
 8001840:	059a      	lsls	r2, r3, #22
 8001842:	d402      	bmi.n	800184a <_vfiprintf_r+0x32>
 8001844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001846:	f000 fd37 	bl	80022b8 <__retarget_lock_acquire_recursive>
 800184a:	89ab      	ldrh	r3, [r5, #12]
 800184c:	071b      	lsls	r3, r3, #28
 800184e:	d501      	bpl.n	8001854 <_vfiprintf_r+0x3c>
 8001850:	692b      	ldr	r3, [r5, #16]
 8001852:	b9eb      	cbnz	r3, 8001890 <_vfiprintf_r+0x78>
 8001854:	4629      	mov	r1, r5
 8001856:	4630      	mov	r0, r6
 8001858:	f000 fb04 	bl	8001e64 <__swsetup_r>
 800185c:	b1c0      	cbz	r0, 8001890 <_vfiprintf_r+0x78>
 800185e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001860:	07dc      	lsls	r4, r3, #31
 8001862:	d50e      	bpl.n	8001882 <_vfiprintf_r+0x6a>
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	b01d      	add	sp, #116	; 0x74
 800186a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <_vfiprintf_r+0x244>)
 8001870:	429d      	cmp	r5, r3
 8001872:	d101      	bne.n	8001878 <_vfiprintf_r+0x60>
 8001874:	68b5      	ldr	r5, [r6, #8]
 8001876:	e7df      	b.n	8001838 <_vfiprintf_r+0x20>
 8001878:	4b79      	ldr	r3, [pc, #484]	; (8001a60 <_vfiprintf_r+0x248>)
 800187a:	429d      	cmp	r5, r3
 800187c:	bf08      	it	eq
 800187e:	68f5      	ldreq	r5, [r6, #12]
 8001880:	e7da      	b.n	8001838 <_vfiprintf_r+0x20>
 8001882:	89ab      	ldrh	r3, [r5, #12]
 8001884:	0598      	lsls	r0, r3, #22
 8001886:	d4ed      	bmi.n	8001864 <_vfiprintf_r+0x4c>
 8001888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800188a:	f000 fd16 	bl	80022ba <__retarget_lock_release_recursive>
 800188e:	e7e9      	b.n	8001864 <_vfiprintf_r+0x4c>
 8001890:	2300      	movs	r3, #0
 8001892:	9309      	str	r3, [sp, #36]	; 0x24
 8001894:	2320      	movs	r3, #32
 8001896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800189a:	f8cd 800c 	str.w	r8, [sp, #12]
 800189e:	2330      	movs	r3, #48	; 0x30
 80018a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a64 <_vfiprintf_r+0x24c>
 80018a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018a8:	f04f 0901 	mov.w	r9, #1
 80018ac:	4623      	mov	r3, r4
 80018ae:	469a      	mov	sl, r3
 80018b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018b4:	b10a      	cbz	r2, 80018ba <_vfiprintf_r+0xa2>
 80018b6:	2a25      	cmp	r2, #37	; 0x25
 80018b8:	d1f9      	bne.n	80018ae <_vfiprintf_r+0x96>
 80018ba:	ebba 0b04 	subs.w	fp, sl, r4
 80018be:	d00b      	beq.n	80018d8 <_vfiprintf_r+0xc0>
 80018c0:	465b      	mov	r3, fp
 80018c2:	4622      	mov	r2, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	4630      	mov	r0, r6
 80018c8:	f7ff ff93 	bl	80017f2 <__sfputs_r>
 80018cc:	3001      	adds	r0, #1
 80018ce:	f000 80aa 	beq.w	8001a26 <_vfiprintf_r+0x20e>
 80018d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018d4:	445a      	add	r2, fp
 80018d6:	9209      	str	r2, [sp, #36]	; 0x24
 80018d8:	f89a 3000 	ldrb.w	r3, [sl]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a2 	beq.w	8001a26 <_vfiprintf_r+0x20e>
 80018e2:	2300      	movs	r3, #0
 80018e4:	f04f 32ff 	mov.w	r2, #4294967295
 80018e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018ec:	f10a 0a01 	add.w	sl, sl, #1
 80018f0:	9304      	str	r3, [sp, #16]
 80018f2:	9307      	str	r3, [sp, #28]
 80018f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018f8:	931a      	str	r3, [sp, #104]	; 0x68
 80018fa:	4654      	mov	r4, sl
 80018fc:	2205      	movs	r2, #5
 80018fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001902:	4858      	ldr	r0, [pc, #352]	; (8001a64 <_vfiprintf_r+0x24c>)
 8001904:	f7fe fc6c 	bl	80001e0 <memchr>
 8001908:	9a04      	ldr	r2, [sp, #16]
 800190a:	b9d8      	cbnz	r0, 8001944 <_vfiprintf_r+0x12c>
 800190c:	06d1      	lsls	r1, r2, #27
 800190e:	bf44      	itt	mi
 8001910:	2320      	movmi	r3, #32
 8001912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001916:	0713      	lsls	r3, r2, #28
 8001918:	bf44      	itt	mi
 800191a:	232b      	movmi	r3, #43	; 0x2b
 800191c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001920:	f89a 3000 	ldrb.w	r3, [sl]
 8001924:	2b2a      	cmp	r3, #42	; 0x2a
 8001926:	d015      	beq.n	8001954 <_vfiprintf_r+0x13c>
 8001928:	9a07      	ldr	r2, [sp, #28]
 800192a:	4654      	mov	r4, sl
 800192c:	2000      	movs	r0, #0
 800192e:	f04f 0c0a 	mov.w	ip, #10
 8001932:	4621      	mov	r1, r4
 8001934:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001938:	3b30      	subs	r3, #48	; 0x30
 800193a:	2b09      	cmp	r3, #9
 800193c:	d94e      	bls.n	80019dc <_vfiprintf_r+0x1c4>
 800193e:	b1b0      	cbz	r0, 800196e <_vfiprintf_r+0x156>
 8001940:	9207      	str	r2, [sp, #28]
 8001942:	e014      	b.n	800196e <_vfiprintf_r+0x156>
 8001944:	eba0 0308 	sub.w	r3, r0, r8
 8001948:	fa09 f303 	lsl.w	r3, r9, r3
 800194c:	4313      	orrs	r3, r2
 800194e:	9304      	str	r3, [sp, #16]
 8001950:	46a2      	mov	sl, r4
 8001952:	e7d2      	b.n	80018fa <_vfiprintf_r+0xe2>
 8001954:	9b03      	ldr	r3, [sp, #12]
 8001956:	1d19      	adds	r1, r3, #4
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	9103      	str	r1, [sp, #12]
 800195c:	2b00      	cmp	r3, #0
 800195e:	bfbb      	ittet	lt
 8001960:	425b      	neglt	r3, r3
 8001962:	f042 0202 	orrlt.w	r2, r2, #2
 8001966:	9307      	strge	r3, [sp, #28]
 8001968:	9307      	strlt	r3, [sp, #28]
 800196a:	bfb8      	it	lt
 800196c:	9204      	strlt	r2, [sp, #16]
 800196e:	7823      	ldrb	r3, [r4, #0]
 8001970:	2b2e      	cmp	r3, #46	; 0x2e
 8001972:	d10c      	bne.n	800198e <_vfiprintf_r+0x176>
 8001974:	7863      	ldrb	r3, [r4, #1]
 8001976:	2b2a      	cmp	r3, #42	; 0x2a
 8001978:	d135      	bne.n	80019e6 <_vfiprintf_r+0x1ce>
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	1d1a      	adds	r2, r3, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	9203      	str	r2, [sp, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	bfb8      	it	lt
 8001986:	f04f 33ff 	movlt.w	r3, #4294967295
 800198a:	3402      	adds	r4, #2
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001a68 <_vfiprintf_r+0x250>
 8001992:	7821      	ldrb	r1, [r4, #0]
 8001994:	2203      	movs	r2, #3
 8001996:	4650      	mov	r0, sl
 8001998:	f7fe fc22 	bl	80001e0 <memchr>
 800199c:	b140      	cbz	r0, 80019b0 <_vfiprintf_r+0x198>
 800199e:	2340      	movs	r3, #64	; 0x40
 80019a0:	eba0 000a 	sub.w	r0, r0, sl
 80019a4:	fa03 f000 	lsl.w	r0, r3, r0
 80019a8:	9b04      	ldr	r3, [sp, #16]
 80019aa:	4303      	orrs	r3, r0
 80019ac:	3401      	adds	r4, #1
 80019ae:	9304      	str	r3, [sp, #16]
 80019b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019b4:	482d      	ldr	r0, [pc, #180]	; (8001a6c <_vfiprintf_r+0x254>)
 80019b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019ba:	2206      	movs	r2, #6
 80019bc:	f7fe fc10 	bl	80001e0 <memchr>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d03f      	beq.n	8001a44 <_vfiprintf_r+0x22c>
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <_vfiprintf_r+0x258>)
 80019c6:	bb1b      	cbnz	r3, 8001a10 <_vfiprintf_r+0x1f8>
 80019c8:	9b03      	ldr	r3, [sp, #12]
 80019ca:	3307      	adds	r3, #7
 80019cc:	f023 0307 	bic.w	r3, r3, #7
 80019d0:	3308      	adds	r3, #8
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019d6:	443b      	add	r3, r7
 80019d8:	9309      	str	r3, [sp, #36]	; 0x24
 80019da:	e767      	b.n	80018ac <_vfiprintf_r+0x94>
 80019dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80019e0:	460c      	mov	r4, r1
 80019e2:	2001      	movs	r0, #1
 80019e4:	e7a5      	b.n	8001932 <_vfiprintf_r+0x11a>
 80019e6:	2300      	movs	r3, #0
 80019e8:	3401      	adds	r4, #1
 80019ea:	9305      	str	r3, [sp, #20]
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 0c0a 	mov.w	ip, #10
 80019f2:	4620      	mov	r0, r4
 80019f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019f8:	3a30      	subs	r2, #48	; 0x30
 80019fa:	2a09      	cmp	r2, #9
 80019fc:	d903      	bls.n	8001a06 <_vfiprintf_r+0x1ee>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0c5      	beq.n	800198e <_vfiprintf_r+0x176>
 8001a02:	9105      	str	r1, [sp, #20]
 8001a04:	e7c3      	b.n	800198e <_vfiprintf_r+0x176>
 8001a06:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e7f0      	b.n	80019f2 <_vfiprintf_r+0x1da>
 8001a10:	ab03      	add	r3, sp, #12
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	462a      	mov	r2, r5
 8001a16:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <_vfiprintf_r+0x25c>)
 8001a18:	a904      	add	r1, sp, #16
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f3af 8000 	nop.w
 8001a20:	4607      	mov	r7, r0
 8001a22:	1c78      	adds	r0, r7, #1
 8001a24:	d1d6      	bne.n	80019d4 <_vfiprintf_r+0x1bc>
 8001a26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001a28:	07d9      	lsls	r1, r3, #31
 8001a2a:	d405      	bmi.n	8001a38 <_vfiprintf_r+0x220>
 8001a2c:	89ab      	ldrh	r3, [r5, #12]
 8001a2e:	059a      	lsls	r2, r3, #22
 8001a30:	d402      	bmi.n	8001a38 <_vfiprintf_r+0x220>
 8001a32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001a34:	f000 fc41 	bl	80022ba <__retarget_lock_release_recursive>
 8001a38:	89ab      	ldrh	r3, [r5, #12]
 8001a3a:	065b      	lsls	r3, r3, #25
 8001a3c:	f53f af12 	bmi.w	8001864 <_vfiprintf_r+0x4c>
 8001a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a42:	e711      	b.n	8001868 <_vfiprintf_r+0x50>
 8001a44:	ab03      	add	r3, sp, #12
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	462a      	mov	r2, r5
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <_vfiprintf_r+0x25c>)
 8001a4c:	a904      	add	r1, sp, #16
 8001a4e:	4630      	mov	r0, r6
 8001a50:	f000 f880 	bl	8001b54 <_printf_i>
 8001a54:	e7e4      	b.n	8001a20 <_vfiprintf_r+0x208>
 8001a56:	bf00      	nop
 8001a58:	080026a0 	.word	0x080026a0
 8001a5c:	080026c0 	.word	0x080026c0
 8001a60:	08002680 	.word	0x08002680
 8001a64:	0800264a 	.word	0x0800264a
 8001a68:	08002650 	.word	0x08002650
 8001a6c:	08002654 	.word	0x08002654
 8001a70:	00000000 	.word	0x00000000
 8001a74:	080017f3 	.word	0x080017f3

08001a78 <_printf_common>:
 8001a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a7c:	4616      	mov	r6, r2
 8001a7e:	4699      	mov	r9, r3
 8001a80:	688a      	ldr	r2, [r1, #8]
 8001a82:	690b      	ldr	r3, [r1, #16]
 8001a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bfb8      	it	lt
 8001a8c:	4613      	movlt	r3, r2
 8001a8e:	6033      	str	r3, [r6, #0]
 8001a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a94:	4607      	mov	r7, r0
 8001a96:	460c      	mov	r4, r1
 8001a98:	b10a      	cbz	r2, 8001a9e <_printf_common+0x26>
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	6033      	str	r3, [r6, #0]
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	0699      	lsls	r1, r3, #26
 8001aa2:	bf42      	ittt	mi
 8001aa4:	6833      	ldrmi	r3, [r6, #0]
 8001aa6:	3302      	addmi	r3, #2
 8001aa8:	6033      	strmi	r3, [r6, #0]
 8001aaa:	6825      	ldr	r5, [r4, #0]
 8001aac:	f015 0506 	ands.w	r5, r5, #6
 8001ab0:	d106      	bne.n	8001ac0 <_printf_common+0x48>
 8001ab2:	f104 0a19 	add.w	sl, r4, #25
 8001ab6:	68e3      	ldr	r3, [r4, #12]
 8001ab8:	6832      	ldr	r2, [r6, #0]
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	42ab      	cmp	r3, r5
 8001abe:	dc26      	bgt.n	8001b0e <_printf_common+0x96>
 8001ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ac4:	1e13      	subs	r3, r2, #0
 8001ac6:	6822      	ldr	r2, [r4, #0]
 8001ac8:	bf18      	it	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	0692      	lsls	r2, r2, #26
 8001ace:	d42b      	bmi.n	8001b28 <_printf_common+0xb0>
 8001ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	47c0      	blx	r8
 8001ada:	3001      	adds	r0, #1
 8001adc:	d01e      	beq.n	8001b1c <_printf_common+0xa4>
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	68e5      	ldr	r5, [r4, #12]
 8001ae2:	6832      	ldr	r2, [r6, #0]
 8001ae4:	f003 0306 	and.w	r3, r3, #6
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	bf08      	it	eq
 8001aec:	1aad      	subeq	r5, r5, r2
 8001aee:	68a3      	ldr	r3, [r4, #8]
 8001af0:	6922      	ldr	r2, [r4, #16]
 8001af2:	bf0c      	ite	eq
 8001af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001af8:	2500      	movne	r5, #0
 8001afa:	4293      	cmp	r3, r2
 8001afc:	bfc4      	itt	gt
 8001afe:	1a9b      	subgt	r3, r3, r2
 8001b00:	18ed      	addgt	r5, r5, r3
 8001b02:	2600      	movs	r6, #0
 8001b04:	341a      	adds	r4, #26
 8001b06:	42b5      	cmp	r5, r6
 8001b08:	d11a      	bne.n	8001b40 <_printf_common+0xc8>
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e008      	b.n	8001b20 <_printf_common+0xa8>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	4652      	mov	r2, sl
 8001b12:	4649      	mov	r1, r9
 8001b14:	4638      	mov	r0, r7
 8001b16:	47c0      	blx	r8
 8001b18:	3001      	adds	r0, #1
 8001b1a:	d103      	bne.n	8001b24 <_printf_common+0xac>
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b24:	3501      	adds	r5, #1
 8001b26:	e7c6      	b.n	8001ab6 <_printf_common+0x3e>
 8001b28:	18e1      	adds	r1, r4, r3
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	2030      	movs	r0, #48	; 0x30
 8001b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b32:	4422      	add	r2, r4
 8001b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	e7c7      	b.n	8001ad0 <_printf_common+0x58>
 8001b40:	2301      	movs	r3, #1
 8001b42:	4622      	mov	r2, r4
 8001b44:	4649      	mov	r1, r9
 8001b46:	4638      	mov	r0, r7
 8001b48:	47c0      	blx	r8
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	d0e6      	beq.n	8001b1c <_printf_common+0xa4>
 8001b4e:	3601      	adds	r6, #1
 8001b50:	e7d9      	b.n	8001b06 <_printf_common+0x8e>
	...

08001b54 <_printf_i>:
 8001b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b58:	7e0f      	ldrb	r7, [r1, #24]
 8001b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b5c:	2f78      	cmp	r7, #120	; 0x78
 8001b5e:	4691      	mov	r9, r2
 8001b60:	4680      	mov	r8, r0
 8001b62:	460c      	mov	r4, r1
 8001b64:	469a      	mov	sl, r3
 8001b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b6a:	d807      	bhi.n	8001b7c <_printf_i+0x28>
 8001b6c:	2f62      	cmp	r7, #98	; 0x62
 8001b6e:	d80a      	bhi.n	8001b86 <_printf_i+0x32>
 8001b70:	2f00      	cmp	r7, #0
 8001b72:	f000 80d8 	beq.w	8001d26 <_printf_i+0x1d2>
 8001b76:	2f58      	cmp	r7, #88	; 0x58
 8001b78:	f000 80a3 	beq.w	8001cc2 <_printf_i+0x16e>
 8001b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b84:	e03a      	b.n	8001bfc <_printf_i+0xa8>
 8001b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b8a:	2b15      	cmp	r3, #21
 8001b8c:	d8f6      	bhi.n	8001b7c <_printf_i+0x28>
 8001b8e:	a101      	add	r1, pc, #4	; (adr r1, 8001b94 <_printf_i+0x40>)
 8001b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b94:	08001bed 	.word	0x08001bed
 8001b98:	08001c01 	.word	0x08001c01
 8001b9c:	08001b7d 	.word	0x08001b7d
 8001ba0:	08001b7d 	.word	0x08001b7d
 8001ba4:	08001b7d 	.word	0x08001b7d
 8001ba8:	08001b7d 	.word	0x08001b7d
 8001bac:	08001c01 	.word	0x08001c01
 8001bb0:	08001b7d 	.word	0x08001b7d
 8001bb4:	08001b7d 	.word	0x08001b7d
 8001bb8:	08001b7d 	.word	0x08001b7d
 8001bbc:	08001b7d 	.word	0x08001b7d
 8001bc0:	08001d0d 	.word	0x08001d0d
 8001bc4:	08001c31 	.word	0x08001c31
 8001bc8:	08001cef 	.word	0x08001cef
 8001bcc:	08001b7d 	.word	0x08001b7d
 8001bd0:	08001b7d 	.word	0x08001b7d
 8001bd4:	08001d2f 	.word	0x08001d2f
 8001bd8:	08001b7d 	.word	0x08001b7d
 8001bdc:	08001c31 	.word	0x08001c31
 8001be0:	08001b7d 	.word	0x08001b7d
 8001be4:	08001b7d 	.word	0x08001b7d
 8001be8:	08001cf7 	.word	0x08001cf7
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	1d1a      	adds	r2, r3, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	602a      	str	r2, [r5, #0]
 8001bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0a3      	b.n	8001d48 <_printf_i+0x1f4>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	6829      	ldr	r1, [r5, #0]
 8001c04:	0606      	lsls	r6, r0, #24
 8001c06:	f101 0304 	add.w	r3, r1, #4
 8001c0a:	d50a      	bpl.n	8001c22 <_printf_i+0xce>
 8001c0c:	680e      	ldr	r6, [r1, #0]
 8001c0e:	602b      	str	r3, [r5, #0]
 8001c10:	2e00      	cmp	r6, #0
 8001c12:	da03      	bge.n	8001c1c <_printf_i+0xc8>
 8001c14:	232d      	movs	r3, #45	; 0x2d
 8001c16:	4276      	negs	r6, r6
 8001c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c1c:	485e      	ldr	r0, [pc, #376]	; (8001d98 <_printf_i+0x244>)
 8001c1e:	230a      	movs	r3, #10
 8001c20:	e019      	b.n	8001c56 <_printf_i+0x102>
 8001c22:	680e      	ldr	r6, [r1, #0]
 8001c24:	602b      	str	r3, [r5, #0]
 8001c26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c2a:	bf18      	it	ne
 8001c2c:	b236      	sxthne	r6, r6
 8001c2e:	e7ef      	b.n	8001c10 <_printf_i+0xbc>
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	6820      	ldr	r0, [r4, #0]
 8001c34:	1d19      	adds	r1, r3, #4
 8001c36:	6029      	str	r1, [r5, #0]
 8001c38:	0601      	lsls	r1, r0, #24
 8001c3a:	d501      	bpl.n	8001c40 <_printf_i+0xec>
 8001c3c:	681e      	ldr	r6, [r3, #0]
 8001c3e:	e002      	b.n	8001c46 <_printf_i+0xf2>
 8001c40:	0646      	lsls	r6, r0, #25
 8001c42:	d5fb      	bpl.n	8001c3c <_printf_i+0xe8>
 8001c44:	881e      	ldrh	r6, [r3, #0]
 8001c46:	4854      	ldr	r0, [pc, #336]	; (8001d98 <_printf_i+0x244>)
 8001c48:	2f6f      	cmp	r7, #111	; 0x6f
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2308      	moveq	r3, #8
 8001c4e:	230a      	movne	r3, #10
 8001c50:	2100      	movs	r1, #0
 8001c52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c56:	6865      	ldr	r5, [r4, #4]
 8001c58:	60a5      	str	r5, [r4, #8]
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	bfa2      	ittt	ge
 8001c5e:	6821      	ldrge	r1, [r4, #0]
 8001c60:	f021 0104 	bicge.w	r1, r1, #4
 8001c64:	6021      	strge	r1, [r4, #0]
 8001c66:	b90e      	cbnz	r6, 8001c6c <_printf_i+0x118>
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	d04d      	beq.n	8001d08 <_printf_i+0x1b4>
 8001c6c:	4615      	mov	r5, r2
 8001c6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c72:	fb03 6711 	mls	r7, r3, r1, r6
 8001c76:	5dc7      	ldrb	r7, [r0, r7]
 8001c78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c7c:	4637      	mov	r7, r6
 8001c7e:	42bb      	cmp	r3, r7
 8001c80:	460e      	mov	r6, r1
 8001c82:	d9f4      	bls.n	8001c6e <_printf_i+0x11a>
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d10b      	bne.n	8001ca0 <_printf_i+0x14c>
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	07de      	lsls	r6, r3, #31
 8001c8c:	d508      	bpl.n	8001ca0 <_printf_i+0x14c>
 8001c8e:	6923      	ldr	r3, [r4, #16]
 8001c90:	6861      	ldr	r1, [r4, #4]
 8001c92:	4299      	cmp	r1, r3
 8001c94:	bfde      	ittt	le
 8001c96:	2330      	movle	r3, #48	; 0x30
 8001c98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ca0:	1b52      	subs	r2, r2, r5
 8001ca2:	6122      	str	r2, [r4, #16]
 8001ca4:	f8cd a000 	str.w	sl, [sp]
 8001ca8:	464b      	mov	r3, r9
 8001caa:	aa03      	add	r2, sp, #12
 8001cac:	4621      	mov	r1, r4
 8001cae:	4640      	mov	r0, r8
 8001cb0:	f7ff fee2 	bl	8001a78 <_printf_common>
 8001cb4:	3001      	adds	r0, #1
 8001cb6:	d14c      	bne.n	8001d52 <_printf_i+0x1fe>
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbc:	b004      	add	sp, #16
 8001cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cc2:	4835      	ldr	r0, [pc, #212]	; (8001d98 <_printf_i+0x244>)
 8001cc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cc8:	6829      	ldr	r1, [r5, #0]
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f851 6b04 	ldr.w	r6, [r1], #4
 8001cd0:	6029      	str	r1, [r5, #0]
 8001cd2:	061d      	lsls	r5, r3, #24
 8001cd4:	d514      	bpl.n	8001d00 <_printf_i+0x1ac>
 8001cd6:	07df      	lsls	r7, r3, #31
 8001cd8:	bf44      	itt	mi
 8001cda:	f043 0320 	orrmi.w	r3, r3, #32
 8001cde:	6023      	strmi	r3, [r4, #0]
 8001ce0:	b91e      	cbnz	r6, 8001cea <_printf_i+0x196>
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	f023 0320 	bic.w	r3, r3, #32
 8001ce8:	6023      	str	r3, [r4, #0]
 8001cea:	2310      	movs	r3, #16
 8001cec:	e7b0      	b.n	8001c50 <_printf_i+0xfc>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f043 0320 	orr.w	r3, r3, #32
 8001cf4:	6023      	str	r3, [r4, #0]
 8001cf6:	2378      	movs	r3, #120	; 0x78
 8001cf8:	4828      	ldr	r0, [pc, #160]	; (8001d9c <_printf_i+0x248>)
 8001cfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cfe:	e7e3      	b.n	8001cc8 <_printf_i+0x174>
 8001d00:	0659      	lsls	r1, r3, #25
 8001d02:	bf48      	it	mi
 8001d04:	b2b6      	uxthmi	r6, r6
 8001d06:	e7e6      	b.n	8001cd6 <_printf_i+0x182>
 8001d08:	4615      	mov	r5, r2
 8001d0a:	e7bb      	b.n	8001c84 <_printf_i+0x130>
 8001d0c:	682b      	ldr	r3, [r5, #0]
 8001d0e:	6826      	ldr	r6, [r4, #0]
 8001d10:	6961      	ldr	r1, [r4, #20]
 8001d12:	1d18      	adds	r0, r3, #4
 8001d14:	6028      	str	r0, [r5, #0]
 8001d16:	0635      	lsls	r5, r6, #24
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	d501      	bpl.n	8001d20 <_printf_i+0x1cc>
 8001d1c:	6019      	str	r1, [r3, #0]
 8001d1e:	e002      	b.n	8001d26 <_printf_i+0x1d2>
 8001d20:	0670      	lsls	r0, r6, #25
 8001d22:	d5fb      	bpl.n	8001d1c <_printf_i+0x1c8>
 8001d24:	8019      	strh	r1, [r3, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	6123      	str	r3, [r4, #16]
 8001d2a:	4615      	mov	r5, r2
 8001d2c:	e7ba      	b.n	8001ca4 <_printf_i+0x150>
 8001d2e:	682b      	ldr	r3, [r5, #0]
 8001d30:	1d1a      	adds	r2, r3, #4
 8001d32:	602a      	str	r2, [r5, #0]
 8001d34:	681d      	ldr	r5, [r3, #0]
 8001d36:	6862      	ldr	r2, [r4, #4]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f7fe fa50 	bl	80001e0 <memchr>
 8001d40:	b108      	cbz	r0, 8001d46 <_printf_i+0x1f2>
 8001d42:	1b40      	subs	r0, r0, r5
 8001d44:	6060      	str	r0, [r4, #4]
 8001d46:	6863      	ldr	r3, [r4, #4]
 8001d48:	6123      	str	r3, [r4, #16]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d50:	e7a8      	b.n	8001ca4 <_printf_i+0x150>
 8001d52:	6923      	ldr	r3, [r4, #16]
 8001d54:	462a      	mov	r2, r5
 8001d56:	4649      	mov	r1, r9
 8001d58:	4640      	mov	r0, r8
 8001d5a:	47d0      	blx	sl
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d0ab      	beq.n	8001cb8 <_printf_i+0x164>
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	079b      	lsls	r3, r3, #30
 8001d64:	d413      	bmi.n	8001d8e <_printf_i+0x23a>
 8001d66:	68e0      	ldr	r0, [r4, #12]
 8001d68:	9b03      	ldr	r3, [sp, #12]
 8001d6a:	4298      	cmp	r0, r3
 8001d6c:	bfb8      	it	lt
 8001d6e:	4618      	movlt	r0, r3
 8001d70:	e7a4      	b.n	8001cbc <_printf_i+0x168>
 8001d72:	2301      	movs	r3, #1
 8001d74:	4632      	mov	r2, r6
 8001d76:	4649      	mov	r1, r9
 8001d78:	4640      	mov	r0, r8
 8001d7a:	47d0      	blx	sl
 8001d7c:	3001      	adds	r0, #1
 8001d7e:	d09b      	beq.n	8001cb8 <_printf_i+0x164>
 8001d80:	3501      	adds	r5, #1
 8001d82:	68e3      	ldr	r3, [r4, #12]
 8001d84:	9903      	ldr	r1, [sp, #12]
 8001d86:	1a5b      	subs	r3, r3, r1
 8001d88:	42ab      	cmp	r3, r5
 8001d8a:	dcf2      	bgt.n	8001d72 <_printf_i+0x21e>
 8001d8c:	e7eb      	b.n	8001d66 <_printf_i+0x212>
 8001d8e:	2500      	movs	r5, #0
 8001d90:	f104 0619 	add.w	r6, r4, #25
 8001d94:	e7f5      	b.n	8001d82 <_printf_i+0x22e>
 8001d96:	bf00      	nop
 8001d98:	0800265b 	.word	0x0800265b
 8001d9c:	0800266c 	.word	0x0800266c

08001da0 <_sbrk_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4d06      	ldr	r5, [pc, #24]	; (8001dbc <_sbrk_r+0x1c>)
 8001da4:	2300      	movs	r3, #0
 8001da6:	4604      	mov	r4, r0
 8001da8:	4608      	mov	r0, r1
 8001daa:	602b      	str	r3, [r5, #0]
 8001dac:	f7ff faf8 	bl	80013a0 <_sbrk>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_sbrk_r+0x1a>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_sbrk_r+0x1a>
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	200000cc 	.word	0x200000cc

08001dc0 <__swbuf_r>:
 8001dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc2:	460e      	mov	r6, r1
 8001dc4:	4614      	mov	r4, r2
 8001dc6:	4605      	mov	r5, r0
 8001dc8:	b118      	cbz	r0, 8001dd2 <__swbuf_r+0x12>
 8001dca:	6983      	ldr	r3, [r0, #24]
 8001dcc:	b90b      	cbnz	r3, 8001dd2 <__swbuf_r+0x12>
 8001dce:	f000 f9d5 	bl	800217c <__sinit>
 8001dd2:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <__swbuf_r+0x98>)
 8001dd4:	429c      	cmp	r4, r3
 8001dd6:	d12b      	bne.n	8001e30 <__swbuf_r+0x70>
 8001dd8:	686c      	ldr	r4, [r5, #4]
 8001dda:	69a3      	ldr	r3, [r4, #24]
 8001ddc:	60a3      	str	r3, [r4, #8]
 8001dde:	89a3      	ldrh	r3, [r4, #12]
 8001de0:	071a      	lsls	r2, r3, #28
 8001de2:	d52f      	bpl.n	8001e44 <__swbuf_r+0x84>
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	b36b      	cbz	r3, 8001e44 <__swbuf_r+0x84>
 8001de8:	6923      	ldr	r3, [r4, #16]
 8001dea:	6820      	ldr	r0, [r4, #0]
 8001dec:	1ac0      	subs	r0, r0, r3
 8001dee:	6963      	ldr	r3, [r4, #20]
 8001df0:	b2f6      	uxtb	r6, r6
 8001df2:	4283      	cmp	r3, r0
 8001df4:	4637      	mov	r7, r6
 8001df6:	dc04      	bgt.n	8001e02 <__swbuf_r+0x42>
 8001df8:	4621      	mov	r1, r4
 8001dfa:	4628      	mov	r0, r5
 8001dfc:	f000 f92a 	bl	8002054 <_fflush_r>
 8001e00:	bb30      	cbnz	r0, 8001e50 <__swbuf_r+0x90>
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60a3      	str	r3, [r4, #8]
 8001e08:	6823      	ldr	r3, [r4, #0]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	6022      	str	r2, [r4, #0]
 8001e0e:	701e      	strb	r6, [r3, #0]
 8001e10:	6963      	ldr	r3, [r4, #20]
 8001e12:	3001      	adds	r0, #1
 8001e14:	4283      	cmp	r3, r0
 8001e16:	d004      	beq.n	8001e22 <__swbuf_r+0x62>
 8001e18:	89a3      	ldrh	r3, [r4, #12]
 8001e1a:	07db      	lsls	r3, r3, #31
 8001e1c:	d506      	bpl.n	8001e2c <__swbuf_r+0x6c>
 8001e1e:	2e0a      	cmp	r6, #10
 8001e20:	d104      	bne.n	8001e2c <__swbuf_r+0x6c>
 8001e22:	4621      	mov	r1, r4
 8001e24:	4628      	mov	r0, r5
 8001e26:	f000 f915 	bl	8002054 <_fflush_r>
 8001e2a:	b988      	cbnz	r0, 8001e50 <__swbuf_r+0x90>
 8001e2c:	4638      	mov	r0, r7
 8001e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <__swbuf_r+0x9c>)
 8001e32:	429c      	cmp	r4, r3
 8001e34:	d101      	bne.n	8001e3a <__swbuf_r+0x7a>
 8001e36:	68ac      	ldr	r4, [r5, #8]
 8001e38:	e7cf      	b.n	8001dda <__swbuf_r+0x1a>
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <__swbuf_r+0xa0>)
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	bf08      	it	eq
 8001e40:	68ec      	ldreq	r4, [r5, #12]
 8001e42:	e7ca      	b.n	8001dda <__swbuf_r+0x1a>
 8001e44:	4621      	mov	r1, r4
 8001e46:	4628      	mov	r0, r5
 8001e48:	f000 f80c 	bl	8001e64 <__swsetup_r>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d0cb      	beq.n	8001de8 <__swbuf_r+0x28>
 8001e50:	f04f 37ff 	mov.w	r7, #4294967295
 8001e54:	e7ea      	b.n	8001e2c <__swbuf_r+0x6c>
 8001e56:	bf00      	nop
 8001e58:	080026a0 	.word	0x080026a0
 8001e5c:	080026c0 	.word	0x080026c0
 8001e60:	08002680 	.word	0x08002680

08001e64 <__swsetup_r>:
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <__swsetup_r+0xcc>)
 8001e66:	b570      	push	{r4, r5, r6, lr}
 8001e68:	681d      	ldr	r5, [r3, #0]
 8001e6a:	4606      	mov	r6, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	b125      	cbz	r5, 8001e7a <__swsetup_r+0x16>
 8001e70:	69ab      	ldr	r3, [r5, #24]
 8001e72:	b913      	cbnz	r3, 8001e7a <__swsetup_r+0x16>
 8001e74:	4628      	mov	r0, r5
 8001e76:	f000 f981 	bl	800217c <__sinit>
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <__swsetup_r+0xd0>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	d10f      	bne.n	8001ea0 <__swsetup_r+0x3c>
 8001e80:	686c      	ldr	r4, [r5, #4]
 8001e82:	89a3      	ldrh	r3, [r4, #12]
 8001e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e88:	0719      	lsls	r1, r3, #28
 8001e8a:	d42c      	bmi.n	8001ee6 <__swsetup_r+0x82>
 8001e8c:	06dd      	lsls	r5, r3, #27
 8001e8e:	d411      	bmi.n	8001eb4 <__swsetup_r+0x50>
 8001e90:	2309      	movs	r3, #9
 8001e92:	6033      	str	r3, [r6, #0]
 8001e94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e98:	81a3      	strh	r3, [r4, #12]
 8001e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9e:	e03e      	b.n	8001f1e <__swsetup_r+0xba>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <__swsetup_r+0xd4>)
 8001ea2:	429c      	cmp	r4, r3
 8001ea4:	d101      	bne.n	8001eaa <__swsetup_r+0x46>
 8001ea6:	68ac      	ldr	r4, [r5, #8]
 8001ea8:	e7eb      	b.n	8001e82 <__swsetup_r+0x1e>
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <__swsetup_r+0xd8>)
 8001eac:	429c      	cmp	r4, r3
 8001eae:	bf08      	it	eq
 8001eb0:	68ec      	ldreq	r4, [r5, #12]
 8001eb2:	e7e6      	b.n	8001e82 <__swsetup_r+0x1e>
 8001eb4:	0758      	lsls	r0, r3, #29
 8001eb6:	d512      	bpl.n	8001ede <__swsetup_r+0x7a>
 8001eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eba:	b141      	cbz	r1, 8001ece <__swsetup_r+0x6a>
 8001ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ec0:	4299      	cmp	r1, r3
 8001ec2:	d002      	beq.n	8001eca <__swsetup_r+0x66>
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f7ff fba1 	bl	800160c <_free_r>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	6363      	str	r3, [r4, #52]	; 0x34
 8001ece:	89a3      	ldrh	r3, [r4, #12]
 8001ed0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ed4:	81a3      	strh	r3, [r4, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	6063      	str	r3, [r4, #4]
 8001eda:	6923      	ldr	r3, [r4, #16]
 8001edc:	6023      	str	r3, [r4, #0]
 8001ede:	89a3      	ldrh	r3, [r4, #12]
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	81a3      	strh	r3, [r4, #12]
 8001ee6:	6923      	ldr	r3, [r4, #16]
 8001ee8:	b94b      	cbnz	r3, 8001efe <__swsetup_r+0x9a>
 8001eea:	89a3      	ldrh	r3, [r4, #12]
 8001eec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef4:	d003      	beq.n	8001efe <__swsetup_r+0x9a>
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f000 fa05 	bl	8002308 <__smakebuf_r>
 8001efe:	89a0      	ldrh	r0, [r4, #12]
 8001f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001f04:	f010 0301 	ands.w	r3, r0, #1
 8001f08:	d00a      	beq.n	8001f20 <__swsetup_r+0xbc>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60a3      	str	r3, [r4, #8]
 8001f0e:	6963      	ldr	r3, [r4, #20]
 8001f10:	425b      	negs	r3, r3
 8001f12:	61a3      	str	r3, [r4, #24]
 8001f14:	6923      	ldr	r3, [r4, #16]
 8001f16:	b943      	cbnz	r3, 8001f2a <__swsetup_r+0xc6>
 8001f18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f1c:	d1ba      	bne.n	8001e94 <__swsetup_r+0x30>
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	0781      	lsls	r1, r0, #30
 8001f22:	bf58      	it	pl
 8001f24:	6963      	ldrpl	r3, [r4, #20]
 8001f26:	60a3      	str	r3, [r4, #8]
 8001f28:	e7f4      	b.n	8001f14 <__swsetup_r+0xb0>
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e7f7      	b.n	8001f1e <__swsetup_r+0xba>
 8001f2e:	bf00      	nop
 8001f30:	20000000 	.word	0x20000000
 8001f34:	080026a0 	.word	0x080026a0
 8001f38:	080026c0 	.word	0x080026c0
 8001f3c:	08002680 	.word	0x08002680

08001f40 <abort>:
 8001f40:	b508      	push	{r3, lr}
 8001f42:	2006      	movs	r0, #6
 8001f44:	f000 fa54 	bl	80023f0 <raise>
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff f9b6 	bl	80012ba <_exit>
	...

08001f50 <__sflush_r>:
 8001f50:	898a      	ldrh	r2, [r1, #12]
 8001f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f54:	4605      	mov	r5, r0
 8001f56:	0710      	lsls	r0, r2, #28
 8001f58:	460c      	mov	r4, r1
 8001f5a:	d457      	bmi.n	800200c <__sflush_r+0xbc>
 8001f5c:	684b      	ldr	r3, [r1, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	dc04      	bgt.n	8001f6c <__sflush_r+0x1c>
 8001f62:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	dc01      	bgt.n	8001f6c <__sflush_r+0x1c>
 8001f68:	2000      	movs	r0, #0
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f6e:	2e00      	cmp	r6, #0
 8001f70:	d0fa      	beq.n	8001f68 <__sflush_r+0x18>
 8001f72:	2300      	movs	r3, #0
 8001f74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f78:	682f      	ldr	r7, [r5, #0]
 8001f7a:	602b      	str	r3, [r5, #0]
 8001f7c:	d032      	beq.n	8001fe4 <__sflush_r+0x94>
 8001f7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	075a      	lsls	r2, r3, #29
 8001f84:	d505      	bpl.n	8001f92 <__sflush_r+0x42>
 8001f86:	6863      	ldr	r3, [r4, #4]
 8001f88:	1ac0      	subs	r0, r0, r3
 8001f8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f8c:	b10b      	cbz	r3, 8001f92 <__sflush_r+0x42>
 8001f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f90:	1ac0      	subs	r0, r0, r3
 8001f92:	2300      	movs	r3, #0
 8001f94:	4602      	mov	r2, r0
 8001f96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f98:	6a21      	ldr	r1, [r4, #32]
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	47b0      	blx	r6
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	d106      	bne.n	8001fb2 <__sflush_r+0x62>
 8001fa4:	6829      	ldr	r1, [r5, #0]
 8001fa6:	291d      	cmp	r1, #29
 8001fa8:	d82c      	bhi.n	8002004 <__sflush_r+0xb4>
 8001faa:	4a29      	ldr	r2, [pc, #164]	; (8002050 <__sflush_r+0x100>)
 8001fac:	40ca      	lsrs	r2, r1
 8001fae:	07d6      	lsls	r6, r2, #31
 8001fb0:	d528      	bpl.n	8002004 <__sflush_r+0xb4>
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	6062      	str	r2, [r4, #4]
 8001fb6:	04d9      	lsls	r1, r3, #19
 8001fb8:	6922      	ldr	r2, [r4, #16]
 8001fba:	6022      	str	r2, [r4, #0]
 8001fbc:	d504      	bpl.n	8001fc8 <__sflush_r+0x78>
 8001fbe:	1c42      	adds	r2, r0, #1
 8001fc0:	d101      	bne.n	8001fc6 <__sflush_r+0x76>
 8001fc2:	682b      	ldr	r3, [r5, #0]
 8001fc4:	b903      	cbnz	r3, 8001fc8 <__sflush_r+0x78>
 8001fc6:	6560      	str	r0, [r4, #84]	; 0x54
 8001fc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001fca:	602f      	str	r7, [r5, #0]
 8001fcc:	2900      	cmp	r1, #0
 8001fce:	d0cb      	beq.n	8001f68 <__sflush_r+0x18>
 8001fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fd4:	4299      	cmp	r1, r3
 8001fd6:	d002      	beq.n	8001fde <__sflush_r+0x8e>
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7ff fb17 	bl	800160c <_free_r>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	6360      	str	r0, [r4, #52]	; 0x34
 8001fe2:	e7c2      	b.n	8001f6a <__sflush_r+0x1a>
 8001fe4:	6a21      	ldr	r1, [r4, #32]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	4628      	mov	r0, r5
 8001fea:	47b0      	blx	r6
 8001fec:	1c41      	adds	r1, r0, #1
 8001fee:	d1c7      	bne.n	8001f80 <__sflush_r+0x30>
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0c4      	beq.n	8001f80 <__sflush_r+0x30>
 8001ff6:	2b1d      	cmp	r3, #29
 8001ff8:	d001      	beq.n	8001ffe <__sflush_r+0xae>
 8001ffa:	2b16      	cmp	r3, #22
 8001ffc:	d101      	bne.n	8002002 <__sflush_r+0xb2>
 8001ffe:	602f      	str	r7, [r5, #0]
 8002000:	e7b2      	b.n	8001f68 <__sflush_r+0x18>
 8002002:	89a3      	ldrh	r3, [r4, #12]
 8002004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002008:	81a3      	strh	r3, [r4, #12]
 800200a:	e7ae      	b.n	8001f6a <__sflush_r+0x1a>
 800200c:	690f      	ldr	r7, [r1, #16]
 800200e:	2f00      	cmp	r7, #0
 8002010:	d0aa      	beq.n	8001f68 <__sflush_r+0x18>
 8002012:	0793      	lsls	r3, r2, #30
 8002014:	680e      	ldr	r6, [r1, #0]
 8002016:	bf08      	it	eq
 8002018:	694b      	ldreq	r3, [r1, #20]
 800201a:	600f      	str	r7, [r1, #0]
 800201c:	bf18      	it	ne
 800201e:	2300      	movne	r3, #0
 8002020:	1bf6      	subs	r6, r6, r7
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	2e00      	cmp	r6, #0
 8002026:	dd9f      	ble.n	8001f68 <__sflush_r+0x18>
 8002028:	6a21      	ldr	r1, [r4, #32]
 800202a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800202e:	4633      	mov	r3, r6
 8002030:	463a      	mov	r2, r7
 8002032:	4628      	mov	r0, r5
 8002034:	47e0      	blx	ip
 8002036:	2800      	cmp	r0, #0
 8002038:	dc06      	bgt.n	8002048 <__sflush_r+0xf8>
 800203a:	89a3      	ldrh	r3, [r4, #12]
 800203c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002040:	81a3      	strh	r3, [r4, #12]
 8002042:	f04f 30ff 	mov.w	r0, #4294967295
 8002046:	e790      	b.n	8001f6a <__sflush_r+0x1a>
 8002048:	4407      	add	r7, r0
 800204a:	1a36      	subs	r6, r6, r0
 800204c:	e7ea      	b.n	8002024 <__sflush_r+0xd4>
 800204e:	bf00      	nop
 8002050:	20400001 	.word	0x20400001

08002054 <_fflush_r>:
 8002054:	b538      	push	{r3, r4, r5, lr}
 8002056:	690b      	ldr	r3, [r1, #16]
 8002058:	4605      	mov	r5, r0
 800205a:	460c      	mov	r4, r1
 800205c:	b913      	cbnz	r3, 8002064 <_fflush_r+0x10>
 800205e:	2500      	movs	r5, #0
 8002060:	4628      	mov	r0, r5
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	b118      	cbz	r0, 800206e <_fflush_r+0x1a>
 8002066:	6983      	ldr	r3, [r0, #24]
 8002068:	b90b      	cbnz	r3, 800206e <_fflush_r+0x1a>
 800206a:	f000 f887 	bl	800217c <__sinit>
 800206e:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <_fflush_r+0x6c>)
 8002070:	429c      	cmp	r4, r3
 8002072:	d11b      	bne.n	80020ac <_fflush_r+0x58>
 8002074:	686c      	ldr	r4, [r5, #4]
 8002076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ef      	beq.n	800205e <_fflush_r+0xa>
 800207e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002080:	07d0      	lsls	r0, r2, #31
 8002082:	d404      	bmi.n	800208e <_fflush_r+0x3a>
 8002084:	0599      	lsls	r1, r3, #22
 8002086:	d402      	bmi.n	800208e <_fflush_r+0x3a>
 8002088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800208a:	f000 f915 	bl	80022b8 <__retarget_lock_acquire_recursive>
 800208e:	4628      	mov	r0, r5
 8002090:	4621      	mov	r1, r4
 8002092:	f7ff ff5d 	bl	8001f50 <__sflush_r>
 8002096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002098:	07da      	lsls	r2, r3, #31
 800209a:	4605      	mov	r5, r0
 800209c:	d4e0      	bmi.n	8002060 <_fflush_r+0xc>
 800209e:	89a3      	ldrh	r3, [r4, #12]
 80020a0:	059b      	lsls	r3, r3, #22
 80020a2:	d4dd      	bmi.n	8002060 <_fflush_r+0xc>
 80020a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020a6:	f000 f908 	bl	80022ba <__retarget_lock_release_recursive>
 80020aa:	e7d9      	b.n	8002060 <_fflush_r+0xc>
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <_fflush_r+0x70>)
 80020ae:	429c      	cmp	r4, r3
 80020b0:	d101      	bne.n	80020b6 <_fflush_r+0x62>
 80020b2:	68ac      	ldr	r4, [r5, #8]
 80020b4:	e7df      	b.n	8002076 <_fflush_r+0x22>
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <_fflush_r+0x74>)
 80020b8:	429c      	cmp	r4, r3
 80020ba:	bf08      	it	eq
 80020bc:	68ec      	ldreq	r4, [r5, #12]
 80020be:	e7da      	b.n	8002076 <_fflush_r+0x22>
 80020c0:	080026a0 	.word	0x080026a0
 80020c4:	080026c0 	.word	0x080026c0
 80020c8:	08002680 	.word	0x08002680

080020cc <std>:
 80020cc:	2300      	movs	r3, #0
 80020ce:	b510      	push	{r4, lr}
 80020d0:	4604      	mov	r4, r0
 80020d2:	e9c0 3300 	strd	r3, r3, [r0]
 80020d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020da:	6083      	str	r3, [r0, #8]
 80020dc:	8181      	strh	r1, [r0, #12]
 80020de:	6643      	str	r3, [r0, #100]	; 0x64
 80020e0:	81c2      	strh	r2, [r0, #14]
 80020e2:	6183      	str	r3, [r0, #24]
 80020e4:	4619      	mov	r1, r3
 80020e6:	2208      	movs	r2, #8
 80020e8:	305c      	adds	r0, #92	; 0x5c
 80020ea:	f7ff f9e3 	bl	80014b4 <memset>
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <std+0x38>)
 80020f0:	6263      	str	r3, [r4, #36]	; 0x24
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <std+0x3c>)
 80020f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <std+0x40>)
 80020f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <std+0x44>)
 80020fc:	6224      	str	r4, [r4, #32]
 80020fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop
 8002104:	08002429 	.word	0x08002429
 8002108:	0800244b 	.word	0x0800244b
 800210c:	08002483 	.word	0x08002483
 8002110:	080024a7 	.word	0x080024a7

08002114 <_cleanup_r>:
 8002114:	4901      	ldr	r1, [pc, #4]	; (800211c <_cleanup_r+0x8>)
 8002116:	f000 b8af 	b.w	8002278 <_fwalk_reent>
 800211a:	bf00      	nop
 800211c:	08002055 	.word	0x08002055

08002120 <__sfmoreglue>:
 8002120:	b570      	push	{r4, r5, r6, lr}
 8002122:	2268      	movs	r2, #104	; 0x68
 8002124:	1e4d      	subs	r5, r1, #1
 8002126:	4355      	muls	r5, r2
 8002128:	460e      	mov	r6, r1
 800212a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800212e:	f7ff fad7 	bl	80016e0 <_malloc_r>
 8002132:	4604      	mov	r4, r0
 8002134:	b140      	cbz	r0, 8002148 <__sfmoreglue+0x28>
 8002136:	2100      	movs	r1, #0
 8002138:	e9c0 1600 	strd	r1, r6, [r0]
 800213c:	300c      	adds	r0, #12
 800213e:	60a0      	str	r0, [r4, #8]
 8002140:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002144:	f7ff f9b6 	bl	80014b4 <memset>
 8002148:	4620      	mov	r0, r4
 800214a:	bd70      	pop	{r4, r5, r6, pc}

0800214c <__sfp_lock_acquire>:
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <__sfp_lock_acquire+0x8>)
 800214e:	f000 b8b3 	b.w	80022b8 <__retarget_lock_acquire_recursive>
 8002152:	bf00      	nop
 8002154:	200000c9 	.word	0x200000c9

08002158 <__sfp_lock_release>:
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <__sfp_lock_release+0x8>)
 800215a:	f000 b8ae 	b.w	80022ba <__retarget_lock_release_recursive>
 800215e:	bf00      	nop
 8002160:	200000c9 	.word	0x200000c9

08002164 <__sinit_lock_acquire>:
 8002164:	4801      	ldr	r0, [pc, #4]	; (800216c <__sinit_lock_acquire+0x8>)
 8002166:	f000 b8a7 	b.w	80022b8 <__retarget_lock_acquire_recursive>
 800216a:	bf00      	nop
 800216c:	200000ca 	.word	0x200000ca

08002170 <__sinit_lock_release>:
 8002170:	4801      	ldr	r0, [pc, #4]	; (8002178 <__sinit_lock_release+0x8>)
 8002172:	f000 b8a2 	b.w	80022ba <__retarget_lock_release_recursive>
 8002176:	bf00      	nop
 8002178:	200000ca 	.word	0x200000ca

0800217c <__sinit>:
 800217c:	b510      	push	{r4, lr}
 800217e:	4604      	mov	r4, r0
 8002180:	f7ff fff0 	bl	8002164 <__sinit_lock_acquire>
 8002184:	69a3      	ldr	r3, [r4, #24]
 8002186:	b11b      	cbz	r3, 8002190 <__sinit+0x14>
 8002188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800218c:	f7ff bff0 	b.w	8002170 <__sinit_lock_release>
 8002190:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002194:	6523      	str	r3, [r4, #80]	; 0x50
 8002196:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <__sinit+0x68>)
 8002198:	4a13      	ldr	r2, [pc, #76]	; (80021e8 <__sinit+0x6c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	62a2      	str	r2, [r4, #40]	; 0x28
 800219e:	42a3      	cmp	r3, r4
 80021a0:	bf04      	itt	eq
 80021a2:	2301      	moveq	r3, #1
 80021a4:	61a3      	streq	r3, [r4, #24]
 80021a6:	4620      	mov	r0, r4
 80021a8:	f000 f820 	bl	80021ec <__sfp>
 80021ac:	6060      	str	r0, [r4, #4]
 80021ae:	4620      	mov	r0, r4
 80021b0:	f000 f81c 	bl	80021ec <__sfp>
 80021b4:	60a0      	str	r0, [r4, #8]
 80021b6:	4620      	mov	r0, r4
 80021b8:	f000 f818 	bl	80021ec <__sfp>
 80021bc:	2200      	movs	r2, #0
 80021be:	60e0      	str	r0, [r4, #12]
 80021c0:	2104      	movs	r1, #4
 80021c2:	6860      	ldr	r0, [r4, #4]
 80021c4:	f7ff ff82 	bl	80020cc <std>
 80021c8:	68a0      	ldr	r0, [r4, #8]
 80021ca:	2201      	movs	r2, #1
 80021cc:	2109      	movs	r1, #9
 80021ce:	f7ff ff7d 	bl	80020cc <std>
 80021d2:	68e0      	ldr	r0, [r4, #12]
 80021d4:	2202      	movs	r2, #2
 80021d6:	2112      	movs	r1, #18
 80021d8:	f7ff ff78 	bl	80020cc <std>
 80021dc:	2301      	movs	r3, #1
 80021de:	61a3      	str	r3, [r4, #24]
 80021e0:	e7d2      	b.n	8002188 <__sinit+0xc>
 80021e2:	bf00      	nop
 80021e4:	08002598 	.word	0x08002598
 80021e8:	08002115 	.word	0x08002115

080021ec <__sfp>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	4607      	mov	r7, r0
 80021f0:	f7ff ffac 	bl	800214c <__sfp_lock_acquire>
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <__sfp+0x84>)
 80021f6:	681e      	ldr	r6, [r3, #0]
 80021f8:	69b3      	ldr	r3, [r6, #24]
 80021fa:	b913      	cbnz	r3, 8002202 <__sfp+0x16>
 80021fc:	4630      	mov	r0, r6
 80021fe:	f7ff ffbd 	bl	800217c <__sinit>
 8002202:	3648      	adds	r6, #72	; 0x48
 8002204:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002208:	3b01      	subs	r3, #1
 800220a:	d503      	bpl.n	8002214 <__sfp+0x28>
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	b30b      	cbz	r3, 8002254 <__sfp+0x68>
 8002210:	6836      	ldr	r6, [r6, #0]
 8002212:	e7f7      	b.n	8002204 <__sfp+0x18>
 8002214:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002218:	b9d5      	cbnz	r5, 8002250 <__sfp+0x64>
 800221a:	4b16      	ldr	r3, [pc, #88]	; (8002274 <__sfp+0x88>)
 800221c:	60e3      	str	r3, [r4, #12]
 800221e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002222:	6665      	str	r5, [r4, #100]	; 0x64
 8002224:	f000 f847 	bl	80022b6 <__retarget_lock_init_recursive>
 8002228:	f7ff ff96 	bl	8002158 <__sfp_lock_release>
 800222c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002230:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002234:	6025      	str	r5, [r4, #0]
 8002236:	61a5      	str	r5, [r4, #24]
 8002238:	2208      	movs	r2, #8
 800223a:	4629      	mov	r1, r5
 800223c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002240:	f7ff f938 	bl	80014b4 <memset>
 8002244:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002248:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800224c:	4620      	mov	r0, r4
 800224e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002250:	3468      	adds	r4, #104	; 0x68
 8002252:	e7d9      	b.n	8002208 <__sfp+0x1c>
 8002254:	2104      	movs	r1, #4
 8002256:	4638      	mov	r0, r7
 8002258:	f7ff ff62 	bl	8002120 <__sfmoreglue>
 800225c:	4604      	mov	r4, r0
 800225e:	6030      	str	r0, [r6, #0]
 8002260:	2800      	cmp	r0, #0
 8002262:	d1d5      	bne.n	8002210 <__sfp+0x24>
 8002264:	f7ff ff78 	bl	8002158 <__sfp_lock_release>
 8002268:	230c      	movs	r3, #12
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	e7ee      	b.n	800224c <__sfp+0x60>
 800226e:	bf00      	nop
 8002270:	08002598 	.word	0x08002598
 8002274:	ffff0001 	.word	0xffff0001

08002278 <_fwalk_reent>:
 8002278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800227c:	4606      	mov	r6, r0
 800227e:	4688      	mov	r8, r1
 8002280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002284:	2700      	movs	r7, #0
 8002286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800228a:	f1b9 0901 	subs.w	r9, r9, #1
 800228e:	d505      	bpl.n	800229c <_fwalk_reent+0x24>
 8002290:	6824      	ldr	r4, [r4, #0]
 8002292:	2c00      	cmp	r4, #0
 8002294:	d1f7      	bne.n	8002286 <_fwalk_reent+0xe>
 8002296:	4638      	mov	r0, r7
 8002298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800229c:	89ab      	ldrh	r3, [r5, #12]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d907      	bls.n	80022b2 <_fwalk_reent+0x3a>
 80022a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80022a6:	3301      	adds	r3, #1
 80022a8:	d003      	beq.n	80022b2 <_fwalk_reent+0x3a>
 80022aa:	4629      	mov	r1, r5
 80022ac:	4630      	mov	r0, r6
 80022ae:	47c0      	blx	r8
 80022b0:	4307      	orrs	r7, r0
 80022b2:	3568      	adds	r5, #104	; 0x68
 80022b4:	e7e9      	b.n	800228a <_fwalk_reent+0x12>

080022b6 <__retarget_lock_init_recursive>:
 80022b6:	4770      	bx	lr

080022b8 <__retarget_lock_acquire_recursive>:
 80022b8:	4770      	bx	lr

080022ba <__retarget_lock_release_recursive>:
 80022ba:	4770      	bx	lr

080022bc <__swhatbuf_r>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	460e      	mov	r6, r1
 80022c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c4:	2900      	cmp	r1, #0
 80022c6:	b096      	sub	sp, #88	; 0x58
 80022c8:	4614      	mov	r4, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	da08      	bge.n	80022e0 <__swhatbuf_r+0x24>
 80022ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	602a      	str	r2, [r5, #0]
 80022d6:	061a      	lsls	r2, r3, #24
 80022d8:	d410      	bmi.n	80022fc <__swhatbuf_r+0x40>
 80022da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022de:	e00e      	b.n	80022fe <__swhatbuf_r+0x42>
 80022e0:	466a      	mov	r2, sp
 80022e2:	f000 f907 	bl	80024f4 <_fstat_r>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	dbf1      	blt.n	80022ce <__swhatbuf_r+0x12>
 80022ea:	9a01      	ldr	r2, [sp, #4]
 80022ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022f4:	425a      	negs	r2, r3
 80022f6:	415a      	adcs	r2, r3
 80022f8:	602a      	str	r2, [r5, #0]
 80022fa:	e7ee      	b.n	80022da <__swhatbuf_r+0x1e>
 80022fc:	2340      	movs	r3, #64	; 0x40
 80022fe:	2000      	movs	r0, #0
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	b016      	add	sp, #88	; 0x58
 8002304:	bd70      	pop	{r4, r5, r6, pc}
	...

08002308 <__smakebuf_r>:
 8002308:	898b      	ldrh	r3, [r1, #12]
 800230a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800230c:	079d      	lsls	r5, r3, #30
 800230e:	4606      	mov	r6, r0
 8002310:	460c      	mov	r4, r1
 8002312:	d507      	bpl.n	8002324 <__smakebuf_r+0x1c>
 8002314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002318:	6023      	str	r3, [r4, #0]
 800231a:	6123      	str	r3, [r4, #16]
 800231c:	2301      	movs	r3, #1
 800231e:	6163      	str	r3, [r4, #20]
 8002320:	b002      	add	sp, #8
 8002322:	bd70      	pop	{r4, r5, r6, pc}
 8002324:	ab01      	add	r3, sp, #4
 8002326:	466a      	mov	r2, sp
 8002328:	f7ff ffc8 	bl	80022bc <__swhatbuf_r>
 800232c:	9900      	ldr	r1, [sp, #0]
 800232e:	4605      	mov	r5, r0
 8002330:	4630      	mov	r0, r6
 8002332:	f7ff f9d5 	bl	80016e0 <_malloc_r>
 8002336:	b948      	cbnz	r0, 800234c <__smakebuf_r+0x44>
 8002338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800233c:	059a      	lsls	r2, r3, #22
 800233e:	d4ef      	bmi.n	8002320 <__smakebuf_r+0x18>
 8002340:	f023 0303 	bic.w	r3, r3, #3
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	81a3      	strh	r3, [r4, #12]
 800234a:	e7e3      	b.n	8002314 <__smakebuf_r+0xc>
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <__smakebuf_r+0x7c>)
 800234e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002350:	89a3      	ldrh	r3, [r4, #12]
 8002352:	6020      	str	r0, [r4, #0]
 8002354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002358:	81a3      	strh	r3, [r4, #12]
 800235a:	9b00      	ldr	r3, [sp, #0]
 800235c:	6163      	str	r3, [r4, #20]
 800235e:	9b01      	ldr	r3, [sp, #4]
 8002360:	6120      	str	r0, [r4, #16]
 8002362:	b15b      	cbz	r3, 800237c <__smakebuf_r+0x74>
 8002364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002368:	4630      	mov	r0, r6
 800236a:	f000 f8d5 	bl	8002518 <_isatty_r>
 800236e:	b128      	cbz	r0, 800237c <__smakebuf_r+0x74>
 8002370:	89a3      	ldrh	r3, [r4, #12]
 8002372:	f023 0303 	bic.w	r3, r3, #3
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	81a3      	strh	r3, [r4, #12]
 800237c:	89a0      	ldrh	r0, [r4, #12]
 800237e:	4305      	orrs	r5, r0
 8002380:	81a5      	strh	r5, [r4, #12]
 8002382:	e7cd      	b.n	8002320 <__smakebuf_r+0x18>
 8002384:	08002115 	.word	0x08002115

08002388 <__malloc_lock>:
 8002388:	4801      	ldr	r0, [pc, #4]	; (8002390 <__malloc_lock+0x8>)
 800238a:	f7ff bf95 	b.w	80022b8 <__retarget_lock_acquire_recursive>
 800238e:	bf00      	nop
 8002390:	200000c8 	.word	0x200000c8

08002394 <__malloc_unlock>:
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <__malloc_unlock+0x8>)
 8002396:	f7ff bf90 	b.w	80022ba <__retarget_lock_release_recursive>
 800239a:	bf00      	nop
 800239c:	200000c8 	.word	0x200000c8

080023a0 <_raise_r>:
 80023a0:	291f      	cmp	r1, #31
 80023a2:	b538      	push	{r3, r4, r5, lr}
 80023a4:	4604      	mov	r4, r0
 80023a6:	460d      	mov	r5, r1
 80023a8:	d904      	bls.n	80023b4 <_raise_r+0x14>
 80023aa:	2316      	movs	r3, #22
 80023ac:	6003      	str	r3, [r0, #0]
 80023ae:	f04f 30ff 	mov.w	r0, #4294967295
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80023b6:	b112      	cbz	r2, 80023be <_raise_r+0x1e>
 80023b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80023bc:	b94b      	cbnz	r3, 80023d2 <_raise_r+0x32>
 80023be:	4620      	mov	r0, r4
 80023c0:	f000 f830 	bl	8002424 <_getpid_r>
 80023c4:	462a      	mov	r2, r5
 80023c6:	4601      	mov	r1, r0
 80023c8:	4620      	mov	r0, r4
 80023ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ce:	f000 b817 	b.w	8002400 <_kill_r>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d00a      	beq.n	80023ec <_raise_r+0x4c>
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	d103      	bne.n	80023e2 <_raise_r+0x42>
 80023da:	2316      	movs	r3, #22
 80023dc:	6003      	str	r3, [r0, #0]
 80023de:	2001      	movs	r0, #1
 80023e0:	e7e7      	b.n	80023b2 <_raise_r+0x12>
 80023e2:	2400      	movs	r4, #0
 80023e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80023e8:	4628      	mov	r0, r5
 80023ea:	4798      	blx	r3
 80023ec:	2000      	movs	r0, #0
 80023ee:	e7e0      	b.n	80023b2 <_raise_r+0x12>

080023f0 <raise>:
 80023f0:	4b02      	ldr	r3, [pc, #8]	; (80023fc <raise+0xc>)
 80023f2:	4601      	mov	r1, r0
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f7ff bfd3 	b.w	80023a0 <_raise_r>
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000

08002400 <_kill_r>:
 8002400:	b538      	push	{r3, r4, r5, lr}
 8002402:	4d07      	ldr	r5, [pc, #28]	; (8002420 <_kill_r+0x20>)
 8002404:	2300      	movs	r3, #0
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	f7fe ff44 	bl	800129a <_kill>
 8002412:	1c43      	adds	r3, r0, #1
 8002414:	d102      	bne.n	800241c <_kill_r+0x1c>
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	b103      	cbz	r3, 800241c <_kill_r+0x1c>
 800241a:	6023      	str	r3, [r4, #0]
 800241c:	bd38      	pop	{r3, r4, r5, pc}
 800241e:	bf00      	nop
 8002420:	200000cc 	.word	0x200000cc

08002424 <_getpid_r>:
 8002424:	f7fe bf32 	b.w	800128c <_getpid>

08002428 <__sread>:
 8002428:	b510      	push	{r4, lr}
 800242a:	460c      	mov	r4, r1
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	f000 f894 	bl	800255c <_read_r>
 8002434:	2800      	cmp	r0, #0
 8002436:	bfab      	itete	ge
 8002438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800243a:	89a3      	ldrhlt	r3, [r4, #12]
 800243c:	181b      	addge	r3, r3, r0
 800243e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002442:	bfac      	ite	ge
 8002444:	6563      	strge	r3, [r4, #84]	; 0x54
 8002446:	81a3      	strhlt	r3, [r4, #12]
 8002448:	bd10      	pop	{r4, pc}

0800244a <__swrite>:
 800244a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244e:	461f      	mov	r7, r3
 8002450:	898b      	ldrh	r3, [r1, #12]
 8002452:	05db      	lsls	r3, r3, #23
 8002454:	4605      	mov	r5, r0
 8002456:	460c      	mov	r4, r1
 8002458:	4616      	mov	r6, r2
 800245a:	d505      	bpl.n	8002468 <__swrite+0x1e>
 800245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002460:	2302      	movs	r3, #2
 8002462:	2200      	movs	r2, #0
 8002464:	f000 f868 	bl	8002538 <_lseek_r>
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800246e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	4632      	mov	r2, r6
 8002476:	463b      	mov	r3, r7
 8002478:	4628      	mov	r0, r5
 800247a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800247e:	f000 b817 	b.w	80024b0 <_write_r>

08002482 <__sseek>:
 8002482:	b510      	push	{r4, lr}
 8002484:	460c      	mov	r4, r1
 8002486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800248a:	f000 f855 	bl	8002538 <_lseek_r>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	89a3      	ldrh	r3, [r4, #12]
 8002492:	bf15      	itete	ne
 8002494:	6560      	strne	r0, [r4, #84]	; 0x54
 8002496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800249a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800249e:	81a3      	strheq	r3, [r4, #12]
 80024a0:	bf18      	it	ne
 80024a2:	81a3      	strhne	r3, [r4, #12]
 80024a4:	bd10      	pop	{r4, pc}

080024a6 <__sclose>:
 80024a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024aa:	f000 b813 	b.w	80024d4 <_close_r>
	...

080024b0 <_write_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d07      	ldr	r5, [pc, #28]	; (80024d0 <_write_r+0x20>)
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	2200      	movs	r2, #0
 80024bc:	602a      	str	r2, [r5, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f7fe ff22 	bl	8001308 <_write>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_write_r+0x1e>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_write_r+0x1e>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	200000cc 	.word	0x200000cc

080024d4 <_close_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4d06      	ldr	r5, [pc, #24]	; (80024f0 <_close_r+0x1c>)
 80024d8:	2300      	movs	r3, #0
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f7fe ff2e 	bl	8001340 <_close>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_close_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_close_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	200000cc 	.word	0x200000cc

080024f4 <_fstat_r>:
 80024f4:	b538      	push	{r3, r4, r5, lr}
 80024f6:	4d07      	ldr	r5, [pc, #28]	; (8002514 <_fstat_r+0x20>)
 80024f8:	2300      	movs	r3, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	602b      	str	r3, [r5, #0]
 8002502:	f7fe ff28 	bl	8001356 <_fstat>
 8002506:	1c43      	adds	r3, r0, #1
 8002508:	d102      	bne.n	8002510 <_fstat_r+0x1c>
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	b103      	cbz	r3, 8002510 <_fstat_r+0x1c>
 800250e:	6023      	str	r3, [r4, #0]
 8002510:	bd38      	pop	{r3, r4, r5, pc}
 8002512:	bf00      	nop
 8002514:	200000cc 	.word	0x200000cc

08002518 <_isatty_r>:
 8002518:	b538      	push	{r3, r4, r5, lr}
 800251a:	4d06      	ldr	r5, [pc, #24]	; (8002534 <_isatty_r+0x1c>)
 800251c:	2300      	movs	r3, #0
 800251e:	4604      	mov	r4, r0
 8002520:	4608      	mov	r0, r1
 8002522:	602b      	str	r3, [r5, #0]
 8002524:	f7fe ff26 	bl	8001374 <_isatty>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	d102      	bne.n	8002532 <_isatty_r+0x1a>
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	b103      	cbz	r3, 8002532 <_isatty_r+0x1a>
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	200000cc 	.word	0x200000cc

08002538 <_lseek_r>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	4d07      	ldr	r5, [pc, #28]	; (8002558 <_lseek_r+0x20>)
 800253c:	4604      	mov	r4, r0
 800253e:	4608      	mov	r0, r1
 8002540:	4611      	mov	r1, r2
 8002542:	2200      	movs	r2, #0
 8002544:	602a      	str	r2, [r5, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	f7fe ff1e 	bl	8001388 <_lseek>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d102      	bne.n	8002556 <_lseek_r+0x1e>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	b103      	cbz	r3, 8002556 <_lseek_r+0x1e>
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	bd38      	pop	{r3, r4, r5, pc}
 8002558:	200000cc 	.word	0x200000cc

0800255c <_read_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	4d07      	ldr	r5, [pc, #28]	; (800257c <_read_r+0x20>)
 8002560:	4604      	mov	r4, r0
 8002562:	4608      	mov	r0, r1
 8002564:	4611      	mov	r1, r2
 8002566:	2200      	movs	r2, #0
 8002568:	602a      	str	r2, [r5, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	f7fe feaf 	bl	80012ce <_read>
 8002570:	1c43      	adds	r3, r0, #1
 8002572:	d102      	bne.n	800257a <_read_r+0x1e>
 8002574:	682b      	ldr	r3, [r5, #0]
 8002576:	b103      	cbz	r3, 800257a <_read_r+0x1e>
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	bd38      	pop	{r3, r4, r5, pc}
 800257c:	200000cc 	.word	0x200000cc

08002580 <_init>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr

0800258c <_fini>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr
