
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002698  08002698  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002698  08002698  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002698  08002698  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800269c  0800269c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080026a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000064  08002704  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002704  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e70  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000094d  00000000  00000000  00022efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000270  00000000  00000000  00023850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00023ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034cb  00000000  00000000  00023ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003147  00000000  00000000  00027173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000ac8d  00000000  00000000  0002a2ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00034f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001218  00000000  00000000  00034f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002538 	.word	0x08002538

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002538 	.word	0x08002538

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_PeriClockControl>:
#include <GPIO.h>

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d141      	bne.n	8000812 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <GPIO_PeriClockControl+0x130>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d147      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000836:	f023 0302 	bic.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <GPIO_PeriClockControl+0x130>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400

080008bc <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d81f      	bhi.n	800091c <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
	}else{
		//this part will code later . ( interrupt mode)
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	799b      	ldrb	r3, [r3, #6]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	2103      	movs	r1, #3
 800093c:	fa01 f303 	lsl.w	r3, r1, r3
 8000940:	43db      	mvns	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	400a      	ands	r2, r1
 800094a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6899      	ldr	r1, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	430a      	orrs	r2, r1
 800095a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	79db      	ldrb	r3, [r3, #7]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68d9      	ldr	r1, [r3, #12]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	430a      	orrs	r2, r1
 800099a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a1b      	ldrb	r3, [r3, #8]
 80009a0:	461a      	mov	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	685a      	ldr	r2, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	791b      	ldrb	r3, [r3, #4]
 80009b6:	4619      	mov	r1, r3
 80009b8:	2301      	movs	r3, #1
 80009ba:	408b      	lsls	r3, r1
 80009bc:	43db      	mvns	r3, r3
 80009be:	4619      	mov	r1, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	400a      	ands	r2, r1
 80009c6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	6859      	ldr	r1, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	430a      	orrs	r2, r1
 80009d6:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	795b      	ldrb	r3, [r3, #5]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d131      	bne.n	8000a44 <GPIO_Init+0x188>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	08db      	lsrs	r3, r3, #3
 80009e6:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	791b      	ldrb	r3, [r3, #4]
 80009ec:	f003 0307 	and.w	r3, r3, #7
 80009f0:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	7afa      	ldrb	r2, [r7, #11]
 80009f8:	3208      	adds	r2, #8
 80009fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009fe:	7abb      	ldrb	r3, [r7, #10]
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	7afa      	ldrb	r2, [r7, #11]
 8000a12:	4001      	ands	r1, r0
 8000a14:	3208      	adds	r2, #8
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7afa      	ldrb	r2, [r7, #11]
 8000a20:	3208      	adds	r2, #8
 8000a22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7a5b      	ldrb	r3, [r3, #9]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	7abb      	ldrb	r3, [r7, #10]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	7afa      	ldrb	r2, [r7, #11]
 8000a3c:	4301      	orrs	r1, r0
 8000a3e:	3208      	adds	r2, #8
 8000a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <GPIO_Toggle_Pin>:
    } else {
        pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
    }
}

void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
    if (PinNumber > 15) return;
 8000a58:	78fb      	ldrb	r3, [r7, #3]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d809      	bhi.n	8000a72 <GPIO_Toggle_Pin+0x26>
    pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	78fa      	ldrb	r2, [r7, #3]
 8000a64:	2101      	movs	r1, #1
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	405a      	eors	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	e000      	b.n	8000a74 <GPIO_Toggle_Pin+0x28>
    if (PinNumber > 15) return;
 8000a72:	bf00      	nop
}
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <I2C_SM_INIT>:

#include "I2C.h"


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    // 1. Enable peripheral clock
    I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <I2C_SM_INIT+0x70>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <I2C_SM_INIT+0x70>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	; 0x40

    // 2. Configure ACK
    pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7a5b      	ldrb	r3, [r3, #9]
 8000a9a:	029b      	lsls	r3, r3, #10
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	601a      	str	r2, [r3, #0]

    // 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
    pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2208      	movs	r2, #8
 8000aac:	605a      	str	r2, [r3, #4]

    // 4. Configure CCR for Standard Mode
    uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <I2C_SM_INIT+0x74>)
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	81fb      	strh	r3, [r7, #14]
    pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8000abc:	89fa      	ldrh	r2, [r7, #14]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000ac6:	61da      	str	r2, [r3, #28]

    // 5. Set TRISE
    // TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
    pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2209      	movs	r2, #9
 8000ace:	621a      	str	r2, [r3, #32]

    // 6. Enable the peripheral
    pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	007a1200 	.word	0x007a1200

08000af4 <turn_LFT>:
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
	//WAIT FOR CHANNEL
}

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f000 fa05 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000b06:	2201      	movs	r2, #1
 8000b08:	2102      	movs	r1, #2
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 fa00 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2101      	movs	r1, #1
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f9fb 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2103      	movs	r1, #3
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f9f6 	bl	8000f10 <GP_TIM_PWM_Control>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <go_IDLE>:

void go_IDLE(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f9e9 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f9e4 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f9df 	bl	8000f10 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2103      	movs	r1, #3
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f9da 	bl	8000f10 <GP_TIM_PWM_Control>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000b78:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000b80:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	791b      	ldrb	r3, [r3, #4]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d125      	bne.n	8000bdc <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000ba0:	bf00      	nop
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f8      	beq.n	8000ba2 <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f022 0203 	bic.w	r2, r2, #3
 8000bbe:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6892      	ldr	r2, [r2, #8]
 8000bca:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000bcc:	bf00      	nop
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 030c 	and.w	r3, r3, #12
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1f8      	bne.n	8000bce <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <AD_TIM_Start_Countdown>:



#include "TIMER.h"

void AD_TIM_Start_Countdown(AD_TIM_RegDef_t *pTIMx, uint32_t time_ms) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	pTIMx->CR1 &= ~TIM_CR1_CEN;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f023 0201 	bic.w	r2, r3, #1
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) != 0);
 8000bfc:	bf00      	nop
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f9      	bne.n	8000bfe <AD_TIM_Start_Countdown+0x18>
	// Clear any pending update flag
	pTIMx->SR &= ~TIM_SR_UIF;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	f023 0201 	bic.w	r2, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	611a      	str	r2, [r3, #16]

	// Configure for single countdown
	pTIMx->CNT = time_ms - 1;;  // Load counter this doesnt set count to 0...
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	1e5a      	subs	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
	pTIMx->ARR = time_ms - 1;  // Count from this value down to 0
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
	// Generate update to load registers
	pTIMx->EGR |= TIM_EGR_UG;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f043 0201 	orr.w	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	615a      	str	r2, [r3, #20]

	pTIMx->CR1 |= TIM_CR1_CEN;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) == 0);
 8000c3e:	bf00      	nop
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f9      	beq.n	8000c40 <AD_TIM_Start_Countdown+0x5a>
	// Clear update flag
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <AD_TIM_CDN_INIT>:
//could just use timer handle instead



void AD_TIM_CDN_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

	if (pAD_TIM_Handle->pTIMx == TIM1) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <AD_TIM_CDN_INIT+0x90>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d105      	bne.n	8000c76 <AD_TIM_CDN_INIT+0x1e>
		TIM1_PCLK_EN();
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <AD_TIM_CDN_INIT+0x94>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <AD_TIM_CDN_INIT+0x94>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
	}

	//HANDLE INTERRUPTS
	*NVIC_ISER0 |= TIM1_UP_IRQ;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <AD_TIM_CDN_INIT+0x98>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a1d      	ldr	r2, [pc, #116]	; (8000cf0 <AD_TIM_CDN_INIT+0x98>)
 8000c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c80:	6013      	str	r3, [r2, #0]
	pAD_TIM_Handle->pTIMx->DIER |= TIM_DIER_UIE;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f042 0201 	orr.w	r2, r2, #1
 8000c90:	60da      	str	r2, [r3, #12]
	//IS CLOCK NEEDED FORE SETTING REGS?

	// Set timer UEV to only overflow
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_URS;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f042 0204 	orr.w	r2, r2, #4
 8000ca0:	601a      	str	r2, [r3, #0]

	// Set timer direction to downcounting
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_DIR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f042 0208 	orr.w	r2, r2, #8
 8000cb0:	601a      	str	r2, [r3, #0]

	// Enable Auto-Reload Preload (recommended for stability)
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cc0:	601a      	str	r2, [r3, #0]

	// Set prescaler
	pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	889a      	ldrh	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28

	// Force update event to load PSC immediately
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	695a      	ldr	r2, [r3, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	615a      	str	r2, [r3, #20]

}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40010000 	.word	0x40010000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d04:	d106      	bne.n	8000d14 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <GP_TIM_PWM_INIT+0x108>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a3c      	ldr	r2, [pc, #240]	; (8000dfc <GP_TIM_PWM_INIT+0x108>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	e00a      	b.n	8000d2a <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a39      	ldr	r2, [pc, #228]	; (8000e00 <GP_TIM_PWM_INIT+0x10c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 8000d1e:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <GP_TIM_PWM_INIT+0x108>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a36      	ldr	r2, [pc, #216]	; (8000dfc <GP_TIM_PWM_INIT+0x108>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 8000d2a:	bf00      	nop
 8000d2c:	4b33      	ldr	r3, [pc, #204]	; (8000dfc <GP_TIM_PWM_INIT+0x108>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d46:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	889a      	ldrh	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	88db      	ldrh	r3, [r3, #6]
 8000d56:	1e5a      	subs	r2, r3, #1
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e03c      	b.n	8000dde <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	88db      	ldrh	r3, [r3, #6]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fb3b 	bl	80003ec <__aeabi_ui2f>
 8000d76:	4603      	mov	r3, r0
 8000d78:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 8000d7a:	4922      	ldr	r1, [pc, #136]	; (8000e04 <GP_TIM_PWM_INIT+0x110>)
 8000d7c:	6938      	ldr	r0, [r7, #16]
 8000d7e:	f7ff fc41 	bl	8000604 <__aeabi_fdiv>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461c      	mov	r4, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	88db      	ldrh	r3, [r3, #6]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fb32 	bl	80003f4 <__aeabi_i2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4619      	mov	r1, r3
 8000d94:	4620      	mov	r0, r4
 8000d96:	f7ff fb81 	bl	800049c <__aeabi_fmul>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fccd 	bl	800073c <__aeabi_f2uiz>
 8000da2:	4603      	mov	r3, r0
 8000da4:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3302      	adds	r3, #2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3302      	adds	r3, #2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	b2d9      	uxtb	r1, r3
 8000dca:	7b7c      	ldrb	r4, [r7, #13]
 8000dcc:	89fa      	ldrh	r2, [r7, #14]
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	4623      	mov	r3, r4
 8000dd4:	f000 f818 	bl	8000e08 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	ddbf      	ble.n	8000d64 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	615a      	str	r2, [r3, #20]

}
 8000df4:	bf00      	nop
 8000df6:	371c      	adds	r7, #28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd90      	pop	{r4, r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40000400 	.word	0x40000400
 8000e04:	42c80000 	.word	0x42c80000

08000e08 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 8000e08:	b480      	push	{r7}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	4608      	mov	r0, r1
 8000e12:	4611      	mov	r1, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	4603      	mov	r3, r0
 8000e18:	70fb      	strb	r3, [r7, #3]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	803b      	strh	r3, [r7, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d802      	bhi.n	8000e2e <GP_TIM_SetChannel+0x26>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3318      	adds	r3, #24
 8000e2c:	e001      	b.n	8000e32 <GP_TIM_SetChannel+0x2a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	331c      	adds	r3, #28
 8000e32:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d864      	bhi.n	8000f04 <GP_TIM_SetChannel+0xfc>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <GP_TIM_SetChannel+0x38>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000e51 	.word	0x08000e51
 8000e44:	08000e61 	.word	0x08000e61
 8000e48:	08000e71 	.word	0x08000e71
 8000e4c:	08000e83 	.word	0x08000e83
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3334      	adds	r3, #52	; 0x34
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	2304      	movs	r3, #4
 8000e58:	74fb      	strb	r3, [r7, #19]
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	e019      	b.n	8000e94 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3338      	adds	r3, #56	; 0x38
 8000e64:	617b      	str	r3, [r7, #20]
 8000e66:	230c      	movs	r3, #12
 8000e68:	74fb      	strb	r3, [r7, #19]
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	e011      	b.n	8000e94 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	333c      	adds	r3, #60	; 0x3c
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	2304      	movs	r3, #4
 8000e78:	74fb      	strb	r3, [r7, #19]
 8000e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	e008      	b.n	8000e94 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3340      	adds	r3, #64	; 0x40
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	230c      	movs	r3, #12
 8000e8a:	74fb      	strb	r3, [r7, #19]
 8000e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8000e94:	883a      	ldrh	r2, [r7, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	7cfa      	ldrb	r2, [r7, #19]
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	43d2      	mvns	r2, r2
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	78ba      	ldrb	r2, [r7, #2]
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d101      	bne.n	8000ebc <GP_TIM_SetChannel+0xb4>
 8000eb8:	2106      	movs	r1, #6
 8000eba:	e000      	b.n	8000ebe <GP_TIM_SetChannel+0xb6>
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	7cfa      	ldrb	r2, [r7, #19]
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	7cfa      	ldrb	r2, [r7, #19]
 8000ed0:	3a01      	subs	r2, #1
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 8000ede:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d006      	beq.n	8000ef4 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1a      	ldr	r2, [r3, #32]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	431a      	orrs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	621a      	str	r2, [r3, #32]
 8000ef2:	e008      	b.n	8000f06 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a1a      	ldr	r2, [r3, #32]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	401a      	ands	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	621a      	str	r2, [r3, #32]
 8000f02:	e000      	b.n	8000f06 <GP_TIM_SetChannel+0xfe>
	default: return;
 8000f04:	bf00      	nop
	}
}
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_ON) {
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8000f20:	78fb      	ldrb	r3, [r7, #3]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d85d      	bhi.n	8000fe2 <GP_TIM_PWM_Control+0xd2>

	uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	60fb      	str	r3, [r7, #12]

	if (PWM_ON) {
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d04a      	beq.n	8000fce <GP_TIM_PWM_Control+0xbe>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	88db      	ldrh	r3, [r3, #6]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa55 	bl	80003f4 <__aeabi_i2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4927      	ldr	r1, [pc, #156]	; (8000fec <GP_TIM_PWM_Control+0xdc>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb58 	bl	8000604 <__aeabi_fdiv>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa49 	bl	80003f4 <__aeabi_i2f>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4620      	mov	r0, r4
 8000f68:	f7ff fa98 	bl	800049c <__aeabi_fmul>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff fbe4 	bl	800073c <__aeabi_f2uiz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	817b      	strh	r3, [r7, #10]
		switch(channel) {
 8000f78:	78fb      	ldrb	r3, [r7, #3]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d81e      	bhi.n	8000fbc <GP_TIM_PWM_Control+0xac>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <GP_TIM_PWM_Control+0x74>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000f95 	.word	0x08000f95
 8000f88:	08000f9f 	.word	0x08000f9f
 8000f8c:	08000fa9 	.word	0x08000fa9
 8000f90:	08000fb3 	.word	0x08000fb3
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	897a      	ldrh	r2, [r7, #10]
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9c:	e00e      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	897a      	ldrh	r2, [r7, #10]
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa6:	e009      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	897a      	ldrh	r2, [r7, #10]
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fb0:	e004      	b.n	8000fbc <GP_TIM_PWM_Control+0xac>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	897a      	ldrh	r2, [r7, #10]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fba:	bf00      	nop
		}

		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a19      	ldr	r1, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	621a      	str	r2, [r3, #32]
 8000fcc:	e00a      	b.n	8000fe4 <GP_TIM_PWM_Control+0xd4>
		//case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
		//case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
		//case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
		//case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
		//}
		pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a19      	ldr	r1, [r3, #32]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	400a      	ands	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
 8000fe0:	e000      	b.n	8000fe4 <GP_TIM_PWM_Control+0xd4>
	if (channel > 3) return;
 8000fe2:	bf00      	nop
	}


}
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	42c80000 	.word	0x42c80000

08000ff0 <main>:
//VL53L0X_Dev_t *Device;
//Device->



int main(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

	init_random_seed();
 8000ff4:	f000 f818 	bl	8001028 <init_random_seed>
	Full_RCC_Config();
 8000ff8:	f000 f83e 	bl	8001078 <Full_RCC_Config>
	Full_AD_TIM_Config();
 8000ffc:	f000 f938 	bl	8001270 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 8001000:	f000 f852 	bl	80010a8 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 8001004:	f000 f8fc 	bl	8001200 <Full_GP_TIM_Config>
	Full_I2C_Config();
 8001008:	f000 f944 	bl	8001294 <Full_I2C_Config>

	//turn_LFT(&TIM2_PWM);
	AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,150);
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <main+0x30>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2196      	movs	r1, #150	; 0x96
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fde7 	bl	8000be6 <AD_TIM_Start_Countdown>
	turn_LFT(&TIM2_PWM);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <main+0x34>)
 800101a:	f7ff fd6b 	bl	8000af4 <turn_LFT>
	/* Loop forever */
	//an ISR should set START to 1, another should set it to 0
	while (1) {
 800101e:	e7fe      	b.n	800101e <main+0x2e>
 8001020:	2000009c 	.word	0x2000009c
 8001024:	20000080 	.word	0x20000080

08001028 <init_random_seed>:
	//after init drive_fwd() is called directly
	//then algorithm should start after first sensorISR

	return 0;
}
void init_random_seed(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	srand(69);  // Seed with timer count for variability
 800102c:	2045      	movs	r0, #69	; 0x45
 800102e:	f000 fa63 	bl	80014f8 <srand>
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <TIM1_UP_TIM10_IRQHandler>:

uint32_t get_random_duration(void) {
	return 550 + (rand() % 3100);  // Between 1000 and 4999 ms
}

void TIM1_UP_TIM10_IRQHandler(void){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	//TIMER_ISR()
	//exit TURN_STATE
	GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 800103c:	210d      	movs	r1, #13
 800103e:	480b      	ldr	r0, [pc, #44]	; (800106c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001040:	f7ff fd04 	bl	8000a4c <GPIO_Toggle_Pin>
	go_IDLE(&TIM2_PWM);
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001046:	f7ff fd71 	bl	8000b2c <go_IDLE>
	TIM1_CDN.pTIMx->SR &= ~TIM_SR_UIF;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691a      	ldr	r2, [r3, #16]
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	611a      	str	r2, [r3, #16]
	AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,3000);
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fdbf 	bl	8000be6 <AD_TIM_Start_Countdown>
	//receive new angle from giroscope
	//set increment_enable TRUE
	//drive_FWD()
	//increment coordinates based on angle (in while loop maybe)
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020800 	.word	0x40020800
 8001070:	20000080 	.word	0x20000080
 8001074:	2000009c 	.word	0x2000009c

08001078 <Full_RCC_Config>:
void Full_RCC_Config(void){
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <Full_RCC_Config+0x2c>)
 8001080:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 8001082:	2300      	movs	r3, #0
 8001084:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 800108a:	2304      	movs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 800108e:	2304      	movs	r3, #4
 8001090:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd65 	bl	8000b64 <RCC_Clock_Config>
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 80010ae:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <Full_GPIO_Config+0x14c>)
 80010b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80010b2:	230d      	movs	r3, #13
 80010b4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80010be:	2303      	movs	r3, #3
 80010c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53


	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80010d0:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <Full_GPIO_Config+0x150>)
 80010d2:	643b      	str	r3, [r7, #64]	; 0x40
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80010da:	2302      	movs	r3, #2
 80010dc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80010e0:	2303      	movs	r3, #3
 80010e2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80010ec:	2301      	movs	r3, #1
 80010ee:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <Full_GPIO_Config+0x154>)
 80010fa:	637b      	str	r3, [r7, #52]	; 0x34
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80010fc:	2303      	movs	r3, #3
 80010fe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001102:	2302      	movs	r3, #2
 8001104:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001108:	2303      	movs	r3, #3
 800110a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001114:	2301      	movs	r3, #1
 8001116:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <Full_GPIO_Config+0x150>)
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001124:	2300      	movs	r3, #0
 8001126:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800112a:	2302      	movs	r3, #2
 800112c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001130:	2303      	movs	r3, #3
 8001132:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800113c:	2301      	movs	r3, #1
 800113e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001142:	2300      	movs	r3, #0
 8001144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <Full_GPIO_Config+0x150>)
 800114a:	61fb      	str	r3, [r7, #28]
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800114c:	2303      	movs	r3, #3
 800114e:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001152:	2302      	movs	r3, #2
 8001154:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001158:	2303      	movs	r3, #3
 800115a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001164:	2301      	movs	r3, #1
 8001166:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8001170:	4b22      	ldr	r3, [pc, #136]	; (80011fc <Full_GPIO_Config+0x154>)
 8001172:	613b      	str	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001174:	2306      	movs	r3, #6
 8001176:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001178:	2302      	movs	r3, #2
 800117a:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800117c:	2303      	movs	r3, #3
 800117e:	75bb      	strb	r3, [r7, #22]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001180:	2300      	movs	r3, #0
 8001182:	763b      	strb	r3, [r7, #24]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 8001184:	2304      	movs	r3, #4
 8001186:	767b      	strb	r3, [r7, #25]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001188:	2300      	movs	r3, #0
 800118a:	75fb      	strb	r3, [r7, #23]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <Full_GPIO_Config+0x154>)
 800118e:	607b      	str	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001190:	2307      	movs	r3, #7
 8001192:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001194:	2302      	movs	r3, #2
 8001196:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001198:	2303      	movs	r3, #3
 800119a:	72bb      	strb	r3, [r7, #10]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800119c:	2300      	movs	r3, #0
 800119e:	733b      	strb	r3, [r7, #12]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 80011a0:	2304      	movs	r3, #4
 80011a2:	737b      	strb	r3, [r7, #13]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80011a4:	2300      	movs	r3, #0
 80011a6:	72fb      	strb	r3, [r7, #11]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 80011a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fb85 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH3);
 80011b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fb80 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH2);
 80011bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fb7b 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH1);
 80011c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fb76 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fb71 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSCL);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fb6c 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fb68 	bl	80008bc <GPIO_Init>
}
 80011ec:	bf00      	nop
 80011ee:	3758      	adds	r7, #88	; 0x58
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020400 	.word	0x40020400

08001200 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800120a:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800120e:	2204      	movs	r2, #4
 8001210:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 100;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001214:	2264      	movs	r2, #100	; 0x64
 8001216:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800121a:	2201      	movs	r2, #1
 800121c:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001220:	2200      	movs	r2, #0
 8001222:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = DutyCycle_60;  // 80% Duty
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001226:	223c      	movs	r2, #60	; 0x3c
 8001228:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800122c:	2201      	movs	r2, #1
 800122e:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = DutyCycle_60;  // 80% Duty
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001238:	223c      	movs	r2, #60	; 0x3c
 800123a:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800123e:	2201      	movs	r2, #1
 8001240:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001244:	2200      	movs	r2, #0
 8001246:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = DutyCycle_60;  // 80% Duty
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800124a:	223c      	movs	r2, #60	; 0x3c
 800124c:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001250:	2201      	movs	r2, #1
 8001252:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001256:	2200      	movs	r2, #0
 8001258:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = DutyCycle_60;  // 80% Duty
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <Full_GP_TIM_Config+0x6c>)
 800125c:	223c      	movs	r2, #60	; 0x3c
 800125e:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <Full_GP_TIM_Config+0x6c>)
 8001262:	f7ff fd47 	bl	8000cf4 <GP_TIM_PWM_INIT>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000080 	.word	0x20000080

08001270 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_CDN.pTIMx = TIM1;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <Full_AD_TIM_Config+0x1c>)
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <Full_AD_TIM_Config+0x20>)
 8001278:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_CDN.AD_TIM_Config.Prescaler = PRESCALER_16K;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <Full_AD_TIM_Config+0x1c>)
 800127c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001280:	809a      	strh	r2, [r3, #4]
	AD_TIM_CDN_INIT(&TIM1_CDN);
 8001282:	4802      	ldr	r0, [pc, #8]	; (800128c <Full_AD_TIM_Config+0x1c>)
 8001284:	f7ff fce8 	bl	8000c58 <AD_TIM_CDN_INIT>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000009c 	.word	0x2000009c
 8001290:	40010000 	.word	0x40010000

08001294 <Full_I2C_Config>:

void Full_I2C_Config(void){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <Full_I2C_Config+0x20>)
 800129a:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <Full_I2C_Config+0x24>)
 800129c:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <Full_I2C_Config+0x20>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <Full_I2C_Config+0x20>)
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <Full_I2C_Config+0x28>)
 80012a8:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 80012aa:	4802      	ldr	r0, [pc, #8]	; (80012b4 <Full_I2C_Config+0x20>)
 80012ac:	f7ff fbe6 	bl	8000a7c <I2C_SM_INIT>
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000bc 	.word	0x200000bc
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_kill>:

int _kill(int pid, int sig)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d8:	f000 f8dc 	bl	8001494 <__errno>
 80012dc:	4603      	mov	r3, r0
 80012de:	2216      	movs	r2, #22
 80012e0:	601a      	str	r2, [r3, #0]
  return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_exit>:

void _exit (int status)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f6:	f04f 31ff 	mov.w	r1, #4294967295
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffe7 	bl	80012ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8001300:	e7fe      	b.n	8001300 <_exit+0x12>

08001302 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e00a      	b.n	800132a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001314:	f3af 8000 	nop.w
 8001318:	4601      	mov	r1, r0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1c5a      	adds	r2, r3, #1
 800131e:	60ba      	str	r2, [r7, #8]
 8001320:	b2ca      	uxtb	r2, r1
 8001322:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	429a      	cmp	r2, r3
 8001330:	dbf0      	blt.n	8001314 <_read+0x12>
  }

  return len;
 8001332:	687b      	ldr	r3, [r7, #4]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e009      	b.n	8001362 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	60ba      	str	r2, [r7, #8]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	429a      	cmp	r2, r3
 8001368:	dbf1      	blt.n	800134e <_write+0x12>
  }
  return len;
 800136a:	687b      	ldr	r3, [r7, #4]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <_close>:

int _close(int file)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_isatty>:

int _isatty(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f000 f846 	bl	8001494 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20018000 	.word	0x20018000
 8001434:	00000400 	.word	0x00000400
 8001438:	200000e4 	.word	0x200000e4
 800143c:	200000f8 	.word	0x200000f8

08001440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopForever+0x6>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopForever+0xe>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopForever+0x16>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146e:	f000 f817 	bl	80014a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fdbd 	bl	8000ff0 <main>

08001476 <LoopForever>:

LoopForever:
  b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   r0, =_estack
 8001478:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800147c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001480:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001484:	080026a0 	.word	0x080026a0
  ldr r2, =_sbss
 8001488:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800148c:	200000f8 	.word	0x200000f8

08001490 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC_IRQHandler>
	...

08001494 <__errno>:
 8001494:	4b01      	ldr	r3, [pc, #4]	; (800149c <__errno+0x8>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	20000000 	.word	0x20000000

080014a0 <__libc_init_array>:
 80014a0:	b570      	push	{r4, r5, r6, lr}
 80014a2:	4d0d      	ldr	r5, [pc, #52]	; (80014d8 <__libc_init_array+0x38>)
 80014a4:	4c0d      	ldr	r4, [pc, #52]	; (80014dc <__libc_init_array+0x3c>)
 80014a6:	1b64      	subs	r4, r4, r5
 80014a8:	10a4      	asrs	r4, r4, #2
 80014aa:	2600      	movs	r6, #0
 80014ac:	42a6      	cmp	r6, r4
 80014ae:	d109      	bne.n	80014c4 <__libc_init_array+0x24>
 80014b0:	4d0b      	ldr	r5, [pc, #44]	; (80014e0 <__libc_init_array+0x40>)
 80014b2:	4c0c      	ldr	r4, [pc, #48]	; (80014e4 <__libc_init_array+0x44>)
 80014b4:	f001 f840 	bl	8002538 <_init>
 80014b8:	1b64      	subs	r4, r4, r5
 80014ba:	10a4      	asrs	r4, r4, #2
 80014bc:	2600      	movs	r6, #0
 80014be:	42a6      	cmp	r6, r4
 80014c0:	d105      	bne.n	80014ce <__libc_init_array+0x2e>
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
 80014c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80014c8:	4798      	blx	r3
 80014ca:	3601      	adds	r6, #1
 80014cc:	e7ee      	b.n	80014ac <__libc_init_array+0xc>
 80014ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80014d2:	4798      	blx	r3
 80014d4:	3601      	adds	r6, #1
 80014d6:	e7f2      	b.n	80014be <__libc_init_array+0x1e>
 80014d8:	08002698 	.word	0x08002698
 80014dc:	08002698 	.word	0x08002698
 80014e0:	08002698 	.word	0x08002698
 80014e4:	0800269c 	.word	0x0800269c

080014e8 <memset>:
 80014e8:	4402      	add	r2, r0
 80014ea:	4603      	mov	r3, r0
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d100      	bne.n	80014f2 <memset+0xa>
 80014f0:	4770      	bx	lr
 80014f2:	f803 1b01 	strb.w	r1, [r3], #1
 80014f6:	e7f9      	b.n	80014ec <memset+0x4>

080014f8 <srand>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <srand+0x44>)
 80014fc:	681d      	ldr	r5, [r3, #0]
 80014fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001500:	4604      	mov	r4, r0
 8001502:	b9b3      	cbnz	r3, 8001532 <srand+0x3a>
 8001504:	2018      	movs	r0, #24
 8001506:	f000 f855 	bl	80015b4 <malloc>
 800150a:	4602      	mov	r2, r0
 800150c:	63a8      	str	r0, [r5, #56]	; 0x38
 800150e:	b920      	cbnz	r0, 800151a <srand+0x22>
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <srand+0x48>)
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <srand+0x4c>)
 8001514:	2142      	movs	r1, #66	; 0x42
 8001516:	f000 f81d 	bl	8001554 <__assert_func>
 800151a:	490b      	ldr	r1, [pc, #44]	; (8001548 <srand+0x50>)
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <srand+0x54>)
 800151e:	e9c0 1300 	strd	r1, r3, [r0]
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <srand+0x58>)
 8001524:	6083      	str	r3, [r0, #8]
 8001526:	230b      	movs	r3, #11
 8001528:	8183      	strh	r3, [r0, #12]
 800152a:	2100      	movs	r1, #0
 800152c:	2001      	movs	r0, #1
 800152e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001532:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001534:	2200      	movs	r2, #0
 8001536:	611c      	str	r4, [r3, #16]
 8001538:	615a      	str	r2, [r3, #20]
 800153a:	bd38      	pop	{r3, r4, r5, pc}
 800153c:	20000000 	.word	0x20000000
 8001540:	08002554 	.word	0x08002554
 8001544:	0800256b 	.word	0x0800256b
 8001548:	abcd330e 	.word	0xabcd330e
 800154c:	e66d1234 	.word	0xe66d1234
 8001550:	0005deec 	.word	0x0005deec

08001554 <__assert_func>:
 8001554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001556:	4614      	mov	r4, r2
 8001558:	461a      	mov	r2, r3
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <__assert_func+0x2c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4605      	mov	r5, r0
 8001560:	68d8      	ldr	r0, [r3, #12]
 8001562:	b14c      	cbz	r4, 8001578 <__assert_func+0x24>
 8001564:	4b07      	ldr	r3, [pc, #28]	; (8001584 <__assert_func+0x30>)
 8001566:	9100      	str	r1, [sp, #0]
 8001568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800156c:	4906      	ldr	r1, [pc, #24]	; (8001588 <__assert_func+0x34>)
 800156e:	462b      	mov	r3, r5
 8001570:	f000 f80e 	bl	8001590 <fiprintf>
 8001574:	f000 fcc0 	bl	8001ef8 <abort>
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__assert_func+0x38>)
 800157a:	461c      	mov	r4, r3
 800157c:	e7f3      	b.n	8001566 <__assert_func+0x12>
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000
 8001584:	080025c6 	.word	0x080025c6
 8001588:	080025d3 	.word	0x080025d3
 800158c:	08002601 	.word	0x08002601

08001590 <fiprintf>:
 8001590:	b40e      	push	{r1, r2, r3}
 8001592:	b503      	push	{r0, r1, lr}
 8001594:	4601      	mov	r1, r0
 8001596:	ab03      	add	r3, sp, #12
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <fiprintf+0x20>)
 800159a:	f853 2b04 	ldr.w	r2, [r3], #4
 800159e:	6800      	ldr	r0, [r0, #0]
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f000 f915 	bl	80017d0 <_vfiprintf_r>
 80015a6:	b002      	add	sp, #8
 80015a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80015ac:	b003      	add	sp, #12
 80015ae:	4770      	bx	lr
 80015b0:	20000000 	.word	0x20000000

080015b4 <malloc>:
 80015b4:	4b02      	ldr	r3, [pc, #8]	; (80015c0 <malloc+0xc>)
 80015b6:	4601      	mov	r1, r0
 80015b8:	6818      	ldr	r0, [r3, #0]
 80015ba:	f000 b86d 	b.w	8001698 <_malloc_r>
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000

080015c4 <_free_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4605      	mov	r5, r0
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d041      	beq.n	8001650 <_free_r+0x8c>
 80015cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015d0:	1f0c      	subs	r4, r1, #4
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bfb8      	it	lt
 80015d6:	18e4      	addlt	r4, r4, r3
 80015d8:	f000 feb2 	bl	8002340 <__malloc_lock>
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <_free_r+0x90>)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	b933      	cbnz	r3, 80015f0 <_free_r+0x2c>
 80015e2:	6063      	str	r3, [r4, #4]
 80015e4:	6014      	str	r4, [r2, #0]
 80015e6:	4628      	mov	r0, r5
 80015e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015ec:	f000 beae 	b.w	800234c <__malloc_unlock>
 80015f0:	42a3      	cmp	r3, r4
 80015f2:	d908      	bls.n	8001606 <_free_r+0x42>
 80015f4:	6820      	ldr	r0, [r4, #0]
 80015f6:	1821      	adds	r1, r4, r0
 80015f8:	428b      	cmp	r3, r1
 80015fa:	bf01      	itttt	eq
 80015fc:	6819      	ldreq	r1, [r3, #0]
 80015fe:	685b      	ldreq	r3, [r3, #4]
 8001600:	1809      	addeq	r1, r1, r0
 8001602:	6021      	streq	r1, [r4, #0]
 8001604:	e7ed      	b.n	80015e2 <_free_r+0x1e>
 8001606:	461a      	mov	r2, r3
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	b10b      	cbz	r3, 8001610 <_free_r+0x4c>
 800160c:	42a3      	cmp	r3, r4
 800160e:	d9fa      	bls.n	8001606 <_free_r+0x42>
 8001610:	6811      	ldr	r1, [r2, #0]
 8001612:	1850      	adds	r0, r2, r1
 8001614:	42a0      	cmp	r0, r4
 8001616:	d10b      	bne.n	8001630 <_free_r+0x6c>
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	4401      	add	r1, r0
 800161c:	1850      	adds	r0, r2, r1
 800161e:	4283      	cmp	r3, r0
 8001620:	6011      	str	r1, [r2, #0]
 8001622:	d1e0      	bne.n	80015e6 <_free_r+0x22>
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	6053      	str	r3, [r2, #4]
 800162a:	4401      	add	r1, r0
 800162c:	6011      	str	r1, [r2, #0]
 800162e:	e7da      	b.n	80015e6 <_free_r+0x22>
 8001630:	d902      	bls.n	8001638 <_free_r+0x74>
 8001632:	230c      	movs	r3, #12
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	e7d6      	b.n	80015e6 <_free_r+0x22>
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	1821      	adds	r1, r4, r0
 800163c:	428b      	cmp	r3, r1
 800163e:	bf04      	itt	eq
 8001640:	6819      	ldreq	r1, [r3, #0]
 8001642:	685b      	ldreq	r3, [r3, #4]
 8001644:	6063      	str	r3, [r4, #4]
 8001646:	bf04      	itt	eq
 8001648:	1809      	addeq	r1, r1, r0
 800164a:	6021      	streq	r1, [r4, #0]
 800164c:	6054      	str	r4, [r2, #4]
 800164e:	e7ca      	b.n	80015e6 <_free_r+0x22>
 8001650:	bd38      	pop	{r3, r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	200000e8 	.word	0x200000e8

08001658 <sbrk_aligned>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	4e0e      	ldr	r6, [pc, #56]	; (8001694 <sbrk_aligned+0x3c>)
 800165c:	460c      	mov	r4, r1
 800165e:	6831      	ldr	r1, [r6, #0]
 8001660:	4605      	mov	r5, r0
 8001662:	b911      	cbnz	r1, 800166a <sbrk_aligned+0x12>
 8001664:	f000 fb78 	bl	8001d58 <_sbrk_r>
 8001668:	6030      	str	r0, [r6, #0]
 800166a:	4621      	mov	r1, r4
 800166c:	4628      	mov	r0, r5
 800166e:	f000 fb73 	bl	8001d58 <_sbrk_r>
 8001672:	1c43      	adds	r3, r0, #1
 8001674:	d00a      	beq.n	800168c <sbrk_aligned+0x34>
 8001676:	1cc4      	adds	r4, r0, #3
 8001678:	f024 0403 	bic.w	r4, r4, #3
 800167c:	42a0      	cmp	r0, r4
 800167e:	d007      	beq.n	8001690 <sbrk_aligned+0x38>
 8001680:	1a21      	subs	r1, r4, r0
 8001682:	4628      	mov	r0, r5
 8001684:	f000 fb68 	bl	8001d58 <_sbrk_r>
 8001688:	3001      	adds	r0, #1
 800168a:	d101      	bne.n	8001690 <sbrk_aligned+0x38>
 800168c:	f04f 34ff 	mov.w	r4, #4294967295
 8001690:	4620      	mov	r0, r4
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	200000ec 	.word	0x200000ec

08001698 <_malloc_r>:
 8001698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800169c:	1ccd      	adds	r5, r1, #3
 800169e:	f025 0503 	bic.w	r5, r5, #3
 80016a2:	3508      	adds	r5, #8
 80016a4:	2d0c      	cmp	r5, #12
 80016a6:	bf38      	it	cc
 80016a8:	250c      	movcc	r5, #12
 80016aa:	2d00      	cmp	r5, #0
 80016ac:	4607      	mov	r7, r0
 80016ae:	db01      	blt.n	80016b4 <_malloc_r+0x1c>
 80016b0:	42a9      	cmp	r1, r5
 80016b2:	d905      	bls.n	80016c0 <_malloc_r+0x28>
 80016b4:	230c      	movs	r3, #12
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	2600      	movs	r6, #0
 80016ba:	4630      	mov	r0, r6
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016c0:	4e2e      	ldr	r6, [pc, #184]	; (800177c <_malloc_r+0xe4>)
 80016c2:	f000 fe3d 	bl	8002340 <__malloc_lock>
 80016c6:	6833      	ldr	r3, [r6, #0]
 80016c8:	461c      	mov	r4, r3
 80016ca:	bb34      	cbnz	r4, 800171a <_malloc_r+0x82>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4638      	mov	r0, r7
 80016d0:	f7ff ffc2 	bl	8001658 <sbrk_aligned>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	4604      	mov	r4, r0
 80016d8:	d14d      	bne.n	8001776 <_malloc_r+0xde>
 80016da:	6834      	ldr	r4, [r6, #0]
 80016dc:	4626      	mov	r6, r4
 80016de:	2e00      	cmp	r6, #0
 80016e0:	d140      	bne.n	8001764 <_malloc_r+0xcc>
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	4631      	mov	r1, r6
 80016e6:	4638      	mov	r0, r7
 80016e8:	eb04 0803 	add.w	r8, r4, r3
 80016ec:	f000 fb34 	bl	8001d58 <_sbrk_r>
 80016f0:	4580      	cmp	r8, r0
 80016f2:	d13a      	bne.n	800176a <_malloc_r+0xd2>
 80016f4:	6821      	ldr	r1, [r4, #0]
 80016f6:	3503      	adds	r5, #3
 80016f8:	1a6d      	subs	r5, r5, r1
 80016fa:	f025 0503 	bic.w	r5, r5, #3
 80016fe:	3508      	adds	r5, #8
 8001700:	2d0c      	cmp	r5, #12
 8001702:	bf38      	it	cc
 8001704:	250c      	movcc	r5, #12
 8001706:	4629      	mov	r1, r5
 8001708:	4638      	mov	r0, r7
 800170a:	f7ff ffa5 	bl	8001658 <sbrk_aligned>
 800170e:	3001      	adds	r0, #1
 8001710:	d02b      	beq.n	800176a <_malloc_r+0xd2>
 8001712:	6823      	ldr	r3, [r4, #0]
 8001714:	442b      	add	r3, r5
 8001716:	6023      	str	r3, [r4, #0]
 8001718:	e00e      	b.n	8001738 <_malloc_r+0xa0>
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	1b52      	subs	r2, r2, r5
 800171e:	d41e      	bmi.n	800175e <_malloc_r+0xc6>
 8001720:	2a0b      	cmp	r2, #11
 8001722:	d916      	bls.n	8001752 <_malloc_r+0xba>
 8001724:	1961      	adds	r1, r4, r5
 8001726:	42a3      	cmp	r3, r4
 8001728:	6025      	str	r5, [r4, #0]
 800172a:	bf18      	it	ne
 800172c:	6059      	strne	r1, [r3, #4]
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	bf08      	it	eq
 8001732:	6031      	streq	r1, [r6, #0]
 8001734:	5162      	str	r2, [r4, r5]
 8001736:	604b      	str	r3, [r1, #4]
 8001738:	4638      	mov	r0, r7
 800173a:	f104 060b 	add.w	r6, r4, #11
 800173e:	f000 fe05 	bl	800234c <__malloc_unlock>
 8001742:	f026 0607 	bic.w	r6, r6, #7
 8001746:	1d23      	adds	r3, r4, #4
 8001748:	1af2      	subs	r2, r6, r3
 800174a:	d0b6      	beq.n	80016ba <_malloc_r+0x22>
 800174c:	1b9b      	subs	r3, r3, r6
 800174e:	50a3      	str	r3, [r4, r2]
 8001750:	e7b3      	b.n	80016ba <_malloc_r+0x22>
 8001752:	6862      	ldr	r2, [r4, #4]
 8001754:	42a3      	cmp	r3, r4
 8001756:	bf0c      	ite	eq
 8001758:	6032      	streq	r2, [r6, #0]
 800175a:	605a      	strne	r2, [r3, #4]
 800175c:	e7ec      	b.n	8001738 <_malloc_r+0xa0>
 800175e:	4623      	mov	r3, r4
 8001760:	6864      	ldr	r4, [r4, #4]
 8001762:	e7b2      	b.n	80016ca <_malloc_r+0x32>
 8001764:	4634      	mov	r4, r6
 8001766:	6876      	ldr	r6, [r6, #4]
 8001768:	e7b9      	b.n	80016de <_malloc_r+0x46>
 800176a:	230c      	movs	r3, #12
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4638      	mov	r0, r7
 8001770:	f000 fdec 	bl	800234c <__malloc_unlock>
 8001774:	e7a1      	b.n	80016ba <_malloc_r+0x22>
 8001776:	6025      	str	r5, [r4, #0]
 8001778:	e7de      	b.n	8001738 <_malloc_r+0xa0>
 800177a:	bf00      	nop
 800177c:	200000e8 	.word	0x200000e8

08001780 <__sfputc_r>:
 8001780:	6893      	ldr	r3, [r2, #8]
 8001782:	3b01      	subs	r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	b410      	push	{r4}
 8001788:	6093      	str	r3, [r2, #8]
 800178a:	da07      	bge.n	800179c <__sfputc_r+0x1c>
 800178c:	6994      	ldr	r4, [r2, #24]
 800178e:	42a3      	cmp	r3, r4
 8001790:	db01      	blt.n	8001796 <__sfputc_r+0x16>
 8001792:	290a      	cmp	r1, #10
 8001794:	d102      	bne.n	800179c <__sfputc_r+0x1c>
 8001796:	bc10      	pop	{r4}
 8001798:	f000 baee 	b.w	8001d78 <__swbuf_r>
 800179c:	6813      	ldr	r3, [r2, #0]
 800179e:	1c58      	adds	r0, r3, #1
 80017a0:	6010      	str	r0, [r2, #0]
 80017a2:	7019      	strb	r1, [r3, #0]
 80017a4:	4608      	mov	r0, r1
 80017a6:	bc10      	pop	{r4}
 80017a8:	4770      	bx	lr

080017aa <__sfputs_r>:
 80017aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ac:	4606      	mov	r6, r0
 80017ae:	460f      	mov	r7, r1
 80017b0:	4614      	mov	r4, r2
 80017b2:	18d5      	adds	r5, r2, r3
 80017b4:	42ac      	cmp	r4, r5
 80017b6:	d101      	bne.n	80017bc <__sfputs_r+0x12>
 80017b8:	2000      	movs	r0, #0
 80017ba:	e007      	b.n	80017cc <__sfputs_r+0x22>
 80017bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017c0:	463a      	mov	r2, r7
 80017c2:	4630      	mov	r0, r6
 80017c4:	f7ff ffdc 	bl	8001780 <__sfputc_r>
 80017c8:	1c43      	adds	r3, r0, #1
 80017ca:	d1f3      	bne.n	80017b4 <__sfputs_r+0xa>
 80017cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017d0 <_vfiprintf_r>:
 80017d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017d4:	460d      	mov	r5, r1
 80017d6:	b09d      	sub	sp, #116	; 0x74
 80017d8:	4614      	mov	r4, r2
 80017da:	4698      	mov	r8, r3
 80017dc:	4606      	mov	r6, r0
 80017de:	b118      	cbz	r0, 80017e8 <_vfiprintf_r+0x18>
 80017e0:	6983      	ldr	r3, [r0, #24]
 80017e2:	b90b      	cbnz	r3, 80017e8 <_vfiprintf_r+0x18>
 80017e4:	f000 fca6 	bl	8002134 <__sinit>
 80017e8:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <_vfiprintf_r+0x240>)
 80017ea:	429d      	cmp	r5, r3
 80017ec:	d11b      	bne.n	8001826 <_vfiprintf_r+0x56>
 80017ee:	6875      	ldr	r5, [r6, #4]
 80017f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80017f2:	07d9      	lsls	r1, r3, #31
 80017f4:	d405      	bmi.n	8001802 <_vfiprintf_r+0x32>
 80017f6:	89ab      	ldrh	r3, [r5, #12]
 80017f8:	059a      	lsls	r2, r3, #22
 80017fa:	d402      	bmi.n	8001802 <_vfiprintf_r+0x32>
 80017fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80017fe:	f000 fd37 	bl	8002270 <__retarget_lock_acquire_recursive>
 8001802:	89ab      	ldrh	r3, [r5, #12]
 8001804:	071b      	lsls	r3, r3, #28
 8001806:	d501      	bpl.n	800180c <_vfiprintf_r+0x3c>
 8001808:	692b      	ldr	r3, [r5, #16]
 800180a:	b9eb      	cbnz	r3, 8001848 <_vfiprintf_r+0x78>
 800180c:	4629      	mov	r1, r5
 800180e:	4630      	mov	r0, r6
 8001810:	f000 fb04 	bl	8001e1c <__swsetup_r>
 8001814:	b1c0      	cbz	r0, 8001848 <_vfiprintf_r+0x78>
 8001816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001818:	07dc      	lsls	r4, r3, #31
 800181a:	d50e      	bpl.n	800183a <_vfiprintf_r+0x6a>
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	b01d      	add	sp, #116	; 0x74
 8001822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001826:	4b7b      	ldr	r3, [pc, #492]	; (8001a14 <_vfiprintf_r+0x244>)
 8001828:	429d      	cmp	r5, r3
 800182a:	d101      	bne.n	8001830 <_vfiprintf_r+0x60>
 800182c:	68b5      	ldr	r5, [r6, #8]
 800182e:	e7df      	b.n	80017f0 <_vfiprintf_r+0x20>
 8001830:	4b79      	ldr	r3, [pc, #484]	; (8001a18 <_vfiprintf_r+0x248>)
 8001832:	429d      	cmp	r5, r3
 8001834:	bf08      	it	eq
 8001836:	68f5      	ldreq	r5, [r6, #12]
 8001838:	e7da      	b.n	80017f0 <_vfiprintf_r+0x20>
 800183a:	89ab      	ldrh	r3, [r5, #12]
 800183c:	0598      	lsls	r0, r3, #22
 800183e:	d4ed      	bmi.n	800181c <_vfiprintf_r+0x4c>
 8001840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001842:	f000 fd16 	bl	8002272 <__retarget_lock_release_recursive>
 8001846:	e7e9      	b.n	800181c <_vfiprintf_r+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9309      	str	r3, [sp, #36]	; 0x24
 800184c:	2320      	movs	r3, #32
 800184e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001852:	f8cd 800c 	str.w	r8, [sp, #12]
 8001856:	2330      	movs	r3, #48	; 0x30
 8001858:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001a1c <_vfiprintf_r+0x24c>
 800185c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001860:	f04f 0901 	mov.w	r9, #1
 8001864:	4623      	mov	r3, r4
 8001866:	469a      	mov	sl, r3
 8001868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800186c:	b10a      	cbz	r2, 8001872 <_vfiprintf_r+0xa2>
 800186e:	2a25      	cmp	r2, #37	; 0x25
 8001870:	d1f9      	bne.n	8001866 <_vfiprintf_r+0x96>
 8001872:	ebba 0b04 	subs.w	fp, sl, r4
 8001876:	d00b      	beq.n	8001890 <_vfiprintf_r+0xc0>
 8001878:	465b      	mov	r3, fp
 800187a:	4622      	mov	r2, r4
 800187c:	4629      	mov	r1, r5
 800187e:	4630      	mov	r0, r6
 8001880:	f7ff ff93 	bl	80017aa <__sfputs_r>
 8001884:	3001      	adds	r0, #1
 8001886:	f000 80aa 	beq.w	80019de <_vfiprintf_r+0x20e>
 800188a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800188c:	445a      	add	r2, fp
 800188e:	9209      	str	r2, [sp, #36]	; 0x24
 8001890:	f89a 3000 	ldrb.w	r3, [sl]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a2 	beq.w	80019de <_vfiprintf_r+0x20e>
 800189a:	2300      	movs	r3, #0
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018a4:	f10a 0a01 	add.w	sl, sl, #1
 80018a8:	9304      	str	r3, [sp, #16]
 80018aa:	9307      	str	r3, [sp, #28]
 80018ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018b0:	931a      	str	r3, [sp, #104]	; 0x68
 80018b2:	4654      	mov	r4, sl
 80018b4:	2205      	movs	r2, #5
 80018b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ba:	4858      	ldr	r0, [pc, #352]	; (8001a1c <_vfiprintf_r+0x24c>)
 80018bc:	f7fe fc90 	bl	80001e0 <memchr>
 80018c0:	9a04      	ldr	r2, [sp, #16]
 80018c2:	b9d8      	cbnz	r0, 80018fc <_vfiprintf_r+0x12c>
 80018c4:	06d1      	lsls	r1, r2, #27
 80018c6:	bf44      	itt	mi
 80018c8:	2320      	movmi	r3, #32
 80018ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018ce:	0713      	lsls	r3, r2, #28
 80018d0:	bf44      	itt	mi
 80018d2:	232b      	movmi	r3, #43	; 0x2b
 80018d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80018d8:	f89a 3000 	ldrb.w	r3, [sl]
 80018dc:	2b2a      	cmp	r3, #42	; 0x2a
 80018de:	d015      	beq.n	800190c <_vfiprintf_r+0x13c>
 80018e0:	9a07      	ldr	r2, [sp, #28]
 80018e2:	4654      	mov	r4, sl
 80018e4:	2000      	movs	r0, #0
 80018e6:	f04f 0c0a 	mov.w	ip, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018f0:	3b30      	subs	r3, #48	; 0x30
 80018f2:	2b09      	cmp	r3, #9
 80018f4:	d94e      	bls.n	8001994 <_vfiprintf_r+0x1c4>
 80018f6:	b1b0      	cbz	r0, 8001926 <_vfiprintf_r+0x156>
 80018f8:	9207      	str	r2, [sp, #28]
 80018fa:	e014      	b.n	8001926 <_vfiprintf_r+0x156>
 80018fc:	eba0 0308 	sub.w	r3, r0, r8
 8001900:	fa09 f303 	lsl.w	r3, r9, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	9304      	str	r3, [sp, #16]
 8001908:	46a2      	mov	sl, r4
 800190a:	e7d2      	b.n	80018b2 <_vfiprintf_r+0xe2>
 800190c:	9b03      	ldr	r3, [sp, #12]
 800190e:	1d19      	adds	r1, r3, #4
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	9103      	str	r1, [sp, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	bfbb      	ittet	lt
 8001918:	425b      	neglt	r3, r3
 800191a:	f042 0202 	orrlt.w	r2, r2, #2
 800191e:	9307      	strge	r3, [sp, #28]
 8001920:	9307      	strlt	r3, [sp, #28]
 8001922:	bfb8      	it	lt
 8001924:	9204      	strlt	r2, [sp, #16]
 8001926:	7823      	ldrb	r3, [r4, #0]
 8001928:	2b2e      	cmp	r3, #46	; 0x2e
 800192a:	d10c      	bne.n	8001946 <_vfiprintf_r+0x176>
 800192c:	7863      	ldrb	r3, [r4, #1]
 800192e:	2b2a      	cmp	r3, #42	; 0x2a
 8001930:	d135      	bne.n	800199e <_vfiprintf_r+0x1ce>
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	1d1a      	adds	r2, r3, #4
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	9203      	str	r2, [sp, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	bfb8      	it	lt
 800193e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001942:	3402      	adds	r4, #2
 8001944:	9305      	str	r3, [sp, #20]
 8001946:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8001a20 <_vfiprintf_r+0x250>
 800194a:	7821      	ldrb	r1, [r4, #0]
 800194c:	2203      	movs	r2, #3
 800194e:	4650      	mov	r0, sl
 8001950:	f7fe fc46 	bl	80001e0 <memchr>
 8001954:	b140      	cbz	r0, 8001968 <_vfiprintf_r+0x198>
 8001956:	2340      	movs	r3, #64	; 0x40
 8001958:	eba0 000a 	sub.w	r0, r0, sl
 800195c:	fa03 f000 	lsl.w	r0, r3, r0
 8001960:	9b04      	ldr	r3, [sp, #16]
 8001962:	4303      	orrs	r3, r0
 8001964:	3401      	adds	r4, #1
 8001966:	9304      	str	r3, [sp, #16]
 8001968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800196c:	482d      	ldr	r0, [pc, #180]	; (8001a24 <_vfiprintf_r+0x254>)
 800196e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001972:	2206      	movs	r2, #6
 8001974:	f7fe fc34 	bl	80001e0 <memchr>
 8001978:	2800      	cmp	r0, #0
 800197a:	d03f      	beq.n	80019fc <_vfiprintf_r+0x22c>
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <_vfiprintf_r+0x258>)
 800197e:	bb1b      	cbnz	r3, 80019c8 <_vfiprintf_r+0x1f8>
 8001980:	9b03      	ldr	r3, [sp, #12]
 8001982:	3307      	adds	r3, #7
 8001984:	f023 0307 	bic.w	r3, r3, #7
 8001988:	3308      	adds	r3, #8
 800198a:	9303      	str	r3, [sp, #12]
 800198c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800198e:	443b      	add	r3, r7
 8001990:	9309      	str	r3, [sp, #36]	; 0x24
 8001992:	e767      	b.n	8001864 <_vfiprintf_r+0x94>
 8001994:	fb0c 3202 	mla	r2, ip, r2, r3
 8001998:	460c      	mov	r4, r1
 800199a:	2001      	movs	r0, #1
 800199c:	e7a5      	b.n	80018ea <_vfiprintf_r+0x11a>
 800199e:	2300      	movs	r3, #0
 80019a0:	3401      	adds	r4, #1
 80019a2:	9305      	str	r3, [sp, #20]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0c0a 	mov.w	ip, #10
 80019aa:	4620      	mov	r0, r4
 80019ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019b0:	3a30      	subs	r2, #48	; 0x30
 80019b2:	2a09      	cmp	r2, #9
 80019b4:	d903      	bls.n	80019be <_vfiprintf_r+0x1ee>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0c5      	beq.n	8001946 <_vfiprintf_r+0x176>
 80019ba:	9105      	str	r1, [sp, #20]
 80019bc:	e7c3      	b.n	8001946 <_vfiprintf_r+0x176>
 80019be:	fb0c 2101 	mla	r1, ip, r1, r2
 80019c2:	4604      	mov	r4, r0
 80019c4:	2301      	movs	r3, #1
 80019c6:	e7f0      	b.n	80019aa <_vfiprintf_r+0x1da>
 80019c8:	ab03      	add	r3, sp, #12
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	462a      	mov	r2, r5
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <_vfiprintf_r+0x25c>)
 80019d0:	a904      	add	r1, sp, #16
 80019d2:	4630      	mov	r0, r6
 80019d4:	f3af 8000 	nop.w
 80019d8:	4607      	mov	r7, r0
 80019da:	1c78      	adds	r0, r7, #1
 80019dc:	d1d6      	bne.n	800198c <_vfiprintf_r+0x1bc>
 80019de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80019e0:	07d9      	lsls	r1, r3, #31
 80019e2:	d405      	bmi.n	80019f0 <_vfiprintf_r+0x220>
 80019e4:	89ab      	ldrh	r3, [r5, #12]
 80019e6:	059a      	lsls	r2, r3, #22
 80019e8:	d402      	bmi.n	80019f0 <_vfiprintf_r+0x220>
 80019ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80019ec:	f000 fc41 	bl	8002272 <__retarget_lock_release_recursive>
 80019f0:	89ab      	ldrh	r3, [r5, #12]
 80019f2:	065b      	lsls	r3, r3, #25
 80019f4:	f53f af12 	bmi.w	800181c <_vfiprintf_r+0x4c>
 80019f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80019fa:	e711      	b.n	8001820 <_vfiprintf_r+0x50>
 80019fc:	ab03      	add	r3, sp, #12
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	462a      	mov	r2, r5
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <_vfiprintf_r+0x25c>)
 8001a04:	a904      	add	r1, sp, #16
 8001a06:	4630      	mov	r0, r6
 8001a08:	f000 f880 	bl	8001b0c <_printf_i>
 8001a0c:	e7e4      	b.n	80019d8 <_vfiprintf_r+0x208>
 8001a0e:	bf00      	nop
 8001a10:	08002658 	.word	0x08002658
 8001a14:	08002678 	.word	0x08002678
 8001a18:	08002638 	.word	0x08002638
 8001a1c:	08002602 	.word	0x08002602
 8001a20:	08002608 	.word	0x08002608
 8001a24:	0800260c 	.word	0x0800260c
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	080017ab 	.word	0x080017ab

08001a30 <_printf_common>:
 8001a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a34:	4616      	mov	r6, r2
 8001a36:	4699      	mov	r9, r3
 8001a38:	688a      	ldr	r2, [r1, #8]
 8001a3a:	690b      	ldr	r3, [r1, #16]
 8001a3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bfb8      	it	lt
 8001a44:	4613      	movlt	r3, r2
 8001a46:	6033      	str	r3, [r6, #0]
 8001a48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a4c:	4607      	mov	r7, r0
 8001a4e:	460c      	mov	r4, r1
 8001a50:	b10a      	cbz	r2, 8001a56 <_printf_common+0x26>
 8001a52:	3301      	adds	r3, #1
 8001a54:	6033      	str	r3, [r6, #0]
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	0699      	lsls	r1, r3, #26
 8001a5a:	bf42      	ittt	mi
 8001a5c:	6833      	ldrmi	r3, [r6, #0]
 8001a5e:	3302      	addmi	r3, #2
 8001a60:	6033      	strmi	r3, [r6, #0]
 8001a62:	6825      	ldr	r5, [r4, #0]
 8001a64:	f015 0506 	ands.w	r5, r5, #6
 8001a68:	d106      	bne.n	8001a78 <_printf_common+0x48>
 8001a6a:	f104 0a19 	add.w	sl, r4, #25
 8001a6e:	68e3      	ldr	r3, [r4, #12]
 8001a70:	6832      	ldr	r2, [r6, #0]
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	42ab      	cmp	r3, r5
 8001a76:	dc26      	bgt.n	8001ac6 <_printf_common+0x96>
 8001a78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001a7c:	1e13      	subs	r3, r2, #0
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	bf18      	it	ne
 8001a82:	2301      	movne	r3, #1
 8001a84:	0692      	lsls	r2, r2, #26
 8001a86:	d42b      	bmi.n	8001ae0 <_printf_common+0xb0>
 8001a88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	4638      	mov	r0, r7
 8001a90:	47c0      	blx	r8
 8001a92:	3001      	adds	r0, #1
 8001a94:	d01e      	beq.n	8001ad4 <_printf_common+0xa4>
 8001a96:	6823      	ldr	r3, [r4, #0]
 8001a98:	68e5      	ldr	r5, [r4, #12]
 8001a9a:	6832      	ldr	r2, [r6, #0]
 8001a9c:	f003 0306 	and.w	r3, r3, #6
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	bf08      	it	eq
 8001aa4:	1aad      	subeq	r5, r5, r2
 8001aa6:	68a3      	ldr	r3, [r4, #8]
 8001aa8:	6922      	ldr	r2, [r4, #16]
 8001aaa:	bf0c      	ite	eq
 8001aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ab0:	2500      	movne	r5, #0
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	bfc4      	itt	gt
 8001ab6:	1a9b      	subgt	r3, r3, r2
 8001ab8:	18ed      	addgt	r5, r5, r3
 8001aba:	2600      	movs	r6, #0
 8001abc:	341a      	adds	r4, #26
 8001abe:	42b5      	cmp	r5, r6
 8001ac0:	d11a      	bne.n	8001af8 <_printf_common+0xc8>
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e008      	b.n	8001ad8 <_printf_common+0xa8>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	4652      	mov	r2, sl
 8001aca:	4649      	mov	r1, r9
 8001acc:	4638      	mov	r0, r7
 8001ace:	47c0      	blx	r8
 8001ad0:	3001      	adds	r0, #1
 8001ad2:	d103      	bne.n	8001adc <_printf_common+0xac>
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001adc:	3501      	adds	r5, #1
 8001ade:	e7c6      	b.n	8001a6e <_printf_common+0x3e>
 8001ae0:	18e1      	adds	r1, r4, r3
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	2030      	movs	r0, #48	; 0x30
 8001ae6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001aea:	4422      	add	r2, r4
 8001aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001af4:	3302      	adds	r3, #2
 8001af6:	e7c7      	b.n	8001a88 <_printf_common+0x58>
 8001af8:	2301      	movs	r3, #1
 8001afa:	4622      	mov	r2, r4
 8001afc:	4649      	mov	r1, r9
 8001afe:	4638      	mov	r0, r7
 8001b00:	47c0      	blx	r8
 8001b02:	3001      	adds	r0, #1
 8001b04:	d0e6      	beq.n	8001ad4 <_printf_common+0xa4>
 8001b06:	3601      	adds	r6, #1
 8001b08:	e7d9      	b.n	8001abe <_printf_common+0x8e>
	...

08001b0c <_printf_i>:
 8001b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b10:	7e0f      	ldrb	r7, [r1, #24]
 8001b12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b14:	2f78      	cmp	r7, #120	; 0x78
 8001b16:	4691      	mov	r9, r2
 8001b18:	4680      	mov	r8, r0
 8001b1a:	460c      	mov	r4, r1
 8001b1c:	469a      	mov	sl, r3
 8001b1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b22:	d807      	bhi.n	8001b34 <_printf_i+0x28>
 8001b24:	2f62      	cmp	r7, #98	; 0x62
 8001b26:	d80a      	bhi.n	8001b3e <_printf_i+0x32>
 8001b28:	2f00      	cmp	r7, #0
 8001b2a:	f000 80d8 	beq.w	8001cde <_printf_i+0x1d2>
 8001b2e:	2f58      	cmp	r7, #88	; 0x58
 8001b30:	f000 80a3 	beq.w	8001c7a <_printf_i+0x16e>
 8001b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b3c:	e03a      	b.n	8001bb4 <_printf_i+0xa8>
 8001b3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b42:	2b15      	cmp	r3, #21
 8001b44:	d8f6      	bhi.n	8001b34 <_printf_i+0x28>
 8001b46:	a101      	add	r1, pc, #4	; (adr r1, 8001b4c <_printf_i+0x40>)
 8001b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b4c:	08001ba5 	.word	0x08001ba5
 8001b50:	08001bb9 	.word	0x08001bb9
 8001b54:	08001b35 	.word	0x08001b35
 8001b58:	08001b35 	.word	0x08001b35
 8001b5c:	08001b35 	.word	0x08001b35
 8001b60:	08001b35 	.word	0x08001b35
 8001b64:	08001bb9 	.word	0x08001bb9
 8001b68:	08001b35 	.word	0x08001b35
 8001b6c:	08001b35 	.word	0x08001b35
 8001b70:	08001b35 	.word	0x08001b35
 8001b74:	08001b35 	.word	0x08001b35
 8001b78:	08001cc5 	.word	0x08001cc5
 8001b7c:	08001be9 	.word	0x08001be9
 8001b80:	08001ca7 	.word	0x08001ca7
 8001b84:	08001b35 	.word	0x08001b35
 8001b88:	08001b35 	.word	0x08001b35
 8001b8c:	08001ce7 	.word	0x08001ce7
 8001b90:	08001b35 	.word	0x08001b35
 8001b94:	08001be9 	.word	0x08001be9
 8001b98:	08001b35 	.word	0x08001b35
 8001b9c:	08001b35 	.word	0x08001b35
 8001ba0:	08001caf 	.word	0x08001caf
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	1d1a      	adds	r2, r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	602a      	str	r2, [r5, #0]
 8001bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0a3      	b.n	8001d00 <_printf_i+0x1f4>
 8001bb8:	6820      	ldr	r0, [r4, #0]
 8001bba:	6829      	ldr	r1, [r5, #0]
 8001bbc:	0606      	lsls	r6, r0, #24
 8001bbe:	f101 0304 	add.w	r3, r1, #4
 8001bc2:	d50a      	bpl.n	8001bda <_printf_i+0xce>
 8001bc4:	680e      	ldr	r6, [r1, #0]
 8001bc6:	602b      	str	r3, [r5, #0]
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	da03      	bge.n	8001bd4 <_printf_i+0xc8>
 8001bcc:	232d      	movs	r3, #45	; 0x2d
 8001bce:	4276      	negs	r6, r6
 8001bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bd4:	485e      	ldr	r0, [pc, #376]	; (8001d50 <_printf_i+0x244>)
 8001bd6:	230a      	movs	r3, #10
 8001bd8:	e019      	b.n	8001c0e <_printf_i+0x102>
 8001bda:	680e      	ldr	r6, [r1, #0]
 8001bdc:	602b      	str	r3, [r5, #0]
 8001bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001be2:	bf18      	it	ne
 8001be4:	b236      	sxthne	r6, r6
 8001be6:	e7ef      	b.n	8001bc8 <_printf_i+0xbc>
 8001be8:	682b      	ldr	r3, [r5, #0]
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	1d19      	adds	r1, r3, #4
 8001bee:	6029      	str	r1, [r5, #0]
 8001bf0:	0601      	lsls	r1, r0, #24
 8001bf2:	d501      	bpl.n	8001bf8 <_printf_i+0xec>
 8001bf4:	681e      	ldr	r6, [r3, #0]
 8001bf6:	e002      	b.n	8001bfe <_printf_i+0xf2>
 8001bf8:	0646      	lsls	r6, r0, #25
 8001bfa:	d5fb      	bpl.n	8001bf4 <_printf_i+0xe8>
 8001bfc:	881e      	ldrh	r6, [r3, #0]
 8001bfe:	4854      	ldr	r0, [pc, #336]	; (8001d50 <_printf_i+0x244>)
 8001c00:	2f6f      	cmp	r7, #111	; 0x6f
 8001c02:	bf0c      	ite	eq
 8001c04:	2308      	moveq	r3, #8
 8001c06:	230a      	movne	r3, #10
 8001c08:	2100      	movs	r1, #0
 8001c0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c0e:	6865      	ldr	r5, [r4, #4]
 8001c10:	60a5      	str	r5, [r4, #8]
 8001c12:	2d00      	cmp	r5, #0
 8001c14:	bfa2      	ittt	ge
 8001c16:	6821      	ldrge	r1, [r4, #0]
 8001c18:	f021 0104 	bicge.w	r1, r1, #4
 8001c1c:	6021      	strge	r1, [r4, #0]
 8001c1e:	b90e      	cbnz	r6, 8001c24 <_printf_i+0x118>
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	d04d      	beq.n	8001cc0 <_printf_i+0x1b4>
 8001c24:	4615      	mov	r5, r2
 8001c26:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c2a:	fb03 6711 	mls	r7, r3, r1, r6
 8001c2e:	5dc7      	ldrb	r7, [r0, r7]
 8001c30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c34:	4637      	mov	r7, r6
 8001c36:	42bb      	cmp	r3, r7
 8001c38:	460e      	mov	r6, r1
 8001c3a:	d9f4      	bls.n	8001c26 <_printf_i+0x11a>
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d10b      	bne.n	8001c58 <_printf_i+0x14c>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	07de      	lsls	r6, r3, #31
 8001c44:	d508      	bpl.n	8001c58 <_printf_i+0x14c>
 8001c46:	6923      	ldr	r3, [r4, #16]
 8001c48:	6861      	ldr	r1, [r4, #4]
 8001c4a:	4299      	cmp	r1, r3
 8001c4c:	bfde      	ittt	le
 8001c4e:	2330      	movle	r3, #48	; 0x30
 8001c50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c58:	1b52      	subs	r2, r2, r5
 8001c5a:	6122      	str	r2, [r4, #16]
 8001c5c:	f8cd a000 	str.w	sl, [sp]
 8001c60:	464b      	mov	r3, r9
 8001c62:	aa03      	add	r2, sp, #12
 8001c64:	4621      	mov	r1, r4
 8001c66:	4640      	mov	r0, r8
 8001c68:	f7ff fee2 	bl	8001a30 <_printf_common>
 8001c6c:	3001      	adds	r0, #1
 8001c6e:	d14c      	bne.n	8001d0a <_printf_i+0x1fe>
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	b004      	add	sp, #16
 8001c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c7a:	4835      	ldr	r0, [pc, #212]	; (8001d50 <_printf_i+0x244>)
 8001c7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001c80:	6829      	ldr	r1, [r5, #0]
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	f851 6b04 	ldr.w	r6, [r1], #4
 8001c88:	6029      	str	r1, [r5, #0]
 8001c8a:	061d      	lsls	r5, r3, #24
 8001c8c:	d514      	bpl.n	8001cb8 <_printf_i+0x1ac>
 8001c8e:	07df      	lsls	r7, r3, #31
 8001c90:	bf44      	itt	mi
 8001c92:	f043 0320 	orrmi.w	r3, r3, #32
 8001c96:	6023      	strmi	r3, [r4, #0]
 8001c98:	b91e      	cbnz	r6, 8001ca2 <_printf_i+0x196>
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	f023 0320 	bic.w	r3, r3, #32
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	2310      	movs	r3, #16
 8001ca4:	e7b0      	b.n	8001c08 <_printf_i+0xfc>
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	6023      	str	r3, [r4, #0]
 8001cae:	2378      	movs	r3, #120	; 0x78
 8001cb0:	4828      	ldr	r0, [pc, #160]	; (8001d54 <_printf_i+0x248>)
 8001cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001cb6:	e7e3      	b.n	8001c80 <_printf_i+0x174>
 8001cb8:	0659      	lsls	r1, r3, #25
 8001cba:	bf48      	it	mi
 8001cbc:	b2b6      	uxthmi	r6, r6
 8001cbe:	e7e6      	b.n	8001c8e <_printf_i+0x182>
 8001cc0:	4615      	mov	r5, r2
 8001cc2:	e7bb      	b.n	8001c3c <_printf_i+0x130>
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	6826      	ldr	r6, [r4, #0]
 8001cc8:	6961      	ldr	r1, [r4, #20]
 8001cca:	1d18      	adds	r0, r3, #4
 8001ccc:	6028      	str	r0, [r5, #0]
 8001cce:	0635      	lsls	r5, r6, #24
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	d501      	bpl.n	8001cd8 <_printf_i+0x1cc>
 8001cd4:	6019      	str	r1, [r3, #0]
 8001cd6:	e002      	b.n	8001cde <_printf_i+0x1d2>
 8001cd8:	0670      	lsls	r0, r6, #25
 8001cda:	d5fb      	bpl.n	8001cd4 <_printf_i+0x1c8>
 8001cdc:	8019      	strh	r1, [r3, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6123      	str	r3, [r4, #16]
 8001ce2:	4615      	mov	r5, r2
 8001ce4:	e7ba      	b.n	8001c5c <_printf_i+0x150>
 8001ce6:	682b      	ldr	r3, [r5, #0]
 8001ce8:	1d1a      	adds	r2, r3, #4
 8001cea:	602a      	str	r2, [r5, #0]
 8001cec:	681d      	ldr	r5, [r3, #0]
 8001cee:	6862      	ldr	r2, [r4, #4]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	f7fe fa74 	bl	80001e0 <memchr>
 8001cf8:	b108      	cbz	r0, 8001cfe <_printf_i+0x1f2>
 8001cfa:	1b40      	subs	r0, r0, r5
 8001cfc:	6060      	str	r0, [r4, #4]
 8001cfe:	6863      	ldr	r3, [r4, #4]
 8001d00:	6123      	str	r3, [r4, #16]
 8001d02:	2300      	movs	r3, #0
 8001d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d08:	e7a8      	b.n	8001c5c <_printf_i+0x150>
 8001d0a:	6923      	ldr	r3, [r4, #16]
 8001d0c:	462a      	mov	r2, r5
 8001d0e:	4649      	mov	r1, r9
 8001d10:	4640      	mov	r0, r8
 8001d12:	47d0      	blx	sl
 8001d14:	3001      	adds	r0, #1
 8001d16:	d0ab      	beq.n	8001c70 <_printf_i+0x164>
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	079b      	lsls	r3, r3, #30
 8001d1c:	d413      	bmi.n	8001d46 <_printf_i+0x23a>
 8001d1e:	68e0      	ldr	r0, [r4, #12]
 8001d20:	9b03      	ldr	r3, [sp, #12]
 8001d22:	4298      	cmp	r0, r3
 8001d24:	bfb8      	it	lt
 8001d26:	4618      	movlt	r0, r3
 8001d28:	e7a4      	b.n	8001c74 <_printf_i+0x168>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	4649      	mov	r1, r9
 8001d30:	4640      	mov	r0, r8
 8001d32:	47d0      	blx	sl
 8001d34:	3001      	adds	r0, #1
 8001d36:	d09b      	beq.n	8001c70 <_printf_i+0x164>
 8001d38:	3501      	adds	r5, #1
 8001d3a:	68e3      	ldr	r3, [r4, #12]
 8001d3c:	9903      	ldr	r1, [sp, #12]
 8001d3e:	1a5b      	subs	r3, r3, r1
 8001d40:	42ab      	cmp	r3, r5
 8001d42:	dcf2      	bgt.n	8001d2a <_printf_i+0x21e>
 8001d44:	e7eb      	b.n	8001d1e <_printf_i+0x212>
 8001d46:	2500      	movs	r5, #0
 8001d48:	f104 0619 	add.w	r6, r4, #25
 8001d4c:	e7f5      	b.n	8001d3a <_printf_i+0x22e>
 8001d4e:	bf00      	nop
 8001d50:	08002613 	.word	0x08002613
 8001d54:	08002624 	.word	0x08002624

08001d58 <_sbrk_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4d06      	ldr	r5, [pc, #24]	; (8001d74 <_sbrk_r+0x1c>)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4604      	mov	r4, r0
 8001d60:	4608      	mov	r0, r1
 8001d62:	602b      	str	r3, [r5, #0]
 8001d64:	f7ff fb36 	bl	80013d4 <_sbrk>
 8001d68:	1c43      	adds	r3, r0, #1
 8001d6a:	d102      	bne.n	8001d72 <_sbrk_r+0x1a>
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	b103      	cbz	r3, 8001d72 <_sbrk_r+0x1a>
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	bd38      	pop	{r3, r4, r5, pc}
 8001d74:	200000f4 	.word	0x200000f4

08001d78 <__swbuf_r>:
 8001d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d7a:	460e      	mov	r6, r1
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	4605      	mov	r5, r0
 8001d80:	b118      	cbz	r0, 8001d8a <__swbuf_r+0x12>
 8001d82:	6983      	ldr	r3, [r0, #24]
 8001d84:	b90b      	cbnz	r3, 8001d8a <__swbuf_r+0x12>
 8001d86:	f000 f9d5 	bl	8002134 <__sinit>
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <__swbuf_r+0x98>)
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	d12b      	bne.n	8001de8 <__swbuf_r+0x70>
 8001d90:	686c      	ldr	r4, [r5, #4]
 8001d92:	69a3      	ldr	r3, [r4, #24]
 8001d94:	60a3      	str	r3, [r4, #8]
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	071a      	lsls	r2, r3, #28
 8001d9a:	d52f      	bpl.n	8001dfc <__swbuf_r+0x84>
 8001d9c:	6923      	ldr	r3, [r4, #16]
 8001d9e:	b36b      	cbz	r3, 8001dfc <__swbuf_r+0x84>
 8001da0:	6923      	ldr	r3, [r4, #16]
 8001da2:	6820      	ldr	r0, [r4, #0]
 8001da4:	1ac0      	subs	r0, r0, r3
 8001da6:	6963      	ldr	r3, [r4, #20]
 8001da8:	b2f6      	uxtb	r6, r6
 8001daa:	4283      	cmp	r3, r0
 8001dac:	4637      	mov	r7, r6
 8001dae:	dc04      	bgt.n	8001dba <__swbuf_r+0x42>
 8001db0:	4621      	mov	r1, r4
 8001db2:	4628      	mov	r0, r5
 8001db4:	f000 f92a 	bl	800200c <_fflush_r>
 8001db8:	bb30      	cbnz	r0, 8001e08 <__swbuf_r+0x90>
 8001dba:	68a3      	ldr	r3, [r4, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60a3      	str	r3, [r4, #8]
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	6022      	str	r2, [r4, #0]
 8001dc6:	701e      	strb	r6, [r3, #0]
 8001dc8:	6963      	ldr	r3, [r4, #20]
 8001dca:	3001      	adds	r0, #1
 8001dcc:	4283      	cmp	r3, r0
 8001dce:	d004      	beq.n	8001dda <__swbuf_r+0x62>
 8001dd0:	89a3      	ldrh	r3, [r4, #12]
 8001dd2:	07db      	lsls	r3, r3, #31
 8001dd4:	d506      	bpl.n	8001de4 <__swbuf_r+0x6c>
 8001dd6:	2e0a      	cmp	r6, #10
 8001dd8:	d104      	bne.n	8001de4 <__swbuf_r+0x6c>
 8001dda:	4621      	mov	r1, r4
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f000 f915 	bl	800200c <_fflush_r>
 8001de2:	b988      	cbnz	r0, 8001e08 <__swbuf_r+0x90>
 8001de4:	4638      	mov	r0, r7
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <__swbuf_r+0x9c>)
 8001dea:	429c      	cmp	r4, r3
 8001dec:	d101      	bne.n	8001df2 <__swbuf_r+0x7a>
 8001dee:	68ac      	ldr	r4, [r5, #8]
 8001df0:	e7cf      	b.n	8001d92 <__swbuf_r+0x1a>
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <__swbuf_r+0xa0>)
 8001df4:	429c      	cmp	r4, r3
 8001df6:	bf08      	it	eq
 8001df8:	68ec      	ldreq	r4, [r5, #12]
 8001dfa:	e7ca      	b.n	8001d92 <__swbuf_r+0x1a>
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	4628      	mov	r0, r5
 8001e00:	f000 f80c 	bl	8001e1c <__swsetup_r>
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d0cb      	beq.n	8001da0 <__swbuf_r+0x28>
 8001e08:	f04f 37ff 	mov.w	r7, #4294967295
 8001e0c:	e7ea      	b.n	8001de4 <__swbuf_r+0x6c>
 8001e0e:	bf00      	nop
 8001e10:	08002658 	.word	0x08002658
 8001e14:	08002678 	.word	0x08002678
 8001e18:	08002638 	.word	0x08002638

08001e1c <__swsetup_r>:
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <__swsetup_r+0xcc>)
 8001e1e:	b570      	push	{r4, r5, r6, lr}
 8001e20:	681d      	ldr	r5, [r3, #0]
 8001e22:	4606      	mov	r6, r0
 8001e24:	460c      	mov	r4, r1
 8001e26:	b125      	cbz	r5, 8001e32 <__swsetup_r+0x16>
 8001e28:	69ab      	ldr	r3, [r5, #24]
 8001e2a:	b913      	cbnz	r3, 8001e32 <__swsetup_r+0x16>
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	f000 f981 	bl	8002134 <__sinit>
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <__swsetup_r+0xd0>)
 8001e34:	429c      	cmp	r4, r3
 8001e36:	d10f      	bne.n	8001e58 <__swsetup_r+0x3c>
 8001e38:	686c      	ldr	r4, [r5, #4]
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e40:	0719      	lsls	r1, r3, #28
 8001e42:	d42c      	bmi.n	8001e9e <__swsetup_r+0x82>
 8001e44:	06dd      	lsls	r5, r3, #27
 8001e46:	d411      	bmi.n	8001e6c <__swsetup_r+0x50>
 8001e48:	2309      	movs	r3, #9
 8001e4a:	6033      	str	r3, [r6, #0]
 8001e4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001e50:	81a3      	strh	r3, [r4, #12]
 8001e52:	f04f 30ff 	mov.w	r0, #4294967295
 8001e56:	e03e      	b.n	8001ed6 <__swsetup_r+0xba>
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <__swsetup_r+0xd4>)
 8001e5a:	429c      	cmp	r4, r3
 8001e5c:	d101      	bne.n	8001e62 <__swsetup_r+0x46>
 8001e5e:	68ac      	ldr	r4, [r5, #8]
 8001e60:	e7eb      	b.n	8001e3a <__swsetup_r+0x1e>
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <__swsetup_r+0xd8>)
 8001e64:	429c      	cmp	r4, r3
 8001e66:	bf08      	it	eq
 8001e68:	68ec      	ldreq	r4, [r5, #12]
 8001e6a:	e7e6      	b.n	8001e3a <__swsetup_r+0x1e>
 8001e6c:	0758      	lsls	r0, r3, #29
 8001e6e:	d512      	bpl.n	8001e96 <__swsetup_r+0x7a>
 8001e70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e72:	b141      	cbz	r1, 8001e86 <__swsetup_r+0x6a>
 8001e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d002      	beq.n	8001e82 <__swsetup_r+0x66>
 8001e7c:	4630      	mov	r0, r6
 8001e7e:	f7ff fba1 	bl	80015c4 <_free_r>
 8001e82:	2300      	movs	r3, #0
 8001e84:	6363      	str	r3, [r4, #52]	; 0x34
 8001e86:	89a3      	ldrh	r3, [r4, #12]
 8001e88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e8c:	81a3      	strh	r3, [r4, #12]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	6063      	str	r3, [r4, #4]
 8001e92:	6923      	ldr	r3, [r4, #16]
 8001e94:	6023      	str	r3, [r4, #0]
 8001e96:	89a3      	ldrh	r3, [r4, #12]
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	81a3      	strh	r3, [r4, #12]
 8001e9e:	6923      	ldr	r3, [r4, #16]
 8001ea0:	b94b      	cbnz	r3, 8001eb6 <__swsetup_r+0x9a>
 8001ea2:	89a3      	ldrh	r3, [r4, #12]
 8001ea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eac:	d003      	beq.n	8001eb6 <__swsetup_r+0x9a>
 8001eae:	4621      	mov	r1, r4
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f000 fa05 	bl	80022c0 <__smakebuf_r>
 8001eb6:	89a0      	ldrh	r0, [r4, #12]
 8001eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001ebc:	f010 0301 	ands.w	r3, r0, #1
 8001ec0:	d00a      	beq.n	8001ed8 <__swsetup_r+0xbc>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60a3      	str	r3, [r4, #8]
 8001ec6:	6963      	ldr	r3, [r4, #20]
 8001ec8:	425b      	negs	r3, r3
 8001eca:	61a3      	str	r3, [r4, #24]
 8001ecc:	6923      	ldr	r3, [r4, #16]
 8001ece:	b943      	cbnz	r3, 8001ee2 <__swsetup_r+0xc6>
 8001ed0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001ed4:	d1ba      	bne.n	8001e4c <__swsetup_r+0x30>
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}
 8001ed8:	0781      	lsls	r1, r0, #30
 8001eda:	bf58      	it	pl
 8001edc:	6963      	ldrpl	r3, [r4, #20]
 8001ede:	60a3      	str	r3, [r4, #8]
 8001ee0:	e7f4      	b.n	8001ecc <__swsetup_r+0xb0>
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	e7f7      	b.n	8001ed6 <__swsetup_r+0xba>
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	08002658 	.word	0x08002658
 8001ef0:	08002678 	.word	0x08002678
 8001ef4:	08002638 	.word	0x08002638

08001ef8 <abort>:
 8001ef8:	b508      	push	{r3, lr}
 8001efa:	2006      	movs	r0, #6
 8001efc:	f000 fa54 	bl	80023a8 <raise>
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff f9f4 	bl	80012ee <_exit>
	...

08001f08 <__sflush_r>:
 8001f08:	898a      	ldrh	r2, [r1, #12]
 8001f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	0710      	lsls	r0, r2, #28
 8001f10:	460c      	mov	r4, r1
 8001f12:	d457      	bmi.n	8001fc4 <__sflush_r+0xbc>
 8001f14:	684b      	ldr	r3, [r1, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	dc04      	bgt.n	8001f24 <__sflush_r+0x1c>
 8001f1a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	dc01      	bgt.n	8001f24 <__sflush_r+0x1c>
 8001f20:	2000      	movs	r0, #0
 8001f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f26:	2e00      	cmp	r6, #0
 8001f28:	d0fa      	beq.n	8001f20 <__sflush_r+0x18>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f30:	682f      	ldr	r7, [r5, #0]
 8001f32:	602b      	str	r3, [r5, #0]
 8001f34:	d032      	beq.n	8001f9c <__sflush_r+0x94>
 8001f36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	075a      	lsls	r2, r3, #29
 8001f3c:	d505      	bpl.n	8001f4a <__sflush_r+0x42>
 8001f3e:	6863      	ldr	r3, [r4, #4]
 8001f40:	1ac0      	subs	r0, r0, r3
 8001f42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f44:	b10b      	cbz	r3, 8001f4a <__sflush_r+0x42>
 8001f46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f48:	1ac0      	subs	r0, r0, r3
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f50:	6a21      	ldr	r1, [r4, #32]
 8001f52:	4628      	mov	r0, r5
 8001f54:	47b0      	blx	r6
 8001f56:	1c43      	adds	r3, r0, #1
 8001f58:	89a3      	ldrh	r3, [r4, #12]
 8001f5a:	d106      	bne.n	8001f6a <__sflush_r+0x62>
 8001f5c:	6829      	ldr	r1, [r5, #0]
 8001f5e:	291d      	cmp	r1, #29
 8001f60:	d82c      	bhi.n	8001fbc <__sflush_r+0xb4>
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <__sflush_r+0x100>)
 8001f64:	40ca      	lsrs	r2, r1
 8001f66:	07d6      	lsls	r6, r2, #31
 8001f68:	d528      	bpl.n	8001fbc <__sflush_r+0xb4>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	6062      	str	r2, [r4, #4]
 8001f6e:	04d9      	lsls	r1, r3, #19
 8001f70:	6922      	ldr	r2, [r4, #16]
 8001f72:	6022      	str	r2, [r4, #0]
 8001f74:	d504      	bpl.n	8001f80 <__sflush_r+0x78>
 8001f76:	1c42      	adds	r2, r0, #1
 8001f78:	d101      	bne.n	8001f7e <__sflush_r+0x76>
 8001f7a:	682b      	ldr	r3, [r5, #0]
 8001f7c:	b903      	cbnz	r3, 8001f80 <__sflush_r+0x78>
 8001f7e:	6560      	str	r0, [r4, #84]	; 0x54
 8001f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f82:	602f      	str	r7, [r5, #0]
 8001f84:	2900      	cmp	r1, #0
 8001f86:	d0cb      	beq.n	8001f20 <__sflush_r+0x18>
 8001f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f8c:	4299      	cmp	r1, r3
 8001f8e:	d002      	beq.n	8001f96 <__sflush_r+0x8e>
 8001f90:	4628      	mov	r0, r5
 8001f92:	f7ff fb17 	bl	80015c4 <_free_r>
 8001f96:	2000      	movs	r0, #0
 8001f98:	6360      	str	r0, [r4, #52]	; 0x34
 8001f9a:	e7c2      	b.n	8001f22 <__sflush_r+0x1a>
 8001f9c:	6a21      	ldr	r1, [r4, #32]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	47b0      	blx	r6
 8001fa4:	1c41      	adds	r1, r0, #1
 8001fa6:	d1c7      	bne.n	8001f38 <__sflush_r+0x30>
 8001fa8:	682b      	ldr	r3, [r5, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0c4      	beq.n	8001f38 <__sflush_r+0x30>
 8001fae:	2b1d      	cmp	r3, #29
 8001fb0:	d001      	beq.n	8001fb6 <__sflush_r+0xae>
 8001fb2:	2b16      	cmp	r3, #22
 8001fb4:	d101      	bne.n	8001fba <__sflush_r+0xb2>
 8001fb6:	602f      	str	r7, [r5, #0]
 8001fb8:	e7b2      	b.n	8001f20 <__sflush_r+0x18>
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc0:	81a3      	strh	r3, [r4, #12]
 8001fc2:	e7ae      	b.n	8001f22 <__sflush_r+0x1a>
 8001fc4:	690f      	ldr	r7, [r1, #16]
 8001fc6:	2f00      	cmp	r7, #0
 8001fc8:	d0aa      	beq.n	8001f20 <__sflush_r+0x18>
 8001fca:	0793      	lsls	r3, r2, #30
 8001fcc:	680e      	ldr	r6, [r1, #0]
 8001fce:	bf08      	it	eq
 8001fd0:	694b      	ldreq	r3, [r1, #20]
 8001fd2:	600f      	str	r7, [r1, #0]
 8001fd4:	bf18      	it	ne
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	1bf6      	subs	r6, r6, r7
 8001fda:	608b      	str	r3, [r1, #8]
 8001fdc:	2e00      	cmp	r6, #0
 8001fde:	dd9f      	ble.n	8001f20 <__sflush_r+0x18>
 8001fe0:	6a21      	ldr	r1, [r4, #32]
 8001fe2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001fe6:	4633      	mov	r3, r6
 8001fe8:	463a      	mov	r2, r7
 8001fea:	4628      	mov	r0, r5
 8001fec:	47e0      	blx	ip
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	dc06      	bgt.n	8002000 <__sflush_r+0xf8>
 8001ff2:	89a3      	ldrh	r3, [r4, #12]
 8001ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ff8:	81a3      	strh	r3, [r4, #12]
 8001ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8001ffe:	e790      	b.n	8001f22 <__sflush_r+0x1a>
 8002000:	4407      	add	r7, r0
 8002002:	1a36      	subs	r6, r6, r0
 8002004:	e7ea      	b.n	8001fdc <__sflush_r+0xd4>
 8002006:	bf00      	nop
 8002008:	20400001 	.word	0x20400001

0800200c <_fflush_r>:
 800200c:	b538      	push	{r3, r4, r5, lr}
 800200e:	690b      	ldr	r3, [r1, #16]
 8002010:	4605      	mov	r5, r0
 8002012:	460c      	mov	r4, r1
 8002014:	b913      	cbnz	r3, 800201c <_fflush_r+0x10>
 8002016:	2500      	movs	r5, #0
 8002018:	4628      	mov	r0, r5
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	b118      	cbz	r0, 8002026 <_fflush_r+0x1a>
 800201e:	6983      	ldr	r3, [r0, #24]
 8002020:	b90b      	cbnz	r3, 8002026 <_fflush_r+0x1a>
 8002022:	f000 f887 	bl	8002134 <__sinit>
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <_fflush_r+0x6c>)
 8002028:	429c      	cmp	r4, r3
 800202a:	d11b      	bne.n	8002064 <_fflush_r+0x58>
 800202c:	686c      	ldr	r4, [r5, #4]
 800202e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0ef      	beq.n	8002016 <_fflush_r+0xa>
 8002036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002038:	07d0      	lsls	r0, r2, #31
 800203a:	d404      	bmi.n	8002046 <_fflush_r+0x3a>
 800203c:	0599      	lsls	r1, r3, #22
 800203e:	d402      	bmi.n	8002046 <_fflush_r+0x3a>
 8002040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002042:	f000 f915 	bl	8002270 <__retarget_lock_acquire_recursive>
 8002046:	4628      	mov	r0, r5
 8002048:	4621      	mov	r1, r4
 800204a:	f7ff ff5d 	bl	8001f08 <__sflush_r>
 800204e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002050:	07da      	lsls	r2, r3, #31
 8002052:	4605      	mov	r5, r0
 8002054:	d4e0      	bmi.n	8002018 <_fflush_r+0xc>
 8002056:	89a3      	ldrh	r3, [r4, #12]
 8002058:	059b      	lsls	r3, r3, #22
 800205a:	d4dd      	bmi.n	8002018 <_fflush_r+0xc>
 800205c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800205e:	f000 f908 	bl	8002272 <__retarget_lock_release_recursive>
 8002062:	e7d9      	b.n	8002018 <_fflush_r+0xc>
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <_fflush_r+0x70>)
 8002066:	429c      	cmp	r4, r3
 8002068:	d101      	bne.n	800206e <_fflush_r+0x62>
 800206a:	68ac      	ldr	r4, [r5, #8]
 800206c:	e7df      	b.n	800202e <_fflush_r+0x22>
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <_fflush_r+0x74>)
 8002070:	429c      	cmp	r4, r3
 8002072:	bf08      	it	eq
 8002074:	68ec      	ldreq	r4, [r5, #12]
 8002076:	e7da      	b.n	800202e <_fflush_r+0x22>
 8002078:	08002658 	.word	0x08002658
 800207c:	08002678 	.word	0x08002678
 8002080:	08002638 	.word	0x08002638

08002084 <std>:
 8002084:	2300      	movs	r3, #0
 8002086:	b510      	push	{r4, lr}
 8002088:	4604      	mov	r4, r0
 800208a:	e9c0 3300 	strd	r3, r3, [r0]
 800208e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002092:	6083      	str	r3, [r0, #8]
 8002094:	8181      	strh	r1, [r0, #12]
 8002096:	6643      	str	r3, [r0, #100]	; 0x64
 8002098:	81c2      	strh	r2, [r0, #14]
 800209a:	6183      	str	r3, [r0, #24]
 800209c:	4619      	mov	r1, r3
 800209e:	2208      	movs	r2, #8
 80020a0:	305c      	adds	r0, #92	; 0x5c
 80020a2:	f7ff fa21 	bl	80014e8 <memset>
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <std+0x38>)
 80020a8:	6263      	str	r3, [r4, #36]	; 0x24
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <std+0x3c>)
 80020ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <std+0x40>)
 80020b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <std+0x44>)
 80020b4:	6224      	str	r4, [r4, #32]
 80020b6:	6323      	str	r3, [r4, #48]	; 0x30
 80020b8:	bd10      	pop	{r4, pc}
 80020ba:	bf00      	nop
 80020bc:	080023e1 	.word	0x080023e1
 80020c0:	08002403 	.word	0x08002403
 80020c4:	0800243b 	.word	0x0800243b
 80020c8:	0800245f 	.word	0x0800245f

080020cc <_cleanup_r>:
 80020cc:	4901      	ldr	r1, [pc, #4]	; (80020d4 <_cleanup_r+0x8>)
 80020ce:	f000 b8af 	b.w	8002230 <_fwalk_reent>
 80020d2:	bf00      	nop
 80020d4:	0800200d 	.word	0x0800200d

080020d8 <__sfmoreglue>:
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	2268      	movs	r2, #104	; 0x68
 80020dc:	1e4d      	subs	r5, r1, #1
 80020de:	4355      	muls	r5, r2
 80020e0:	460e      	mov	r6, r1
 80020e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020e6:	f7ff fad7 	bl	8001698 <_malloc_r>
 80020ea:	4604      	mov	r4, r0
 80020ec:	b140      	cbz	r0, 8002100 <__sfmoreglue+0x28>
 80020ee:	2100      	movs	r1, #0
 80020f0:	e9c0 1600 	strd	r1, r6, [r0]
 80020f4:	300c      	adds	r0, #12
 80020f6:	60a0      	str	r0, [r4, #8]
 80020f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80020fc:	f7ff f9f4 	bl	80014e8 <memset>
 8002100:	4620      	mov	r0, r4
 8002102:	bd70      	pop	{r4, r5, r6, pc}

08002104 <__sfp_lock_acquire>:
 8002104:	4801      	ldr	r0, [pc, #4]	; (800210c <__sfp_lock_acquire+0x8>)
 8002106:	f000 b8b3 	b.w	8002270 <__retarget_lock_acquire_recursive>
 800210a:	bf00      	nop
 800210c:	200000f1 	.word	0x200000f1

08002110 <__sfp_lock_release>:
 8002110:	4801      	ldr	r0, [pc, #4]	; (8002118 <__sfp_lock_release+0x8>)
 8002112:	f000 b8ae 	b.w	8002272 <__retarget_lock_release_recursive>
 8002116:	bf00      	nop
 8002118:	200000f1 	.word	0x200000f1

0800211c <__sinit_lock_acquire>:
 800211c:	4801      	ldr	r0, [pc, #4]	; (8002124 <__sinit_lock_acquire+0x8>)
 800211e:	f000 b8a7 	b.w	8002270 <__retarget_lock_acquire_recursive>
 8002122:	bf00      	nop
 8002124:	200000f2 	.word	0x200000f2

08002128 <__sinit_lock_release>:
 8002128:	4801      	ldr	r0, [pc, #4]	; (8002130 <__sinit_lock_release+0x8>)
 800212a:	f000 b8a2 	b.w	8002272 <__retarget_lock_release_recursive>
 800212e:	bf00      	nop
 8002130:	200000f2 	.word	0x200000f2

08002134 <__sinit>:
 8002134:	b510      	push	{r4, lr}
 8002136:	4604      	mov	r4, r0
 8002138:	f7ff fff0 	bl	800211c <__sinit_lock_acquire>
 800213c:	69a3      	ldr	r3, [r4, #24]
 800213e:	b11b      	cbz	r3, 8002148 <__sinit+0x14>
 8002140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002144:	f7ff bff0 	b.w	8002128 <__sinit_lock_release>
 8002148:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800214c:	6523      	str	r3, [r4, #80]	; 0x50
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <__sinit+0x68>)
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <__sinit+0x6c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	62a2      	str	r2, [r4, #40]	; 0x28
 8002156:	42a3      	cmp	r3, r4
 8002158:	bf04      	itt	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	61a3      	streq	r3, [r4, #24]
 800215e:	4620      	mov	r0, r4
 8002160:	f000 f820 	bl	80021a4 <__sfp>
 8002164:	6060      	str	r0, [r4, #4]
 8002166:	4620      	mov	r0, r4
 8002168:	f000 f81c 	bl	80021a4 <__sfp>
 800216c:	60a0      	str	r0, [r4, #8]
 800216e:	4620      	mov	r0, r4
 8002170:	f000 f818 	bl	80021a4 <__sfp>
 8002174:	2200      	movs	r2, #0
 8002176:	60e0      	str	r0, [r4, #12]
 8002178:	2104      	movs	r1, #4
 800217a:	6860      	ldr	r0, [r4, #4]
 800217c:	f7ff ff82 	bl	8002084 <std>
 8002180:	68a0      	ldr	r0, [r4, #8]
 8002182:	2201      	movs	r2, #1
 8002184:	2109      	movs	r1, #9
 8002186:	f7ff ff7d 	bl	8002084 <std>
 800218a:	68e0      	ldr	r0, [r4, #12]
 800218c:	2202      	movs	r2, #2
 800218e:	2112      	movs	r1, #18
 8002190:	f7ff ff78 	bl	8002084 <std>
 8002194:	2301      	movs	r3, #1
 8002196:	61a3      	str	r3, [r4, #24]
 8002198:	e7d2      	b.n	8002140 <__sinit+0xc>
 800219a:	bf00      	nop
 800219c:	08002550 	.word	0x08002550
 80021a0:	080020cd 	.word	0x080020cd

080021a4 <__sfp>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	4607      	mov	r7, r0
 80021a8:	f7ff ffac 	bl	8002104 <__sfp_lock_acquire>
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <__sfp+0x84>)
 80021ae:	681e      	ldr	r6, [r3, #0]
 80021b0:	69b3      	ldr	r3, [r6, #24]
 80021b2:	b913      	cbnz	r3, 80021ba <__sfp+0x16>
 80021b4:	4630      	mov	r0, r6
 80021b6:	f7ff ffbd 	bl	8002134 <__sinit>
 80021ba:	3648      	adds	r6, #72	; 0x48
 80021bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	d503      	bpl.n	80021cc <__sfp+0x28>
 80021c4:	6833      	ldr	r3, [r6, #0]
 80021c6:	b30b      	cbz	r3, 800220c <__sfp+0x68>
 80021c8:	6836      	ldr	r6, [r6, #0]
 80021ca:	e7f7      	b.n	80021bc <__sfp+0x18>
 80021cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021d0:	b9d5      	cbnz	r5, 8002208 <__sfp+0x64>
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <__sfp+0x88>)
 80021d4:	60e3      	str	r3, [r4, #12]
 80021d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021da:	6665      	str	r5, [r4, #100]	; 0x64
 80021dc:	f000 f847 	bl	800226e <__retarget_lock_init_recursive>
 80021e0:	f7ff ff96 	bl	8002110 <__sfp_lock_release>
 80021e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021ec:	6025      	str	r5, [r4, #0]
 80021ee:	61a5      	str	r5, [r4, #24]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4629      	mov	r1, r5
 80021f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80021f8:	f7ff f976 	bl	80014e8 <memset>
 80021fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002204:	4620      	mov	r0, r4
 8002206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002208:	3468      	adds	r4, #104	; 0x68
 800220a:	e7d9      	b.n	80021c0 <__sfp+0x1c>
 800220c:	2104      	movs	r1, #4
 800220e:	4638      	mov	r0, r7
 8002210:	f7ff ff62 	bl	80020d8 <__sfmoreglue>
 8002214:	4604      	mov	r4, r0
 8002216:	6030      	str	r0, [r6, #0]
 8002218:	2800      	cmp	r0, #0
 800221a:	d1d5      	bne.n	80021c8 <__sfp+0x24>
 800221c:	f7ff ff78 	bl	8002110 <__sfp_lock_release>
 8002220:	230c      	movs	r3, #12
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	e7ee      	b.n	8002204 <__sfp+0x60>
 8002226:	bf00      	nop
 8002228:	08002550 	.word	0x08002550
 800222c:	ffff0001 	.word	0xffff0001

08002230 <_fwalk_reent>:
 8002230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002234:	4606      	mov	r6, r0
 8002236:	4688      	mov	r8, r1
 8002238:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800223c:	2700      	movs	r7, #0
 800223e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002242:	f1b9 0901 	subs.w	r9, r9, #1
 8002246:	d505      	bpl.n	8002254 <_fwalk_reent+0x24>
 8002248:	6824      	ldr	r4, [r4, #0]
 800224a:	2c00      	cmp	r4, #0
 800224c:	d1f7      	bne.n	800223e <_fwalk_reent+0xe>
 800224e:	4638      	mov	r0, r7
 8002250:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002254:	89ab      	ldrh	r3, [r5, #12]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d907      	bls.n	800226a <_fwalk_reent+0x3a>
 800225a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800225e:	3301      	adds	r3, #1
 8002260:	d003      	beq.n	800226a <_fwalk_reent+0x3a>
 8002262:	4629      	mov	r1, r5
 8002264:	4630      	mov	r0, r6
 8002266:	47c0      	blx	r8
 8002268:	4307      	orrs	r7, r0
 800226a:	3568      	adds	r5, #104	; 0x68
 800226c:	e7e9      	b.n	8002242 <_fwalk_reent+0x12>

0800226e <__retarget_lock_init_recursive>:
 800226e:	4770      	bx	lr

08002270 <__retarget_lock_acquire_recursive>:
 8002270:	4770      	bx	lr

08002272 <__retarget_lock_release_recursive>:
 8002272:	4770      	bx	lr

08002274 <__swhatbuf_r>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	460e      	mov	r6, r1
 8002278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800227c:	2900      	cmp	r1, #0
 800227e:	b096      	sub	sp, #88	; 0x58
 8002280:	4614      	mov	r4, r2
 8002282:	461d      	mov	r5, r3
 8002284:	da08      	bge.n	8002298 <__swhatbuf_r+0x24>
 8002286:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	602a      	str	r2, [r5, #0]
 800228e:	061a      	lsls	r2, r3, #24
 8002290:	d410      	bmi.n	80022b4 <__swhatbuf_r+0x40>
 8002292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002296:	e00e      	b.n	80022b6 <__swhatbuf_r+0x42>
 8002298:	466a      	mov	r2, sp
 800229a:	f000 f907 	bl	80024ac <_fstat_r>
 800229e:	2800      	cmp	r0, #0
 80022a0:	dbf1      	blt.n	8002286 <__swhatbuf_r+0x12>
 80022a2:	9a01      	ldr	r2, [sp, #4]
 80022a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80022a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80022ac:	425a      	negs	r2, r3
 80022ae:	415a      	adcs	r2, r3
 80022b0:	602a      	str	r2, [r5, #0]
 80022b2:	e7ee      	b.n	8002292 <__swhatbuf_r+0x1e>
 80022b4:	2340      	movs	r3, #64	; 0x40
 80022b6:	2000      	movs	r0, #0
 80022b8:	6023      	str	r3, [r4, #0]
 80022ba:	b016      	add	sp, #88	; 0x58
 80022bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080022c0 <__smakebuf_r>:
 80022c0:	898b      	ldrh	r3, [r1, #12]
 80022c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80022c4:	079d      	lsls	r5, r3, #30
 80022c6:	4606      	mov	r6, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	d507      	bpl.n	80022dc <__smakebuf_r+0x1c>
 80022cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80022d0:	6023      	str	r3, [r4, #0]
 80022d2:	6123      	str	r3, [r4, #16]
 80022d4:	2301      	movs	r3, #1
 80022d6:	6163      	str	r3, [r4, #20]
 80022d8:	b002      	add	sp, #8
 80022da:	bd70      	pop	{r4, r5, r6, pc}
 80022dc:	ab01      	add	r3, sp, #4
 80022de:	466a      	mov	r2, sp
 80022e0:	f7ff ffc8 	bl	8002274 <__swhatbuf_r>
 80022e4:	9900      	ldr	r1, [sp, #0]
 80022e6:	4605      	mov	r5, r0
 80022e8:	4630      	mov	r0, r6
 80022ea:	f7ff f9d5 	bl	8001698 <_malloc_r>
 80022ee:	b948      	cbnz	r0, 8002304 <__smakebuf_r+0x44>
 80022f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022f4:	059a      	lsls	r2, r3, #22
 80022f6:	d4ef      	bmi.n	80022d8 <__smakebuf_r+0x18>
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	e7e3      	b.n	80022cc <__smakebuf_r+0xc>
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <__smakebuf_r+0x7c>)
 8002306:	62b3      	str	r3, [r6, #40]	; 0x28
 8002308:	89a3      	ldrh	r3, [r4, #12]
 800230a:	6020      	str	r0, [r4, #0]
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	81a3      	strh	r3, [r4, #12]
 8002312:	9b00      	ldr	r3, [sp, #0]
 8002314:	6163      	str	r3, [r4, #20]
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	6120      	str	r0, [r4, #16]
 800231a:	b15b      	cbz	r3, 8002334 <__smakebuf_r+0x74>
 800231c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002320:	4630      	mov	r0, r6
 8002322:	f000 f8d5 	bl	80024d0 <_isatty_r>
 8002326:	b128      	cbz	r0, 8002334 <__smakebuf_r+0x74>
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	81a3      	strh	r3, [r4, #12]
 8002334:	89a0      	ldrh	r0, [r4, #12]
 8002336:	4305      	orrs	r5, r0
 8002338:	81a5      	strh	r5, [r4, #12]
 800233a:	e7cd      	b.n	80022d8 <__smakebuf_r+0x18>
 800233c:	080020cd 	.word	0x080020cd

08002340 <__malloc_lock>:
 8002340:	4801      	ldr	r0, [pc, #4]	; (8002348 <__malloc_lock+0x8>)
 8002342:	f7ff bf95 	b.w	8002270 <__retarget_lock_acquire_recursive>
 8002346:	bf00      	nop
 8002348:	200000f0 	.word	0x200000f0

0800234c <__malloc_unlock>:
 800234c:	4801      	ldr	r0, [pc, #4]	; (8002354 <__malloc_unlock+0x8>)
 800234e:	f7ff bf90 	b.w	8002272 <__retarget_lock_release_recursive>
 8002352:	bf00      	nop
 8002354:	200000f0 	.word	0x200000f0

08002358 <_raise_r>:
 8002358:	291f      	cmp	r1, #31
 800235a:	b538      	push	{r3, r4, r5, lr}
 800235c:	4604      	mov	r4, r0
 800235e:	460d      	mov	r5, r1
 8002360:	d904      	bls.n	800236c <_raise_r+0x14>
 8002362:	2316      	movs	r3, #22
 8002364:	6003      	str	r3, [r0, #0]
 8002366:	f04f 30ff 	mov.w	r0, #4294967295
 800236a:	bd38      	pop	{r3, r4, r5, pc}
 800236c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800236e:	b112      	cbz	r2, 8002376 <_raise_r+0x1e>
 8002370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002374:	b94b      	cbnz	r3, 800238a <_raise_r+0x32>
 8002376:	4620      	mov	r0, r4
 8002378:	f000 f830 	bl	80023dc <_getpid_r>
 800237c:	462a      	mov	r2, r5
 800237e:	4601      	mov	r1, r0
 8002380:	4620      	mov	r0, r4
 8002382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002386:	f000 b817 	b.w	80023b8 <_kill_r>
 800238a:	2b01      	cmp	r3, #1
 800238c:	d00a      	beq.n	80023a4 <_raise_r+0x4c>
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	d103      	bne.n	800239a <_raise_r+0x42>
 8002392:	2316      	movs	r3, #22
 8002394:	6003      	str	r3, [r0, #0]
 8002396:	2001      	movs	r0, #1
 8002398:	e7e7      	b.n	800236a <_raise_r+0x12>
 800239a:	2400      	movs	r4, #0
 800239c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80023a0:	4628      	mov	r0, r5
 80023a2:	4798      	blx	r3
 80023a4:	2000      	movs	r0, #0
 80023a6:	e7e0      	b.n	800236a <_raise_r+0x12>

080023a8 <raise>:
 80023a8:	4b02      	ldr	r3, [pc, #8]	; (80023b4 <raise+0xc>)
 80023aa:	4601      	mov	r1, r0
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	f7ff bfd3 	b.w	8002358 <_raise_r>
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000

080023b8 <_kill_r>:
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4d07      	ldr	r5, [pc, #28]	; (80023d8 <_kill_r+0x20>)
 80023bc:	2300      	movs	r3, #0
 80023be:	4604      	mov	r4, r0
 80023c0:	4608      	mov	r0, r1
 80023c2:	4611      	mov	r1, r2
 80023c4:	602b      	str	r3, [r5, #0]
 80023c6:	f7fe ff82 	bl	80012ce <_kill>
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	d102      	bne.n	80023d4 <_kill_r+0x1c>
 80023ce:	682b      	ldr	r3, [r5, #0]
 80023d0:	b103      	cbz	r3, 80023d4 <_kill_r+0x1c>
 80023d2:	6023      	str	r3, [r4, #0]
 80023d4:	bd38      	pop	{r3, r4, r5, pc}
 80023d6:	bf00      	nop
 80023d8:	200000f4 	.word	0x200000f4

080023dc <_getpid_r>:
 80023dc:	f7fe bf70 	b.w	80012c0 <_getpid>

080023e0 <__sread>:
 80023e0:	b510      	push	{r4, lr}
 80023e2:	460c      	mov	r4, r1
 80023e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e8:	f000 f894 	bl	8002514 <_read_r>
 80023ec:	2800      	cmp	r0, #0
 80023ee:	bfab      	itete	ge
 80023f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023f2:	89a3      	ldrhlt	r3, [r4, #12]
 80023f4:	181b      	addge	r3, r3, r0
 80023f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023fa:	bfac      	ite	ge
 80023fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80023fe:	81a3      	strhlt	r3, [r4, #12]
 8002400:	bd10      	pop	{r4, pc}

08002402 <__swrite>:
 8002402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002406:	461f      	mov	r7, r3
 8002408:	898b      	ldrh	r3, [r1, #12]
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	4605      	mov	r5, r0
 800240e:	460c      	mov	r4, r1
 8002410:	4616      	mov	r6, r2
 8002412:	d505      	bpl.n	8002420 <__swrite+0x1e>
 8002414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002418:	2302      	movs	r3, #2
 800241a:	2200      	movs	r2, #0
 800241c:	f000 f868 	bl	80024f0 <_lseek_r>
 8002420:	89a3      	ldrh	r3, [r4, #12]
 8002422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800242a:	81a3      	strh	r3, [r4, #12]
 800242c:	4632      	mov	r2, r6
 800242e:	463b      	mov	r3, r7
 8002430:	4628      	mov	r0, r5
 8002432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002436:	f000 b817 	b.w	8002468 <_write_r>

0800243a <__sseek>:
 800243a:	b510      	push	{r4, lr}
 800243c:	460c      	mov	r4, r1
 800243e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002442:	f000 f855 	bl	80024f0 <_lseek_r>
 8002446:	1c43      	adds	r3, r0, #1
 8002448:	89a3      	ldrh	r3, [r4, #12]
 800244a:	bf15      	itete	ne
 800244c:	6560      	strne	r0, [r4, #84]	; 0x54
 800244e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002456:	81a3      	strheq	r3, [r4, #12]
 8002458:	bf18      	it	ne
 800245a:	81a3      	strhne	r3, [r4, #12]
 800245c:	bd10      	pop	{r4, pc}

0800245e <__sclose>:
 800245e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002462:	f000 b813 	b.w	800248c <_close_r>
	...

08002468 <_write_r>:
 8002468:	b538      	push	{r3, r4, r5, lr}
 800246a:	4d07      	ldr	r5, [pc, #28]	; (8002488 <_write_r+0x20>)
 800246c:	4604      	mov	r4, r0
 800246e:	4608      	mov	r0, r1
 8002470:	4611      	mov	r1, r2
 8002472:	2200      	movs	r2, #0
 8002474:	602a      	str	r2, [r5, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f7fe ff60 	bl	800133c <_write>
 800247c:	1c43      	adds	r3, r0, #1
 800247e:	d102      	bne.n	8002486 <_write_r+0x1e>
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	b103      	cbz	r3, 8002486 <_write_r+0x1e>
 8002484:	6023      	str	r3, [r4, #0]
 8002486:	bd38      	pop	{r3, r4, r5, pc}
 8002488:	200000f4 	.word	0x200000f4

0800248c <_close_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4d06      	ldr	r5, [pc, #24]	; (80024a8 <_close_r+0x1c>)
 8002490:	2300      	movs	r3, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	f7fe ff6c 	bl	8001374 <_close>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_close_r+0x1a>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_close_r+0x1a>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	200000f4 	.word	0x200000f4

080024ac <_fstat_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4d07      	ldr	r5, [pc, #28]	; (80024cc <_fstat_r+0x20>)
 80024b0:	2300      	movs	r3, #0
 80024b2:	4604      	mov	r4, r0
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	602b      	str	r3, [r5, #0]
 80024ba:	f7fe ff66 	bl	800138a <_fstat>
 80024be:	1c43      	adds	r3, r0, #1
 80024c0:	d102      	bne.n	80024c8 <_fstat_r+0x1c>
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	b103      	cbz	r3, 80024c8 <_fstat_r+0x1c>
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	bd38      	pop	{r3, r4, r5, pc}
 80024ca:	bf00      	nop
 80024cc:	200000f4 	.word	0x200000f4

080024d0 <_isatty_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4d06      	ldr	r5, [pc, #24]	; (80024ec <_isatty_r+0x1c>)
 80024d4:	2300      	movs	r3, #0
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	602b      	str	r3, [r5, #0]
 80024dc:	f7fe ff64 	bl	80013a8 <_isatty>
 80024e0:	1c43      	adds	r3, r0, #1
 80024e2:	d102      	bne.n	80024ea <_isatty_r+0x1a>
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	b103      	cbz	r3, 80024ea <_isatty_r+0x1a>
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
 80024ec:	200000f4 	.word	0x200000f4

080024f0 <_lseek_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4d07      	ldr	r5, [pc, #28]	; (8002510 <_lseek_r+0x20>)
 80024f4:	4604      	mov	r4, r0
 80024f6:	4608      	mov	r0, r1
 80024f8:	4611      	mov	r1, r2
 80024fa:	2200      	movs	r2, #0
 80024fc:	602a      	str	r2, [r5, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f7fe ff5c 	bl	80013bc <_lseek>
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d102      	bne.n	800250e <_lseek_r+0x1e>
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	b103      	cbz	r3, 800250e <_lseek_r+0x1e>
 800250c:	6023      	str	r3, [r4, #0]
 800250e:	bd38      	pop	{r3, r4, r5, pc}
 8002510:	200000f4 	.word	0x200000f4

08002514 <_read_r>:
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4d07      	ldr	r5, [pc, #28]	; (8002534 <_read_r+0x20>)
 8002518:	4604      	mov	r4, r0
 800251a:	4608      	mov	r0, r1
 800251c:	4611      	mov	r1, r2
 800251e:	2200      	movs	r2, #0
 8002520:	602a      	str	r2, [r5, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	f7fe feed 	bl	8001302 <_read>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	d102      	bne.n	8002532 <_read_r+0x1e>
 800252c:	682b      	ldr	r3, [r5, #0]
 800252e:	b103      	cbz	r3, 8002532 <_read_r+0x1e>
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	bd38      	pop	{r3, r4, r5, pc}
 8002534:	200000f4 	.word	0x200000f4

08002538 <_init>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr

08002544 <_fini>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr
