
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004484  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b3c  08004b3c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08004b3c  08004b3c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b3c  08004b3c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08004b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000006c  08004bb0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004bb0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f8d  00000000  00000000  00020096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d19  00000000  00000000  00024023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00024d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00025098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003efa  00000000  00000000  00025358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003ed6  00000000  00000000  00029252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c60f  00000000  00000000  0002d128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00039737  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d4  00000000  00000000  00039788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800460c 	.word	0x0800460c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800460c 	.word	0x0800460c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_frsub>:
 80008ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80008f0:	e002      	b.n	80008f8 <__addsf3>
 80008f2:	bf00      	nop

080008f4 <__aeabi_fsub>:
 80008f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008f8 <__addsf3>:
 80008f8:	0042      	lsls	r2, r0, #1
 80008fa:	bf1f      	itttt	ne
 80008fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000900:	ea92 0f03 	teqne	r2, r3
 8000904:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000908:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800090c:	d06a      	beq.n	80009e4 <__addsf3+0xec>
 800090e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000912:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000916:	bfc1      	itttt	gt
 8000918:	18d2      	addgt	r2, r2, r3
 800091a:	4041      	eorgt	r1, r0
 800091c:	4048      	eorgt	r0, r1
 800091e:	4041      	eorgt	r1, r0
 8000920:	bfb8      	it	lt
 8000922:	425b      	neglt	r3, r3
 8000924:	2b19      	cmp	r3, #25
 8000926:	bf88      	it	hi
 8000928:	4770      	bxhi	lr
 800092a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800092e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000932:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800093e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000942:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000946:	bf18      	it	ne
 8000948:	4249      	negne	r1, r1
 800094a:	ea92 0f03 	teq	r2, r3
 800094e:	d03f      	beq.n	80009d0 <__addsf3+0xd8>
 8000950:	f1a2 0201 	sub.w	r2, r2, #1
 8000954:	fa41 fc03 	asr.w	ip, r1, r3
 8000958:	eb10 000c 	adds.w	r0, r0, ip
 800095c:	f1c3 0320 	rsb	r3, r3, #32
 8000960:	fa01 f103 	lsl.w	r1, r1, r3
 8000964:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__addsf3+0x78>
 800096a:	4249      	negs	r1, r1
 800096c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000970:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000974:	d313      	bcc.n	800099e <__addsf3+0xa6>
 8000976:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800097a:	d306      	bcc.n	800098a <__addsf3+0x92>
 800097c:	0840      	lsrs	r0, r0, #1
 800097e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000982:	f102 0201 	add.w	r2, r2, #1
 8000986:	2afe      	cmp	r2, #254	; 0xfe
 8000988:	d251      	bcs.n	8000a2e <__addsf3+0x136>
 800098a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800098e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000992:	bf08      	it	eq
 8000994:	f020 0001 	biceq.w	r0, r0, #1
 8000998:	ea40 0003 	orr.w	r0, r0, r3
 800099c:	4770      	bx	lr
 800099e:	0049      	lsls	r1, r1, #1
 80009a0:	eb40 0000 	adc.w	r0, r0, r0
 80009a4:	3a01      	subs	r2, #1
 80009a6:	bf28      	it	cs
 80009a8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ac:	d2ed      	bcs.n	800098a <__addsf3+0x92>
 80009ae:	fab0 fc80 	clz	ip, r0
 80009b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009b6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80009be:	bfaa      	itet	ge
 80009c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009c4:	4252      	neglt	r2, r2
 80009c6:	4318      	orrge	r0, r3
 80009c8:	bfbc      	itt	lt
 80009ca:	40d0      	lsrlt	r0, r2
 80009cc:	4318      	orrlt	r0, r3
 80009ce:	4770      	bx	lr
 80009d0:	f092 0f00 	teq	r2, #0
 80009d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80009d8:	bf06      	itte	eq
 80009da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80009de:	3201      	addeq	r2, #1
 80009e0:	3b01      	subne	r3, #1
 80009e2:	e7b5      	b.n	8000950 <__addsf3+0x58>
 80009e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80009e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009ec:	bf18      	it	ne
 80009ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f2:	d021      	beq.n	8000a38 <__addsf3+0x140>
 80009f4:	ea92 0f03 	teq	r2, r3
 80009f8:	d004      	beq.n	8000a04 <__addsf3+0x10c>
 80009fa:	f092 0f00 	teq	r2, #0
 80009fe:	bf08      	it	eq
 8000a00:	4608      	moveq	r0, r1
 8000a02:	4770      	bx	lr
 8000a04:	ea90 0f01 	teq	r0, r1
 8000a08:	bf1c      	itt	ne
 8000a0a:	2000      	movne	r0, #0
 8000a0c:	4770      	bxne	lr
 8000a0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a12:	d104      	bne.n	8000a1e <__addsf3+0x126>
 8000a14:	0040      	lsls	r0, r0, #1
 8000a16:	bf28      	it	cs
 8000a18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a1c:	4770      	bx	lr
 8000a1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a22:	bf3c      	itt	cc
 8000a24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bxcc	lr
 8000a2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a36:	4770      	bx	lr
 8000a38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a3c:	bf16      	itet	ne
 8000a3e:	4608      	movne	r0, r1
 8000a40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a44:	4601      	movne	r1, r0
 8000a46:	0242      	lsls	r2, r0, #9
 8000a48:	bf06      	itte	eq
 8000a4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a4e:	ea90 0f01 	teqeq	r0, r1
 8000a52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_ui2f>:
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	e004      	b.n	8000a68 <__aeabi_i2f+0x8>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_i2f>:
 8000a60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a64:	bf48      	it	mi
 8000a66:	4240      	negmi	r0, r0
 8000a68:	ea5f 0c00 	movs.w	ip, r0
 8000a6c:	bf08      	it	eq
 8000a6e:	4770      	bxeq	lr
 8000a70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a74:	4601      	mov	r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	e01c      	b.n	8000ab6 <__aeabi_l2f+0x2a>

08000a7c <__aeabi_ul2f>:
 8000a7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a80:	bf08      	it	eq
 8000a82:	4770      	bxeq	lr
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e00a      	b.n	8000aa0 <__aeabi_l2f+0x14>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_l2f>:
 8000a8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a90:	bf08      	it	eq
 8000a92:	4770      	bxeq	lr
 8000a94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a98:	d502      	bpl.n	8000aa0 <__aeabi_l2f+0x14>
 8000a9a:	4240      	negs	r0, r0
 8000a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aa0:	ea5f 0c01 	movs.w	ip, r1
 8000aa4:	bf02      	ittt	eq
 8000aa6:	4684      	moveq	ip, r0
 8000aa8:	4601      	moveq	r1, r0
 8000aaa:	2000      	moveq	r0, #0
 8000aac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ab0:	bf08      	it	eq
 8000ab2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aba:	fabc f28c 	clz	r2, ip
 8000abe:	3a08      	subs	r2, #8
 8000ac0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ac4:	db10      	blt.n	8000ae8 <__aeabi_l2f+0x5c>
 8000ac6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aca:	4463      	add	r3, ip
 8000acc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ad0:	f1c2 0220 	rsb	r2, r2, #32
 8000ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ad8:	fa20 f202 	lsr.w	r2, r0, r2
 8000adc:	eb43 0002 	adc.w	r0, r3, r2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f102 0220 	add.w	r2, r2, #32
 8000aec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000af0:	f1c2 0220 	rsb	r2, r2, #32
 8000af4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000af8:	fa21 f202 	lsr.w	r2, r1, r2
 8000afc:	eb43 0002 	adc.w	r0, r3, r2
 8000b00:	bf08      	it	eq
 8000b02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_fmul>:
 8000b08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b10:	bf1e      	ittt	ne
 8000b12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b16:	ea92 0f0c 	teqne	r2, ip
 8000b1a:	ea93 0f0c 	teqne	r3, ip
 8000b1e:	d06f      	beq.n	8000c00 <__aeabi_fmul+0xf8>
 8000b20:	441a      	add	r2, r3
 8000b22:	ea80 0c01 	eor.w	ip, r0, r1
 8000b26:	0240      	lsls	r0, r0, #9
 8000b28:	bf18      	it	ne
 8000b2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b2e:	d01e      	beq.n	8000b6e <__aeabi_fmul+0x66>
 8000b30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b48:	bf3e      	ittt	cc
 8000b4a:	0049      	lslcc	r1, r1, #1
 8000b4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b50:	005b      	lslcc	r3, r3, #1
 8000b52:	ea40 0001 	orr.w	r0, r0, r1
 8000b56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b5a:	2afd      	cmp	r2, #253	; 0xfd
 8000b5c:	d81d      	bhi.n	8000b9a <__aeabi_fmul+0x92>
 8000b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b66:	bf08      	it	eq
 8000b68:	f020 0001 	biceq.w	r0, r0, #1
 8000b6c:	4770      	bx	lr
 8000b6e:	f090 0f00 	teq	r0, #0
 8000b72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b76:	bf08      	it	eq
 8000b78:	0249      	lsleq	r1, r1, #9
 8000b7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b82:	3a7f      	subs	r2, #127	; 0x7f
 8000b84:	bfc2      	ittt	gt
 8000b86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b8e:	4770      	bxgt	lr
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	3a01      	subs	r2, #1
 8000b9a:	dc5d      	bgt.n	8000c58 <__aeabi_fmul+0x150>
 8000b9c:	f112 0f19 	cmn.w	r2, #25
 8000ba0:	bfdc      	itt	le
 8000ba2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bxle	lr
 8000ba8:	f1c2 0200 	rsb	r2, r2, #0
 8000bac:	0041      	lsls	r1, r0, #1
 8000bae:	fa21 f102 	lsr.w	r1, r1, r2
 8000bb2:	f1c2 0220 	rsb	r2, r2, #32
 8000bb6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bbe:	f140 0000 	adc.w	r0, r0, #0
 8000bc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bc6:	bf08      	it	eq
 8000bc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bcc:	4770      	bx	lr
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bd6:	bf02      	ittt	eq
 8000bd8:	0040      	lsleq	r0, r0, #1
 8000bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bde:	3a01      	subeq	r2, #1
 8000be0:	d0f9      	beq.n	8000bd6 <__aeabi_fmul+0xce>
 8000be2:	ea40 000c 	orr.w	r0, r0, ip
 8000be6:	f093 0f00 	teq	r3, #0
 8000bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0049      	lsleq	r1, r1, #1
 8000bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bf6:	3b01      	subeq	r3, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fmul+0xe6>
 8000bfa:	ea41 010c 	orr.w	r1, r1, ip
 8000bfe:	e78f      	b.n	8000b20 <__aeabi_fmul+0x18>
 8000c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c04:	ea92 0f0c 	teq	r2, ip
 8000c08:	bf18      	it	ne
 8000c0a:	ea93 0f0c 	teqne	r3, ip
 8000c0e:	d00a      	beq.n	8000c26 <__aeabi_fmul+0x11e>
 8000c10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c14:	bf18      	it	ne
 8000c16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	d1d8      	bne.n	8000bce <__aeabi_fmul+0xc6>
 8000c1c:	ea80 0001 	eor.w	r0, r0, r1
 8000c20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c24:	4770      	bx	lr
 8000c26:	f090 0f00 	teq	r0, #0
 8000c2a:	bf17      	itett	ne
 8000c2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c30:	4608      	moveq	r0, r1
 8000c32:	f091 0f00 	teqne	r1, #0
 8000c36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c3a:	d014      	beq.n	8000c66 <__aeabi_fmul+0x15e>
 8000c3c:	ea92 0f0c 	teq	r2, ip
 8000c40:	d101      	bne.n	8000c46 <__aeabi_fmul+0x13e>
 8000c42:	0242      	lsls	r2, r0, #9
 8000c44:	d10f      	bne.n	8000c66 <__aeabi_fmul+0x15e>
 8000c46:	ea93 0f0c 	teq	r3, ip
 8000c4a:	d103      	bne.n	8000c54 <__aeabi_fmul+0x14c>
 8000c4c:	024b      	lsls	r3, r1, #9
 8000c4e:	bf18      	it	ne
 8000c50:	4608      	movne	r0, r1
 8000c52:	d108      	bne.n	8000c66 <__aeabi_fmul+0x15e>
 8000c54:	ea80 0001 	eor.w	r0, r0, r1
 8000c58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bx	lr

08000c70 <__aeabi_fdiv>:
 8000c70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c78:	bf1e      	ittt	ne
 8000c7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c7e:	ea92 0f0c 	teqne	r2, ip
 8000c82:	ea93 0f0c 	teqne	r3, ip
 8000c86:	d069      	beq.n	8000d5c <__aeabi_fdiv+0xec>
 8000c88:	eba2 0203 	sub.w	r2, r2, r3
 8000c8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c90:	0249      	lsls	r1, r1, #9
 8000c92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c96:	d037      	beq.n	8000d08 <__aeabi_fdiv+0x98>
 8000c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ca0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ca4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	bf38      	it	cc
 8000cac:	005b      	lslcc	r3, r3, #1
 8000cae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	bf24      	itt	cs
 8000cba:	1a5b      	subcs	r3, r3, r1
 8000cbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cc4:	bf24      	itt	cs
 8000cc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000cd2:	bf24      	itt	cs
 8000cd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000cd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000cdc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ce0:	bf24      	itt	cs
 8000ce2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ce6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	bf18      	it	ne
 8000cee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000cf2:	d1e0      	bne.n	8000cb6 <__aeabi_fdiv+0x46>
 8000cf4:	2afd      	cmp	r2, #253	; 0xfd
 8000cf6:	f63f af50 	bhi.w	8000b9a <__aeabi_fmul+0x92>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d10:	327f      	adds	r2, #127	; 0x7f
 8000d12:	bfc2      	ittt	gt
 8000d14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d1c:	4770      	bxgt	lr
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	f04f 0300 	mov.w	r3, #0
 8000d26:	3a01      	subs	r2, #1
 8000d28:	e737      	b.n	8000b9a <__aeabi_fmul+0x92>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d32:	bf02      	ittt	eq
 8000d34:	0040      	lsleq	r0, r0, #1
 8000d36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3a:	3a01      	subeq	r2, #1
 8000d3c:	d0f9      	beq.n	8000d32 <__aeabi_fdiv+0xc2>
 8000d3e:	ea40 000c 	orr.w	r0, r0, ip
 8000d42:	f093 0f00 	teq	r3, #0
 8000d46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4a:	bf02      	ittt	eq
 8000d4c:	0049      	lsleq	r1, r1, #1
 8000d4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d52:	3b01      	subeq	r3, #1
 8000d54:	d0f9      	beq.n	8000d4a <__aeabi_fdiv+0xda>
 8000d56:	ea41 010c 	orr.w	r1, r1, ip
 8000d5a:	e795      	b.n	8000c88 <__aeabi_fdiv+0x18>
 8000d5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d60:	ea92 0f0c 	teq	r2, ip
 8000d64:	d108      	bne.n	8000d78 <__aeabi_fdiv+0x108>
 8000d66:	0242      	lsls	r2, r0, #9
 8000d68:	f47f af7d 	bne.w	8000c66 <__aeabi_fmul+0x15e>
 8000d6c:	ea93 0f0c 	teq	r3, ip
 8000d70:	f47f af70 	bne.w	8000c54 <__aeabi_fmul+0x14c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e776      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000d78:	ea93 0f0c 	teq	r3, ip
 8000d7c:	d104      	bne.n	8000d88 <__aeabi_fdiv+0x118>
 8000d7e:	024b      	lsls	r3, r1, #9
 8000d80:	f43f af4c 	beq.w	8000c1c <__aeabi_fmul+0x114>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e76e      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1ca      	bne.n	8000d2a <__aeabi_fdiv+0xba>
 8000d94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000d98:	f47f af5c 	bne.w	8000c54 <__aeabi_fmul+0x14c>
 8000d9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000da0:	f47f af3c 	bne.w	8000c1c <__aeabi_fmul+0x114>
 8000da4:	e75f      	b.n	8000c66 <__aeabi_fmul+0x15e>
 8000da6:	bf00      	nop

08000da8 <__gesf2>:
 8000da8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dac:	e006      	b.n	8000dbc <__cmpsf2+0x4>
 8000dae:	bf00      	nop

08000db0 <__lesf2>:
 8000db0:	f04f 0c01 	mov.w	ip, #1
 8000db4:	e002      	b.n	8000dbc <__cmpsf2+0x4>
 8000db6:	bf00      	nop

08000db8 <__cmpsf2>:
 8000db8:	f04f 0c01 	mov.w	ip, #1
 8000dbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000dc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000dc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dcc:	bf18      	it	ne
 8000dce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd2:	d011      	beq.n	8000df8 <__cmpsf2+0x40>
 8000dd4:	b001      	add	sp, #4
 8000dd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dda:	bf18      	it	ne
 8000ddc:	ea90 0f01 	teqne	r0, r1
 8000de0:	bf58      	it	pl
 8000de2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000de6:	bf88      	it	hi
 8000de8:	17c8      	asrhi	r0, r1, #31
 8000dea:	bf38      	it	cc
 8000dec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000df0:	bf18      	it	ne
 8000df2:	f040 0001 	orrne.w	r0, r0, #1
 8000df6:	4770      	bx	lr
 8000df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dfc:	d102      	bne.n	8000e04 <__cmpsf2+0x4c>
 8000dfe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e02:	d105      	bne.n	8000e10 <__cmpsf2+0x58>
 8000e04:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e08:	d1e4      	bne.n	8000dd4 <__cmpsf2+0x1c>
 8000e0a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e0e:	d0e1      	beq.n	8000dd4 <__cmpsf2+0x1c>
 8000e10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <__aeabi_cfrcmple>:
 8000e18:	4684      	mov	ip, r0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	4661      	mov	r1, ip
 8000e1e:	e7ff      	b.n	8000e20 <__aeabi_cfcmpeq>

08000e20 <__aeabi_cfcmpeq>:
 8000e20:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e22:	f7ff ffc9 	bl	8000db8 <__cmpsf2>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	bf48      	it	mi
 8000e2a:	f110 0f00 	cmnmi.w	r0, #0
 8000e2e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e30 <__aeabi_fcmpeq>:
 8000e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e34:	f7ff fff4 	bl	8000e20 <__aeabi_cfcmpeq>
 8000e38:	bf0c      	ite	eq
 8000e3a:	2001      	moveq	r0, #1
 8000e3c:	2000      	movne	r0, #0
 8000e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e42:	bf00      	nop

08000e44 <__aeabi_fcmplt>:
 8000e44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e48:	f7ff ffea 	bl	8000e20 <__aeabi_cfcmpeq>
 8000e4c:	bf34      	ite	cc
 8000e4e:	2001      	movcc	r0, #1
 8000e50:	2000      	movcs	r0, #0
 8000e52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e56:	bf00      	nop

08000e58 <__aeabi_fcmple>:
 8000e58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e5c:	f7ff ffe0 	bl	8000e20 <__aeabi_cfcmpeq>
 8000e60:	bf94      	ite	ls
 8000e62:	2001      	movls	r0, #1
 8000e64:	2000      	movhi	r0, #0
 8000e66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6a:	bf00      	nop

08000e6c <__aeabi_fcmpge>:
 8000e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e70:	f7ff ffd2 	bl	8000e18 <__aeabi_cfrcmple>
 8000e74:	bf94      	ite	ls
 8000e76:	2001      	movls	r0, #1
 8000e78:	2000      	movhi	r0, #0
 8000e7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e7e:	bf00      	nop

08000e80 <__aeabi_fcmpgt>:
 8000e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e84:	f7ff ffc8 	bl	8000e18 <__aeabi_cfrcmple>
 8000e88:	bf34      	ite	cc
 8000e8a:	2001      	movcc	r0, #1
 8000e8c:	2000      	movcs	r0, #0
 8000e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e92:	bf00      	nop

08000e94 <__aeabi_f2iz>:
 8000e94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e98:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e9c:	d30f      	bcc.n	8000ebe <__aeabi_f2iz+0x2a>
 8000e9e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ea2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ea6:	d90d      	bls.n	8000ec4 <__aeabi_f2iz+0x30>
 8000ea8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eb0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000eb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000eb8:	bf18      	it	ne
 8000eba:	4240      	negne	r0, r0
 8000ebc:	4770      	bx	lr
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	4770      	bx	lr
 8000ec4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ec8:	d101      	bne.n	8000ece <__aeabi_f2iz+0x3a>
 8000eca:	0242      	lsls	r2, r0, #9
 8000ecc:	d105      	bne.n	8000eda <__aeabi_f2iz+0x46>
 8000ece:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ed2:	bf08      	it	eq
 8000ed4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f04f 0000 	mov.w	r0, #0
 8000ede:	4770      	bx	lr

08000ee0 <__aeabi_f2uiz>:
 8000ee0:	0042      	lsls	r2, r0, #1
 8000ee2:	d20e      	bcs.n	8000f02 <__aeabi_f2uiz+0x22>
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee8:	d30b      	bcc.n	8000f02 <__aeabi_f2uiz+0x22>
 8000eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d409      	bmi.n	8000f08 <__aeabi_f2uiz+0x28>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efc:	fa23 f002 	lsr.w	r0, r3, r2
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_f2uiz+0x32>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	d102      	bne.n	8000f18 <__aeabi_f2uiz+0x38>
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	4770      	bx	lr
 8000f18:	f04f 0000 	mov.w	r0, #0
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d141      	bne.n	8000fb6 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a43      	ldr	r2, [pc, #268]	; (8001044 <GPIO_PeriClockControl+0x124>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d106      	bne.n	8000f48 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 8000f46:	e077      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a40      	ldr	r2, [pc, #256]	; (800104c <GPIO_PeriClockControl+0x12c>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d106      	bne.n	8000f5e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000f50:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	4a3c      	ldr	r2, [pc, #240]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f5c:	e06c      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a3b      	ldr	r2, [pc, #236]	; (8001050 <GPIO_PeriClockControl+0x130>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d106      	bne.n	8000f74 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000f66:	4b38      	ldr	r3, [pc, #224]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a37      	ldr	r2, [pc, #220]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f72:	e061      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a37      	ldr	r2, [pc, #220]	; (8001054 <GPIO_PeriClockControl+0x134>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d106      	bne.n	8000f8a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000f7c:	4b32      	ldr	r3, [pc, #200]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	4a31      	ldr	r2, [pc, #196]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f88:	e056      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a32      	ldr	r2, [pc, #200]	; (8001058 <GPIO_PeriClockControl+0x138>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d106      	bne.n	8000fa0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f9e:	e04b      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <GPIO_PeriClockControl+0x13c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d147      	bne.n	8001038 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000fa8:	4b27      	ldr	r3, [pc, #156]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a26      	ldr	r2, [pc, #152]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fb4:	e040      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a22      	ldr	r2, [pc, #136]	; (8001044 <GPIO_PeriClockControl+0x124>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d106      	bne.n	8000fcc <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 8000fbe:	4b22      	ldr	r3, [pc, #136]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fc4:	f023 0301 	bic.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fca:	e035      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <GPIO_PeriClockControl+0x12c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d106      	bne.n	8000fe2 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000fe0:	e02a      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a1a      	ldr	r2, [pc, #104]	; (8001050 <GPIO_PeriClockControl+0x130>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d106      	bne.n	8000ff8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8000ff0:	f023 0304 	bic.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ff6:	e01f      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <GPIO_PeriClockControl+0x134>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d106      	bne.n	800100e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a10      	ldr	r2, [pc, #64]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8001006:	f023 0308 	bic.w	r3, r3, #8
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800100c:	e014      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <GPIO_PeriClockControl+0x138>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d106      	bne.n	8001024 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <GPIO_PeriClockControl+0x128>)
 800101c:	f023 0310 	bic.w	r3, r3, #16
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001022:	e009      	b.n	8001038 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a0d      	ldr	r2, [pc, #52]	; (800105c <GPIO_PeriClockControl+0x13c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d105      	bne.n	8001038 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <GPIO_PeriClockControl+0x128>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <GPIO_PeriClockControl+0x128>)
 8001032:	f023 0320 	bic.w	r3, r3, #32
 8001036:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40020000 	.word	0x40020000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40021400 	.word	0x40021400

08001060 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff54 	bl	8000f20 <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	795b      	ldrb	r3, [r3, #5]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d820      	bhi.n	80010c2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	795b      	ldrb	r3, [r3, #5]
 8001084:	461a      	mov	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	791b      	ldrb	r3, [r3, #4]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2103      	movs	r1, #3
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6819      	ldr	r1, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	430a      	orrs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e08c      	b.n	80011dc <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	795b      	ldrb	r3, [r3, #5]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d117      	bne.n	80010fa <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010ca:	4b90      	ldr	r3, [pc, #576]	; (800130c <GPIO_Init+0x2ac>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	7912      	ldrb	r2, [r2, #4]
 80010d2:	4611      	mov	r1, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	408a      	lsls	r2, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	4a8c      	ldr	r2, [pc, #560]	; (800130c <GPIO_Init+0x2ac>)
 80010dc:	430b      	orrs	r3, r1
 80010de:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80010e0:	4b8a      	ldr	r3, [pc, #552]	; (800130c <GPIO_Init+0x2ac>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	7912      	ldrb	r2, [r2, #4]
 80010e8:	4611      	mov	r1, r2
 80010ea:	2201      	movs	r2, #1
 80010ec:	408a      	lsls	r2, r1
 80010ee:	43d2      	mvns	r2, r2
 80010f0:	4611      	mov	r1, r2
 80010f2:	4a86      	ldr	r2, [pc, #536]	; (800130c <GPIO_Init+0x2ac>)
 80010f4:	400b      	ands	r3, r1
 80010f6:	6093      	str	r3, [r2, #8]
 80010f8:	e035      	b.n	8001166 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	2b05      	cmp	r3, #5
 8001100:	d117      	bne.n	8001132 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <GPIO_Init+0x2ac>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	7912      	ldrb	r2, [r2, #4]
 800110a:	4611      	mov	r1, r2
 800110c:	2201      	movs	r2, #1
 800110e:	408a      	lsls	r2, r1
 8001110:	4611      	mov	r1, r2
 8001112:	4a7e      	ldr	r2, [pc, #504]	; (800130c <GPIO_Init+0x2ac>)
 8001114:	430b      	orrs	r3, r1
 8001116:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001118:	4b7c      	ldr	r3, [pc, #496]	; (800130c <GPIO_Init+0x2ac>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	7912      	ldrb	r2, [r2, #4]
 8001120:	4611      	mov	r1, r2
 8001122:	2201      	movs	r2, #1
 8001124:	408a      	lsls	r2, r1
 8001126:	43d2      	mvns	r2, r2
 8001128:	4611      	mov	r1, r2
 800112a:	4a78      	ldr	r2, [pc, #480]	; (800130c <GPIO_Init+0x2ac>)
 800112c:	400b      	ands	r3, r1
 800112e:	60d3      	str	r3, [r2, #12]
 8001130:	e019      	b.n	8001166 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	795b      	ldrb	r3, [r3, #5]
 8001136:	2b06      	cmp	r3, #6
 8001138:	d115      	bne.n	8001166 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <GPIO_Init+0x2ac>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	7912      	ldrb	r2, [r2, #4]
 8001142:	4611      	mov	r1, r2
 8001144:	2201      	movs	r2, #1
 8001146:	408a      	lsls	r2, r1
 8001148:	4611      	mov	r1, r2
 800114a:	4a70      	ldr	r2, [pc, #448]	; (800130c <GPIO_Init+0x2ac>)
 800114c:	430b      	orrs	r3, r1
 800114e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001150:	4b6e      	ldr	r3, [pc, #440]	; (800130c <GPIO_Init+0x2ac>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	7912      	ldrb	r2, [r2, #4]
 8001158:	4611      	mov	r1, r2
 800115a:	2201      	movs	r2, #1
 800115c:	408a      	lsls	r2, r1
 800115e:	4611      	mov	r1, r2
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <GPIO_Init+0x2ac>)
 8001162:	430b      	orrs	r3, r1
 8001164:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	791b      	ldrb	r3, [r3, #4]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a64      	ldr	r2, [pc, #400]	; (8001310 <GPIO_Init+0x2b0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00f      	beq.n	80011a2 <GPIO_Init+0x142>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a63      	ldr	r2, [pc, #396]	; (8001314 <GPIO_Init+0x2b4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d008      	beq.n	800119e <GPIO_Init+0x13e>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a61      	ldr	r2, [pc, #388]	; (8001318 <GPIO_Init+0x2b8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <GPIO_Init+0x13a>
 8001196:	2302      	movs	r3, #2
 8001198:	e004      	b.n	80011a4 <GPIO_Init+0x144>
 800119a:	2300      	movs	r3, #0
 800119c:	e002      	b.n	80011a4 <GPIO_Init+0x144>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <GPIO_Init+0x144>
 80011a2:	2300      	movs	r3, #0
 80011a4:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80011a6:	4b5d      	ldr	r3, [pc, #372]	; (800131c <GPIO_Init+0x2bc>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a5c      	ldr	r2, [pc, #368]	; (800131c <GPIO_Init+0x2bc>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80011b2:	7c7a      	ldrb	r2, [r7, #17]
 80011b4:	7cbb      	ldrb	r3, [r7, #18]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	fa02 f103 	lsl.w	r1, r2, r3
 80011bc:	4a58      	ldr	r2, [pc, #352]	; (8001320 <GPIO_Init+0x2c0>)
 80011be:	7cfb      	ldrb	r3, [r7, #19]
 80011c0:	3302      	adds	r3, #2
 80011c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <GPIO_Init+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	7912      	ldrb	r2, [r2, #4]
 80011ce:	4611      	mov	r1, r2
 80011d0:	2201      	movs	r2, #1
 80011d2:	408a      	lsls	r2, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	4a4d      	ldr	r2, [pc, #308]	; (800130c <GPIO_Init+0x2ac>)
 80011d8:	430b      	orrs	r3, r1
 80011da:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	799b      	ldrb	r3, [r3, #6]
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	791b      	ldrb	r3, [r3, #4]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	791b      	ldrb	r3, [r3, #4]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2103      	movs	r1, #3
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	4619      	mov	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	400a      	ands	r2, r1
 800120a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6899      	ldr	r1, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	79db      	ldrb	r3, [r3, #7]
 8001220:	461a      	mov	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	791b      	ldrb	r3, [r3, #4]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2103      	movs	r1, #3
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	400a      	ands	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	68d9      	ldr	r1, [r3, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	430a      	orrs	r2, r1
 800125a:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7a1b      	ldrb	r3, [r3, #8]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	791b      	ldrb	r3, [r3, #4]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	4619      	mov	r1, r3
 8001278:	2301      	movs	r3, #1
 800127a:	408b      	lsls	r3, r1
 800127c:	43db      	mvns	r3, r3
 800127e:	4619      	mov	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	6859      	ldr	r1, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	795b      	ldrb	r3, [r3, #5]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d131      	bne.n	8001304 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	791b      	ldrb	r3, [r3, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	791b      	ldrb	r3, [r3, #4]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	7c3a      	ldrb	r2, [r7, #16]
 80012b8:	3208      	adds	r2, #8
 80012ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	7c3a      	ldrb	r2, [r7, #16]
 80012d2:	4001      	ands	r1, r0
 80012d4:	3208      	adds	r2, #8
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	7c3a      	ldrb	r2, [r7, #16]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	461a      	mov	r2, r3
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	7c3a      	ldrb	r2, [r7, #16]
 80012fc:	4301      	orrs	r1, r0
 80012fe:	3208      	adds	r2, #8
 8001300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8001304:	bf00      	nop
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40013c00 	.word	0x40013c00
 8001310:	40020000 	.word	0x40020000
 8001314:	40020400 	.word	0x40020400
 8001318:	40020800 	.word	0x40020800
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800

08001324 <GPIO_Write_Pin>:
	{
		GPIOH_REG_RESET();
	}
}

void GPIO_Write_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t STATE) {
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	70bb      	strb	r3, [r7, #2]
	if (STATE == SET) {
 8001334:	78bb      	ldrb	r3, [r7, #2]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d109      	bne.n	800134e <GPIO_Write_Pin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);   // Set the pin
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}
 800134c:	e009      	b.n	8001362 <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	2101      	movs	r1, #1
 8001356:	fa01 f202 	lsl.w	r2, r1, r2
 800135a:	43d2      	mvns	r2, r2
 800135c:	401a      	ands	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	615a      	str	r2, [r3, #20]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691a      	ldr	r2, [r3, #16]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	b2db      	uxtb	r3, r3
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	73fb      	strb	r3, [r7, #15]
    return value;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d809      	bhi.n	80013bc <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	405a      	eors	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	e000      	b.n	80013be <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 80013bc:	bf00      	nop
}
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d133      	bne.n	8001446 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b1f      	cmp	r3, #31
 80013e2:	d80a      	bhi.n	80013fa <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <GPIO_IRQInterruptConfig+0xf0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	79fa      	ldrb	r2, [r7, #7]
 80013ea:	2101      	movs	r1, #1
 80013ec:	fa01 f202 	lsl.w	r2, r1, r2
 80013f0:	4611      	mov	r1, r2
 80013f2:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <GPIO_IRQInterruptConfig+0xf0>)
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 80013f8:	e059      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b1f      	cmp	r3, #31
 80013fe:	d90f      	bls.n	8001420 <GPIO_IRQInterruptConfig+0x58>
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b3f      	cmp	r3, #63	; 0x3f
 8001404:	d80c      	bhi.n	8001420 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <GPIO_IRQInterruptConfig+0xf4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	f002 021f 	and.w	r2, r2, #31
 8001410:	2101      	movs	r1, #1
 8001412:	fa01 f202 	lsl.w	r2, r1, r2
 8001416:	4611      	mov	r1, r2
 8001418:	4a28      	ldr	r2, [pc, #160]	; (80014bc <GPIO_IRQInterruptConfig+0xf4>)
 800141a:	430b      	orrs	r3, r1
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e046      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b3f      	cmp	r3, #63	; 0x3f
 8001424:	d943      	bls.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b5f      	cmp	r3, #95	; 0x5f
 800142a:	d840      	bhi.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <GPIO_IRQInterruptConfig+0xf8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001436:	2101      	movs	r1, #1
 8001438:	fa01 f202 	lsl.w	r2, r1, r2
 800143c:	4611      	mov	r1, r2
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <GPIO_IRQInterruptConfig+0xf8>)
 8001440:	430b      	orrs	r3, r1
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	e033      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b1f      	cmp	r3, #31
 800144a:	d80a      	bhi.n	8001462 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <GPIO_IRQInterruptConfig+0xfc>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	4611      	mov	r1, r2
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <GPIO_IRQInterruptConfig+0xfc>)
 800145c:	430b      	orrs	r3, r1
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	e025      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b1f      	cmp	r3, #31
 8001466:	d90f      	bls.n	8001488 <GPIO_IRQInterruptConfig+0xc0>
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	2b3f      	cmp	r3, #63	; 0x3f
 800146c:	d80c      	bhi.n	8001488 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <GPIO_IRQInterruptConfig+0x100>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	f002 021f 	and.w	r2, r2, #31
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	4611      	mov	r1, r2
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <GPIO_IRQInterruptConfig+0x100>)
 8001482:	430b      	orrs	r3, r1
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e012      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	2b3f      	cmp	r3, #63	; 0x3f
 800148c:	d90f      	bls.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
 800148e:	79fb      	ldrb	r3, [r7, #7]
 8001490:	2b5f      	cmp	r3, #95	; 0x5f
 8001492:	d80c      	bhi.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <GPIO_IRQInterruptConfig+0x104>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4611      	mov	r1, r2
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <GPIO_IRQInterruptConfig+0x104>)
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	e7ff      	b.n	80014ae <GPIO_IRQInterruptConfig+0xe6>
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000e104 	.word	0xe000e104
 80014c0:	e000e108 	.word	0xe000e108
 80014c4:	e000e180 	.word	0xe000e180
 80014c8:	e000e184 	.word	0xe000e184
 80014cc:	e000e188 	.word	0xe000e188

080014d0 <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <GPIO_IRQHandling+0x3c>)
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	79fa      	ldrb	r2, [r7, #7]
 80014e0:	2101      	movs	r1, #1
 80014e2:	fa01 f202 	lsl.w	r2, r1, r2
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d009      	beq.n	8001500 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <GPIO_IRQHandling+0x3c>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	2101      	movs	r1, #1
 80014f4:	fa01 f202 	lsl.w	r2, r1, r2
 80014f8:	4611      	mov	r1, r2
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <GPIO_IRQHandling+0x3c>)
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6153      	str	r3, [r2, #20]
	}
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40013c00 	.word	0x40013c00

08001510 <I2C_SM_INIT>:

}


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	// 1. Enable peripheral clock
	I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <I2C_SM_INIT+0x6c>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <I2C_SM_INIT+0x6c>)
 800151e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40

	// 2. Configure ACK
	pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7a5b      	ldrb	r3, [r3, #9]
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4619      	mov	r1, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

	// 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
	pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2208      	movs	r2, #8
 8001540:	605a      	str	r2, [r3, #4]

	// 4. Configure CCR for Standard Mode
	uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <I2C_SM_INIT+0x70>)
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	81fb      	strh	r3, [r7, #14]
	pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8001550:	89fa      	ldrh	r2, [r7, #14]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800155a:	61da      	str	r2, [r3, #28]

	// 5. Set TRISE
	// TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
	pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2209      	movs	r2, #9
 8001562:	621a      	str	r2, [r3, #32]

	// 6. Enable the peripheral
	pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	007a1200 	.word	0x007a1200

08001584 <drive_FWD>:
		__asm__("nop");
	}
}

//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 8001594:	2200      	movs	r2, #0
 8001596:	210f      	movs	r1, #15
 8001598:	481d      	ldr	r0, [pc, #116]	; (8001610 <drive_FWD+0x8c>)
 800159a:	f7ff fec3 	bl	8001324 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 800159e:	2201      	movs	r2, #1
 80015a0:	2100      	movs	r1, #0
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 fa82 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 80015a8:	2201      	movs	r2, #1
 80015aa:	2102      	movs	r1, #2
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 fa7d 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fa78 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 80015bc:	2200      	movs	r2, #0
 80015be:	2103      	movs	r1, #3
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa73 	bl	8001aac <GP_TIM_PWM_Control>


	// Enable CH1, CH3
	pGP_TIM_Handle->pTIMx->CCER |= (1 << (4 * CH1)) | (1 << (4 * CH3));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6213      	str	r3, [r2, #32]

	// Disable CH2, CH4
	pGP_TIM_Handle->pTIMx->CCER &= ~((1 << (4 * CH2)) | (1 << (4 * CH4)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e8:	f023 0310 	bic.w	r3, r3, #16
 80015ec:	6213      	str	r3, [r2, #32]


	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f042 0201 	orr.w	r2, r2, #1
 80015fc:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);//connected to sleep
 80015fe:	2201      	movs	r2, #1
 8001600:	210f      	movs	r1, #15
 8001602:	4803      	ldr	r0, [pc, #12]	; (8001610 <drive_FWD+0x8c>)
 8001604:	f7ff fe8e 	bl	8001324 <GPIO_Write_Pin>
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020400 	.word	0x40020400

08001614 <stop_FWD>:

void stop_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 800161c:	2200      	movs	r2, #0
 800161e:	210f      	movs	r1, #15
 8001620:	4818      	ldr	r0, [pc, #96]	; (8001684 <stop_FWD+0x70>)
 8001622:	f7ff fe7f 	bl	8001324 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_STOP);
 8001626:	2202      	movs	r2, #2
 8001628:	2100      	movs	r1, #0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fa3e 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_STOP);
 8001630:	2202      	movs	r2, #2
 8001632:	2102      	movs	r1, #2
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fa39 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_STOP);
 800163a:	2202      	movs	r2, #2
 800163c:	2101      	movs	r1, #1
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fa34 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_STOP);
 8001644:	2202      	movs	r2, #2
 8001646:	2103      	movs	r1, #3
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa2f 	bl	8001aac <GP_TIM_PWM_Control>

	pGP_TIM_Handle->pTIMx->CCER &= ~((1 << (4 * CH2)) | (1 << (4 * CH4)) | (1 << (4 * CH1)) | (1 << (4 * CH3)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800165c:	f023 0311 	bic.w	r3, r3, #17
 8001660:	6213      	str	r3, [r2, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	615a      	str	r2, [r3, #20]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 8001672:	2201      	movs	r2, #1
 8001674:	210f      	movs	r1, #15
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <stop_FWD+0x70>)
 8001678:	f7ff fe54 	bl	8001324 <GPIO_Write_Pin>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020400 	.word	0x40020400

08001688 <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 8001698:	2200      	movs	r2, #0
 800169a:	210f      	movs	r1, #15
 800169c:	4819      	ldr	r0, [pc, #100]	; (8001704 <turn_RGT+0x7c>)
 800169e:	f7ff fe41 	bl	8001324 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2100      	movs	r1, #0
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fa00 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2102      	movs	r1, #2
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f9fb 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2101      	movs	r1, #1
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f9f6 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2103      	movs	r1, #3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f9f1 	bl	8001aac <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH4)) & ~((1 << 4 * CH3) | (1 << 4 * CH2));
 80016ca:	f241 0301 	movw	r3, #4097	; 0x1001
 80016ce:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a19      	ldr	r1, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	430a      	orrs	r2, r1
 80016de:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 80016f0:	2201      	movs	r2, #1
 80016f2:	210f      	movs	r1, #15
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <turn_RGT+0x7c>)
 80016f6:	f7ff fe15 	bl	8001324 <GPIO_Write_Pin>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020400 	.word	0x40020400

08001708 <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, DISABLE);
 8001718:	2200      	movs	r2, #0
 800171a:	210f      	movs	r1, #15
 800171c:	4819      	ldr	r0, [pc, #100]	; (8001784 <turn_LFT+0x7c>)
 800171e:	f7ff fe01 	bl	8001324 <GPIO_Write_Pin>

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f9c0 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 800172c:	2201      	movs	r2, #1
 800172e:	2102      	movs	r1, #2
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 f9bb 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8001736:	2201      	movs	r2, #1
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 f9b6 	bl	8001aac <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8001740:	2200      	movs	r2, #0
 8001742:	2103      	movs	r1, #3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f9b1 	bl	8001aac <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH3) | (1 << 4 * CH2)) & ~((1 << 4 * CH4) | (1 << 4 * CH1));
 800174a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800174e:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6a19      	ldr	r1, [r3, #32]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	430a      	orrs	r2, r1
 800175e:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 0201 	orr.w	r2, r2, #1
 800176e:	615a      	str	r2, [r3, #20]

	GPIO_Write_Pin(GPIOB, GPIO_PIN_NO_15, ENABLE);
 8001770:	2201      	movs	r2, #1
 8001772:	210f      	movs	r1, #15
 8001774:	4803      	ldr	r0, [pc, #12]	; (8001784 <turn_LFT+0x7c>)
 8001776:	f7ff fdd5 	bl	8001324 <GPIO_Write_Pin>
}
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40020400 	.word	0x40020400

08001788 <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 800179c:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 80017a4:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	791b      	ldrb	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d125      	bne.n	8001800 <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f042 0201 	orr.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 80017c4:	bf00      	nop
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f8      	beq.n	80017c6 <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0203 	bic.w	r2, r2, #3
 80017e2:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6892      	ldr	r2, [r2, #8]
 80017ee:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 80017f0:	bf00      	nop
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f8      	bne.n	80017f2 <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <AD_TIM_FreeRun_INIT>:
}




void AD_TIM_FreeRun_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    if (pAD_TIM_Handle->pTIMx == TIM1) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a1b      	ldr	r2, [pc, #108]	; (8001888 <AD_TIM_FreeRun_INIT+0x7c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d105      	bne.n	800182a <AD_TIM_FreeRun_INIT+0x1e>
        TIM1_PCLK_EN();
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <AD_TIM_FreeRun_INIT+0x80>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <AD_TIM_FreeRun_INIT+0x80>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
    }

    // Count up
    pAD_TIM_Handle->pTIMx->CR1 &= ~TIM_CR1_DIR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0208 	bic.w	r2, r2, #8
 8001838:	601a      	str	r2, [r3, #0]

    // Auto-Reload Preload
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001848:	601a      	str	r2, [r3, #0]

    // Max ARR
    pAD_TIM_Handle->pTIMx->ARR = 0xFFFF;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001852:	62da      	str	r2, [r3, #44]	; 0x2c

    // Prescaler (set before calling or assign here)
    pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	889a      	ldrh	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	629a      	str	r2, [r3, #40]	; 0x28

    // Load PSC and ARR immediately
    pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 0201 	orr.w	r2, r2, #1
 800186c:	615a      	str	r2, [r3, #20]

    // Start free-running timer
    pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_CEN;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40010000 	.word	0x40010000
 800188c:	40023800 	.word	0x40023800

08001890 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a0:	d106      	bne.n	80018b0 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <GP_TIM_PWM_INIT+0x108>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a3c      	ldr	r2, [pc, #240]	; (8001998 <GP_TIM_PWM_INIT+0x108>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	e00a      	b.n	80018c6 <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <GP_TIM_PWM_INIT+0x10c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d105      	bne.n	80018c6 <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <GP_TIM_PWM_INIT+0x108>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <GP_TIM_PWM_INIT+0x108>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 80018c6:	bf00      	nop
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <GP_TIM_PWM_INIT+0x108>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f9      	beq.n	80018c8 <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e2:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	889a      	ldrh	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	88db      	ldrh	r3, [r3, #6]
 80018f2:	1e5a      	subs	r2, r3, #1
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e03c      	b.n	800197a <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3302      	adds	r3, #2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	88db      	ldrh	r3, [r3, #6]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff f8a3 	bl	8000a58 <__aeabi_ui2f>
 8001912:	4603      	mov	r3, r0
 8001914:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <GP_TIM_PWM_INIT+0x110>)
 8001918:	6938      	ldr	r0, [r7, #16]
 800191a:	f7ff f9a9 	bl	8000c70 <__aeabi_fdiv>
 800191e:	4603      	mov	r3, r0
 8001920:	461c      	mov	r4, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	88db      	ldrh	r3, [r3, #6]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f89a 	bl	8000a60 <__aeabi_i2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4619      	mov	r1, r3
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff f8e9 	bl	8000b08 <__aeabi_fmul>
 8001936:	4603      	mov	r3, r0
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fad1 	bl	8000ee0 <__aeabi_f2uiz>
 800193e:	4603      	mov	r3, r0
 8001940:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	3302      	adds	r3, #2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	795b      	ldrb	r3, [r3, #5]
 800194e:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	3302      	adds	r3, #2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	791b      	ldrb	r3, [r3, #4]
 800195c:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	7b7c      	ldrb	r4, [r7, #13]
 8001968:	89fa      	ldrh	r2, [r7, #14]
 800196a:	7b3b      	ldrb	r3, [r7, #12]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4623      	mov	r3, r4
 8001970:	f000 f818 	bl	80019a4 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b03      	cmp	r3, #3
 800197e:	ddbf      	ble.n	8001900 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	695a      	ldr	r2, [r3, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	615a      	str	r2, [r3, #20]

}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	40000400 	.word	0x40000400
 80019a0:	42c80000 	.word	0x42c80000

080019a4 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	70fb      	strb	r3, [r7, #3]
 80019b6:	460b      	mov	r3, r1
 80019b8:	803b      	strh	r3, [r7, #0]
 80019ba:	4613      	mov	r3, r2
 80019bc:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d802      	bhi.n	80019ca <GP_TIM_SetChannel+0x26>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3318      	adds	r3, #24
 80019c8:	e001      	b.n	80019ce <GP_TIM_SetChannel+0x2a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	331c      	adds	r3, #28
 80019ce:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d864      	bhi.n	8001aa0 <GP_TIM_SetChannel+0xfc>
 80019d6:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <GP_TIM_SetChannel+0x38>)
 80019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019dc:	080019ed 	.word	0x080019ed
 80019e0:	080019fd 	.word	0x080019fd
 80019e4:	08001a0d 	.word	0x08001a0d
 80019e8:	08001a1f 	.word	0x08001a1f
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3334      	adds	r3, #52	; 0x34
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	2304      	movs	r3, #4
 80019f4:	74fb      	strb	r3, [r7, #19]
 80019f6:	2301      	movs	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	e019      	b.n	8001a30 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3338      	adds	r3, #56	; 0x38
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	230c      	movs	r3, #12
 8001a04:	74fb      	strb	r3, [r7, #19]
 8001a06:	2310      	movs	r3, #16
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e011      	b.n	8001a30 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	333c      	adds	r3, #60	; 0x3c
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	2304      	movs	r3, #4
 8001a14:	74fb      	strb	r3, [r7, #19]
 8001a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	e008      	b.n	8001a30 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3340      	adds	r3, #64	; 0x40
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	230c      	movs	r3, #12
 8001a26:	74fb      	strb	r3, [r7, #19]
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8001a30:	883a      	ldrh	r2, [r7, #0]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	7cfa      	ldrb	r2, [r7, #19]
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	43d2      	mvns	r2, r2
 8001a44:	401a      	ands	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	78ba      	ldrb	r2, [r7, #2]
 8001a50:	2a00      	cmp	r2, #0
 8001a52:	d101      	bne.n	8001a58 <GP_TIM_SetChannel+0xb4>
 8001a54:	2106      	movs	r1, #6
 8001a56:	e000      	b.n	8001a5a <GP_TIM_SetChannel+0xb6>
 8001a58:	2107      	movs	r1, #7
 8001a5a:	7cfa      	ldrb	r2, [r7, #19]
 8001a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a60:	431a      	orrs	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	7cfa      	ldrb	r2, [r7, #19]
 8001a6c:	3a01      	subs	r2, #1
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	431a      	orrs	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 8001a7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1a      	ldr	r2, [r3, #32]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	621a      	str	r2, [r3, #32]
 8001a8e:	e008      	b.n	8001aa2 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	621a      	str	r2, [r3, #32]
 8001a9e:	e000      	b.n	8001aa2 <GP_TIM_SetChannel+0xfe>
	default: return;
 8001aa0:	bf00      	nop
	}
}
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop

08001aac <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_STATE) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d86c      	bhi.n	8001b9c <GP_TIM_PWM_Control+0xf0>

	//		uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit

	if (PWM_STATE == PWM_OUTPUT) {
 8001ac2:	78bb      	ldrb	r3, [r7, #2]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d141      	bne.n	8001b4c <GP_TIM_PWM_Control+0xa0>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	3302      	adds	r3, #2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	88db      	ldrh	r3, [r3, #6]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe ffc3 	bl	8000a60 <__aeabi_i2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4931      	ldr	r1, [pc, #196]	; (8001ba4 <GP_TIM_PWM_Control+0xf8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff f8c6 	bl	8000c70 <__aeabi_fdiv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe ffb7 	bl	8000a60 <__aeabi_i2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff f806 	bl	8000b08 <__aeabi_fmul>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f9ee 	bl	8000ee0 <__aeabi_f2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	81bb      	strh	r3, [r7, #12]
		switch(channel) {
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d847      	bhi.n	8001b9e <GP_TIM_PWM_Control+0xf2>
 8001b0e:	a201      	add	r2, pc, #4	; (adr r2, 8001b14 <GP_TIM_PWM_Control+0x68>)
 8001b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b14:	08001b25 	.word	0x08001b25
 8001b18:	08001b2f 	.word	0x08001b2f
 8001b1c:	08001b39 	.word	0x08001b39
 8001b20:	08001b43 	.word	0x08001b43
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	89ba      	ldrh	r2, [r7, #12]
 8001b2a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b2c:	e037      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	89ba      	ldrh	r2, [r7, #12]
 8001b34:	639a      	str	r2, [r3, #56]	; 0x38
 8001b36:	e032      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	89ba      	ldrh	r2, [r7, #12]
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b40:	e02d      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	89ba      	ldrh	r2, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4a:	e028      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		}

		//		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
	} else if(PWM_STATE == PWM_STOP)
 8001b4c:	78bb      	ldrb	r3, [r7, #2]
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d125      	bne.n	8001b9e <GP_TIM_PWM_Control+0xf2>
	{
		uint16_t duty = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	81fb      	strh	r3, [r7, #14]
		switch(channel) {
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d820      	bhi.n	8001b9e <GP_TIM_PWM_Control+0xf2>
 8001b5c:	a201      	add	r2, pc, #4	; (adr r2, 8001b64 <GP_TIM_PWM_Control+0xb8>)
 8001b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b62:	bf00      	nop
 8001b64:	08001b75 	.word	0x08001b75
 8001b68:	08001b7f 	.word	0x08001b7f
 8001b6c:	08001b89 	.word	0x08001b89
 8001b70:	08001b93 	.word	0x08001b93
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	89fa      	ldrh	r2, [r7, #14]
 8001b7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7c:	e00f      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	89fa      	ldrh	r2, [r7, #14]
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
 8001b86:	e00a      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	89fa      	ldrh	r2, [r7, #14]
 8001b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b90:	e005      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	89fa      	ldrh	r2, [r7, #14]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
 8001b9a:	e000      	b.n	8001b9e <GP_TIM_PWM_Control+0xf2>
	if (channel > 3) return;
 8001b9c:	bf00      	nop
	{
		//pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
	}


}
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	42c80000 	.word	0x42c80000

08001ba8 <USART_SetBaudRate>:

#include "USART.h"


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]

	uint32_t PCLKx = APB2_CLOCK_FREQ;	//APB2_CLOCK_FREQ_MHZ
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <USART_SetBaudRate+0xc0>)
 8001bb4:	617b      	str	r3, [r7, #20]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <USART_SetBaudRate+0x36>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	009a      	lsls	r2, r3, #2
 8001bd0:	441a      	add	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	e00a      	b.n	8001bf4 <USART_SetBaudRate+0x4c>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	441a      	add	r2, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	; (8001c6c <USART_SetBaudRate+0xc4>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	095b      	lsrs	r3, r3, #5
 8001bfe:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2264      	movs	r2, #100	; 0x64
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00a      	beq.n	8001c3a <USART_SetBaudRate+0x92>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	3332      	adds	r3, #50	; 0x32
 8001c2a:	4a10      	ldr	r2, [pc, #64]	; (8001c6c <USART_SetBaudRate+0xc4>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	e009      	b.n	8001c4e <USART_SetBaudRate+0xa6>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	3332      	adds	r3, #50	; 0x32
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <USART_SetBaudRate+0xc4>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	3724      	adds	r7, #36	; 0x24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	007a1200 	.word	0x007a1200
 8001c6c:	51eb851f 	.word	0x51eb851f

08001c70 <USART_INIT>:


void USART_INIT(USART_Handle_t *pUSARTHandle){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

	uint32_t tempreg=0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
	//ENABLE PERIPHERAL
	USART1_PCLK_EN();
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <USART_INIT+0xa4>)
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c80:	4a24      	ldr	r2, [pc, #144]	; (8001d14 <USART_INIT+0xa4>)
 8001c82:	f043 0310 	orr.w	r3, r3, #16
 8001c86:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d104      	bne.n	8001c9a <USART_INIT+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e010      	b.n	8001cbc <USART_INIT+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d104      	bne.n	8001cac <USART_INIT+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f043 0308 	orr.w	r3, r3, #8
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e007      	b.n	8001cbc <USART_INIT+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	791b      	ldrb	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d103      	bne.n	8001cbc <USART_INIT+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f043 030c 	orr.w	r3, r3, #12
 8001cba:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7b5b      	ldrb	r3, [r3, #13]
 8001cc0:	031b      	lsls	r3, r3, #12
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	60da      	str	r2, [r3, #12]

	tempreg=0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7b1b      	ldrb	r3, [r3, #12]
 8001cda:	031b      	lsls	r3, r3, #12
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	611a      	str	r2, [r3, #16]


	//no hw flow control

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f7ff ff56 	bl	8001ba8 <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << 13);  // UE
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0a:	60da      	str	r2, [r3, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800

08001d18 <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <USART_SendData>:


void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	e031      	b.n	8001db6 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8001d52:	bf00      	nop
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ffdc 	bl	8001d18 <USART_GetFlagStatus>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f6      	beq.n	8001d54 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	7b5b      	ldrb	r3, [r3, #13]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d118      	bne.n	8001da0 <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d80:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	7b9b      	ldrb	r3, [r3, #14]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	e00b      	b.n	8001db0 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	e007      	b.n	8001db0 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	3301      	adds	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d3c9      	bcc.n	8001d52 <USART_SendData+0x12>
		}

	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8001dbe:	bf00      	nop
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff ffa6 	bl	8001d18 <USART_GetFlagStatus>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f6      	beq.n	8001dc0 <USART_SendData+0x80>

}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <USART_ReceiveData>:

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e045      	b.n	8001e7a <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 8001dee:	bf00      	nop
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2120      	movs	r1, #32
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff8e 	bl	8001d18 <USART_GetFlagStatus>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f6      	beq.n	8001df0 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	7b5b      	ldrb	r3, [r3, #13]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11d      	bne.n	8001e46 <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	7b9b      	ldrb	r3, [r3, #14]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <USART_ReceiveData+0x56>
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	3301      	adds	r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	60bb      	str	r3, [r7, #8]
 8001e30:	e020      	b.n	8001e74 <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3301      	adds	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	e016      	b.n	8001e74 <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	7b9b      	ldrb	r3, [r3, #14]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	701a      	strb	r2, [r3, #0]
 8001e5a:	e008      	b.n	8001e6e <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3301      	adds	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d3b5      	bcc.n	8001dee <USART_ReceiveData+0x12>
		}
	}

}
 8001e82:	bf00      	nop
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <init_random_seed>:
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);
void Full_USART_Config(void);
uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start);

void init_random_seed(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	srand(TIM1_TMR.pTIMx->CNT);  // Seed with x,y coords/angle
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <init_random_seed+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fd50 	bl	800293c <srand>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200000a8 	.word	0x200000a8

08001ea4 <get_random_direction>:

uint16_t get_random_direction(void) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	return 150 + (rand() % 450);  // Between 50 - 200 ms lets say
 8001ea8:	f000 fd76 	bl	8002998 <rand>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <get_random_direction+0x2c>)
 8001eb0:	fb82 1203 	smull	r1, r2, r2, r3
 8001eb4:	441a      	add	r2, r3
 8001eb6:	1211      	asrs	r1, r2, #8
 8001eb8:	17da      	asrs	r2, r3, #31
 8001eba:	1a8a      	subs	r2, r1, r2
 8001ebc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8001ec0:	fb01 f202 	mul.w	r2, r1, r2
 8001ec4:	1a9a      	subs	r2, r3, r2
 8001ec6:	b293      	uxth	r3, r2
 8001ec8:	3396      	adds	r3, #150	; 0x96
 8001eca:	b29b      	uxth	r3, r3
	//what is maximum rand value?
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	91a2b3c5 	.word	0x91a2b3c5

08001ed4 <ms_delay>:

uint16_t calc_rotation(uint32_t duration_ms, float angular_velocity_dps) {
	return (uint16_t)((duration_ms / 1000.0f) * angular_velocity_dps);  // degrees = time * speed
}

void ms_delay(uint32_t time_ms) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e003      	b.n	8001eea <ms_delay+0x16>
		__asm__("nop");
 8001ee2:	bf00      	nop
	for(volatile uint32_t i = 0; i < time_ms * 1055; ++i) {
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	015b      	lsls	r3, r3, #5
 8001ef0:	4413      	add	r3, r2
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	1a9a      	subs	r2, r3, r2
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f2      	bhi.n	8001ee2 <ms_delay+0xe>
	}
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <get_current_time>:

uint16_t get_current_time(AD_TIM_RegDef_t *pTIMx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	uint16_t time = pTIMx->CNT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	81fb      	strh	r3, [r7, #14]
	return time;
 8001f16:	89fb      	ldrh	r3, [r7, #14]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr

08001f22 <get_elapsed_time>:


uint16_t get_elapsed_time(AD_TIM_RegDef_t *pTIMx, uint16_t start)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	807b      	strh	r3, [r7, #2]
	uint16_t now = pTIMx->CNT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	81bb      	strh	r3, [r7, #12]
	uint16_t elapsed;

	if (now >= start) {
 8001f34:	89ba      	ldrh	r2, [r7, #12]
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d304      	bcc.n	8001f46 <get_elapsed_time+0x24>
		elapsed = now - start;
 8001f3c:	89ba      	ldrh	r2, [r7, #12]
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	81fb      	strh	r3, [r7, #14]
 8001f44:	e003      	b.n	8001f4e <get_elapsed_time+0x2c>
	} else {
		elapsed = (0xFFFF - start) + now + 1; // handle overflow
 8001f46:	89ba      	ldrh	r2, [r7, #12]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	81fb      	strh	r3, [r7, #14]
	}
	return elapsed - 25;//error
 8001f4e:	89fb      	ldrh	r3, [r7, #14]
 8001f50:	3b19      	subs	r3, #25
 8001f52:	b29b      	uxth	r3, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
	...

08001f60 <send_coordinates>:
uint8_t password = 0;
uint8_t coords_nr = 100;
uint8_t count = 0;

void send_coordinates()
{
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
	//	USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));

	//X_POINT = X_POINT + DRIVING_ELAPSED_TIME * speed * sinf(ANGLE * (M_PI / 180.0f);
	//X_POINT = Y_POINT + DRIVING_ELAPSED_TIME * speed * cosf(ANGLE * (M_PI / 180.0f);

	X_POINT = X_POINT + (DRIVING_ELAPSED_TIME /100) * sinf(ANGLE * (M_PI / 180.0f));
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <send_coordinates+0x1f8>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fd77 	bl	8000a60 <__aeabi_i2f>
 8001f72:	4604      	mov	r4, r0
 8001f74:	4b79      	ldr	r3, [pc, #484]	; (800215c <send_coordinates+0x1fc>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4a79      	ldr	r2, [pc, #484]	; (8002160 <send_coordinates+0x200>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	095b      	lsrs	r3, r3, #5
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fd6b 	bl	8000a60 <__aeabi_i2f>
 8001f8a:	4605      	mov	r5, r0
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <send_coordinates+0x204>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fc03 	bl	800079c <__aeabi_f2d>
 8001f96:	a36e      	add	r3, pc, #440	; (adr r3, 8002150 <send_coordinates+0x1f0>)
 8001f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9c:	f7fe f970 	bl	8000280 <__aeabi_dmul>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fc50 	bl	800084c <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fd5a 	bl	8003a68 <sinf>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7fe fda5 	bl	8000b08 <__aeabi_fmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	f7fe fc98 	bl	80008f8 <__addsf3>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe ff62 	bl	8000e94 <__aeabi_f2iz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	4b60      	ldr	r3, [pc, #384]	; (8002158 <send_coordinates+0x1f8>)
 8001fd6:	801a      	strh	r2, [r3, #0]
	Y_POINT = Y_POINT + (DRIVING_ELAPSED_TIME /100) * cosf(ANGLE * (M_PI / 180.0f));
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <send_coordinates+0x208>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fd3e 	bl	8000a60 <__aeabi_i2f>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	4b5d      	ldr	r3, [pc, #372]	; (800215c <send_coordinates+0x1fc>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4a5c      	ldr	r2, [pc, #368]	; (8002160 <send_coordinates+0x200>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fd32 	bl	8000a60 <__aeabi_i2f>
 8001ffc:	4605      	mov	r5, r0
 8001ffe:	4b59      	ldr	r3, [pc, #356]	; (8002164 <send_coordinates+0x204>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fbca 	bl	800079c <__aeabi_f2d>
 8002008:	a351      	add	r3, pc, #324	; (adr r3, 8002150 <send_coordinates+0x1f0>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe f937 	bl	8000280 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fc17 	bl	800084c <__aeabi_d2f>
 800201e:	4603      	mov	r3, r0
 8002020:	4618      	mov	r0, r3
 8002022:	f001 fce9 	bl	80039f8 <cosf>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	4628      	mov	r0, r5
 800202c:	f7fe fd6c 	bl	8000b08 <__aeabi_fmul>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4620      	mov	r0, r4
 8002036:	f7fe fc5f 	bl	80008f8 <__addsf3>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe ff29 	bl	8000e94 <__aeabi_f2iz>
 8002042:	4603      	mov	r3, r0
 8002044:	b21a      	sxth	r2, r3
 8002046:	4b48      	ldr	r3, [pc, #288]	; (8002168 <send_coordinates+0x208>)
 8002048:	801a      	strh	r2, [r3, #0]

	int16_t COORD_X = X_POINT + (int16_t)(7.0f * sinf(ANGLE * (M_PI / 180.0f)));
 800204a:	4b46      	ldr	r3, [pc, #280]	; (8002164 <send_coordinates+0x204>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fba4 	bl	800079c <__aeabi_f2d>
 8002054:	a33e      	add	r3, pc, #248	; (adr r3, 8002150 <send_coordinates+0x1f0>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe f911 	bl	8000280 <__aeabi_dmul>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fbf1 	bl	800084c <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	4618      	mov	r0, r3
 800206e:	f001 fcfb 	bl	8003a68 <sinf>
 8002072:	4603      	mov	r3, r0
 8002074:	493d      	ldr	r1, [pc, #244]	; (800216c <send_coordinates+0x20c>)
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd46 	bl	8000b08 <__aeabi_fmul>
 800207c:	4603      	mov	r3, r0
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe ff08 	bl	8000e94 <__aeabi_f2iz>
 8002084:	4603      	mov	r3, r0
 8002086:	b21b      	sxth	r3, r3
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b33      	ldr	r3, [pc, #204]	; (8002158 <send_coordinates+0x1f8>)
 800208c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4413      	add	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]
	int16_t COORD_Y = Y_POINT + (int16_t)(7.0f * cosf(ANGLE * (M_PI / 180.0f)));
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <send_coordinates+0x204>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fb7d 	bl	800079c <__aeabi_f2d>
 80020a2:	a32b      	add	r3, pc, #172	; (adr r3, 8002150 <send_coordinates+0x1f0>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe f8ea 	bl	8000280 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fbca 	bl	800084c <__aeabi_d2f>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 fc9c 	bl	80039f8 <cosf>
 80020c0:	4603      	mov	r3, r0
 80020c2:	492a      	ldr	r1, [pc, #168]	; (800216c <send_coordinates+0x20c>)
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fd1f 	bl	8000b08 <__aeabi_fmul>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fee1 	bl	8000e94 <__aeabi_f2iz>
 80020d2:	4603      	mov	r3, r0
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <send_coordinates+0x208>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	81bb      	strh	r3, [r7, #12]


	DRIVING_ELAPSED_TIME = 0;
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <send_coordinates+0x1fc>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	801a      	strh	r2, [r3, #0]
	DRIVING_START_TIME = 0;
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <send_coordinates+0x210>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	801a      	strh	r2, [r3, #0]

	//Build packet
	uint8_t data[5];
	data[0] = '!'; // Start byte
 80020f2:	2321      	movs	r3, #33	; 0x21
 80020f4:	713b      	strb	r3, [r7, #4]

	data[1] = (uint8_t)((COORD_X >> 8) & 0xFF); // X high byte
 80020f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fa:	121b      	asrs	r3, r3, #8
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	717b      	strb	r3, [r7, #5]
	data[2] = (uint8_t)(COORD_X & 0xFF);        // X low byte
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	71bb      	strb	r3, [r7, #6]

	data[3] = (uint8_t)((COORD_Y >> 8) & 0xFF); // Y high byte
 8002108:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800210c:	121b      	asrs	r3, r3, #8
 800210e:	b21b      	sxth	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	71fb      	strb	r3, [r7, #7]
	data[4] = (uint8_t)(COORD_Y & 0xFF);        // Y low byte
 8002114:	89bb      	ldrh	r3, [r7, #12]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	723b      	strb	r3, [r7, #8]

	// Send 5 bytes over USART
	USART_SendData(&USART1_TXRX, data, 5);
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2205      	movs	r2, #5
 800211e:	4619      	mov	r1, r3
 8002120:	4814      	ldr	r0, [pc, #80]	; (8002174 <send_coordinates+0x214>)
 8002122:	f7ff fe0d 	bl	8001d40 <USART_SendData>

	count++;
 8002126:	4b14      	ldr	r3, [pc, #80]	; (8002178 <send_coordinates+0x218>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <send_coordinates+0x218>)
 8002130:	701a      	strb	r2, [r3, #0]

	if(count >= coords_nr){
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <send_coordinates+0x218>)
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	4b11      	ldr	r3, [pc, #68]	; (800217c <send_coordinates+0x21c>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d302      	bcc.n	8002144 <send_coordinates+0x1e4>
		stop_flag = 1;
 800213e:	4b10      	ldr	r3, [pc, #64]	; (8002180 <send_coordinates+0x220>)
 8002140:	2201      	movs	r2, #1
 8002142:	701a      	strb	r2, [r3, #0]
	}

}
 8002144:	bf00      	nop
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	f3af 8000 	nop.w
 8002150:	a2529d39 	.word	0xa2529d39
 8002154:	3f91df46 	.word	0x3f91df46
 8002158:	20000114 	.word	0x20000114
 800215c:	2000011a 	.word	0x2000011a
 8002160:	51eb851f 	.word	0x51eb851f
 8002164:	20000000 	.word	0x20000000
 8002168:	20000116 	.word	0x20000116
 800216c:	40e00000 	.word	0x40e00000
 8002170:	20000118 	.word	0x20000118
 8002174:	200000f0 	.word	0x200000f0
 8002178:	20000124 	.word	0x20000124
 800217c:	20000004 	.word	0x20000004
 8002180:	20000122 	.word	0x20000122

08002184 <main>:




int main(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

	//while(1);

	Full_RCC_Config();
 800218a:	f000 f925 	bl	80023d8 <Full_RCC_Config>
	Full_AD_TIM_Config();
 800218e:	f000 fa77 	bl	8002680 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 8002192:	f000 f939 	bl	8002408 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 8002196:	f000 fa3b 	bl	8002610 <Full_GP_TIM_Config>
	Full_USART_Config();
 800219a:	f000 fa95 	bl	80026c8 <Full_USART_Config>
	Full_I2C_Config();
 800219e:	f000 fa81 	bl	80026a4 <Full_I2C_Config>
	init_random_seed();
 80021a2:	f7ff fe73 	bl	8001e8c <init_random_seed>
	ms_delay(500);
 80021a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80021aa:	f7ff fe93 	bl	8001ed4 <ms_delay>


	while (1)
	{

		if(stop_flag){
 80021ae:	4b33      	ldr	r3, [pc, #204]	; (800227c <main+0xf8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d019      	beq.n	80021ec <main+0x68>
			stop_FWD(&TIM2_PWM);
 80021b8:	4831      	ldr	r0, [pc, #196]	; (8002280 <main+0xfc>)
 80021ba:	f7ff fa2b 	bl	8001614 <stop_FWD>
			current_state = STATE_IDLE;
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <main+0x100>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
			GPIO_IRQInterruptConfig(EXTI4_IRQ, DISABLE);
 80021c4:	2100      	movs	r1, #0
 80021c6:	200a      	movs	r0, #10
 80021c8:	f7ff f8fe 	bl	80013c8 <GPIO_IRQInterruptConfig>


			for(volatile int i = 0; i < 10; i++)
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	e009      	b.n	80021e6 <main+0x62>
			{
				GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 80021d2:	210d      	movs	r1, #13
 80021d4:	482c      	ldr	r0, [pc, #176]	; (8002288 <main+0x104>)
 80021d6:	f7ff f8de 	bl	8001396 <GPIO_Toggle_Pin>
				ms_delay(200);
 80021da:	20c8      	movs	r0, #200	; 0xc8
 80021dc:	f7ff fe7a 	bl	8001ed4 <ms_delay>
			for(volatile int i = 0; i < 10; i++)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3301      	adds	r3, #1
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	ddf2      	ble.n	80021d2 <main+0x4e>
			}
		}

		if(calc_angle_flag){
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <main+0x108>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00c      	beq.n	8002210 <main+0x8c>
			//use ELAPSED TIME and angular_velocity to calc angle
			//calc_angle();
			calc_angle_flag = 0;
 80021f6:	4b25      	ldr	r3, [pc, #148]	; (800228c <main+0x108>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]
			DRIVING_START_TIME = get_current_time(TIM1);
 80021fc:	4824      	ldr	r0, [pc, #144]	; (8002290 <main+0x10c>)
 80021fe:	f7ff fe83 	bl	8001f08 <get_current_time>
 8002202:	4603      	mov	r3, r0
 8002204:	461a      	mov	r2, r3
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <main+0x110>)
 8002208:	801a      	strh	r2, [r3, #0]
			DRIVING_ELAPSED_TIME = 0;
 800220a:	4b23      	ldr	r3, [pc, #140]	; (8002298 <main+0x114>)
 800220c:	2200      	movs	r2, #0
 800220e:	801a      	strh	r2, [r3, #0]
		}

		if(current_state == STATE_DRIVING)
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <main+0x100>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d02c      	beq.n	8002272 <main+0xee>
			//			float angle_rad = ANGLE * (M_PI / 180.0f);
			//			X_POINT += (int16_t)(INCREMENT * sinf(angle_rad));
			//			Y_POINT += (int16_t)(INCREMENT * cosf(angle_rad));
			//every 50 ms
		}
		else if(current_state == STATE_TURNING)
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <main+0x100>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d028      	beq.n	8002272 <main+0xee>
		{
			//float gyro_dps = raw_gyro / 65.5f;  // if FSR = ±500°/s
			//angular_velocity = read_w_gyro(); => Z, last 2 bytes of the 6 read
		}
		else if(current_state == STATE_IDLE)
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <main+0x100>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d124      	bne.n	8002272 <main+0xee>
		{
			USART_ReceiveData(&USART1_TXRX, &password, 1);
 8002228:	2201      	movs	r2, #1
 800222a:	491c      	ldr	r1, [pc, #112]	; (800229c <main+0x118>)
 800222c:	481c      	ldr	r0, [pc, #112]	; (80022a0 <main+0x11c>)
 800222e:	f7ff fdd5 	bl	8001ddc <USART_ReceiveData>
			ms_delay(50);
 8002232:	2032      	movs	r0, #50	; 0x32
 8002234:	f7ff fe4e 	bl	8001ed4 <ms_delay>
			USART_ReceiveData(&USART1_TXRX, &coords_nr, 1);
 8002238:	2201      	movs	r2, #1
 800223a:	491a      	ldr	r1, [pc, #104]	; (80022a4 <main+0x120>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <main+0x11c>)
 800223e:	f7ff fdcd 	bl	8001ddc <USART_ReceiveData>
			ms_delay(50);
 8002242:	2032      	movs	r0, #50	; 0x32
 8002244:	f7ff fe46 	bl	8001ed4 <ms_delay>
			if(password == START_PSW)
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <main+0x118>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b81      	cmp	r3, #129	; 0x81
 800224e:	d110      	bne.n	8002272 <main+0xee>
			{
				//START CONDITION basically
				current_state = STATE_DRIVING;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <main+0x100>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
				//char msg[32];
				drive_FWD(&TIM2_PWM);
 8002256:	480a      	ldr	r0, [pc, #40]	; (8002280 <main+0xfc>)
 8002258:	f7ff f994 	bl	8001584 <drive_FWD>
//				sprintf(msg, "Navigation Started");
//				USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
				//measure acceleration here??
				DRIVING_START_TIME = get_current_time(TIM1);
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <main+0x10c>)
 800225e:	f7ff fe53 	bl	8001f08 <get_current_time>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <main+0x110>)
 8002268:	801a      	strh	r2, [r3, #0]
//				sprintf(msg, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
//				USART_SendData(&USART1_TXRX, (uint8_t*)msg, strlen(msg));
				GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
 800226a:	2101      	movs	r1, #1
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff f8ab 	bl	80013c8 <GPIO_IRQInterruptConfig>
		else if(current_state == STATE_STOPPED)
		{

		}

		ms_delay(50);
 8002272:	2032      	movs	r0, #50	; 0x32
 8002274:	f7ff fe2e 	bl	8001ed4 <ms_delay>
		if(stop_flag){
 8002278:	e799      	b.n	80021ae <main+0x2a>
 800227a:	bf00      	nop
 800227c:	20000122 	.word	0x20000122
 8002280:	2000008c 	.word	0x2000008c
 8002284:	20000089 	.word	0x20000089
 8002288:	40020800 	.word	0x40020800
 800228c:	20000120 	.word	0x20000120
 8002290:	40010000 	.word	0x40010000
 8002294:	20000118 	.word	0x20000118
 8002298:	2000011a 	.word	0x2000011a
 800229c:	20000123 	.word	0x20000123
 80022a0:	200000f0 	.word	0x200000f0
 80022a4:	20000004 	.word	0x20000004

080022a8 <EXTI4_IRQHandler>:
}



void EXTI4_IRQHandler(void) //WALL SENSED
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, DISABLE);

	if(!GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 80022ae:	2104      	movs	r1, #4
 80022b0:	483d      	ldr	r0, [pc, #244]	; (80023a8 <EXTI4_IRQHandler+0x100>)
 80022b2:	f7ff f85b 	bl	800136c <GPIO_Read_Pin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d142      	bne.n	8002342 <EXTI4_IRQHandler+0x9a>
		GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,DISABLE);
 80022bc:	2200      	movs	r2, #0
 80022be:	210d      	movs	r1, #13
 80022c0:	483a      	ldr	r0, [pc, #232]	; (80023ac <EXTI4_IRQHandler+0x104>)
 80022c2:	f7ff f82f 	bl	8001324 <GPIO_Write_Pin>
		wall_sensed = 1;
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <EXTI4_IRQHandler+0x108>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
//		char msg2[32];
//		sprintf(msg2, "StoppedDrivingAt %u\r\n", get_current_time(TIM1));
//		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
		stop_FWD(&TIM2_PWM);//driving stops here
 80022cc:	4839      	ldr	r0, [pc, #228]	; (80023b4 <EXTI4_IRQHandler+0x10c>)
 80022ce:	f7ff f9a1 	bl	8001614 <stop_FWD>
		DRIVING_ELAPSED_TIME = get_elapsed_time(TIM1, DRIVING_START_TIME);//how long driving took place
 80022d2:	4b39      	ldr	r3, [pc, #228]	; (80023b8 <EXTI4_IRQHandler+0x110>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4619      	mov	r1, r3
 80022da:	4838      	ldr	r0, [pc, #224]	; (80023bc <EXTI4_IRQHandler+0x114>)
 80022dc:	f7ff fe21 	bl	8001f22 <get_elapsed_time>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <EXTI4_IRQHandler+0x118>)
 80022e6:	801a      	strh	r2, [r3, #0]
//		sprintf(msg2, "DroveFor %u\r\n", DRIVING_ELAPSED_TIME);
//		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));

		send_coordinates();
 80022e8:	f7ff fe3a 	bl	8001f60 <send_coordinates>
		ms_delay(200);
 80022ec:	20c8      	movs	r0, #200	; 0xc8
 80022ee:	f7ff fdf1 	bl	8001ed4 <ms_delay>

		current_state = STATE_TURNING;
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <EXTI4_IRQHandler+0x11c>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	701a      	strb	r2, [r3, #0]
		calc_angle_flag = 0;
 80022f8:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <EXTI4_IRQHandler+0x120>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
		TURNING_ELAPSED_TIME = 0;
 80022fe:	4b33      	ldr	r3, [pc, #204]	; (80023cc <EXTI4_IRQHandler+0x124>)
 8002300:	2200      	movs	r2, #0
 8002302:	801a      	strh	r2, [r3, #0]
		uint16_t turn_dir = get_random_direction();
 8002304:	f7ff fdce 	bl	8001ea4 <get_random_direction>
 8002308:	4603      	mov	r3, r0
 800230a:	80fb      	strh	r3, [r7, #6]
//		sprintf(msg2, "RandomDir: %u\r\n", (uint16_t)turn_dir);
//		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));

		if(!(turn_dir % 2))
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	b29b      	uxth	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <EXTI4_IRQHandler+0x7e>
		{
			direction_state = TURNING_RIGHT;
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <EXTI4_IRQHandler+0x128>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
			turn_RGT(&TIM2_PWM);
 800231e:	4825      	ldr	r0, [pc, #148]	; (80023b4 <EXTI4_IRQHandler+0x10c>)
 8002320:	f7ff f9b2 	bl	8001688 <turn_RGT>
 8002324:	e005      	b.n	8002332 <EXTI4_IRQHandler+0x8a>
		}
		else
		{
			direction_state = TURNING_LEFT;
 8002326:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <EXTI4_IRQHandler+0x128>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			turn_LFT(&TIM2_PWM);
 800232c:	4821      	ldr	r0, [pc, #132]	; (80023b4 <EXTI4_IRQHandler+0x10c>)
 800232e:	f7ff f9eb 	bl	8001708 <turn_LFT>
		}
		TURNING_START_TIME = get_current_time(TIM1);
 8002332:	4822      	ldr	r0, [pc, #136]	; (80023bc <EXTI4_IRQHandler+0x114>)
 8002334:	f7ff fde8 	bl	8001f08 <get_current_time>
 8002338:	4603      	mov	r3, r0
 800233a:	461a      	mov	r2, r3
 800233c:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <EXTI4_IRQHandler+0x12c>)
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e02b      	b.n	800239a <EXTI4_IRQHandler+0xf2>
//		sprintf(msg2, "StartedTurningAt %u\r\n", TURNING_START_TIME);
//		USART_SendData(&USART1_TXRX, (uint8_t*)msg2, strlen(msg2));
	}
	else{
		if(wall_sensed){
 8002342:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <EXTI4_IRQHandler+0x108>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d026      	beq.n	800239a <EXTI4_IRQHandler+0xf2>
			wall_sensed = 0;
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <EXTI4_IRQHandler+0x108>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
			//char msg3[32];
			stop_FWD(&TIM2_PWM);//turning stops here
 8002352:	4818      	ldr	r0, [pc, #96]	; (80023b4 <EXTI4_IRQHandler+0x10c>)
 8002354:	f7ff f95e 	bl	8001614 <stop_FWD>
//			sprintf(msg3, "StoppedTurningAt %u\r\n", get_current_time(TIM1));
//			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
			TURNING_ELAPSED_TIME = get_elapsed_time(TIM1,TURNING_START_TIME);
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <EXTI4_IRQHandler+0x12c>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	4816      	ldr	r0, [pc, #88]	; (80023bc <EXTI4_IRQHandler+0x114>)
 8002362:	f7ff fdde 	bl	8001f22 <get_elapsed_time>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b18      	ldr	r3, [pc, #96]	; (80023cc <EXTI4_IRQHandler+0x124>)
 800236c:	801a      	strh	r2, [r3, #0]
//			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));

			//calc_angle();
			//calc angle using TURNING_ELAPSED_TIME & angular_velocity, some error is expected

			ms_delay(500);
 800236e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002372:	f7ff fdaf 	bl	8001ed4 <ms_delay>

			current_state = STATE_DRIVING;
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <EXTI4_IRQHandler+0x11c>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
			DRIVING_START_TIME = get_current_time(TIM1);
 800237c:	480f      	ldr	r0, [pc, #60]	; (80023bc <EXTI4_IRQHandler+0x114>)
 800237e:	f7ff fdc3 	bl	8001f08 <get_current_time>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <EXTI4_IRQHandler+0x110>)
 8002388:	801a      	strh	r2, [r3, #0]
			drive_FWD(&TIM2_PWM);
 800238a:	480a      	ldr	r0, [pc, #40]	; (80023b4 <EXTI4_IRQHandler+0x10c>)
 800238c:	f7ff f8fa 	bl	8001584 <drive_FWD>
//			sprintf(msg3, "StartedDrivingAt %u\r\n", DRIVING_START_TIME);
//			USART_SendData(&USART1_TXRX, (uint8_t*)msg3, strlen(msg3));
			GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,ENABLE);
 8002390:	2201      	movs	r2, #1
 8002392:	210d      	movs	r1, #13
 8002394:	4805      	ldr	r0, [pc, #20]	; (80023ac <EXTI4_IRQHandler+0x104>)
 8002396:	f7fe ffc5 	bl	8001324 <GPIO_Write_Pin>
		}
	}
	GPIO_IRQHandling(GPIO_PIN_NO_4);
 800239a:	2004      	movs	r0, #4
 800239c:	f7ff f898 	bl	80014d0 <GPIO_IRQHandling>
	//GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);

	//SHOULD ADD FLAGS FOR SAFETY => TURNING/DRIVING STARTED = 1

}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020800 	.word	0x40020800
 80023b0:	20000121 	.word	0x20000121
 80023b4:	2000008c 	.word	0x2000008c
 80023b8:	20000118 	.word	0x20000118
 80023bc:	40010000 	.word	0x40010000
 80023c0:	2000011a 	.word	0x2000011a
 80023c4:	20000089 	.word	0x20000089
 80023c8:	20000120 	.word	0x20000120
 80023cc:	2000011e 	.word	0x2000011e
 80023d0:	20000088 	.word	0x20000088
 80023d4:	2000011c 	.word	0x2000011c

080023d8 <Full_RCC_Config>:

void Full_RCC_Config(void){
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <Full_RCC_Config+0x2c>)
 80023e0:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 80023e2:	2300      	movs	r3, #0
 80023e4:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 80023ea:	2304      	movs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 80023ee:	2304      	movs	r3, #4
 80023f0:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9c7 	bl	8001788 <RCC_Clock_Config>
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 8002408:	b580      	push	{r7, lr}
 800240a:	b0a2      	sub	sp, #136	; 0x88
 800240c:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 800240e:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <Full_GPIO_Config+0x1fc>)
 8002410:	67fb      	str	r3, [r7, #124]	; 0x7c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8002412:	230d      	movs	r3, #13
 8002414:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8002418:	2301      	movs	r3, #1
 800241a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PA4 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 8002430:	4b75      	ldr	r3, [pc, #468]	; (8002608 <Full_GPIO_Config+0x200>)
 8002432:	673b      	str	r3, [r7, #112]	; 0x70
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8002434:	2304      	movs	r3, #4
 8002436:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RFT;
 800243a:	2306      	movs	r3, #6
 800243c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002446:	2300      	movs	r3, #0
 8002448:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


	// SLP CONTROL CONFIG
	// GPIO Configuration for GpioSensor PB15
	GPIO_Handle_t GpioSleep;
	GpioSleep.pGPIOx = GPIOB;
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <Full_GPIO_Config+0x204>)
 800244e:	667b      	str	r3, [r7, #100]	; 0x64
	GpioSleep.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8002450:	230f      	movs	r3, #15
 8002452:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	GpioSleep.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	GpioSleep.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
	GpioSleep.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002462:	2300      	movs	r3, #0
 8002464:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	GpioSleep.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	// UART CONFIG
	// GPIO Configuration for UART_TX PA9 = UART_TX
	GPIO_Handle_t GpioTX;
	GpioTX.pGPIOx = GPIOA;
 800246e:	4b66      	ldr	r3, [pc, #408]	; (8002608 <Full_GPIO_Config+0x200>)
 8002470:	65bb      	str	r3, [r7, #88]	; 0x58
	GpioTX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8002472:	2309      	movs	r3, #9
 8002474:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	GpioTX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 8002478:	2302      	movs	r3, #2
 800247a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GpioTX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800247e:	2307      	movs	r3, #7
 8002480:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	GpioTX.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	GpioTX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	GpioTX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// GPIO Configuration for GpioSensor PA10 = UART_RX
	GPIO_Handle_t GpioRX;
	GpioRX.pGPIOx = GPIOA;
 8002496:	4b5c      	ldr	r3, [pc, #368]	; (8002608 <Full_GPIO_Config+0x200>)
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
	GpioRX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 800249a:	230a      	movs	r3, #10
 800249c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	GpioRX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 80024a0:	2302      	movs	r3, #2
 80024a2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioRX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 80024a6:	2307      	movs	r3, #7
 80024a8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	GpioRX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80024ac:	2303      	movs	r3, #3
 80024ae:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	GpioRX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 80024b8:	4b53      	ldr	r3, [pc, #332]	; (8002608 <Full_GPIO_Config+0x200>)
 80024ba:	643b      	str	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80024bc:	2303      	movs	r3, #3
 80024be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80024c8:	2303      	movs	r3, #3
 80024ca:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80024d4:	2301      	movs	r3, #1
 80024d6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80024da:	2300      	movs	r3, #0
 80024dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80024e0:	4b49      	ldr	r3, [pc, #292]	; (8002608 <Full_GPIO_Config+0x200>)
 80024e2:	637b      	str	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80024ea:	2302      	movs	r3, #2
 80024ec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80024f0:	2303      	movs	r3, #3
 80024f2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 8002508:	4b40      	ldr	r3, [pc, #256]	; (800260c <Full_GPIO_Config+0x204>)
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800250c:	2303      	movs	r3, #3
 800250e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002512:	2302      	movs	r3, #2
 8002514:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002518:	2303      	movs	r3, #3
 800251a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8002524:	2301      	movs	r3, #1
 8002526:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8002530:	4b35      	ldr	r3, [pc, #212]	; (8002608 <Full_GPIO_Config+0x200>)
 8002532:	61fb      	str	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800253a:	2302      	movs	r3, #2
 800253c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002540:	2303      	movs	r3, #3
 8002542:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800254c:	2301      	movs	r3, #1
 800254e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <Full_GPIO_Config+0x204>)
 800255a:	613b      	str	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800255c:	2306      	movs	r3, #6
 800255e:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8002560:	2302      	movs	r3, #2
 8002562:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002564:	2303      	movs	r3, #3
 8002566:	75bb      	strb	r3, [r7, #22]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002568:	2300      	movs	r3, #0
 800256a:	763b      	strb	r3, [r7, #24]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 800256c:	2304      	movs	r3, #4
 800256e:	767b      	strb	r3, [r7, #25]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8002570:	2300      	movs	r3, #0
 8002572:	75fb      	strb	r3, [r7, #23]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <Full_GPIO_Config+0x204>)
 8002576:	607b      	str	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8002578:	2307      	movs	r3, #7
 800257a:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800257c:	2302      	movs	r3, #2
 800257e:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8002580:	2303      	movs	r3, #3
 8002582:	72bb      	strb	r3, [r7, #10]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8002584:	2300      	movs	r3, #0
 8002586:	733b      	strb	r3, [r7, #12]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8002588:	2304      	movs	r3, #4
 800258a:	737b      	strb	r3, [r7, #13]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800258c:	2300      	movs	r3, #0
 800258e:	72fb      	strb	r3, [r7, #11]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 8002590:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fd63 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioSensor);
 800259a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fd5e 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioCH3);
 80025a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd59 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioCH2);
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe fd54 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioCH1);
 80025b8:	f107 031c 	add.w	r3, r7, #28
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fd4f 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80025c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd4a 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioSCL);
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fd45 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fd41 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioTX);
 80025de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fd3c 	bl	8001060 <GPIO_Init>
	GPIO_Init(&GpioRX);
 80025e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe fd37 	bl	8001060 <GPIO_Init>

	GPIO_Init(&GpioSleep);
 80025f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fd32 	bl	8001060 <GPIO_Init>

	//GPIO_IRQInterruptConfig(EXTI15_10_IRQ, ENABLE);
}
 80025fc:	bf00      	nop
 80025fe:	3788      	adds	r7, #136	; 0x88
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020800 	.word	0x40020800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400

08002610 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800261a:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 800261c:	4b17      	ldr	r3, [pc, #92]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800261e:	2204      	movs	r2, #4
 8002620:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 3200;
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002624:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8002628:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800262c:	2201      	movs	r2, #1
 800262e:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8002630:	4b12      	ldr	r3, [pc, #72]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002632:	2200      	movs	r2, #0
 8002634:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = 10;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002638:	220a      	movs	r2, #10
 800263a:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800263e:	2201      	movs	r2, #1
 8002640:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002644:	2200      	movs	r2, #0
 8002646:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = 10;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800264a:	220a      	movs	r2, #10
 800264c:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002650:	2201      	movs	r2, #1
 8002652:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002656:	2200      	movs	r2, #0
 8002658:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = 10;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800265c:	220a      	movs	r2, #10
 800265e:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002662:	2201      	movs	r2, #1
 8002664:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 8002666:	4b05      	ldr	r3, [pc, #20]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002668:	2200      	movs	r2, #0
 800266a:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = 10;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <Full_GP_TIM_Config+0x6c>)
 800266e:	220a      	movs	r2, #10
 8002670:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8002672:	4802      	ldr	r0, [pc, #8]	; (800267c <Full_GP_TIM_Config+0x6c>)
 8002674:	f7ff f90c 	bl	8001890 <GP_TIM_PWM_INIT>
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2000008c 	.word	0x2000008c

08002680 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_TMR.pTIMx = TIM1;
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <Full_AD_TIM_Config+0x1c>)
 8002686:	4a06      	ldr	r2, [pc, #24]	; (80026a0 <Full_AD_TIM_Config+0x20>)
 8002688:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_TMR.AD_TIM_Config.Prescaler = PRESCALER_16K;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Full_AD_TIM_Config+0x1c>)
 800268c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002690:	809a      	strh	r2, [r3, #4]
	AD_TIM_FreeRun_INIT(&TIM1_TMR);
 8002692:	4802      	ldr	r0, [pc, #8]	; (800269c <Full_AD_TIM_Config+0x1c>)
 8002694:	f7ff f8ba 	bl	800180c <AD_TIM_FreeRun_INIT>
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000a8 	.word	0x200000a8
 80026a0:	40010000 	.word	0x40010000

080026a4 <Full_I2C_Config>:


void Full_I2C_Config(void){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <Full_I2C_Config+0x1c>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <Full_I2C_Config+0x1c>)
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <Full_I2C_Config+0x20>)
 80026b2:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <Full_I2C_Config+0x1c>)
 80026b6:	f7fe ff2b 	bl	8001510 <I2C_SM_INIT>
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200000c8 	.word	0x200000c8
 80026c4:	000186a0 	.word	0x000186a0

080026c8 <Full_USART_Config>:

void Full_USART_Config(void){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

	USART1_TXRX.pUSARTx = USART1;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <Full_USART_Config+0x34>)
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <Full_USART_Config+0x38>)
 80026d0:	601a      	str	r2, [r3, #0]
	USART1_TXRX.USART_Config.USART_Mode = USART_MODE_TXRX;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <Full_USART_Config+0x34>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	711a      	strb	r2, [r3, #4]
	USART1_TXRX.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <Full_USART_Config+0x34>)
 80026da:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026de:	609a      	str	r2, [r3, #8]
	USART1_TXRX.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <Full_USART_Config+0x34>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	735a      	strb	r2, [r3, #13]
	USART1_TXRX.USART_Config.USART_NoOfStopBits	= USART_STOPBITS_1;
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <Full_USART_Config+0x34>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	731a      	strb	r2, [r3, #12]
	USART1_TXRX.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <Full_USART_Config+0x34>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	739a      	strb	r2, [r3, #14]
	//enable peripheral via cr1?

	USART_INIT(&USART1_TXRX);
 80026f2:	4802      	ldr	r0, [pc, #8]	; (80026fc <Full_USART_Config+0x34>)
 80026f4:	f7ff fabc 	bl	8001c70 <USART_INIT>
	//USART1_TXRX.pUSARTx->CR1 |= (1 << 13);
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	200000f0 	.word	0x200000f0
 8002700:	40011000 	.word	0x40011000

08002704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return 1;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <_kill>:

int _kill(int pid, int sig)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800271c:	f000 f8dc 	bl	80028d8 <__errno>
 8002720:	4603      	mov	r3, r0
 8002722:	2216      	movs	r2, #22
 8002724:	601a      	str	r2, [r3, #0]
  return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272a:	4618      	mov	r0, r3
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <_exit>:

void _exit (int status)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800273a:	f04f 31ff 	mov.w	r1, #4294967295
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffe7 	bl	8002712 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002744:	e7fe      	b.n	8002744 <_exit+0x12>

08002746 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	60b9      	str	r1, [r7, #8]
 8002750:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e00a      	b.n	800276e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002758:	f3af 8000 	nop.w
 800275c:	4601      	mov	r1, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1c5a      	adds	r2, r3, #1
 8002762:	60ba      	str	r2, [r7, #8]
 8002764:	b2ca      	uxtb	r2, r1
 8002766:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbf0      	blt.n	8002758 <_read+0x12>
  }

  return len;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e009      	b.n	80027a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	60ba      	str	r2, [r7, #8]
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	dbf1      	blt.n	8002792 <_write+0x12>
  }
  return len;
 80027ae:	687b      	ldr	r3, [r7, #4]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_close>:

int _close(int file)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027de:	605a      	str	r2, [r3, #4]
  return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <_isatty>:

int _isatty(int file)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002820:	4a14      	ldr	r2, [pc, #80]	; (8002874 <_sbrk+0x5c>)
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <_sbrk+0x60>)
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800282c:	4b13      	ldr	r3, [pc, #76]	; (800287c <_sbrk+0x64>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <_sbrk+0x64>)
 8002836:	4a12      	ldr	r2, [pc, #72]	; (8002880 <_sbrk+0x68>)
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d207      	bcs.n	8002858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002848:	f000 f846 	bl	80028d8 <__errno>
 800284c:	4603      	mov	r3, r0
 800284e:	220c      	movs	r2, #12
 8002850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002852:	f04f 33ff 	mov.w	r3, #4294967295
 8002856:	e009      	b.n	800286c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a05      	ldr	r2, [pc, #20]	; (800287c <_sbrk+0x64>)
 8002868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20018000 	.word	0x20018000
 8002878:	00000400 	.word	0x00000400
 800287c:	20000128 	.word	0x20000128
 8002880:	20000140 	.word	0x20000140

08002884 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002884:	480d      	ldr	r0, [pc, #52]	; (80028bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002886:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002888:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800288c:	480c      	ldr	r0, [pc, #48]	; (80028c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800288e:	490d      	ldr	r1, [pc, #52]	; (80028c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <LoopForever+0xe>)
  movs r3, #0
 8002892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002894:	e002      	b.n	800289c <LoopCopyDataInit>

08002896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800289a:	3304      	adds	r3, #4

0800289c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800289c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800289e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a0:	d3f9      	bcc.n	8002896 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80028a4:	4c0a      	ldr	r4, [pc, #40]	; (80028d0 <LoopForever+0x16>)
  movs r3, #0
 80028a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a8:	e001      	b.n	80028ae <LoopFillZerobss>

080028aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028ac:	3204      	adds	r2, #4

080028ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b0:	d3fb      	bcc.n	80028aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028b2:	f000 f817 	bl	80028e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028b6:	f7ff fc65 	bl	8002184 <main>

080028ba <LoopForever>:

LoopForever:
  b LoopForever
 80028ba:	e7fe      	b.n	80028ba <LoopForever>
  ldr   r0, =_estack
 80028bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80028c8:	08004b44 	.word	0x08004b44
  ldr r2, =_sbss
 80028cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80028d0:	2000013c 	.word	0x2000013c

080028d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028d4:	e7fe      	b.n	80028d4 <ADC_IRQHandler>
	...

080028d8 <__errno>:
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <__errno+0x8>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000008 	.word	0x20000008

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d0d      	ldr	r5, [pc, #52]	; (800291c <__libc_init_array+0x38>)
 80028e8:	4c0d      	ldr	r4, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ea:	1b64      	subs	r4, r4, r5
 80028ec:	10a4      	asrs	r4, r4, #2
 80028ee:	2600      	movs	r6, #0
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	4d0b      	ldr	r5, [pc, #44]	; (8002924 <__libc_init_array+0x40>)
 80028f6:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x44>)
 80028f8:	f001 fe88 	bl	800460c <_init>
 80028fc:	1b64      	subs	r4, r4, r5
 80028fe:	10a4      	asrs	r4, r4, #2
 8002900:	2600      	movs	r6, #0
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	f855 3b04 	ldr.w	r3, [r5], #4
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	f855 3b04 	ldr.w	r3, [r5], #4
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	08004b3c 	.word	0x08004b3c
 8002920:	08004b3c 	.word	0x08004b3c
 8002924:	08004b3c 	.word	0x08004b3c
 8002928:	08004b40 	.word	0x08004b40

0800292c <memset>:
 800292c:	4402      	add	r2, r0
 800292e:	4603      	mov	r3, r0
 8002930:	4293      	cmp	r3, r2
 8002932:	d100      	bne.n	8002936 <memset+0xa>
 8002934:	4770      	bx	lr
 8002936:	f803 1b01 	strb.w	r1, [r3], #1
 800293a:	e7f9      	b.n	8002930 <memset+0x4>

0800293c <srand>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4b10      	ldr	r3, [pc, #64]	; (8002980 <srand+0x44>)
 8002940:	681d      	ldr	r5, [r3, #0]
 8002942:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002944:	4604      	mov	r4, r0
 8002946:	b9b3      	cbnz	r3, 8002976 <srand+0x3a>
 8002948:	2018      	movs	r0, #24
 800294a:	f000 f893 	bl	8002a74 <malloc>
 800294e:	4602      	mov	r2, r0
 8002950:	63a8      	str	r0, [r5, #56]	; 0x38
 8002952:	b920      	cbnz	r0, 800295e <srand+0x22>
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <srand+0x48>)
 8002956:	480c      	ldr	r0, [pc, #48]	; (8002988 <srand+0x4c>)
 8002958:	2142      	movs	r1, #66	; 0x42
 800295a:	f000 f85b 	bl	8002a14 <__assert_func>
 800295e:	490b      	ldr	r1, [pc, #44]	; (800298c <srand+0x50>)
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <srand+0x54>)
 8002962:	e9c0 1300 	strd	r1, r3, [r0]
 8002966:	4b0b      	ldr	r3, [pc, #44]	; (8002994 <srand+0x58>)
 8002968:	6083      	str	r3, [r0, #8]
 800296a:	230b      	movs	r3, #11
 800296c:	8183      	strh	r3, [r0, #12]
 800296e:	2100      	movs	r1, #0
 8002970:	2001      	movs	r0, #1
 8002972:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002976:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002978:	2200      	movs	r2, #0
 800297a:	611c      	str	r4, [r3, #16]
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	bd38      	pop	{r3, r4, r5, pc}
 8002980:	20000008 	.word	0x20000008
 8002984:	08004628 	.word	0x08004628
 8002988:	0800463f 	.word	0x0800463f
 800298c:	abcd330e 	.word	0xabcd330e
 8002990:	e66d1234 	.word	0xe66d1234
 8002994:	0005deec 	.word	0x0005deec

08002998 <rand>:
 8002998:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <rand+0x5c>)
 800299a:	b510      	push	{r4, lr}
 800299c:	681c      	ldr	r4, [r3, #0]
 800299e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029a0:	b9b3      	cbnz	r3, 80029d0 <rand+0x38>
 80029a2:	2018      	movs	r0, #24
 80029a4:	f000 f866 	bl	8002a74 <malloc>
 80029a8:	4602      	mov	r2, r0
 80029aa:	63a0      	str	r0, [r4, #56]	; 0x38
 80029ac:	b920      	cbnz	r0, 80029b8 <rand+0x20>
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <rand+0x60>)
 80029b0:	4812      	ldr	r0, [pc, #72]	; (80029fc <rand+0x64>)
 80029b2:	214e      	movs	r1, #78	; 0x4e
 80029b4:	f000 f82e 	bl	8002a14 <__assert_func>
 80029b8:	4911      	ldr	r1, [pc, #68]	; (8002a00 <rand+0x68>)
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <rand+0x6c>)
 80029bc:	e9c0 1300 	strd	r1, r3, [r0]
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <rand+0x70>)
 80029c2:	6083      	str	r3, [r0, #8]
 80029c4:	230b      	movs	r3, #11
 80029c6:	8183      	strh	r3, [r0, #12]
 80029c8:	2100      	movs	r1, #0
 80029ca:	2001      	movs	r0, #1
 80029cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80029d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <rand+0x74>)
 80029d4:	6920      	ldr	r0, [r4, #16]
 80029d6:	6963      	ldr	r3, [r4, #20]
 80029d8:	490d      	ldr	r1, [pc, #52]	; (8002a10 <rand+0x78>)
 80029da:	4342      	muls	r2, r0
 80029dc:	fb01 2203 	mla	r2, r1, r3, r2
 80029e0:	fba0 0101 	umull	r0, r1, r0, r1
 80029e4:	1c43      	adds	r3, r0, #1
 80029e6:	eb42 0001 	adc.w	r0, r2, r1
 80029ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80029ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80029f2:	bd10      	pop	{r4, pc}
 80029f4:	20000008 	.word	0x20000008
 80029f8:	08004628 	.word	0x08004628
 80029fc:	0800463f 	.word	0x0800463f
 8002a00:	abcd330e 	.word	0xabcd330e
 8002a04:	e66d1234 	.word	0xe66d1234
 8002a08:	0005deec 	.word	0x0005deec
 8002a0c:	5851f42d 	.word	0x5851f42d
 8002a10:	4c957f2d 	.word	0x4c957f2d

08002a14 <__assert_func>:
 8002a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002a16:	4614      	mov	r4, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <__assert_func+0x2c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4605      	mov	r5, r0
 8002a20:	68d8      	ldr	r0, [r3, #12]
 8002a22:	b14c      	cbz	r4, 8002a38 <__assert_func+0x24>
 8002a24:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <__assert_func+0x30>)
 8002a26:	9100      	str	r1, [sp, #0]
 8002a28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <__assert_func+0x34>)
 8002a2e:	462b      	mov	r3, r5
 8002a30:	f000 f80e 	bl	8002a50 <fiprintf>
 8002a34:	f000 fcc0 	bl	80033b8 <abort>
 8002a38:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <__assert_func+0x38>)
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	e7f3      	b.n	8002a26 <__assert_func+0x12>
 8002a3e:	bf00      	nop
 8002a40:	20000008 	.word	0x20000008
 8002a44:	0800469a 	.word	0x0800469a
 8002a48:	080046a7 	.word	0x080046a7
 8002a4c:	080046d5 	.word	0x080046d5

08002a50 <fiprintf>:
 8002a50:	b40e      	push	{r1, r2, r3}
 8002a52:	b503      	push	{r0, r1, lr}
 8002a54:	4601      	mov	r1, r0
 8002a56:	ab03      	add	r3, sp, #12
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <fiprintf+0x20>)
 8002a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a5e:	6800      	ldr	r0, [r0, #0]
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	f000 f915 	bl	8002c90 <_vfiprintf_r>
 8002a66:	b002      	add	sp, #8
 8002a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a6c:	b003      	add	sp, #12
 8002a6e:	4770      	bx	lr
 8002a70:	20000008 	.word	0x20000008

08002a74 <malloc>:
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <malloc+0xc>)
 8002a76:	4601      	mov	r1, r0
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	f000 b86d 	b.w	8002b58 <_malloc_r>
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008

08002a84 <_free_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4605      	mov	r5, r0
 8002a88:	2900      	cmp	r1, #0
 8002a8a:	d041      	beq.n	8002b10 <_free_r+0x8c>
 8002a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a90:	1f0c      	subs	r4, r1, #4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfb8      	it	lt
 8002a96:	18e4      	addlt	r4, r4, r3
 8002a98:	f000 feb2 	bl	8003800 <__malloc_lock>
 8002a9c:	4a1d      	ldr	r2, [pc, #116]	; (8002b14 <_free_r+0x90>)
 8002a9e:	6813      	ldr	r3, [r2, #0]
 8002aa0:	b933      	cbnz	r3, 8002ab0 <_free_r+0x2c>
 8002aa2:	6063      	str	r3, [r4, #4]
 8002aa4:	6014      	str	r4, [r2, #0]
 8002aa6:	4628      	mov	r0, r5
 8002aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002aac:	f000 beae 	b.w	800380c <__malloc_unlock>
 8002ab0:	42a3      	cmp	r3, r4
 8002ab2:	d908      	bls.n	8002ac6 <_free_r+0x42>
 8002ab4:	6820      	ldr	r0, [r4, #0]
 8002ab6:	1821      	adds	r1, r4, r0
 8002ab8:	428b      	cmp	r3, r1
 8002aba:	bf01      	itttt	eq
 8002abc:	6819      	ldreq	r1, [r3, #0]
 8002abe:	685b      	ldreq	r3, [r3, #4]
 8002ac0:	1809      	addeq	r1, r1, r0
 8002ac2:	6021      	streq	r1, [r4, #0]
 8002ac4:	e7ed      	b.n	8002aa2 <_free_r+0x1e>
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	b10b      	cbz	r3, 8002ad0 <_free_r+0x4c>
 8002acc:	42a3      	cmp	r3, r4
 8002ace:	d9fa      	bls.n	8002ac6 <_free_r+0x42>
 8002ad0:	6811      	ldr	r1, [r2, #0]
 8002ad2:	1850      	adds	r0, r2, r1
 8002ad4:	42a0      	cmp	r0, r4
 8002ad6:	d10b      	bne.n	8002af0 <_free_r+0x6c>
 8002ad8:	6820      	ldr	r0, [r4, #0]
 8002ada:	4401      	add	r1, r0
 8002adc:	1850      	adds	r0, r2, r1
 8002ade:	4283      	cmp	r3, r0
 8002ae0:	6011      	str	r1, [r2, #0]
 8002ae2:	d1e0      	bne.n	8002aa6 <_free_r+0x22>
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6053      	str	r3, [r2, #4]
 8002aea:	4401      	add	r1, r0
 8002aec:	6011      	str	r1, [r2, #0]
 8002aee:	e7da      	b.n	8002aa6 <_free_r+0x22>
 8002af0:	d902      	bls.n	8002af8 <_free_r+0x74>
 8002af2:	230c      	movs	r3, #12
 8002af4:	602b      	str	r3, [r5, #0]
 8002af6:	e7d6      	b.n	8002aa6 <_free_r+0x22>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	1821      	adds	r1, r4, r0
 8002afc:	428b      	cmp	r3, r1
 8002afe:	bf04      	itt	eq
 8002b00:	6819      	ldreq	r1, [r3, #0]
 8002b02:	685b      	ldreq	r3, [r3, #4]
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	bf04      	itt	eq
 8002b08:	1809      	addeq	r1, r1, r0
 8002b0a:	6021      	streq	r1, [r4, #0]
 8002b0c:	6054      	str	r4, [r2, #4]
 8002b0e:	e7ca      	b.n	8002aa6 <_free_r+0x22>
 8002b10:	bd38      	pop	{r3, r4, r5, pc}
 8002b12:	bf00      	nop
 8002b14:	2000012c 	.word	0x2000012c

08002b18 <sbrk_aligned>:
 8002b18:	b570      	push	{r4, r5, r6, lr}
 8002b1a:	4e0e      	ldr	r6, [pc, #56]	; (8002b54 <sbrk_aligned+0x3c>)
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	6831      	ldr	r1, [r6, #0]
 8002b20:	4605      	mov	r5, r0
 8002b22:	b911      	cbnz	r1, 8002b2a <sbrk_aligned+0x12>
 8002b24:	f000 fb78 	bl	8003218 <_sbrk_r>
 8002b28:	6030      	str	r0, [r6, #0]
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f000 fb73 	bl	8003218 <_sbrk_r>
 8002b32:	1c43      	adds	r3, r0, #1
 8002b34:	d00a      	beq.n	8002b4c <sbrk_aligned+0x34>
 8002b36:	1cc4      	adds	r4, r0, #3
 8002b38:	f024 0403 	bic.w	r4, r4, #3
 8002b3c:	42a0      	cmp	r0, r4
 8002b3e:	d007      	beq.n	8002b50 <sbrk_aligned+0x38>
 8002b40:	1a21      	subs	r1, r4, r0
 8002b42:	4628      	mov	r0, r5
 8002b44:	f000 fb68 	bl	8003218 <_sbrk_r>
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d101      	bne.n	8002b50 <sbrk_aligned+0x38>
 8002b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8002b50:	4620      	mov	r0, r4
 8002b52:	bd70      	pop	{r4, r5, r6, pc}
 8002b54:	20000130 	.word	0x20000130

08002b58 <_malloc_r>:
 8002b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b5c:	1ccd      	adds	r5, r1, #3
 8002b5e:	f025 0503 	bic.w	r5, r5, #3
 8002b62:	3508      	adds	r5, #8
 8002b64:	2d0c      	cmp	r5, #12
 8002b66:	bf38      	it	cc
 8002b68:	250c      	movcc	r5, #12
 8002b6a:	2d00      	cmp	r5, #0
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	db01      	blt.n	8002b74 <_malloc_r+0x1c>
 8002b70:	42a9      	cmp	r1, r5
 8002b72:	d905      	bls.n	8002b80 <_malloc_r+0x28>
 8002b74:	230c      	movs	r3, #12
 8002b76:	603b      	str	r3, [r7, #0]
 8002b78:	2600      	movs	r6, #0
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b80:	4e2e      	ldr	r6, [pc, #184]	; (8002c3c <_malloc_r+0xe4>)
 8002b82:	f000 fe3d 	bl	8003800 <__malloc_lock>
 8002b86:	6833      	ldr	r3, [r6, #0]
 8002b88:	461c      	mov	r4, r3
 8002b8a:	bb34      	cbnz	r4, 8002bda <_malloc_r+0x82>
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f7ff ffc2 	bl	8002b18 <sbrk_aligned>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	4604      	mov	r4, r0
 8002b98:	d14d      	bne.n	8002c36 <_malloc_r+0xde>
 8002b9a:	6834      	ldr	r4, [r6, #0]
 8002b9c:	4626      	mov	r6, r4
 8002b9e:	2e00      	cmp	r6, #0
 8002ba0:	d140      	bne.n	8002c24 <_malloc_r+0xcc>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	4631      	mov	r1, r6
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	eb04 0803 	add.w	r8, r4, r3
 8002bac:	f000 fb34 	bl	8003218 <_sbrk_r>
 8002bb0:	4580      	cmp	r8, r0
 8002bb2:	d13a      	bne.n	8002c2a <_malloc_r+0xd2>
 8002bb4:	6821      	ldr	r1, [r4, #0]
 8002bb6:	3503      	adds	r5, #3
 8002bb8:	1a6d      	subs	r5, r5, r1
 8002bba:	f025 0503 	bic.w	r5, r5, #3
 8002bbe:	3508      	adds	r5, #8
 8002bc0:	2d0c      	cmp	r5, #12
 8002bc2:	bf38      	it	cc
 8002bc4:	250c      	movcc	r5, #12
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f7ff ffa5 	bl	8002b18 <sbrk_aligned>
 8002bce:	3001      	adds	r0, #1
 8002bd0:	d02b      	beq.n	8002c2a <_malloc_r+0xd2>
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	442b      	add	r3, r5
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	e00e      	b.n	8002bf8 <_malloc_r+0xa0>
 8002bda:	6822      	ldr	r2, [r4, #0]
 8002bdc:	1b52      	subs	r2, r2, r5
 8002bde:	d41e      	bmi.n	8002c1e <_malloc_r+0xc6>
 8002be0:	2a0b      	cmp	r2, #11
 8002be2:	d916      	bls.n	8002c12 <_malloc_r+0xba>
 8002be4:	1961      	adds	r1, r4, r5
 8002be6:	42a3      	cmp	r3, r4
 8002be8:	6025      	str	r5, [r4, #0]
 8002bea:	bf18      	it	ne
 8002bec:	6059      	strne	r1, [r3, #4]
 8002bee:	6863      	ldr	r3, [r4, #4]
 8002bf0:	bf08      	it	eq
 8002bf2:	6031      	streq	r1, [r6, #0]
 8002bf4:	5162      	str	r2, [r4, r5]
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f104 060b 	add.w	r6, r4, #11
 8002bfe:	f000 fe05 	bl	800380c <__malloc_unlock>
 8002c02:	f026 0607 	bic.w	r6, r6, #7
 8002c06:	1d23      	adds	r3, r4, #4
 8002c08:	1af2      	subs	r2, r6, r3
 8002c0a:	d0b6      	beq.n	8002b7a <_malloc_r+0x22>
 8002c0c:	1b9b      	subs	r3, r3, r6
 8002c0e:	50a3      	str	r3, [r4, r2]
 8002c10:	e7b3      	b.n	8002b7a <_malloc_r+0x22>
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	bf0c      	ite	eq
 8002c18:	6032      	streq	r2, [r6, #0]
 8002c1a:	605a      	strne	r2, [r3, #4]
 8002c1c:	e7ec      	b.n	8002bf8 <_malloc_r+0xa0>
 8002c1e:	4623      	mov	r3, r4
 8002c20:	6864      	ldr	r4, [r4, #4]
 8002c22:	e7b2      	b.n	8002b8a <_malloc_r+0x32>
 8002c24:	4634      	mov	r4, r6
 8002c26:	6876      	ldr	r6, [r6, #4]
 8002c28:	e7b9      	b.n	8002b9e <_malloc_r+0x46>
 8002c2a:	230c      	movs	r3, #12
 8002c2c:	603b      	str	r3, [r7, #0]
 8002c2e:	4638      	mov	r0, r7
 8002c30:	f000 fdec 	bl	800380c <__malloc_unlock>
 8002c34:	e7a1      	b.n	8002b7a <_malloc_r+0x22>
 8002c36:	6025      	str	r5, [r4, #0]
 8002c38:	e7de      	b.n	8002bf8 <_malloc_r+0xa0>
 8002c3a:	bf00      	nop
 8002c3c:	2000012c 	.word	0x2000012c

08002c40 <__sfputc_r>:
 8002c40:	6893      	ldr	r3, [r2, #8]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	b410      	push	{r4}
 8002c48:	6093      	str	r3, [r2, #8]
 8002c4a:	da07      	bge.n	8002c5c <__sfputc_r+0x1c>
 8002c4c:	6994      	ldr	r4, [r2, #24]
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	db01      	blt.n	8002c56 <__sfputc_r+0x16>
 8002c52:	290a      	cmp	r1, #10
 8002c54:	d102      	bne.n	8002c5c <__sfputc_r+0x1c>
 8002c56:	bc10      	pop	{r4}
 8002c58:	f000 baee 	b.w	8003238 <__swbuf_r>
 8002c5c:	6813      	ldr	r3, [r2, #0]
 8002c5e:	1c58      	adds	r0, r3, #1
 8002c60:	6010      	str	r0, [r2, #0]
 8002c62:	7019      	strb	r1, [r3, #0]
 8002c64:	4608      	mov	r0, r1
 8002c66:	bc10      	pop	{r4}
 8002c68:	4770      	bx	lr

08002c6a <__sfputs_r>:
 8002c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6c:	4606      	mov	r6, r0
 8002c6e:	460f      	mov	r7, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	18d5      	adds	r5, r2, r3
 8002c74:	42ac      	cmp	r4, r5
 8002c76:	d101      	bne.n	8002c7c <__sfputs_r+0x12>
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e007      	b.n	8002c8c <__sfputs_r+0x22>
 8002c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c80:	463a      	mov	r2, r7
 8002c82:	4630      	mov	r0, r6
 8002c84:	f7ff ffdc 	bl	8002c40 <__sfputc_r>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d1f3      	bne.n	8002c74 <__sfputs_r+0xa>
 8002c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c90 <_vfiprintf_r>:
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c94:	460d      	mov	r5, r1
 8002c96:	b09d      	sub	sp, #116	; 0x74
 8002c98:	4614      	mov	r4, r2
 8002c9a:	4698      	mov	r8, r3
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	b118      	cbz	r0, 8002ca8 <_vfiprintf_r+0x18>
 8002ca0:	6983      	ldr	r3, [r0, #24]
 8002ca2:	b90b      	cbnz	r3, 8002ca8 <_vfiprintf_r+0x18>
 8002ca4:	f000 fca6 	bl	80035f4 <__sinit>
 8002ca8:	4b89      	ldr	r3, [pc, #548]	; (8002ed0 <_vfiprintf_r+0x240>)
 8002caa:	429d      	cmp	r5, r3
 8002cac:	d11b      	bne.n	8002ce6 <_vfiprintf_r+0x56>
 8002cae:	6875      	ldr	r5, [r6, #4]
 8002cb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cb2:	07d9      	lsls	r1, r3, #31
 8002cb4:	d405      	bmi.n	8002cc2 <_vfiprintf_r+0x32>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	059a      	lsls	r2, r3, #22
 8002cba:	d402      	bmi.n	8002cc2 <_vfiprintf_r+0x32>
 8002cbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cbe:	f000 fd37 	bl	8003730 <__retarget_lock_acquire_recursive>
 8002cc2:	89ab      	ldrh	r3, [r5, #12]
 8002cc4:	071b      	lsls	r3, r3, #28
 8002cc6:	d501      	bpl.n	8002ccc <_vfiprintf_r+0x3c>
 8002cc8:	692b      	ldr	r3, [r5, #16]
 8002cca:	b9eb      	cbnz	r3, 8002d08 <_vfiprintf_r+0x78>
 8002ccc:	4629      	mov	r1, r5
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f000 fb04 	bl	80032dc <__swsetup_r>
 8002cd4:	b1c0      	cbz	r0, 8002d08 <_vfiprintf_r+0x78>
 8002cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cd8:	07dc      	lsls	r4, r3, #31
 8002cda:	d50e      	bpl.n	8002cfa <_vfiprintf_r+0x6a>
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	b01d      	add	sp, #116	; 0x74
 8002ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce6:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <_vfiprintf_r+0x244>)
 8002ce8:	429d      	cmp	r5, r3
 8002cea:	d101      	bne.n	8002cf0 <_vfiprintf_r+0x60>
 8002cec:	68b5      	ldr	r5, [r6, #8]
 8002cee:	e7df      	b.n	8002cb0 <_vfiprintf_r+0x20>
 8002cf0:	4b79      	ldr	r3, [pc, #484]	; (8002ed8 <_vfiprintf_r+0x248>)
 8002cf2:	429d      	cmp	r5, r3
 8002cf4:	bf08      	it	eq
 8002cf6:	68f5      	ldreq	r5, [r6, #12]
 8002cf8:	e7da      	b.n	8002cb0 <_vfiprintf_r+0x20>
 8002cfa:	89ab      	ldrh	r3, [r5, #12]
 8002cfc:	0598      	lsls	r0, r3, #22
 8002cfe:	d4ed      	bmi.n	8002cdc <_vfiprintf_r+0x4c>
 8002d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d02:	f000 fd16 	bl	8003732 <__retarget_lock_release_recursive>
 8002d06:	e7e9      	b.n	8002cdc <_vfiprintf_r+0x4c>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d12:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d16:	2330      	movs	r3, #48	; 0x30
 8002d18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002edc <_vfiprintf_r+0x24c>
 8002d1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d20:	f04f 0901 	mov.w	r9, #1
 8002d24:	4623      	mov	r3, r4
 8002d26:	469a      	mov	sl, r3
 8002d28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d2c:	b10a      	cbz	r2, 8002d32 <_vfiprintf_r+0xa2>
 8002d2e:	2a25      	cmp	r2, #37	; 0x25
 8002d30:	d1f9      	bne.n	8002d26 <_vfiprintf_r+0x96>
 8002d32:	ebba 0b04 	subs.w	fp, sl, r4
 8002d36:	d00b      	beq.n	8002d50 <_vfiprintf_r+0xc0>
 8002d38:	465b      	mov	r3, fp
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f7ff ff93 	bl	8002c6a <__sfputs_r>
 8002d44:	3001      	adds	r0, #1
 8002d46:	f000 80aa 	beq.w	8002e9e <_vfiprintf_r+0x20e>
 8002d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d4c:	445a      	add	r2, fp
 8002d4e:	9209      	str	r2, [sp, #36]	; 0x24
 8002d50:	f89a 3000 	ldrb.w	r3, [sl]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a2 	beq.w	8002e9e <_vfiprintf_r+0x20e>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d64:	f10a 0a01 	add.w	sl, sl, #1
 8002d68:	9304      	str	r3, [sp, #16]
 8002d6a:	9307      	str	r3, [sp, #28]
 8002d6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d70:	931a      	str	r3, [sp, #104]	; 0x68
 8002d72:	4654      	mov	r4, sl
 8002d74:	2205      	movs	r2, #5
 8002d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7a:	4858      	ldr	r0, [pc, #352]	; (8002edc <_vfiprintf_r+0x24c>)
 8002d7c:	f7fd fa30 	bl	80001e0 <memchr>
 8002d80:	9a04      	ldr	r2, [sp, #16]
 8002d82:	b9d8      	cbnz	r0, 8002dbc <_vfiprintf_r+0x12c>
 8002d84:	06d1      	lsls	r1, r2, #27
 8002d86:	bf44      	itt	mi
 8002d88:	2320      	movmi	r3, #32
 8002d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d8e:	0713      	lsls	r3, r2, #28
 8002d90:	bf44      	itt	mi
 8002d92:	232b      	movmi	r3, #43	; 0x2b
 8002d94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d98:	f89a 3000 	ldrb.w	r3, [sl]
 8002d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d9e:	d015      	beq.n	8002dcc <_vfiprintf_r+0x13c>
 8002da0:	9a07      	ldr	r2, [sp, #28]
 8002da2:	4654      	mov	r4, sl
 8002da4:	2000      	movs	r0, #0
 8002da6:	f04f 0c0a 	mov.w	ip, #10
 8002daa:	4621      	mov	r1, r4
 8002dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002db0:	3b30      	subs	r3, #48	; 0x30
 8002db2:	2b09      	cmp	r3, #9
 8002db4:	d94e      	bls.n	8002e54 <_vfiprintf_r+0x1c4>
 8002db6:	b1b0      	cbz	r0, 8002de6 <_vfiprintf_r+0x156>
 8002db8:	9207      	str	r2, [sp, #28]
 8002dba:	e014      	b.n	8002de6 <_vfiprintf_r+0x156>
 8002dbc:	eba0 0308 	sub.w	r3, r0, r8
 8002dc0:	fa09 f303 	lsl.w	r3, r9, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	9304      	str	r3, [sp, #16]
 8002dc8:	46a2      	mov	sl, r4
 8002dca:	e7d2      	b.n	8002d72 <_vfiprintf_r+0xe2>
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	1d19      	adds	r1, r3, #4
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	9103      	str	r1, [sp, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	bfbb      	ittet	lt
 8002dd8:	425b      	neglt	r3, r3
 8002dda:	f042 0202 	orrlt.w	r2, r2, #2
 8002dde:	9307      	strge	r3, [sp, #28]
 8002de0:	9307      	strlt	r3, [sp, #28]
 8002de2:	bfb8      	it	lt
 8002de4:	9204      	strlt	r2, [sp, #16]
 8002de6:	7823      	ldrb	r3, [r4, #0]
 8002de8:	2b2e      	cmp	r3, #46	; 0x2e
 8002dea:	d10c      	bne.n	8002e06 <_vfiprintf_r+0x176>
 8002dec:	7863      	ldrb	r3, [r4, #1]
 8002dee:	2b2a      	cmp	r3, #42	; 0x2a
 8002df0:	d135      	bne.n	8002e5e <_vfiprintf_r+0x1ce>
 8002df2:	9b03      	ldr	r3, [sp, #12]
 8002df4:	1d1a      	adds	r2, r3, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	9203      	str	r2, [sp, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfb8      	it	lt
 8002dfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e02:	3402      	adds	r4, #2
 8002e04:	9305      	str	r3, [sp, #20]
 8002e06:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002ee0 <_vfiprintf_r+0x250>
 8002e0a:	7821      	ldrb	r1, [r4, #0]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	4650      	mov	r0, sl
 8002e10:	f7fd f9e6 	bl	80001e0 <memchr>
 8002e14:	b140      	cbz	r0, 8002e28 <_vfiprintf_r+0x198>
 8002e16:	2340      	movs	r3, #64	; 0x40
 8002e18:	eba0 000a 	sub.w	r0, r0, sl
 8002e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8002e20:	9b04      	ldr	r3, [sp, #16]
 8002e22:	4303      	orrs	r3, r0
 8002e24:	3401      	adds	r4, #1
 8002e26:	9304      	str	r3, [sp, #16]
 8002e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e2c:	482d      	ldr	r0, [pc, #180]	; (8002ee4 <_vfiprintf_r+0x254>)
 8002e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e32:	2206      	movs	r2, #6
 8002e34:	f7fd f9d4 	bl	80001e0 <memchr>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	d03f      	beq.n	8002ebc <_vfiprintf_r+0x22c>
 8002e3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <_vfiprintf_r+0x258>)
 8002e3e:	bb1b      	cbnz	r3, 8002e88 <_vfiprintf_r+0x1f8>
 8002e40:	9b03      	ldr	r3, [sp, #12]
 8002e42:	3307      	adds	r3, #7
 8002e44:	f023 0307 	bic.w	r3, r3, #7
 8002e48:	3308      	adds	r3, #8
 8002e4a:	9303      	str	r3, [sp, #12]
 8002e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e4e:	443b      	add	r3, r7
 8002e50:	9309      	str	r3, [sp, #36]	; 0x24
 8002e52:	e767      	b.n	8002d24 <_vfiprintf_r+0x94>
 8002e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e58:	460c      	mov	r4, r1
 8002e5a:	2001      	movs	r0, #1
 8002e5c:	e7a5      	b.n	8002daa <_vfiprintf_r+0x11a>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	3401      	adds	r4, #1
 8002e62:	9305      	str	r3, [sp, #20]
 8002e64:	4619      	mov	r1, r3
 8002e66:	f04f 0c0a 	mov.w	ip, #10
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e70:	3a30      	subs	r2, #48	; 0x30
 8002e72:	2a09      	cmp	r2, #9
 8002e74:	d903      	bls.n	8002e7e <_vfiprintf_r+0x1ee>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0c5      	beq.n	8002e06 <_vfiprintf_r+0x176>
 8002e7a:	9105      	str	r1, [sp, #20]
 8002e7c:	e7c3      	b.n	8002e06 <_vfiprintf_r+0x176>
 8002e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e82:	4604      	mov	r4, r0
 8002e84:	2301      	movs	r3, #1
 8002e86:	e7f0      	b.n	8002e6a <_vfiprintf_r+0x1da>
 8002e88:	ab03      	add	r3, sp, #12
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	462a      	mov	r2, r5
 8002e8e:	4b17      	ldr	r3, [pc, #92]	; (8002eec <_vfiprintf_r+0x25c>)
 8002e90:	a904      	add	r1, sp, #16
 8002e92:	4630      	mov	r0, r6
 8002e94:	f3af 8000 	nop.w
 8002e98:	4607      	mov	r7, r0
 8002e9a:	1c78      	adds	r0, r7, #1
 8002e9c:	d1d6      	bne.n	8002e4c <_vfiprintf_r+0x1bc>
 8002e9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ea0:	07d9      	lsls	r1, r3, #31
 8002ea2:	d405      	bmi.n	8002eb0 <_vfiprintf_r+0x220>
 8002ea4:	89ab      	ldrh	r3, [r5, #12]
 8002ea6:	059a      	lsls	r2, r3, #22
 8002ea8:	d402      	bmi.n	8002eb0 <_vfiprintf_r+0x220>
 8002eaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002eac:	f000 fc41 	bl	8003732 <__retarget_lock_release_recursive>
 8002eb0:	89ab      	ldrh	r3, [r5, #12]
 8002eb2:	065b      	lsls	r3, r3, #25
 8002eb4:	f53f af12 	bmi.w	8002cdc <_vfiprintf_r+0x4c>
 8002eb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eba:	e711      	b.n	8002ce0 <_vfiprintf_r+0x50>
 8002ebc:	ab03      	add	r3, sp, #12
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <_vfiprintf_r+0x25c>)
 8002ec4:	a904      	add	r1, sp, #16
 8002ec6:	4630      	mov	r0, r6
 8002ec8:	f000 f880 	bl	8002fcc <_printf_i>
 8002ecc:	e7e4      	b.n	8002e98 <_vfiprintf_r+0x208>
 8002ece:	bf00      	nop
 8002ed0:	0800472c 	.word	0x0800472c
 8002ed4:	0800474c 	.word	0x0800474c
 8002ed8:	0800470c 	.word	0x0800470c
 8002edc:	080046d6 	.word	0x080046d6
 8002ee0:	080046dc 	.word	0x080046dc
 8002ee4:	080046e0 	.word	0x080046e0
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	08002c6b 	.word	0x08002c6b

08002ef0 <_printf_common>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	4699      	mov	r9, r3
 8002ef8:	688a      	ldr	r2, [r1, #8]
 8002efa:	690b      	ldr	r3, [r1, #16]
 8002efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bfb8      	it	lt
 8002f04:	4613      	movlt	r3, r2
 8002f06:	6033      	str	r3, [r6, #0]
 8002f08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f0c:	4607      	mov	r7, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	b10a      	cbz	r2, 8002f16 <_printf_common+0x26>
 8002f12:	3301      	adds	r3, #1
 8002f14:	6033      	str	r3, [r6, #0]
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	0699      	lsls	r1, r3, #26
 8002f1a:	bf42      	ittt	mi
 8002f1c:	6833      	ldrmi	r3, [r6, #0]
 8002f1e:	3302      	addmi	r3, #2
 8002f20:	6033      	strmi	r3, [r6, #0]
 8002f22:	6825      	ldr	r5, [r4, #0]
 8002f24:	f015 0506 	ands.w	r5, r5, #6
 8002f28:	d106      	bne.n	8002f38 <_printf_common+0x48>
 8002f2a:	f104 0a19 	add.w	sl, r4, #25
 8002f2e:	68e3      	ldr	r3, [r4, #12]
 8002f30:	6832      	ldr	r2, [r6, #0]
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dc26      	bgt.n	8002f86 <_printf_common+0x96>
 8002f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f3c:	1e13      	subs	r3, r2, #0
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	bf18      	it	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	0692      	lsls	r2, r2, #26
 8002f46:	d42b      	bmi.n	8002fa0 <_printf_common+0xb0>
 8002f48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f4c:	4649      	mov	r1, r9
 8002f4e:	4638      	mov	r0, r7
 8002f50:	47c0      	blx	r8
 8002f52:	3001      	adds	r0, #1
 8002f54:	d01e      	beq.n	8002f94 <_printf_common+0xa4>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	68e5      	ldr	r5, [r4, #12]
 8002f5a:	6832      	ldr	r2, [r6, #0]
 8002f5c:	f003 0306 	and.w	r3, r3, #6
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	bf08      	it	eq
 8002f64:	1aad      	subeq	r5, r5, r2
 8002f66:	68a3      	ldr	r3, [r4, #8]
 8002f68:	6922      	ldr	r2, [r4, #16]
 8002f6a:	bf0c      	ite	eq
 8002f6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f70:	2500      	movne	r5, #0
 8002f72:	4293      	cmp	r3, r2
 8002f74:	bfc4      	itt	gt
 8002f76:	1a9b      	subgt	r3, r3, r2
 8002f78:	18ed      	addgt	r5, r5, r3
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	341a      	adds	r4, #26
 8002f7e:	42b5      	cmp	r5, r6
 8002f80:	d11a      	bne.n	8002fb8 <_printf_common+0xc8>
 8002f82:	2000      	movs	r0, #0
 8002f84:	e008      	b.n	8002f98 <_printf_common+0xa8>
 8002f86:	2301      	movs	r3, #1
 8002f88:	4652      	mov	r2, sl
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	4638      	mov	r0, r7
 8002f8e:	47c0      	blx	r8
 8002f90:	3001      	adds	r0, #1
 8002f92:	d103      	bne.n	8002f9c <_printf_common+0xac>
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f9c:	3501      	adds	r5, #1
 8002f9e:	e7c6      	b.n	8002f2e <_printf_common+0x3e>
 8002fa0:	18e1      	adds	r1, r4, r3
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	2030      	movs	r0, #48	; 0x30
 8002fa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002faa:	4422      	add	r2, r4
 8002fac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	e7c7      	b.n	8002f48 <_printf_common+0x58>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4622      	mov	r2, r4
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	4638      	mov	r0, r7
 8002fc0:	47c0      	blx	r8
 8002fc2:	3001      	adds	r0, #1
 8002fc4:	d0e6      	beq.n	8002f94 <_printf_common+0xa4>
 8002fc6:	3601      	adds	r6, #1
 8002fc8:	e7d9      	b.n	8002f7e <_printf_common+0x8e>
	...

08002fcc <_printf_i>:
 8002fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd0:	7e0f      	ldrb	r7, [r1, #24]
 8002fd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002fd4:	2f78      	cmp	r7, #120	; 0x78
 8002fd6:	4691      	mov	r9, r2
 8002fd8:	4680      	mov	r8, r0
 8002fda:	460c      	mov	r4, r1
 8002fdc:	469a      	mov	sl, r3
 8002fde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002fe2:	d807      	bhi.n	8002ff4 <_printf_i+0x28>
 8002fe4:	2f62      	cmp	r7, #98	; 0x62
 8002fe6:	d80a      	bhi.n	8002ffe <_printf_i+0x32>
 8002fe8:	2f00      	cmp	r7, #0
 8002fea:	f000 80d8 	beq.w	800319e <_printf_i+0x1d2>
 8002fee:	2f58      	cmp	r7, #88	; 0x58
 8002ff0:	f000 80a3 	beq.w	800313a <_printf_i+0x16e>
 8002ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ff8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ffc:	e03a      	b.n	8003074 <_printf_i+0xa8>
 8002ffe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003002:	2b15      	cmp	r3, #21
 8003004:	d8f6      	bhi.n	8002ff4 <_printf_i+0x28>
 8003006:	a101      	add	r1, pc, #4	; (adr r1, 800300c <_printf_i+0x40>)
 8003008:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800300c:	08003065 	.word	0x08003065
 8003010:	08003079 	.word	0x08003079
 8003014:	08002ff5 	.word	0x08002ff5
 8003018:	08002ff5 	.word	0x08002ff5
 800301c:	08002ff5 	.word	0x08002ff5
 8003020:	08002ff5 	.word	0x08002ff5
 8003024:	08003079 	.word	0x08003079
 8003028:	08002ff5 	.word	0x08002ff5
 800302c:	08002ff5 	.word	0x08002ff5
 8003030:	08002ff5 	.word	0x08002ff5
 8003034:	08002ff5 	.word	0x08002ff5
 8003038:	08003185 	.word	0x08003185
 800303c:	080030a9 	.word	0x080030a9
 8003040:	08003167 	.word	0x08003167
 8003044:	08002ff5 	.word	0x08002ff5
 8003048:	08002ff5 	.word	0x08002ff5
 800304c:	080031a7 	.word	0x080031a7
 8003050:	08002ff5 	.word	0x08002ff5
 8003054:	080030a9 	.word	0x080030a9
 8003058:	08002ff5 	.word	0x08002ff5
 800305c:	08002ff5 	.word	0x08002ff5
 8003060:	0800316f 	.word	0x0800316f
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	602a      	str	r2, [r5, #0]
 800306c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003070:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003074:	2301      	movs	r3, #1
 8003076:	e0a3      	b.n	80031c0 <_printf_i+0x1f4>
 8003078:	6820      	ldr	r0, [r4, #0]
 800307a:	6829      	ldr	r1, [r5, #0]
 800307c:	0606      	lsls	r6, r0, #24
 800307e:	f101 0304 	add.w	r3, r1, #4
 8003082:	d50a      	bpl.n	800309a <_printf_i+0xce>
 8003084:	680e      	ldr	r6, [r1, #0]
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	2e00      	cmp	r6, #0
 800308a:	da03      	bge.n	8003094 <_printf_i+0xc8>
 800308c:	232d      	movs	r3, #45	; 0x2d
 800308e:	4276      	negs	r6, r6
 8003090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003094:	485e      	ldr	r0, [pc, #376]	; (8003210 <_printf_i+0x244>)
 8003096:	230a      	movs	r3, #10
 8003098:	e019      	b.n	80030ce <_printf_i+0x102>
 800309a:	680e      	ldr	r6, [r1, #0]
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030a2:	bf18      	it	ne
 80030a4:	b236      	sxthne	r6, r6
 80030a6:	e7ef      	b.n	8003088 <_printf_i+0xbc>
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	6820      	ldr	r0, [r4, #0]
 80030ac:	1d19      	adds	r1, r3, #4
 80030ae:	6029      	str	r1, [r5, #0]
 80030b0:	0601      	lsls	r1, r0, #24
 80030b2:	d501      	bpl.n	80030b8 <_printf_i+0xec>
 80030b4:	681e      	ldr	r6, [r3, #0]
 80030b6:	e002      	b.n	80030be <_printf_i+0xf2>
 80030b8:	0646      	lsls	r6, r0, #25
 80030ba:	d5fb      	bpl.n	80030b4 <_printf_i+0xe8>
 80030bc:	881e      	ldrh	r6, [r3, #0]
 80030be:	4854      	ldr	r0, [pc, #336]	; (8003210 <_printf_i+0x244>)
 80030c0:	2f6f      	cmp	r7, #111	; 0x6f
 80030c2:	bf0c      	ite	eq
 80030c4:	2308      	moveq	r3, #8
 80030c6:	230a      	movne	r3, #10
 80030c8:	2100      	movs	r1, #0
 80030ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030ce:	6865      	ldr	r5, [r4, #4]
 80030d0:	60a5      	str	r5, [r4, #8]
 80030d2:	2d00      	cmp	r5, #0
 80030d4:	bfa2      	ittt	ge
 80030d6:	6821      	ldrge	r1, [r4, #0]
 80030d8:	f021 0104 	bicge.w	r1, r1, #4
 80030dc:	6021      	strge	r1, [r4, #0]
 80030de:	b90e      	cbnz	r6, 80030e4 <_printf_i+0x118>
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	d04d      	beq.n	8003180 <_printf_i+0x1b4>
 80030e4:	4615      	mov	r5, r2
 80030e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80030ea:	fb03 6711 	mls	r7, r3, r1, r6
 80030ee:	5dc7      	ldrb	r7, [r0, r7]
 80030f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030f4:	4637      	mov	r7, r6
 80030f6:	42bb      	cmp	r3, r7
 80030f8:	460e      	mov	r6, r1
 80030fa:	d9f4      	bls.n	80030e6 <_printf_i+0x11a>
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d10b      	bne.n	8003118 <_printf_i+0x14c>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	07de      	lsls	r6, r3, #31
 8003104:	d508      	bpl.n	8003118 <_printf_i+0x14c>
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	6861      	ldr	r1, [r4, #4]
 800310a:	4299      	cmp	r1, r3
 800310c:	bfde      	ittt	le
 800310e:	2330      	movle	r3, #48	; 0x30
 8003110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003118:	1b52      	subs	r2, r2, r5
 800311a:	6122      	str	r2, [r4, #16]
 800311c:	f8cd a000 	str.w	sl, [sp]
 8003120:	464b      	mov	r3, r9
 8003122:	aa03      	add	r2, sp, #12
 8003124:	4621      	mov	r1, r4
 8003126:	4640      	mov	r0, r8
 8003128:	f7ff fee2 	bl	8002ef0 <_printf_common>
 800312c:	3001      	adds	r0, #1
 800312e:	d14c      	bne.n	80031ca <_printf_i+0x1fe>
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	b004      	add	sp, #16
 8003136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313a:	4835      	ldr	r0, [pc, #212]	; (8003210 <_printf_i+0x244>)
 800313c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003140:	6829      	ldr	r1, [r5, #0]
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	f851 6b04 	ldr.w	r6, [r1], #4
 8003148:	6029      	str	r1, [r5, #0]
 800314a:	061d      	lsls	r5, r3, #24
 800314c:	d514      	bpl.n	8003178 <_printf_i+0x1ac>
 800314e:	07df      	lsls	r7, r3, #31
 8003150:	bf44      	itt	mi
 8003152:	f043 0320 	orrmi.w	r3, r3, #32
 8003156:	6023      	strmi	r3, [r4, #0]
 8003158:	b91e      	cbnz	r6, 8003162 <_printf_i+0x196>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	f023 0320 	bic.w	r3, r3, #32
 8003160:	6023      	str	r3, [r4, #0]
 8003162:	2310      	movs	r3, #16
 8003164:	e7b0      	b.n	80030c8 <_printf_i+0xfc>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	2378      	movs	r3, #120	; 0x78
 8003170:	4828      	ldr	r0, [pc, #160]	; (8003214 <_printf_i+0x248>)
 8003172:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003176:	e7e3      	b.n	8003140 <_printf_i+0x174>
 8003178:	0659      	lsls	r1, r3, #25
 800317a:	bf48      	it	mi
 800317c:	b2b6      	uxthmi	r6, r6
 800317e:	e7e6      	b.n	800314e <_printf_i+0x182>
 8003180:	4615      	mov	r5, r2
 8003182:	e7bb      	b.n	80030fc <_printf_i+0x130>
 8003184:	682b      	ldr	r3, [r5, #0]
 8003186:	6826      	ldr	r6, [r4, #0]
 8003188:	6961      	ldr	r1, [r4, #20]
 800318a:	1d18      	adds	r0, r3, #4
 800318c:	6028      	str	r0, [r5, #0]
 800318e:	0635      	lsls	r5, r6, #24
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	d501      	bpl.n	8003198 <_printf_i+0x1cc>
 8003194:	6019      	str	r1, [r3, #0]
 8003196:	e002      	b.n	800319e <_printf_i+0x1d2>
 8003198:	0670      	lsls	r0, r6, #25
 800319a:	d5fb      	bpl.n	8003194 <_printf_i+0x1c8>
 800319c:	8019      	strh	r1, [r3, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	4615      	mov	r5, r2
 80031a4:	e7ba      	b.n	800311c <_printf_i+0x150>
 80031a6:	682b      	ldr	r3, [r5, #0]
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	602a      	str	r2, [r5, #0]
 80031ac:	681d      	ldr	r5, [r3, #0]
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	2100      	movs	r1, #0
 80031b2:	4628      	mov	r0, r5
 80031b4:	f7fd f814 	bl	80001e0 <memchr>
 80031b8:	b108      	cbz	r0, 80031be <_printf_i+0x1f2>
 80031ba:	1b40      	subs	r0, r0, r5
 80031bc:	6060      	str	r0, [r4, #4]
 80031be:	6863      	ldr	r3, [r4, #4]
 80031c0:	6123      	str	r3, [r4, #16]
 80031c2:	2300      	movs	r3, #0
 80031c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031c8:	e7a8      	b.n	800311c <_printf_i+0x150>
 80031ca:	6923      	ldr	r3, [r4, #16]
 80031cc:	462a      	mov	r2, r5
 80031ce:	4649      	mov	r1, r9
 80031d0:	4640      	mov	r0, r8
 80031d2:	47d0      	blx	sl
 80031d4:	3001      	adds	r0, #1
 80031d6:	d0ab      	beq.n	8003130 <_printf_i+0x164>
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	079b      	lsls	r3, r3, #30
 80031dc:	d413      	bmi.n	8003206 <_printf_i+0x23a>
 80031de:	68e0      	ldr	r0, [r4, #12]
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	4298      	cmp	r0, r3
 80031e4:	bfb8      	it	lt
 80031e6:	4618      	movlt	r0, r3
 80031e8:	e7a4      	b.n	8003134 <_printf_i+0x168>
 80031ea:	2301      	movs	r3, #1
 80031ec:	4632      	mov	r2, r6
 80031ee:	4649      	mov	r1, r9
 80031f0:	4640      	mov	r0, r8
 80031f2:	47d0      	blx	sl
 80031f4:	3001      	adds	r0, #1
 80031f6:	d09b      	beq.n	8003130 <_printf_i+0x164>
 80031f8:	3501      	adds	r5, #1
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	9903      	ldr	r1, [sp, #12]
 80031fe:	1a5b      	subs	r3, r3, r1
 8003200:	42ab      	cmp	r3, r5
 8003202:	dcf2      	bgt.n	80031ea <_printf_i+0x21e>
 8003204:	e7eb      	b.n	80031de <_printf_i+0x212>
 8003206:	2500      	movs	r5, #0
 8003208:	f104 0619 	add.w	r6, r4, #25
 800320c:	e7f5      	b.n	80031fa <_printf_i+0x22e>
 800320e:	bf00      	nop
 8003210:	080046e7 	.word	0x080046e7
 8003214:	080046f8 	.word	0x080046f8

08003218 <_sbrk_r>:
 8003218:	b538      	push	{r3, r4, r5, lr}
 800321a:	4d06      	ldr	r5, [pc, #24]	; (8003234 <_sbrk_r+0x1c>)
 800321c:	2300      	movs	r3, #0
 800321e:	4604      	mov	r4, r0
 8003220:	4608      	mov	r0, r1
 8003222:	602b      	str	r3, [r5, #0]
 8003224:	f7ff faf8 	bl	8002818 <_sbrk>
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	d102      	bne.n	8003232 <_sbrk_r+0x1a>
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	b103      	cbz	r3, 8003232 <_sbrk_r+0x1a>
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	bd38      	pop	{r3, r4, r5, pc}
 8003234:	20000138 	.word	0x20000138

08003238 <__swbuf_r>:
 8003238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800323a:	460e      	mov	r6, r1
 800323c:	4614      	mov	r4, r2
 800323e:	4605      	mov	r5, r0
 8003240:	b118      	cbz	r0, 800324a <__swbuf_r+0x12>
 8003242:	6983      	ldr	r3, [r0, #24]
 8003244:	b90b      	cbnz	r3, 800324a <__swbuf_r+0x12>
 8003246:	f000 f9d5 	bl	80035f4 <__sinit>
 800324a:	4b21      	ldr	r3, [pc, #132]	; (80032d0 <__swbuf_r+0x98>)
 800324c:	429c      	cmp	r4, r3
 800324e:	d12b      	bne.n	80032a8 <__swbuf_r+0x70>
 8003250:	686c      	ldr	r4, [r5, #4]
 8003252:	69a3      	ldr	r3, [r4, #24]
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	89a3      	ldrh	r3, [r4, #12]
 8003258:	071a      	lsls	r2, r3, #28
 800325a:	d52f      	bpl.n	80032bc <__swbuf_r+0x84>
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	b36b      	cbz	r3, 80032bc <__swbuf_r+0x84>
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	1ac0      	subs	r0, r0, r3
 8003266:	6963      	ldr	r3, [r4, #20]
 8003268:	b2f6      	uxtb	r6, r6
 800326a:	4283      	cmp	r3, r0
 800326c:	4637      	mov	r7, r6
 800326e:	dc04      	bgt.n	800327a <__swbuf_r+0x42>
 8003270:	4621      	mov	r1, r4
 8003272:	4628      	mov	r0, r5
 8003274:	f000 f92a 	bl	80034cc <_fflush_r>
 8003278:	bb30      	cbnz	r0, 80032c8 <__swbuf_r+0x90>
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	3b01      	subs	r3, #1
 800327e:	60a3      	str	r3, [r4, #8]
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	6022      	str	r2, [r4, #0]
 8003286:	701e      	strb	r6, [r3, #0]
 8003288:	6963      	ldr	r3, [r4, #20]
 800328a:	3001      	adds	r0, #1
 800328c:	4283      	cmp	r3, r0
 800328e:	d004      	beq.n	800329a <__swbuf_r+0x62>
 8003290:	89a3      	ldrh	r3, [r4, #12]
 8003292:	07db      	lsls	r3, r3, #31
 8003294:	d506      	bpl.n	80032a4 <__swbuf_r+0x6c>
 8003296:	2e0a      	cmp	r6, #10
 8003298:	d104      	bne.n	80032a4 <__swbuf_r+0x6c>
 800329a:	4621      	mov	r1, r4
 800329c:	4628      	mov	r0, r5
 800329e:	f000 f915 	bl	80034cc <_fflush_r>
 80032a2:	b988      	cbnz	r0, 80032c8 <__swbuf_r+0x90>
 80032a4:	4638      	mov	r0, r7
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <__swbuf_r+0x9c>)
 80032aa:	429c      	cmp	r4, r3
 80032ac:	d101      	bne.n	80032b2 <__swbuf_r+0x7a>
 80032ae:	68ac      	ldr	r4, [r5, #8]
 80032b0:	e7cf      	b.n	8003252 <__swbuf_r+0x1a>
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <__swbuf_r+0xa0>)
 80032b4:	429c      	cmp	r4, r3
 80032b6:	bf08      	it	eq
 80032b8:	68ec      	ldreq	r4, [r5, #12]
 80032ba:	e7ca      	b.n	8003252 <__swbuf_r+0x1a>
 80032bc:	4621      	mov	r1, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f80c 	bl	80032dc <__swsetup_r>
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d0cb      	beq.n	8003260 <__swbuf_r+0x28>
 80032c8:	f04f 37ff 	mov.w	r7, #4294967295
 80032cc:	e7ea      	b.n	80032a4 <__swbuf_r+0x6c>
 80032ce:	bf00      	nop
 80032d0:	0800472c 	.word	0x0800472c
 80032d4:	0800474c 	.word	0x0800474c
 80032d8:	0800470c 	.word	0x0800470c

080032dc <__swsetup_r>:
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <__swsetup_r+0xcc>)
 80032de:	b570      	push	{r4, r5, r6, lr}
 80032e0:	681d      	ldr	r5, [r3, #0]
 80032e2:	4606      	mov	r6, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	b125      	cbz	r5, 80032f2 <__swsetup_r+0x16>
 80032e8:	69ab      	ldr	r3, [r5, #24]
 80032ea:	b913      	cbnz	r3, 80032f2 <__swsetup_r+0x16>
 80032ec:	4628      	mov	r0, r5
 80032ee:	f000 f981 	bl	80035f4 <__sinit>
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <__swsetup_r+0xd0>)
 80032f4:	429c      	cmp	r4, r3
 80032f6:	d10f      	bne.n	8003318 <__swsetup_r+0x3c>
 80032f8:	686c      	ldr	r4, [r5, #4]
 80032fa:	89a3      	ldrh	r3, [r4, #12]
 80032fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003300:	0719      	lsls	r1, r3, #28
 8003302:	d42c      	bmi.n	800335e <__swsetup_r+0x82>
 8003304:	06dd      	lsls	r5, r3, #27
 8003306:	d411      	bmi.n	800332c <__swsetup_r+0x50>
 8003308:	2309      	movs	r3, #9
 800330a:	6033      	str	r3, [r6, #0]
 800330c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003310:	81a3      	strh	r3, [r4, #12]
 8003312:	f04f 30ff 	mov.w	r0, #4294967295
 8003316:	e03e      	b.n	8003396 <__swsetup_r+0xba>
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <__swsetup_r+0xd4>)
 800331a:	429c      	cmp	r4, r3
 800331c:	d101      	bne.n	8003322 <__swsetup_r+0x46>
 800331e:	68ac      	ldr	r4, [r5, #8]
 8003320:	e7eb      	b.n	80032fa <__swsetup_r+0x1e>
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <__swsetup_r+0xd8>)
 8003324:	429c      	cmp	r4, r3
 8003326:	bf08      	it	eq
 8003328:	68ec      	ldreq	r4, [r5, #12]
 800332a:	e7e6      	b.n	80032fa <__swsetup_r+0x1e>
 800332c:	0758      	lsls	r0, r3, #29
 800332e:	d512      	bpl.n	8003356 <__swsetup_r+0x7a>
 8003330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003332:	b141      	cbz	r1, 8003346 <__swsetup_r+0x6a>
 8003334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003338:	4299      	cmp	r1, r3
 800333a:	d002      	beq.n	8003342 <__swsetup_r+0x66>
 800333c:	4630      	mov	r0, r6
 800333e:	f7ff fba1 	bl	8002a84 <_free_r>
 8003342:	2300      	movs	r3, #0
 8003344:	6363      	str	r3, [r4, #52]	; 0x34
 8003346:	89a3      	ldrh	r3, [r4, #12]
 8003348:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	2300      	movs	r3, #0
 8003350:	6063      	str	r3, [r4, #4]
 8003352:	6923      	ldr	r3, [r4, #16]
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	f043 0308 	orr.w	r3, r3, #8
 800335c:	81a3      	strh	r3, [r4, #12]
 800335e:	6923      	ldr	r3, [r4, #16]
 8003360:	b94b      	cbnz	r3, 8003376 <__swsetup_r+0x9a>
 8003362:	89a3      	ldrh	r3, [r4, #12]
 8003364:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336c:	d003      	beq.n	8003376 <__swsetup_r+0x9a>
 800336e:	4621      	mov	r1, r4
 8003370:	4630      	mov	r0, r6
 8003372:	f000 fa05 	bl	8003780 <__smakebuf_r>
 8003376:	89a0      	ldrh	r0, [r4, #12]
 8003378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800337c:	f010 0301 	ands.w	r3, r0, #1
 8003380:	d00a      	beq.n	8003398 <__swsetup_r+0xbc>
 8003382:	2300      	movs	r3, #0
 8003384:	60a3      	str	r3, [r4, #8]
 8003386:	6963      	ldr	r3, [r4, #20]
 8003388:	425b      	negs	r3, r3
 800338a:	61a3      	str	r3, [r4, #24]
 800338c:	6923      	ldr	r3, [r4, #16]
 800338e:	b943      	cbnz	r3, 80033a2 <__swsetup_r+0xc6>
 8003390:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003394:	d1ba      	bne.n	800330c <__swsetup_r+0x30>
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	0781      	lsls	r1, r0, #30
 800339a:	bf58      	it	pl
 800339c:	6963      	ldrpl	r3, [r4, #20]
 800339e:	60a3      	str	r3, [r4, #8]
 80033a0:	e7f4      	b.n	800338c <__swsetup_r+0xb0>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7f7      	b.n	8003396 <__swsetup_r+0xba>
 80033a6:	bf00      	nop
 80033a8:	20000008 	.word	0x20000008
 80033ac:	0800472c 	.word	0x0800472c
 80033b0:	0800474c 	.word	0x0800474c
 80033b4:	0800470c 	.word	0x0800470c

080033b8 <abort>:
 80033b8:	b508      	push	{r3, lr}
 80033ba:	2006      	movs	r0, #6
 80033bc:	f000 fa54 	bl	8003868 <raise>
 80033c0:	2001      	movs	r0, #1
 80033c2:	f7ff f9b6 	bl	8002732 <_exit>
	...

080033c8 <__sflush_r>:
 80033c8:	898a      	ldrh	r2, [r1, #12]
 80033ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033cc:	4605      	mov	r5, r0
 80033ce:	0710      	lsls	r0, r2, #28
 80033d0:	460c      	mov	r4, r1
 80033d2:	d457      	bmi.n	8003484 <__sflush_r+0xbc>
 80033d4:	684b      	ldr	r3, [r1, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	dc04      	bgt.n	80033e4 <__sflush_r+0x1c>
 80033da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	dc01      	bgt.n	80033e4 <__sflush_r+0x1c>
 80033e0:	2000      	movs	r0, #0
 80033e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033e6:	2e00      	cmp	r6, #0
 80033e8:	d0fa      	beq.n	80033e0 <__sflush_r+0x18>
 80033ea:	2300      	movs	r3, #0
 80033ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80033f0:	682f      	ldr	r7, [r5, #0]
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	d032      	beq.n	800345c <__sflush_r+0x94>
 80033f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	075a      	lsls	r2, r3, #29
 80033fc:	d505      	bpl.n	800340a <__sflush_r+0x42>
 80033fe:	6863      	ldr	r3, [r4, #4]
 8003400:	1ac0      	subs	r0, r0, r3
 8003402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003404:	b10b      	cbz	r3, 800340a <__sflush_r+0x42>
 8003406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003408:	1ac0      	subs	r0, r0, r3
 800340a:	2300      	movs	r3, #0
 800340c:	4602      	mov	r2, r0
 800340e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003410:	6a21      	ldr	r1, [r4, #32]
 8003412:	4628      	mov	r0, r5
 8003414:	47b0      	blx	r6
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	d106      	bne.n	800342a <__sflush_r+0x62>
 800341c:	6829      	ldr	r1, [r5, #0]
 800341e:	291d      	cmp	r1, #29
 8003420:	d82c      	bhi.n	800347c <__sflush_r+0xb4>
 8003422:	4a29      	ldr	r2, [pc, #164]	; (80034c8 <__sflush_r+0x100>)
 8003424:	40ca      	lsrs	r2, r1
 8003426:	07d6      	lsls	r6, r2, #31
 8003428:	d528      	bpl.n	800347c <__sflush_r+0xb4>
 800342a:	2200      	movs	r2, #0
 800342c:	6062      	str	r2, [r4, #4]
 800342e:	04d9      	lsls	r1, r3, #19
 8003430:	6922      	ldr	r2, [r4, #16]
 8003432:	6022      	str	r2, [r4, #0]
 8003434:	d504      	bpl.n	8003440 <__sflush_r+0x78>
 8003436:	1c42      	adds	r2, r0, #1
 8003438:	d101      	bne.n	800343e <__sflush_r+0x76>
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	b903      	cbnz	r3, 8003440 <__sflush_r+0x78>
 800343e:	6560      	str	r0, [r4, #84]	; 0x54
 8003440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003442:	602f      	str	r7, [r5, #0]
 8003444:	2900      	cmp	r1, #0
 8003446:	d0cb      	beq.n	80033e0 <__sflush_r+0x18>
 8003448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800344c:	4299      	cmp	r1, r3
 800344e:	d002      	beq.n	8003456 <__sflush_r+0x8e>
 8003450:	4628      	mov	r0, r5
 8003452:	f7ff fb17 	bl	8002a84 <_free_r>
 8003456:	2000      	movs	r0, #0
 8003458:	6360      	str	r0, [r4, #52]	; 0x34
 800345a:	e7c2      	b.n	80033e2 <__sflush_r+0x1a>
 800345c:	6a21      	ldr	r1, [r4, #32]
 800345e:	2301      	movs	r3, #1
 8003460:	4628      	mov	r0, r5
 8003462:	47b0      	blx	r6
 8003464:	1c41      	adds	r1, r0, #1
 8003466:	d1c7      	bne.n	80033f8 <__sflush_r+0x30>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0c4      	beq.n	80033f8 <__sflush_r+0x30>
 800346e:	2b1d      	cmp	r3, #29
 8003470:	d001      	beq.n	8003476 <__sflush_r+0xae>
 8003472:	2b16      	cmp	r3, #22
 8003474:	d101      	bne.n	800347a <__sflush_r+0xb2>
 8003476:	602f      	str	r7, [r5, #0]
 8003478:	e7b2      	b.n	80033e0 <__sflush_r+0x18>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003480:	81a3      	strh	r3, [r4, #12]
 8003482:	e7ae      	b.n	80033e2 <__sflush_r+0x1a>
 8003484:	690f      	ldr	r7, [r1, #16]
 8003486:	2f00      	cmp	r7, #0
 8003488:	d0aa      	beq.n	80033e0 <__sflush_r+0x18>
 800348a:	0793      	lsls	r3, r2, #30
 800348c:	680e      	ldr	r6, [r1, #0]
 800348e:	bf08      	it	eq
 8003490:	694b      	ldreq	r3, [r1, #20]
 8003492:	600f      	str	r7, [r1, #0]
 8003494:	bf18      	it	ne
 8003496:	2300      	movne	r3, #0
 8003498:	1bf6      	subs	r6, r6, r7
 800349a:	608b      	str	r3, [r1, #8]
 800349c:	2e00      	cmp	r6, #0
 800349e:	dd9f      	ble.n	80033e0 <__sflush_r+0x18>
 80034a0:	6a21      	ldr	r1, [r4, #32]
 80034a2:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034a6:	4633      	mov	r3, r6
 80034a8:	463a      	mov	r2, r7
 80034aa:	4628      	mov	r0, r5
 80034ac:	47e0      	blx	ip
 80034ae:	2800      	cmp	r0, #0
 80034b0:	dc06      	bgt.n	80034c0 <__sflush_r+0xf8>
 80034b2:	89a3      	ldrh	r3, [r4, #12]
 80034b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034b8:	81a3      	strh	r3, [r4, #12]
 80034ba:	f04f 30ff 	mov.w	r0, #4294967295
 80034be:	e790      	b.n	80033e2 <__sflush_r+0x1a>
 80034c0:	4407      	add	r7, r0
 80034c2:	1a36      	subs	r6, r6, r0
 80034c4:	e7ea      	b.n	800349c <__sflush_r+0xd4>
 80034c6:	bf00      	nop
 80034c8:	20400001 	.word	0x20400001

080034cc <_fflush_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	690b      	ldr	r3, [r1, #16]
 80034d0:	4605      	mov	r5, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	b913      	cbnz	r3, 80034dc <_fflush_r+0x10>
 80034d6:	2500      	movs	r5, #0
 80034d8:	4628      	mov	r0, r5
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	b118      	cbz	r0, 80034e6 <_fflush_r+0x1a>
 80034de:	6983      	ldr	r3, [r0, #24]
 80034e0:	b90b      	cbnz	r3, 80034e6 <_fflush_r+0x1a>
 80034e2:	f000 f887 	bl	80035f4 <__sinit>
 80034e6:	4b14      	ldr	r3, [pc, #80]	; (8003538 <_fflush_r+0x6c>)
 80034e8:	429c      	cmp	r4, r3
 80034ea:	d11b      	bne.n	8003524 <_fflush_r+0x58>
 80034ec:	686c      	ldr	r4, [r5, #4]
 80034ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0ef      	beq.n	80034d6 <_fflush_r+0xa>
 80034f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034f8:	07d0      	lsls	r0, r2, #31
 80034fa:	d404      	bmi.n	8003506 <_fflush_r+0x3a>
 80034fc:	0599      	lsls	r1, r3, #22
 80034fe:	d402      	bmi.n	8003506 <_fflush_r+0x3a>
 8003500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003502:	f000 f915 	bl	8003730 <__retarget_lock_acquire_recursive>
 8003506:	4628      	mov	r0, r5
 8003508:	4621      	mov	r1, r4
 800350a:	f7ff ff5d 	bl	80033c8 <__sflush_r>
 800350e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003510:	07da      	lsls	r2, r3, #31
 8003512:	4605      	mov	r5, r0
 8003514:	d4e0      	bmi.n	80034d8 <_fflush_r+0xc>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	059b      	lsls	r3, r3, #22
 800351a:	d4dd      	bmi.n	80034d8 <_fflush_r+0xc>
 800351c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800351e:	f000 f908 	bl	8003732 <__retarget_lock_release_recursive>
 8003522:	e7d9      	b.n	80034d8 <_fflush_r+0xc>
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <_fflush_r+0x70>)
 8003526:	429c      	cmp	r4, r3
 8003528:	d101      	bne.n	800352e <_fflush_r+0x62>
 800352a:	68ac      	ldr	r4, [r5, #8]
 800352c:	e7df      	b.n	80034ee <_fflush_r+0x22>
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <_fflush_r+0x74>)
 8003530:	429c      	cmp	r4, r3
 8003532:	bf08      	it	eq
 8003534:	68ec      	ldreq	r4, [r5, #12]
 8003536:	e7da      	b.n	80034ee <_fflush_r+0x22>
 8003538:	0800472c 	.word	0x0800472c
 800353c:	0800474c 	.word	0x0800474c
 8003540:	0800470c 	.word	0x0800470c

08003544 <std>:
 8003544:	2300      	movs	r3, #0
 8003546:	b510      	push	{r4, lr}
 8003548:	4604      	mov	r4, r0
 800354a:	e9c0 3300 	strd	r3, r3, [r0]
 800354e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003552:	6083      	str	r3, [r0, #8]
 8003554:	8181      	strh	r1, [r0, #12]
 8003556:	6643      	str	r3, [r0, #100]	; 0x64
 8003558:	81c2      	strh	r2, [r0, #14]
 800355a:	6183      	str	r3, [r0, #24]
 800355c:	4619      	mov	r1, r3
 800355e:	2208      	movs	r2, #8
 8003560:	305c      	adds	r0, #92	; 0x5c
 8003562:	f7ff f9e3 	bl	800292c <memset>
 8003566:	4b05      	ldr	r3, [pc, #20]	; (800357c <std+0x38>)
 8003568:	6263      	str	r3, [r4, #36]	; 0x24
 800356a:	4b05      	ldr	r3, [pc, #20]	; (8003580 <std+0x3c>)
 800356c:	62a3      	str	r3, [r4, #40]	; 0x28
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <std+0x40>)
 8003570:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <std+0x44>)
 8003574:	6224      	str	r4, [r4, #32]
 8003576:	6323      	str	r3, [r4, #48]	; 0x30
 8003578:	bd10      	pop	{r4, pc}
 800357a:	bf00      	nop
 800357c:	080038a1 	.word	0x080038a1
 8003580:	080038c3 	.word	0x080038c3
 8003584:	080038fb 	.word	0x080038fb
 8003588:	0800391f 	.word	0x0800391f

0800358c <_cleanup_r>:
 800358c:	4901      	ldr	r1, [pc, #4]	; (8003594 <_cleanup_r+0x8>)
 800358e:	f000 b8af 	b.w	80036f0 <_fwalk_reent>
 8003592:	bf00      	nop
 8003594:	080034cd 	.word	0x080034cd

08003598 <__sfmoreglue>:
 8003598:	b570      	push	{r4, r5, r6, lr}
 800359a:	2268      	movs	r2, #104	; 0x68
 800359c:	1e4d      	subs	r5, r1, #1
 800359e:	4355      	muls	r5, r2
 80035a0:	460e      	mov	r6, r1
 80035a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035a6:	f7ff fad7 	bl	8002b58 <_malloc_r>
 80035aa:	4604      	mov	r4, r0
 80035ac:	b140      	cbz	r0, 80035c0 <__sfmoreglue+0x28>
 80035ae:	2100      	movs	r1, #0
 80035b0:	e9c0 1600 	strd	r1, r6, [r0]
 80035b4:	300c      	adds	r0, #12
 80035b6:	60a0      	str	r0, [r4, #8]
 80035b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80035bc:	f7ff f9b6 	bl	800292c <memset>
 80035c0:	4620      	mov	r0, r4
 80035c2:	bd70      	pop	{r4, r5, r6, pc}

080035c4 <__sfp_lock_acquire>:
 80035c4:	4801      	ldr	r0, [pc, #4]	; (80035cc <__sfp_lock_acquire+0x8>)
 80035c6:	f000 b8b3 	b.w	8003730 <__retarget_lock_acquire_recursive>
 80035ca:	bf00      	nop
 80035cc:	20000135 	.word	0x20000135

080035d0 <__sfp_lock_release>:
 80035d0:	4801      	ldr	r0, [pc, #4]	; (80035d8 <__sfp_lock_release+0x8>)
 80035d2:	f000 b8ae 	b.w	8003732 <__retarget_lock_release_recursive>
 80035d6:	bf00      	nop
 80035d8:	20000135 	.word	0x20000135

080035dc <__sinit_lock_acquire>:
 80035dc:	4801      	ldr	r0, [pc, #4]	; (80035e4 <__sinit_lock_acquire+0x8>)
 80035de:	f000 b8a7 	b.w	8003730 <__retarget_lock_acquire_recursive>
 80035e2:	bf00      	nop
 80035e4:	20000136 	.word	0x20000136

080035e8 <__sinit_lock_release>:
 80035e8:	4801      	ldr	r0, [pc, #4]	; (80035f0 <__sinit_lock_release+0x8>)
 80035ea:	f000 b8a2 	b.w	8003732 <__retarget_lock_release_recursive>
 80035ee:	bf00      	nop
 80035f0:	20000136 	.word	0x20000136

080035f4 <__sinit>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4604      	mov	r4, r0
 80035f8:	f7ff fff0 	bl	80035dc <__sinit_lock_acquire>
 80035fc:	69a3      	ldr	r3, [r4, #24]
 80035fe:	b11b      	cbz	r3, 8003608 <__sinit+0x14>
 8003600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003604:	f7ff bff0 	b.w	80035e8 <__sinit_lock_release>
 8003608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800360c:	6523      	str	r3, [r4, #80]	; 0x50
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <__sinit+0x68>)
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <__sinit+0x6c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	62a2      	str	r2, [r4, #40]	; 0x28
 8003616:	42a3      	cmp	r3, r4
 8003618:	bf04      	itt	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	61a3      	streq	r3, [r4, #24]
 800361e:	4620      	mov	r0, r4
 8003620:	f000 f820 	bl	8003664 <__sfp>
 8003624:	6060      	str	r0, [r4, #4]
 8003626:	4620      	mov	r0, r4
 8003628:	f000 f81c 	bl	8003664 <__sfp>
 800362c:	60a0      	str	r0, [r4, #8]
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f818 	bl	8003664 <__sfp>
 8003634:	2200      	movs	r2, #0
 8003636:	60e0      	str	r0, [r4, #12]
 8003638:	2104      	movs	r1, #4
 800363a:	6860      	ldr	r0, [r4, #4]
 800363c:	f7ff ff82 	bl	8003544 <std>
 8003640:	68a0      	ldr	r0, [r4, #8]
 8003642:	2201      	movs	r2, #1
 8003644:	2109      	movs	r1, #9
 8003646:	f7ff ff7d 	bl	8003544 <std>
 800364a:	68e0      	ldr	r0, [r4, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	2112      	movs	r1, #18
 8003650:	f7ff ff78 	bl	8003544 <std>
 8003654:	2301      	movs	r3, #1
 8003656:	61a3      	str	r3, [r4, #24]
 8003658:	e7d2      	b.n	8003600 <__sinit+0xc>
 800365a:	bf00      	nop
 800365c:	08004624 	.word	0x08004624
 8003660:	0800358d 	.word	0x0800358d

08003664 <__sfp>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	4607      	mov	r7, r0
 8003668:	f7ff ffac 	bl	80035c4 <__sfp_lock_acquire>
 800366c:	4b1e      	ldr	r3, [pc, #120]	; (80036e8 <__sfp+0x84>)
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	69b3      	ldr	r3, [r6, #24]
 8003672:	b913      	cbnz	r3, 800367a <__sfp+0x16>
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff ffbd 	bl	80035f4 <__sinit>
 800367a:	3648      	adds	r6, #72	; 0x48
 800367c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003680:	3b01      	subs	r3, #1
 8003682:	d503      	bpl.n	800368c <__sfp+0x28>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	b30b      	cbz	r3, 80036cc <__sfp+0x68>
 8003688:	6836      	ldr	r6, [r6, #0]
 800368a:	e7f7      	b.n	800367c <__sfp+0x18>
 800368c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003690:	b9d5      	cbnz	r5, 80036c8 <__sfp+0x64>
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <__sfp+0x88>)
 8003694:	60e3      	str	r3, [r4, #12]
 8003696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800369a:	6665      	str	r5, [r4, #100]	; 0x64
 800369c:	f000 f847 	bl	800372e <__retarget_lock_init_recursive>
 80036a0:	f7ff ff96 	bl	80035d0 <__sfp_lock_release>
 80036a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80036a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80036ac:	6025      	str	r5, [r4, #0]
 80036ae:	61a5      	str	r5, [r4, #24]
 80036b0:	2208      	movs	r2, #8
 80036b2:	4629      	mov	r1, r5
 80036b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036b8:	f7ff f938 	bl	800292c <memset>
 80036bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036c4:	4620      	mov	r0, r4
 80036c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036c8:	3468      	adds	r4, #104	; 0x68
 80036ca:	e7d9      	b.n	8003680 <__sfp+0x1c>
 80036cc:	2104      	movs	r1, #4
 80036ce:	4638      	mov	r0, r7
 80036d0:	f7ff ff62 	bl	8003598 <__sfmoreglue>
 80036d4:	4604      	mov	r4, r0
 80036d6:	6030      	str	r0, [r6, #0]
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1d5      	bne.n	8003688 <__sfp+0x24>
 80036dc:	f7ff ff78 	bl	80035d0 <__sfp_lock_release>
 80036e0:	230c      	movs	r3, #12
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	e7ee      	b.n	80036c4 <__sfp+0x60>
 80036e6:	bf00      	nop
 80036e8:	08004624 	.word	0x08004624
 80036ec:	ffff0001 	.word	0xffff0001

080036f0 <_fwalk_reent>:
 80036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f4:	4606      	mov	r6, r0
 80036f6:	4688      	mov	r8, r1
 80036f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036fc:	2700      	movs	r7, #0
 80036fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003702:	f1b9 0901 	subs.w	r9, r9, #1
 8003706:	d505      	bpl.n	8003714 <_fwalk_reent+0x24>
 8003708:	6824      	ldr	r4, [r4, #0]
 800370a:	2c00      	cmp	r4, #0
 800370c:	d1f7      	bne.n	80036fe <_fwalk_reent+0xe>
 800370e:	4638      	mov	r0, r7
 8003710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003714:	89ab      	ldrh	r3, [r5, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d907      	bls.n	800372a <_fwalk_reent+0x3a>
 800371a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800371e:	3301      	adds	r3, #1
 8003720:	d003      	beq.n	800372a <_fwalk_reent+0x3a>
 8003722:	4629      	mov	r1, r5
 8003724:	4630      	mov	r0, r6
 8003726:	47c0      	blx	r8
 8003728:	4307      	orrs	r7, r0
 800372a:	3568      	adds	r5, #104	; 0x68
 800372c:	e7e9      	b.n	8003702 <_fwalk_reent+0x12>

0800372e <__retarget_lock_init_recursive>:
 800372e:	4770      	bx	lr

08003730 <__retarget_lock_acquire_recursive>:
 8003730:	4770      	bx	lr

08003732 <__retarget_lock_release_recursive>:
 8003732:	4770      	bx	lr

08003734 <__swhatbuf_r>:
 8003734:	b570      	push	{r4, r5, r6, lr}
 8003736:	460e      	mov	r6, r1
 8003738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800373c:	2900      	cmp	r1, #0
 800373e:	b096      	sub	sp, #88	; 0x58
 8003740:	4614      	mov	r4, r2
 8003742:	461d      	mov	r5, r3
 8003744:	da08      	bge.n	8003758 <__swhatbuf_r+0x24>
 8003746:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	061a      	lsls	r2, r3, #24
 8003750:	d410      	bmi.n	8003774 <__swhatbuf_r+0x40>
 8003752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003756:	e00e      	b.n	8003776 <__swhatbuf_r+0x42>
 8003758:	466a      	mov	r2, sp
 800375a:	f000 f907 	bl	800396c <_fstat_r>
 800375e:	2800      	cmp	r0, #0
 8003760:	dbf1      	blt.n	8003746 <__swhatbuf_r+0x12>
 8003762:	9a01      	ldr	r2, [sp, #4]
 8003764:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003768:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800376c:	425a      	negs	r2, r3
 800376e:	415a      	adcs	r2, r3
 8003770:	602a      	str	r2, [r5, #0]
 8003772:	e7ee      	b.n	8003752 <__swhatbuf_r+0x1e>
 8003774:	2340      	movs	r3, #64	; 0x40
 8003776:	2000      	movs	r0, #0
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	b016      	add	sp, #88	; 0x58
 800377c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003780 <__smakebuf_r>:
 8003780:	898b      	ldrh	r3, [r1, #12]
 8003782:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003784:	079d      	lsls	r5, r3, #30
 8003786:	4606      	mov	r6, r0
 8003788:	460c      	mov	r4, r1
 800378a:	d507      	bpl.n	800379c <__smakebuf_r+0x1c>
 800378c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	6123      	str	r3, [r4, #16]
 8003794:	2301      	movs	r3, #1
 8003796:	6163      	str	r3, [r4, #20]
 8003798:	b002      	add	sp, #8
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	ab01      	add	r3, sp, #4
 800379e:	466a      	mov	r2, sp
 80037a0:	f7ff ffc8 	bl	8003734 <__swhatbuf_r>
 80037a4:	9900      	ldr	r1, [sp, #0]
 80037a6:	4605      	mov	r5, r0
 80037a8:	4630      	mov	r0, r6
 80037aa:	f7ff f9d5 	bl	8002b58 <_malloc_r>
 80037ae:	b948      	cbnz	r0, 80037c4 <__smakebuf_r+0x44>
 80037b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b4:	059a      	lsls	r2, r3, #22
 80037b6:	d4ef      	bmi.n	8003798 <__smakebuf_r+0x18>
 80037b8:	f023 0303 	bic.w	r3, r3, #3
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	81a3      	strh	r3, [r4, #12]
 80037c2:	e7e3      	b.n	800378c <__smakebuf_r+0xc>
 80037c4:	4b0d      	ldr	r3, [pc, #52]	; (80037fc <__smakebuf_r+0x7c>)
 80037c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	6020      	str	r0, [r4, #0]
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	81a3      	strh	r3, [r4, #12]
 80037d2:	9b00      	ldr	r3, [sp, #0]
 80037d4:	6163      	str	r3, [r4, #20]
 80037d6:	9b01      	ldr	r3, [sp, #4]
 80037d8:	6120      	str	r0, [r4, #16]
 80037da:	b15b      	cbz	r3, 80037f4 <__smakebuf_r+0x74>
 80037dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 f8d5 	bl	8003990 <_isatty_r>
 80037e6:	b128      	cbz	r0, 80037f4 <__smakebuf_r+0x74>
 80037e8:	89a3      	ldrh	r3, [r4, #12]
 80037ea:	f023 0303 	bic.w	r3, r3, #3
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	81a3      	strh	r3, [r4, #12]
 80037f4:	89a0      	ldrh	r0, [r4, #12]
 80037f6:	4305      	orrs	r5, r0
 80037f8:	81a5      	strh	r5, [r4, #12]
 80037fa:	e7cd      	b.n	8003798 <__smakebuf_r+0x18>
 80037fc:	0800358d 	.word	0x0800358d

08003800 <__malloc_lock>:
 8003800:	4801      	ldr	r0, [pc, #4]	; (8003808 <__malloc_lock+0x8>)
 8003802:	f7ff bf95 	b.w	8003730 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	20000134 	.word	0x20000134

0800380c <__malloc_unlock>:
 800380c:	4801      	ldr	r0, [pc, #4]	; (8003814 <__malloc_unlock+0x8>)
 800380e:	f7ff bf90 	b.w	8003732 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	20000134 	.word	0x20000134

08003818 <_raise_r>:
 8003818:	291f      	cmp	r1, #31
 800381a:	b538      	push	{r3, r4, r5, lr}
 800381c:	4604      	mov	r4, r0
 800381e:	460d      	mov	r5, r1
 8003820:	d904      	bls.n	800382c <_raise_r+0x14>
 8003822:	2316      	movs	r3, #22
 8003824:	6003      	str	r3, [r0, #0]
 8003826:	f04f 30ff 	mov.w	r0, #4294967295
 800382a:	bd38      	pop	{r3, r4, r5, pc}
 800382c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800382e:	b112      	cbz	r2, 8003836 <_raise_r+0x1e>
 8003830:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003834:	b94b      	cbnz	r3, 800384a <_raise_r+0x32>
 8003836:	4620      	mov	r0, r4
 8003838:	f000 f830 	bl	800389c <_getpid_r>
 800383c:	462a      	mov	r2, r5
 800383e:	4601      	mov	r1, r0
 8003840:	4620      	mov	r0, r4
 8003842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003846:	f000 b817 	b.w	8003878 <_kill_r>
 800384a:	2b01      	cmp	r3, #1
 800384c:	d00a      	beq.n	8003864 <_raise_r+0x4c>
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	d103      	bne.n	800385a <_raise_r+0x42>
 8003852:	2316      	movs	r3, #22
 8003854:	6003      	str	r3, [r0, #0]
 8003856:	2001      	movs	r0, #1
 8003858:	e7e7      	b.n	800382a <_raise_r+0x12>
 800385a:	2400      	movs	r4, #0
 800385c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003860:	4628      	mov	r0, r5
 8003862:	4798      	blx	r3
 8003864:	2000      	movs	r0, #0
 8003866:	e7e0      	b.n	800382a <_raise_r+0x12>

08003868 <raise>:
 8003868:	4b02      	ldr	r3, [pc, #8]	; (8003874 <raise+0xc>)
 800386a:	4601      	mov	r1, r0
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	f7ff bfd3 	b.w	8003818 <_raise_r>
 8003872:	bf00      	nop
 8003874:	20000008 	.word	0x20000008

08003878 <_kill_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4d07      	ldr	r5, [pc, #28]	; (8003898 <_kill_r+0x20>)
 800387c:	2300      	movs	r3, #0
 800387e:	4604      	mov	r4, r0
 8003880:	4608      	mov	r0, r1
 8003882:	4611      	mov	r1, r2
 8003884:	602b      	str	r3, [r5, #0]
 8003886:	f7fe ff44 	bl	8002712 <_kill>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	d102      	bne.n	8003894 <_kill_r+0x1c>
 800388e:	682b      	ldr	r3, [r5, #0]
 8003890:	b103      	cbz	r3, 8003894 <_kill_r+0x1c>
 8003892:	6023      	str	r3, [r4, #0]
 8003894:	bd38      	pop	{r3, r4, r5, pc}
 8003896:	bf00      	nop
 8003898:	20000138 	.word	0x20000138

0800389c <_getpid_r>:
 800389c:	f7fe bf32 	b.w	8002704 <_getpid>

080038a0 <__sread>:
 80038a0:	b510      	push	{r4, lr}
 80038a2:	460c      	mov	r4, r1
 80038a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a8:	f000 f894 	bl	80039d4 <_read_r>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	bfab      	itete	ge
 80038b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038b2:	89a3      	ldrhlt	r3, [r4, #12]
 80038b4:	181b      	addge	r3, r3, r0
 80038b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038ba:	bfac      	ite	ge
 80038bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80038be:	81a3      	strhlt	r3, [r4, #12]
 80038c0:	bd10      	pop	{r4, pc}

080038c2 <__swrite>:
 80038c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c6:	461f      	mov	r7, r3
 80038c8:	898b      	ldrh	r3, [r1, #12]
 80038ca:	05db      	lsls	r3, r3, #23
 80038cc:	4605      	mov	r5, r0
 80038ce:	460c      	mov	r4, r1
 80038d0:	4616      	mov	r6, r2
 80038d2:	d505      	bpl.n	80038e0 <__swrite+0x1e>
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	2302      	movs	r3, #2
 80038da:	2200      	movs	r2, #0
 80038dc:	f000 f868 	bl	80039b0 <_lseek_r>
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	4632      	mov	r2, r6
 80038ee:	463b      	mov	r3, r7
 80038f0:	4628      	mov	r0, r5
 80038f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f6:	f000 b817 	b.w	8003928 <_write_r>

080038fa <__sseek>:
 80038fa:	b510      	push	{r4, lr}
 80038fc:	460c      	mov	r4, r1
 80038fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003902:	f000 f855 	bl	80039b0 <_lseek_r>
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	89a3      	ldrh	r3, [r4, #12]
 800390a:	bf15      	itete	ne
 800390c:	6560      	strne	r0, [r4, #84]	; 0x54
 800390e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003916:	81a3      	strheq	r3, [r4, #12]
 8003918:	bf18      	it	ne
 800391a:	81a3      	strhne	r3, [r4, #12]
 800391c:	bd10      	pop	{r4, pc}

0800391e <__sclose>:
 800391e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003922:	f000 b813 	b.w	800394c <_close_r>
	...

08003928 <_write_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d07      	ldr	r5, [pc, #28]	; (8003948 <_write_r+0x20>)
 800392c:	4604      	mov	r4, r0
 800392e:	4608      	mov	r0, r1
 8003930:	4611      	mov	r1, r2
 8003932:	2200      	movs	r2, #0
 8003934:	602a      	str	r2, [r5, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f7fe ff22 	bl	8002780 <_write>
 800393c:	1c43      	adds	r3, r0, #1
 800393e:	d102      	bne.n	8003946 <_write_r+0x1e>
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	b103      	cbz	r3, 8003946 <_write_r+0x1e>
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	20000138 	.word	0x20000138

0800394c <_close_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4d06      	ldr	r5, [pc, #24]	; (8003968 <_close_r+0x1c>)
 8003950:	2300      	movs	r3, #0
 8003952:	4604      	mov	r4, r0
 8003954:	4608      	mov	r0, r1
 8003956:	602b      	str	r3, [r5, #0]
 8003958:	f7fe ff2e 	bl	80027b8 <_close>
 800395c:	1c43      	adds	r3, r0, #1
 800395e:	d102      	bne.n	8003966 <_close_r+0x1a>
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	b103      	cbz	r3, 8003966 <_close_r+0x1a>
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	bd38      	pop	{r3, r4, r5, pc}
 8003968:	20000138 	.word	0x20000138

0800396c <_fstat_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	4d07      	ldr	r5, [pc, #28]	; (800398c <_fstat_r+0x20>)
 8003970:	2300      	movs	r3, #0
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	602b      	str	r3, [r5, #0]
 800397a:	f7fe ff28 	bl	80027ce <_fstat>
 800397e:	1c43      	adds	r3, r0, #1
 8003980:	d102      	bne.n	8003988 <_fstat_r+0x1c>
 8003982:	682b      	ldr	r3, [r5, #0]
 8003984:	b103      	cbz	r3, 8003988 <_fstat_r+0x1c>
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	bd38      	pop	{r3, r4, r5, pc}
 800398a:	bf00      	nop
 800398c:	20000138 	.word	0x20000138

08003990 <_isatty_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	4d06      	ldr	r5, [pc, #24]	; (80039ac <_isatty_r+0x1c>)
 8003994:	2300      	movs	r3, #0
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fe ff26 	bl	80027ec <_isatty>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_isatty_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_isatty_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	20000138 	.word	0x20000138

080039b0 <_lseek_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4d07      	ldr	r5, [pc, #28]	; (80039d0 <_lseek_r+0x20>)
 80039b4:	4604      	mov	r4, r0
 80039b6:	4608      	mov	r0, r1
 80039b8:	4611      	mov	r1, r2
 80039ba:	2200      	movs	r2, #0
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fe ff1e 	bl	8002800 <_lseek>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_lseek_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_lseek_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	20000138 	.word	0x20000138

080039d4 <_read_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4d07      	ldr	r5, [pc, #28]	; (80039f4 <_read_r+0x20>)
 80039d8:	4604      	mov	r4, r0
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fe feaf 	bl	8002746 <_read>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_read_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_read_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	20000138 	.word	0x20000138

080039f8 <cosf>:
 80039f8:	b507      	push	{r0, r1, r2, lr}
 80039fa:	4a1a      	ldr	r2, [pc, #104]	; (8003a64 <cosf+0x6c>)
 80039fc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003a00:	4293      	cmp	r3, r2
 8003a02:	4601      	mov	r1, r0
 8003a04:	dc05      	bgt.n	8003a12 <cosf+0x1a>
 8003a06:	2100      	movs	r1, #0
 8003a08:	b003      	add	sp, #12
 8003a0a:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a0e:	f000 b9c3 	b.w	8003d98 <__kernel_cosf>
 8003a12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003a16:	db04      	blt.n	8003a22 <cosf+0x2a>
 8003a18:	f7fc ff6c 	bl	80008f4 <__aeabi_fsub>
 8003a1c:	b003      	add	sp, #12
 8003a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a22:	4669      	mov	r1, sp
 8003a24:	f000 f85a 	bl	8003adc <__ieee754_rem_pio2f>
 8003a28:	f000 0203 	and.w	r2, r0, #3
 8003a2c:	2a01      	cmp	r2, #1
 8003a2e:	d007      	beq.n	8003a40 <cosf+0x48>
 8003a30:	2a02      	cmp	r2, #2
 8003a32:	d00c      	beq.n	8003a4e <cosf+0x56>
 8003a34:	b982      	cbnz	r2, 8003a58 <cosf+0x60>
 8003a36:	9901      	ldr	r1, [sp, #4]
 8003a38:	9800      	ldr	r0, [sp, #0]
 8003a3a:	f000 f9ad 	bl	8003d98 <__kernel_cosf>
 8003a3e:	e7ed      	b.n	8003a1c <cosf+0x24>
 8003a40:	9901      	ldr	r1, [sp, #4]
 8003a42:	9800      	ldr	r0, [sp, #0]
 8003a44:	f000 fcda 	bl	80043fc <__kernel_sinf>
 8003a48:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003a4c:	e7e6      	b.n	8003a1c <cosf+0x24>
 8003a4e:	9901      	ldr	r1, [sp, #4]
 8003a50:	9800      	ldr	r0, [sp, #0]
 8003a52:	f000 f9a1 	bl	8003d98 <__kernel_cosf>
 8003a56:	e7f7      	b.n	8003a48 <cosf+0x50>
 8003a58:	9901      	ldr	r1, [sp, #4]
 8003a5a:	9800      	ldr	r0, [sp, #0]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f000 fccd 	bl	80043fc <__kernel_sinf>
 8003a62:	e7db      	b.n	8003a1c <cosf+0x24>
 8003a64:	3f490fd8 	.word	0x3f490fd8

08003a68 <sinf>:
 8003a68:	b507      	push	{r0, r1, r2, lr}
 8003a6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ad8 <sinf+0x70>)
 8003a6c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003a70:	4293      	cmp	r3, r2
 8003a72:	4601      	mov	r1, r0
 8003a74:	dc06      	bgt.n	8003a84 <sinf+0x1c>
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	b003      	add	sp, #12
 8003a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a80:	f000 bcbc 	b.w	80043fc <__kernel_sinf>
 8003a84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003a88:	db04      	blt.n	8003a94 <sinf+0x2c>
 8003a8a:	f7fc ff33 	bl	80008f4 <__aeabi_fsub>
 8003a8e:	b003      	add	sp, #12
 8003a90:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a94:	4669      	mov	r1, sp
 8003a96:	f000 f821 	bl	8003adc <__ieee754_rem_pio2f>
 8003a9a:	f000 0003 	and.w	r0, r0, #3
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d008      	beq.n	8003ab4 <sinf+0x4c>
 8003aa2:	2802      	cmp	r0, #2
 8003aa4:	d00b      	beq.n	8003abe <sinf+0x56>
 8003aa6:	b990      	cbnz	r0, 8003ace <sinf+0x66>
 8003aa8:	9901      	ldr	r1, [sp, #4]
 8003aaa:	9800      	ldr	r0, [sp, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f000 fca5 	bl	80043fc <__kernel_sinf>
 8003ab2:	e7ec      	b.n	8003a8e <sinf+0x26>
 8003ab4:	9901      	ldr	r1, [sp, #4]
 8003ab6:	9800      	ldr	r0, [sp, #0]
 8003ab8:	f000 f96e 	bl	8003d98 <__kernel_cosf>
 8003abc:	e7e7      	b.n	8003a8e <sinf+0x26>
 8003abe:	9901      	ldr	r1, [sp, #4]
 8003ac0:	9800      	ldr	r0, [sp, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f000 fc9a 	bl	80043fc <__kernel_sinf>
 8003ac8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003acc:	e7df      	b.n	8003a8e <sinf+0x26>
 8003ace:	9901      	ldr	r1, [sp, #4]
 8003ad0:	9800      	ldr	r0, [sp, #0]
 8003ad2:	f000 f961 	bl	8003d98 <__kernel_cosf>
 8003ad6:	e7f7      	b.n	8003ac8 <sinf+0x60>
 8003ad8:	3f490fd8 	.word	0x3f490fd8

08003adc <__ieee754_rem_pio2f>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	4aa0      	ldr	r2, [pc, #640]	; (8003d64 <__ieee754_rem_pio2f+0x288>)
 8003ae2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8003ae6:	4296      	cmp	r6, r2
 8003ae8:	b087      	sub	sp, #28
 8003aea:	460c      	mov	r4, r1
 8003aec:	4682      	mov	sl, r0
 8003aee:	dc04      	bgt.n	8003afa <__ieee754_rem_pio2f+0x1e>
 8003af0:	2300      	movs	r3, #0
 8003af2:	6008      	str	r0, [r1, #0]
 8003af4:	604b      	str	r3, [r1, #4]
 8003af6:	2500      	movs	r5, #0
 8003af8:	e01a      	b.n	8003b30 <__ieee754_rem_pio2f+0x54>
 8003afa:	4a9b      	ldr	r2, [pc, #620]	; (8003d68 <__ieee754_rem_pio2f+0x28c>)
 8003afc:	4296      	cmp	r6, r2
 8003afe:	dc4b      	bgt.n	8003b98 <__ieee754_rem_pio2f+0xbc>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	499a      	ldr	r1, [pc, #616]	; (8003d6c <__ieee754_rem_pio2f+0x290>)
 8003b04:	4f9a      	ldr	r7, [pc, #616]	; (8003d70 <__ieee754_rem_pio2f+0x294>)
 8003b06:	f026 060f 	bic.w	r6, r6, #15
 8003b0a:	dd23      	ble.n	8003b54 <__ieee754_rem_pio2f+0x78>
 8003b0c:	f7fc fef2 	bl	80008f4 <__aeabi_fsub>
 8003b10:	42be      	cmp	r6, r7
 8003b12:	4605      	mov	r5, r0
 8003b14:	d010      	beq.n	8003b38 <__ieee754_rem_pio2f+0x5c>
 8003b16:	4997      	ldr	r1, [pc, #604]	; (8003d74 <__ieee754_rem_pio2f+0x298>)
 8003b18:	f7fc feec 	bl	80008f4 <__aeabi_fsub>
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	6020      	str	r0, [r4, #0]
 8003b20:	4628      	mov	r0, r5
 8003b22:	f7fc fee7 	bl	80008f4 <__aeabi_fsub>
 8003b26:	4993      	ldr	r1, [pc, #588]	; (8003d74 <__ieee754_rem_pio2f+0x298>)
 8003b28:	f7fc fee4 	bl	80008f4 <__aeabi_fsub>
 8003b2c:	2501      	movs	r5, #1
 8003b2e:	6060      	str	r0, [r4, #4]
 8003b30:	4628      	mov	r0, r5
 8003b32:	b007      	add	sp, #28
 8003b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b38:	498f      	ldr	r1, [pc, #572]	; (8003d78 <__ieee754_rem_pio2f+0x29c>)
 8003b3a:	f7fc fedb 	bl	80008f4 <__aeabi_fsub>
 8003b3e:	498f      	ldr	r1, [pc, #572]	; (8003d7c <__ieee754_rem_pio2f+0x2a0>)
 8003b40:	4605      	mov	r5, r0
 8003b42:	f7fc fed7 	bl	80008f4 <__aeabi_fsub>
 8003b46:	4601      	mov	r1, r0
 8003b48:	6020      	str	r0, [r4, #0]
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f7fc fed2 	bl	80008f4 <__aeabi_fsub>
 8003b50:	498a      	ldr	r1, [pc, #552]	; (8003d7c <__ieee754_rem_pio2f+0x2a0>)
 8003b52:	e7e9      	b.n	8003b28 <__ieee754_rem_pio2f+0x4c>
 8003b54:	f7fc fed0 	bl	80008f8 <__addsf3>
 8003b58:	42be      	cmp	r6, r7
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	d00e      	beq.n	8003b7c <__ieee754_rem_pio2f+0xa0>
 8003b5e:	4985      	ldr	r1, [pc, #532]	; (8003d74 <__ieee754_rem_pio2f+0x298>)
 8003b60:	f7fc feca 	bl	80008f8 <__addsf3>
 8003b64:	4601      	mov	r1, r0
 8003b66:	6020      	str	r0, [r4, #0]
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7fc fec3 	bl	80008f4 <__aeabi_fsub>
 8003b6e:	4981      	ldr	r1, [pc, #516]	; (8003d74 <__ieee754_rem_pio2f+0x298>)
 8003b70:	f7fc fec2 	bl	80008f8 <__addsf3>
 8003b74:	f04f 35ff 	mov.w	r5, #4294967295
 8003b78:	6060      	str	r0, [r4, #4]
 8003b7a:	e7d9      	b.n	8003b30 <__ieee754_rem_pio2f+0x54>
 8003b7c:	497e      	ldr	r1, [pc, #504]	; (8003d78 <__ieee754_rem_pio2f+0x29c>)
 8003b7e:	f7fc febb 	bl	80008f8 <__addsf3>
 8003b82:	497e      	ldr	r1, [pc, #504]	; (8003d7c <__ieee754_rem_pio2f+0x2a0>)
 8003b84:	4605      	mov	r5, r0
 8003b86:	f7fc feb7 	bl	80008f8 <__addsf3>
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	6020      	str	r0, [r4, #0]
 8003b8e:	4628      	mov	r0, r5
 8003b90:	f7fc feb0 	bl	80008f4 <__aeabi_fsub>
 8003b94:	4979      	ldr	r1, [pc, #484]	; (8003d7c <__ieee754_rem_pio2f+0x2a0>)
 8003b96:	e7eb      	b.n	8003b70 <__ieee754_rem_pio2f+0x94>
 8003b98:	4a79      	ldr	r2, [pc, #484]	; (8003d80 <__ieee754_rem_pio2f+0x2a4>)
 8003b9a:	4296      	cmp	r6, r2
 8003b9c:	f300 8091 	bgt.w	8003cc2 <__ieee754_rem_pio2f+0x1e6>
 8003ba0:	f000 fca2 	bl	80044e8 <fabsf>
 8003ba4:	4977      	ldr	r1, [pc, #476]	; (8003d84 <__ieee754_rem_pio2f+0x2a8>)
 8003ba6:	4607      	mov	r7, r0
 8003ba8:	f7fc ffae 	bl	8000b08 <__aeabi_fmul>
 8003bac:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003bb0:	f7fc fea2 	bl	80008f8 <__addsf3>
 8003bb4:	f7fd f96e 	bl	8000e94 <__aeabi_f2iz>
 8003bb8:	4605      	mov	r5, r0
 8003bba:	f7fc ff51 	bl	8000a60 <__aeabi_i2f>
 8003bbe:	496b      	ldr	r1, [pc, #428]	; (8003d6c <__ieee754_rem_pio2f+0x290>)
 8003bc0:	4681      	mov	r9, r0
 8003bc2:	f7fc ffa1 	bl	8000b08 <__aeabi_fmul>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4638      	mov	r0, r7
 8003bca:	f7fc fe93 	bl	80008f4 <__aeabi_fsub>
 8003bce:	4969      	ldr	r1, [pc, #420]	; (8003d74 <__ieee754_rem_pio2f+0x298>)
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	4648      	mov	r0, r9
 8003bd4:	f7fc ff98 	bl	8000b08 <__aeabi_fmul>
 8003bd8:	2d1f      	cmp	r5, #31
 8003bda:	4607      	mov	r7, r0
 8003bdc:	dc0c      	bgt.n	8003bf8 <__ieee754_rem_pio2f+0x11c>
 8003bde:	4a6a      	ldr	r2, [pc, #424]	; (8003d88 <__ieee754_rem_pio2f+0x2ac>)
 8003be0:	1e69      	subs	r1, r5, #1
 8003be2:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8003be6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <__ieee754_rem_pio2f+0x11c>
 8003bee:	4639      	mov	r1, r7
 8003bf0:	4640      	mov	r0, r8
 8003bf2:	f7fc fe7f 	bl	80008f4 <__aeabi_fsub>
 8003bf6:	e00b      	b.n	8003c10 <__ieee754_rem_pio2f+0x134>
 8003bf8:	4639      	mov	r1, r7
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	f7fc fe7a 	bl	80008f4 <__aeabi_fsub>
 8003c00:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003c04:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8003c08:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8003c0c:	2e08      	cmp	r6, #8
 8003c0e:	dc01      	bgt.n	8003c14 <__ieee754_rem_pio2f+0x138>
 8003c10:	6020      	str	r0, [r4, #0]
 8003c12:	e026      	b.n	8003c62 <__ieee754_rem_pio2f+0x186>
 8003c14:	4958      	ldr	r1, [pc, #352]	; (8003d78 <__ieee754_rem_pio2f+0x29c>)
 8003c16:	4648      	mov	r0, r9
 8003c18:	f7fc ff76 	bl	8000b08 <__aeabi_fmul>
 8003c1c:	4607      	mov	r7, r0
 8003c1e:	4601      	mov	r1, r0
 8003c20:	4640      	mov	r0, r8
 8003c22:	f7fc fe67 	bl	80008f4 <__aeabi_fsub>
 8003c26:	4601      	mov	r1, r0
 8003c28:	4606      	mov	r6, r0
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7fc fe62 	bl	80008f4 <__aeabi_fsub>
 8003c30:	4639      	mov	r1, r7
 8003c32:	f7fc fe5f 	bl	80008f4 <__aeabi_fsub>
 8003c36:	4951      	ldr	r1, [pc, #324]	; (8003d7c <__ieee754_rem_pio2f+0x2a0>)
 8003c38:	4607      	mov	r7, r0
 8003c3a:	4648      	mov	r0, r9
 8003c3c:	f7fc ff64 	bl	8000b08 <__aeabi_fmul>
 8003c40:	4639      	mov	r1, r7
 8003c42:	f7fc fe57 	bl	80008f4 <__aeabi_fsub>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4607      	mov	r7, r0
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7fc fe52 	bl	80008f4 <__aeabi_fsub>
 8003c50:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8003c54:	ebab 0b03 	sub.w	fp, fp, r3
 8003c58:	f1bb 0f19 	cmp.w	fp, #25
 8003c5c:	dc16      	bgt.n	8003c8c <__ieee754_rem_pio2f+0x1b0>
 8003c5e:	6020      	str	r0, [r4, #0]
 8003c60:	46b0      	mov	r8, r6
 8003c62:	6826      	ldr	r6, [r4, #0]
 8003c64:	4640      	mov	r0, r8
 8003c66:	4631      	mov	r1, r6
 8003c68:	f7fc fe44 	bl	80008f4 <__aeabi_fsub>
 8003c6c:	4639      	mov	r1, r7
 8003c6e:	f7fc fe41 	bl	80008f4 <__aeabi_fsub>
 8003c72:	f1ba 0f00 	cmp.w	sl, #0
 8003c76:	6060      	str	r0, [r4, #4]
 8003c78:	f6bf af5a 	bge.w	8003b30 <__ieee754_rem_pio2f+0x54>
 8003c7c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8003c80:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003c84:	6026      	str	r6, [r4, #0]
 8003c86:	6060      	str	r0, [r4, #4]
 8003c88:	426d      	negs	r5, r5
 8003c8a:	e751      	b.n	8003b30 <__ieee754_rem_pio2f+0x54>
 8003c8c:	493f      	ldr	r1, [pc, #252]	; (8003d8c <__ieee754_rem_pio2f+0x2b0>)
 8003c8e:	4648      	mov	r0, r9
 8003c90:	f7fc ff3a 	bl	8000b08 <__aeabi_fmul>
 8003c94:	4607      	mov	r7, r0
 8003c96:	4601      	mov	r1, r0
 8003c98:	4630      	mov	r0, r6
 8003c9a:	f7fc fe2b 	bl	80008f4 <__aeabi_fsub>
 8003c9e:	4601      	mov	r1, r0
 8003ca0:	4680      	mov	r8, r0
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fc fe26 	bl	80008f4 <__aeabi_fsub>
 8003ca8:	4639      	mov	r1, r7
 8003caa:	f7fc fe23 	bl	80008f4 <__aeabi_fsub>
 8003cae:	4938      	ldr	r1, [pc, #224]	; (8003d90 <__ieee754_rem_pio2f+0x2b4>)
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	4648      	mov	r0, r9
 8003cb4:	f7fc ff28 	bl	8000b08 <__aeabi_fmul>
 8003cb8:	4631      	mov	r1, r6
 8003cba:	f7fc fe1b 	bl	80008f4 <__aeabi_fsub>
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	e795      	b.n	8003bee <__ieee754_rem_pio2f+0x112>
 8003cc2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8003cc6:	db05      	blt.n	8003cd4 <__ieee754_rem_pio2f+0x1f8>
 8003cc8:	4601      	mov	r1, r0
 8003cca:	f7fc fe13 	bl	80008f4 <__aeabi_fsub>
 8003cce:	6060      	str	r0, [r4, #4]
 8003cd0:	6020      	str	r0, [r4, #0]
 8003cd2:	e710      	b.n	8003af6 <__ieee754_rem_pio2f+0x1a>
 8003cd4:	15f7      	asrs	r7, r6, #23
 8003cd6:	3f86      	subs	r7, #134	; 0x86
 8003cd8:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f7fd f8d9 	bl	8000e94 <__aeabi_f2iz>
 8003ce2:	f7fc febd 	bl	8000a60 <__aeabi_i2f>
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	9003      	str	r0, [sp, #12]
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7fc fe02 	bl	80008f4 <__aeabi_fsub>
 8003cf0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003cf4:	f7fc ff08 	bl	8000b08 <__aeabi_fmul>
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	f7fd f8cb 	bl	8000e94 <__aeabi_f2iz>
 8003cfe:	f7fc feaf 	bl	8000a60 <__aeabi_i2f>
 8003d02:	4601      	mov	r1, r0
 8003d04:	9004      	str	r0, [sp, #16]
 8003d06:	4605      	mov	r5, r0
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7fc fdf3 	bl	80008f4 <__aeabi_fsub>
 8003d0e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8003d12:	f7fc fef9 	bl	8000b08 <__aeabi_fmul>
 8003d16:	2100      	movs	r1, #0
 8003d18:	9005      	str	r0, [sp, #20]
 8003d1a:	f7fd f889 	bl	8000e30 <__aeabi_fcmpeq>
 8003d1e:	b1f0      	cbz	r0, 8003d5e <__ieee754_rem_pio2f+0x282>
 8003d20:	2100      	movs	r1, #0
 8003d22:	4628      	mov	r0, r5
 8003d24:	f7fd f884 	bl	8000e30 <__aeabi_fcmpeq>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2302      	moveq	r3, #2
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <__ieee754_rem_pio2f+0x2b8>)
 8003d32:	9201      	str	r2, [sp, #4]
 8003d34:	2202      	movs	r2, #2
 8003d36:	9200      	str	r2, [sp, #0]
 8003d38:	4621      	mov	r1, r4
 8003d3a:	463a      	mov	r2, r7
 8003d3c:	a803      	add	r0, sp, #12
 8003d3e:	f000 f8ab 	bl	8003e98 <__kernel_rem_pio2f>
 8003d42:	f1ba 0f00 	cmp.w	sl, #0
 8003d46:	4605      	mov	r5, r0
 8003d48:	f6bf aef2 	bge.w	8003b30 <__ieee754_rem_pio2f+0x54>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d5a:	6063      	str	r3, [r4, #4]
 8003d5c:	e794      	b.n	8003c88 <__ieee754_rem_pio2f+0x1ac>
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e7e6      	b.n	8003d30 <__ieee754_rem_pio2f+0x254>
 8003d62:	bf00      	nop
 8003d64:	3f490fd8 	.word	0x3f490fd8
 8003d68:	4016cbe3 	.word	0x4016cbe3
 8003d6c:	3fc90f80 	.word	0x3fc90f80
 8003d70:	3fc90fd0 	.word	0x3fc90fd0
 8003d74:	37354443 	.word	0x37354443
 8003d78:	37354400 	.word	0x37354400
 8003d7c:	2e85a308 	.word	0x2e85a308
 8003d80:	43490f80 	.word	0x43490f80
 8003d84:	3f22f984 	.word	0x3f22f984
 8003d88:	0800476c 	.word	0x0800476c
 8003d8c:	2e85a300 	.word	0x2e85a300
 8003d90:	248d3132 	.word	0x248d3132
 8003d94:	080047ec 	.word	0x080047ec

08003d98 <__kernel_cosf>:
 8003d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d9c:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8003da0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8003da4:	4606      	mov	r6, r0
 8003da6:	4688      	mov	r8, r1
 8003da8:	da03      	bge.n	8003db2 <__kernel_cosf+0x1a>
 8003daa:	f7fd f873 	bl	8000e94 <__aeabi_f2iz>
 8003dae:	2800      	cmp	r0, #0
 8003db0:	d05c      	beq.n	8003e6c <__kernel_cosf+0xd4>
 8003db2:	4631      	mov	r1, r6
 8003db4:	4630      	mov	r0, r6
 8003db6:	f7fc fea7 	bl	8000b08 <__aeabi_fmul>
 8003dba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003dbe:	4605      	mov	r5, r0
 8003dc0:	f7fc fea2 	bl	8000b08 <__aeabi_fmul>
 8003dc4:	492b      	ldr	r1, [pc, #172]	; (8003e74 <__kernel_cosf+0xdc>)
 8003dc6:	4607      	mov	r7, r0
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f7fc fe9d 	bl	8000b08 <__aeabi_fmul>
 8003dce:	492a      	ldr	r1, [pc, #168]	; (8003e78 <__kernel_cosf+0xe0>)
 8003dd0:	f7fc fd92 	bl	80008f8 <__addsf3>
 8003dd4:	4629      	mov	r1, r5
 8003dd6:	f7fc fe97 	bl	8000b08 <__aeabi_fmul>
 8003dda:	4928      	ldr	r1, [pc, #160]	; (8003e7c <__kernel_cosf+0xe4>)
 8003ddc:	f7fc fd8a 	bl	80008f4 <__aeabi_fsub>
 8003de0:	4629      	mov	r1, r5
 8003de2:	f7fc fe91 	bl	8000b08 <__aeabi_fmul>
 8003de6:	4926      	ldr	r1, [pc, #152]	; (8003e80 <__kernel_cosf+0xe8>)
 8003de8:	f7fc fd86 	bl	80008f8 <__addsf3>
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc fe8b 	bl	8000b08 <__aeabi_fmul>
 8003df2:	4924      	ldr	r1, [pc, #144]	; (8003e84 <__kernel_cosf+0xec>)
 8003df4:	f7fc fd7e 	bl	80008f4 <__aeabi_fsub>
 8003df8:	4629      	mov	r1, r5
 8003dfa:	f7fc fe85 	bl	8000b08 <__aeabi_fmul>
 8003dfe:	4922      	ldr	r1, [pc, #136]	; (8003e88 <__kernel_cosf+0xf0>)
 8003e00:	f7fc fd7a 	bl	80008f8 <__addsf3>
 8003e04:	4629      	mov	r1, r5
 8003e06:	f7fc fe7f 	bl	8000b08 <__aeabi_fmul>
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	f7fc fe7c 	bl	8000b08 <__aeabi_fmul>
 8003e10:	4641      	mov	r1, r8
 8003e12:	4605      	mov	r5, r0
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7fc fe77 	bl	8000b08 <__aeabi_fmul>
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f7fc fd69 	bl	80008f4 <__aeabi_fsub>
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <__kernel_cosf+0xf4>)
 8003e24:	429c      	cmp	r4, r3
 8003e26:	4605      	mov	r5, r0
 8003e28:	dc0a      	bgt.n	8003e40 <__kernel_cosf+0xa8>
 8003e2a:	4601      	mov	r1, r0
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f7fc fd61 	bl	80008f4 <__aeabi_fsub>
 8003e32:	4601      	mov	r1, r0
 8003e34:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e38:	f7fc fd5c 	bl	80008f4 <__aeabi_fsub>
 8003e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e40:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <__kernel_cosf+0xf8>)
 8003e42:	429c      	cmp	r4, r3
 8003e44:	bfcc      	ite	gt
 8003e46:	4c13      	ldrgt	r4, [pc, #76]	; (8003e94 <__kernel_cosf+0xfc>)
 8003e48:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e52:	f7fc fd4f 	bl	80008f4 <__aeabi_fsub>
 8003e56:	4621      	mov	r1, r4
 8003e58:	4606      	mov	r6, r0
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f7fc fd4a 	bl	80008f4 <__aeabi_fsub>
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7fc fd47 	bl	80008f4 <__aeabi_fsub>
 8003e66:	4601      	mov	r1, r0
 8003e68:	4630      	mov	r0, r6
 8003e6a:	e7e5      	b.n	8003e38 <__kernel_cosf+0xa0>
 8003e6c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003e70:	e7e4      	b.n	8003e3c <__kernel_cosf+0xa4>
 8003e72:	bf00      	nop
 8003e74:	ad47d74e 	.word	0xad47d74e
 8003e78:	310f74f6 	.word	0x310f74f6
 8003e7c:	3493f27c 	.word	0x3493f27c
 8003e80:	37d00d01 	.word	0x37d00d01
 8003e84:	3ab60b61 	.word	0x3ab60b61
 8003e88:	3d2aaaab 	.word	0x3d2aaaab
 8003e8c:	3e999999 	.word	0x3e999999
 8003e90:	3f480000 	.word	0x3f480000
 8003e94:	3e900000 	.word	0x3e900000

08003e98 <__kernel_rem_pio2f>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	b0db      	sub	sp, #364	; 0x16c
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8003ea4:	4bb2      	ldr	r3, [pc, #712]	; (8004170 <__kernel_rem_pio2f+0x2d8>)
 8003ea6:	9005      	str	r0, [sp, #20]
 8003ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	9100      	str	r1, [sp, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	9b02      	ldr	r3, [sp, #8]
 8003eb8:	1d1a      	adds	r2, r3, #4
 8003eba:	f2c0 809b 	blt.w	8003ff4 <__kernel_rem_pio2f+0x15c>
 8003ebe:	1edc      	subs	r4, r3, #3
 8003ec0:	bf48      	it	mi
 8003ec2:	1d1c      	addmi	r4, r3, #4
 8003ec4:	10e4      	asrs	r4, r4, #3
 8003ec6:	1c67      	adds	r7, r4, #1
 8003ec8:	00fb      	lsls	r3, r7, #3
 8003eca:	9306      	str	r3, [sp, #24]
 8003ecc:	9b02      	ldr	r3, [sp, #8]
 8003ece:	9a03      	ldr	r2, [sp, #12]
 8003ed0:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8003ed4:	9b01      	ldr	r3, [sp, #4]
 8003ed6:	eb03 0902 	add.w	r9, r3, r2
 8003eda:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003edc:	eba4 0802 	sub.w	r8, r4, r2
 8003ee0:	ae1e      	add	r6, sp, #120	; 0x78
 8003ee2:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	f04f 0b00 	mov.w	fp, #0
 8003eec:	454d      	cmp	r5, r9
 8003eee:	f340 8083 	ble.w	8003ff8 <__kernel_rem_pio2f+0x160>
 8003ef2:	9a04      	ldr	r2, [sp, #16]
 8003ef4:	ab1e      	add	r3, sp, #120	; 0x78
 8003ef6:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8003efa:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8003efe:	f04f 0900 	mov.w	r9, #0
 8003f02:	2300      	movs	r3, #0
 8003f04:	9a01      	ldr	r2, [sp, #4]
 8003f06:	4591      	cmp	r9, r2
 8003f08:	f340 809e 	ble.w	8004048 <__kernel_rem_pio2f+0x1b0>
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	aa0a      	add	r2, sp, #40	; 0x28
 8003f10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003f14:	9308      	str	r3, [sp, #32]
 8003f16:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8003f18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003f1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003f20:	9307      	str	r3, [sp, #28]
 8003f22:	ab5a      	add	r3, sp, #360	; 0x168
 8003f24:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8003f28:	ac0a      	add	r4, sp, #40	; 0x28
 8003f2a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8003f2e:	4626      	mov	r6, r4
 8003f30:	46c3      	mov	fp, r8
 8003f32:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8003f36:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8003f3a:	f1bb 0f00 	cmp.w	fp, #0
 8003f3e:	f300 8088 	bgt.w	8004052 <__kernel_rem_pio2f+0x1ba>
 8003f42:	4639      	mov	r1, r7
 8003f44:	4628      	mov	r0, r5
 8003f46:	f000 fb15 	bl	8004574 <scalbnf>
 8003f4a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8003f4e:	4605      	mov	r5, r0
 8003f50:	f7fc fdda 	bl	8000b08 <__aeabi_fmul>
 8003f54:	f000 facc 	bl	80044f0 <floorf>
 8003f58:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8003f5c:	f7fc fdd4 	bl	8000b08 <__aeabi_fmul>
 8003f60:	4601      	mov	r1, r0
 8003f62:	4628      	mov	r0, r5
 8003f64:	f7fc fcc6 	bl	80008f4 <__aeabi_fsub>
 8003f68:	4605      	mov	r5, r0
 8003f6a:	f7fc ff93 	bl	8000e94 <__aeabi_f2iz>
 8003f6e:	4606      	mov	r6, r0
 8003f70:	f7fc fd76 	bl	8000a60 <__aeabi_i2f>
 8003f74:	4601      	mov	r1, r0
 8003f76:	4628      	mov	r0, r5
 8003f78:	f7fc fcbc 	bl	80008f4 <__aeabi_fsub>
 8003f7c:	2f00      	cmp	r7, #0
 8003f7e:	4681      	mov	r9, r0
 8003f80:	f340 8086 	ble.w	8004090 <__kernel_rem_pio2f+0x1f8>
 8003f84:	f108 32ff 	add.w	r2, r8, #4294967295
 8003f88:	ab0a      	add	r3, sp, #40	; 0x28
 8003f8a:	f1c7 0108 	rsb	r1, r7, #8
 8003f8e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8003f92:	fa45 f301 	asr.w	r3, r5, r1
 8003f96:	441e      	add	r6, r3
 8003f98:	408b      	lsls	r3, r1
 8003f9a:	1aed      	subs	r5, r5, r3
 8003f9c:	ab0a      	add	r3, sp, #40	; 0x28
 8003f9e:	f1c7 0007 	rsb	r0, r7, #7
 8003fa2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003fa6:	4105      	asrs	r5, r0
 8003fa8:	2d00      	cmp	r5, #0
 8003faa:	dd7f      	ble.n	80040ac <__kernel_rem_pio2f+0x214>
 8003fac:	2200      	movs	r2, #0
 8003fae:	3601      	adds	r6, #1
 8003fb0:	4692      	mov	sl, r2
 8003fb2:	4590      	cmp	r8, r2
 8003fb4:	f300 80b0 	bgt.w	8004118 <__kernel_rem_pio2f+0x280>
 8003fb8:	2f00      	cmp	r7, #0
 8003fba:	dd05      	ble.n	8003fc8 <__kernel_rem_pio2f+0x130>
 8003fbc:	2f01      	cmp	r7, #1
 8003fbe:	f000 80bd 	beq.w	800413c <__kernel_rem_pio2f+0x2a4>
 8003fc2:	2f02      	cmp	r7, #2
 8003fc4:	f000 80c5 	beq.w	8004152 <__kernel_rem_pio2f+0x2ba>
 8003fc8:	2d02      	cmp	r5, #2
 8003fca:	d16f      	bne.n	80040ac <__kernel_rem_pio2f+0x214>
 8003fcc:	4649      	mov	r1, r9
 8003fce:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003fd2:	f7fc fc8f 	bl	80008f4 <__aeabi_fsub>
 8003fd6:	4681      	mov	r9, r0
 8003fd8:	f1ba 0f00 	cmp.w	sl, #0
 8003fdc:	d066      	beq.n	80040ac <__kernel_rem_pio2f+0x214>
 8003fde:	4639      	mov	r1, r7
 8003fe0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003fe4:	f000 fac6 	bl	8004574 <scalbnf>
 8003fe8:	4601      	mov	r1, r0
 8003fea:	4648      	mov	r0, r9
 8003fec:	f7fc fc82 	bl	80008f4 <__aeabi_fsub>
 8003ff0:	4681      	mov	r9, r0
 8003ff2:	e05b      	b.n	80040ac <__kernel_rem_pio2f+0x214>
 8003ff4:	2400      	movs	r4, #0
 8003ff6:	e766      	b.n	8003ec6 <__kernel_rem_pio2f+0x2e>
 8003ff8:	eb18 0f05 	cmn.w	r8, r5
 8003ffc:	d407      	bmi.n	800400e <__kernel_rem_pio2f+0x176>
 8003ffe:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8004002:	f7fc fd2d 	bl	8000a60 <__aeabi_i2f>
 8004006:	f846 0b04 	str.w	r0, [r6], #4
 800400a:	3501      	adds	r5, #1
 800400c:	e76e      	b.n	8003eec <__kernel_rem_pio2f+0x54>
 800400e:	4658      	mov	r0, fp
 8004010:	e7f9      	b.n	8004006 <__kernel_rem_pio2f+0x16e>
 8004012:	9307      	str	r3, [sp, #28]
 8004014:	9b05      	ldr	r3, [sp, #20]
 8004016:	f8da 1000 	ldr.w	r1, [sl]
 800401a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800401e:	f7fc fd73 	bl	8000b08 <__aeabi_fmul>
 8004022:	4601      	mov	r1, r0
 8004024:	4630      	mov	r0, r6
 8004026:	f7fc fc67 	bl	80008f8 <__addsf3>
 800402a:	9b07      	ldr	r3, [sp, #28]
 800402c:	4606      	mov	r6, r0
 800402e:	f108 0801 	add.w	r8, r8, #1
 8004032:	9a03      	ldr	r2, [sp, #12]
 8004034:	4590      	cmp	r8, r2
 8004036:	f1aa 0a04 	sub.w	sl, sl, #4
 800403a:	ddea      	ble.n	8004012 <__kernel_rem_pio2f+0x17a>
 800403c:	f84b 6b04 	str.w	r6, [fp], #4
 8004040:	f109 0901 	add.w	r9, r9, #1
 8004044:	3504      	adds	r5, #4
 8004046:	e75d      	b.n	8003f04 <__kernel_rem_pio2f+0x6c>
 8004048:	46aa      	mov	sl, r5
 800404a:	461e      	mov	r6, r3
 800404c:	f04f 0800 	mov.w	r8, #0
 8004050:	e7ef      	b.n	8004032 <__kernel_rem_pio2f+0x19a>
 8004052:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004056:	4628      	mov	r0, r5
 8004058:	f7fc fd56 	bl	8000b08 <__aeabi_fmul>
 800405c:	f7fc ff1a 	bl	8000e94 <__aeabi_f2iz>
 8004060:	f7fc fcfe 	bl	8000a60 <__aeabi_i2f>
 8004064:	4649      	mov	r1, r9
 8004066:	9009      	str	r0, [sp, #36]	; 0x24
 8004068:	f7fc fd4e 	bl	8000b08 <__aeabi_fmul>
 800406c:	4601      	mov	r1, r0
 800406e:	4628      	mov	r0, r5
 8004070:	f7fc fc40 	bl	80008f4 <__aeabi_fsub>
 8004074:	f7fc ff0e 	bl	8000e94 <__aeabi_f2iz>
 8004078:	f10b 3bff 	add.w	fp, fp, #4294967295
 800407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407e:	f846 0b04 	str.w	r0, [r6], #4
 8004082:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fc36 	bl	80008f8 <__addsf3>
 800408c:	4605      	mov	r5, r0
 800408e:	e754      	b.n	8003f3a <__kernel_rem_pio2f+0xa2>
 8004090:	d106      	bne.n	80040a0 <__kernel_rem_pio2f+0x208>
 8004092:	f108 33ff 	add.w	r3, r8, #4294967295
 8004096:	aa0a      	add	r2, sp, #40	; 0x28
 8004098:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800409c:	11ed      	asrs	r5, r5, #7
 800409e:	e783      	b.n	8003fa8 <__kernel_rem_pio2f+0x110>
 80040a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040a4:	f7fc fee2 	bl	8000e6c <__aeabi_fcmpge>
 80040a8:	4605      	mov	r5, r0
 80040aa:	bb98      	cbnz	r0, 8004114 <__kernel_rem_pio2f+0x27c>
 80040ac:	2100      	movs	r1, #0
 80040ae:	4648      	mov	r0, r9
 80040b0:	f7fc febe 	bl	8000e30 <__aeabi_fcmpeq>
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f000 8098 	beq.w	80041ea <__kernel_rem_pio2f+0x352>
 80040ba:	f108 34ff 	add.w	r4, r8, #4294967295
 80040be:	4623      	mov	r3, r4
 80040c0:	2200      	movs	r2, #0
 80040c2:	9901      	ldr	r1, [sp, #4]
 80040c4:	428b      	cmp	r3, r1
 80040c6:	da4c      	bge.n	8004162 <__kernel_rem_pio2f+0x2ca>
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d07a      	beq.n	80041c2 <__kernel_rem_pio2f+0x32a>
 80040cc:	ab0a      	add	r3, sp, #40	; 0x28
 80040ce:	3f08      	subs	r7, #8
 80040d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8086 	beq.w	80041e6 <__kernel_rem_pio2f+0x34e>
 80040da:	4639      	mov	r1, r7
 80040dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80040e0:	f000 fa48 	bl	8004574 <scalbnf>
 80040e4:	46a2      	mov	sl, r4
 80040e6:	4681      	mov	r9, r0
 80040e8:	af46      	add	r7, sp, #280	; 0x118
 80040ea:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 80040ee:	f1ba 0f00 	cmp.w	sl, #0
 80040f2:	f280 80af 	bge.w	8004254 <__kernel_rem_pio2f+0x3bc>
 80040f6:	4627      	mov	r7, r4
 80040f8:	2200      	movs	r2, #0
 80040fa:	2f00      	cmp	r7, #0
 80040fc:	f2c0 80d9 	blt.w	80042b2 <__kernel_rem_pio2f+0x41a>
 8004100:	a946      	add	r1, sp, #280	; 0x118
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <__kernel_rem_pio2f+0x2dc>)
 8004104:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8004108:	4690      	mov	r8, r2
 800410a:	f04f 0a00 	mov.w	sl, #0
 800410e:	eba4 0907 	sub.w	r9, r4, r7
 8004112:	e0c2      	b.n	800429a <__kernel_rem_pio2f+0x402>
 8004114:	2502      	movs	r5, #2
 8004116:	e749      	b.n	8003fac <__kernel_rem_pio2f+0x114>
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f1ba 0f00 	cmp.w	sl, #0
 800411e:	d108      	bne.n	8004132 <__kernel_rem_pio2f+0x29a>
 8004120:	b11b      	cbz	r3, 800412a <__kernel_rem_pio2f+0x292>
 8004122:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004126:	6023      	str	r3, [r4, #0]
 8004128:	2301      	movs	r3, #1
 800412a:	3201      	adds	r2, #1
 800412c:	3404      	adds	r4, #4
 800412e:	469a      	mov	sl, r3
 8004130:	e73f      	b.n	8003fb2 <__kernel_rem_pio2f+0x11a>
 8004132:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	4653      	mov	r3, sl
 800413a:	e7f6      	b.n	800412a <__kernel_rem_pio2f+0x292>
 800413c:	f108 32ff 	add.w	r2, r8, #4294967295
 8004140:	ab0a      	add	r3, sp, #40	; 0x28
 8004142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414a:	a90a      	add	r1, sp, #40	; 0x28
 800414c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004150:	e73a      	b.n	8003fc8 <__kernel_rem_pio2f+0x130>
 8004152:	f108 32ff 	add.w	r2, r8, #4294967295
 8004156:	ab0a      	add	r3, sp, #40	; 0x28
 8004158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	e7f3      	b.n	800414a <__kernel_rem_pio2f+0x2b2>
 8004162:	a90a      	add	r1, sp, #40	; 0x28
 8004164:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004168:	3b01      	subs	r3, #1
 800416a:	430a      	orrs	r2, r1
 800416c:	e7a9      	b.n	80040c2 <__kernel_rem_pio2f+0x22a>
 800416e:	bf00      	nop
 8004170:	08004b30 	.word	0x08004b30
 8004174:	08004b04 	.word	0x08004b04
 8004178:	3301      	adds	r3, #1
 800417a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800417e:	2900      	cmp	r1, #0
 8004180:	d0fa      	beq.n	8004178 <__kernel_rem_pio2f+0x2e0>
 8004182:	9a04      	ldr	r2, [sp, #16]
 8004184:	eb08 0402 	add.w	r4, r8, r2
 8004188:	aa1e      	add	r2, sp, #120	; 0x78
 800418a:	f108 0501 	add.w	r5, r8, #1
 800418e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8004192:	4498      	add	r8, r3
 8004194:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8004198:	45a8      	cmp	r8, r5
 800419a:	f6ff aec2 	blt.w	8003f22 <__kernel_rem_pio2f+0x8a>
 800419e:	9b07      	ldr	r3, [sp, #28]
 80041a0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80041a4:	f7fc fc5c 	bl	8000a60 <__aeabi_i2f>
 80041a8:	46a3      	mov	fp, r4
 80041aa:	6020      	str	r0, [r4, #0]
 80041ac:	f04f 0a00 	mov.w	sl, #0
 80041b0:	2600      	movs	r6, #0
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	459a      	cmp	sl, r3
 80041b6:	dd07      	ble.n	80041c8 <__kernel_rem_pio2f+0x330>
 80041b8:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80041bc:	3404      	adds	r4, #4
 80041be:	3501      	adds	r5, #1
 80041c0:	e7ea      	b.n	8004198 <__kernel_rem_pio2f+0x300>
 80041c2:	9a08      	ldr	r2, [sp, #32]
 80041c4:	2301      	movs	r3, #1
 80041c6:	e7d8      	b.n	800417a <__kernel_rem_pio2f+0x2e2>
 80041c8:	9b05      	ldr	r3, [sp, #20]
 80041ca:	f85b 0904 	ldr.w	r0, [fp], #-4
 80041ce:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 80041d2:	f7fc fc99 	bl	8000b08 <__aeabi_fmul>
 80041d6:	4601      	mov	r1, r0
 80041d8:	4630      	mov	r0, r6
 80041da:	f7fc fb8d 	bl	80008f8 <__addsf3>
 80041de:	f10a 0a01 	add.w	sl, sl, #1
 80041e2:	4606      	mov	r6, r0
 80041e4:	e7e5      	b.n	80041b2 <__kernel_rem_pio2f+0x31a>
 80041e6:	3c01      	subs	r4, #1
 80041e8:	e770      	b.n	80040cc <__kernel_rem_pio2f+0x234>
 80041ea:	9b06      	ldr	r3, [sp, #24]
 80041ec:	9a02      	ldr	r2, [sp, #8]
 80041ee:	4648      	mov	r0, r9
 80041f0:	1a99      	subs	r1, r3, r2
 80041f2:	f000 f9bf 	bl	8004574 <scalbnf>
 80041f6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80041fa:	4604      	mov	r4, r0
 80041fc:	f7fc fe36 	bl	8000e6c <__aeabi_fcmpge>
 8004200:	b300      	cbz	r0, 8004244 <__kernel_rem_pio2f+0x3ac>
 8004202:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8004206:	4620      	mov	r0, r4
 8004208:	f7fc fc7e 	bl	8000b08 <__aeabi_fmul>
 800420c:	f7fc fe42 	bl	8000e94 <__aeabi_f2iz>
 8004210:	f7fc fc26 	bl	8000a60 <__aeabi_i2f>
 8004214:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8004218:	4681      	mov	r9, r0
 800421a:	f7fc fc75 	bl	8000b08 <__aeabi_fmul>
 800421e:	4601      	mov	r1, r0
 8004220:	4620      	mov	r0, r4
 8004222:	f7fc fb67 	bl	80008f4 <__aeabi_fsub>
 8004226:	f7fc fe35 	bl	8000e94 <__aeabi_f2iz>
 800422a:	ab0a      	add	r3, sp, #40	; 0x28
 800422c:	f108 0401 	add.w	r4, r8, #1
 8004230:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004234:	4648      	mov	r0, r9
 8004236:	f7fc fe2d 	bl	8000e94 <__aeabi_f2iz>
 800423a:	ab0a      	add	r3, sp, #40	; 0x28
 800423c:	3708      	adds	r7, #8
 800423e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004242:	e74a      	b.n	80040da <__kernel_rem_pio2f+0x242>
 8004244:	4620      	mov	r0, r4
 8004246:	f7fc fe25 	bl	8000e94 <__aeabi_f2iz>
 800424a:	ab0a      	add	r3, sp, #40	; 0x28
 800424c:	4644      	mov	r4, r8
 800424e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004252:	e742      	b.n	80040da <__kernel_rem_pio2f+0x242>
 8004254:	ab0a      	add	r3, sp, #40	; 0x28
 8004256:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800425a:	f7fc fc01 	bl	8000a60 <__aeabi_i2f>
 800425e:	4649      	mov	r1, r9
 8004260:	f7fc fc52 	bl	8000b08 <__aeabi_fmul>
 8004264:	4641      	mov	r1, r8
 8004266:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 800426a:	4648      	mov	r0, r9
 800426c:	f7fc fc4c 	bl	8000b08 <__aeabi_fmul>
 8004270:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004274:	4681      	mov	r9, r0
 8004276:	e73a      	b.n	80040ee <__kernel_rem_pio2f+0x256>
 8004278:	f853 0b04 	ldr.w	r0, [r3], #4
 800427c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8004280:	9203      	str	r2, [sp, #12]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	f7fc fc40 	bl	8000b08 <__aeabi_fmul>
 8004288:	4601      	mov	r1, r0
 800428a:	4640      	mov	r0, r8
 800428c:	f7fc fb34 	bl	80008f8 <__addsf3>
 8004290:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004294:	4680      	mov	r8, r0
 8004296:	f10a 0a01 	add.w	sl, sl, #1
 800429a:	9901      	ldr	r1, [sp, #4]
 800429c:	458a      	cmp	sl, r1
 800429e:	dc01      	bgt.n	80042a4 <__kernel_rem_pio2f+0x40c>
 80042a0:	45ca      	cmp	sl, r9
 80042a2:	dde9      	ble.n	8004278 <__kernel_rem_pio2f+0x3e0>
 80042a4:	ab5a      	add	r3, sp, #360	; 0x168
 80042a6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80042aa:	3f01      	subs	r7, #1
 80042ac:	f849 8ca0 	str.w	r8, [r9, #-160]
 80042b0:	e723      	b.n	80040fa <__kernel_rem_pio2f+0x262>
 80042b2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	dc07      	bgt.n	80042c8 <__kernel_rem_pio2f+0x430>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	dc4d      	bgt.n	8004358 <__kernel_rem_pio2f+0x4c0>
 80042bc:	d02e      	beq.n	800431c <__kernel_rem_pio2f+0x484>
 80042be:	f006 0007 	and.w	r0, r6, #7
 80042c2:	b05b      	add	sp, #364	; 0x16c
 80042c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d1f7      	bne.n	80042be <__kernel_rem_pio2f+0x426>
 80042ce:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 80042d2:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80042d6:	46b8      	mov	r8, r7
 80042d8:	46a2      	mov	sl, r4
 80042da:	f1ba 0f00 	cmp.w	sl, #0
 80042de:	dc48      	bgt.n	8004372 <__kernel_rem_pio2f+0x4da>
 80042e0:	46a1      	mov	r9, r4
 80042e2:	f1b9 0f01 	cmp.w	r9, #1
 80042e6:	dc5f      	bgt.n	80043a8 <__kernel_rem_pio2f+0x510>
 80042e8:	2000      	movs	r0, #0
 80042ea:	2c01      	cmp	r4, #1
 80042ec:	dc75      	bgt.n	80043da <__kernel_rem_pio2f+0x542>
 80042ee:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80042f0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80042f2:	2d00      	cmp	r5, #0
 80042f4:	d177      	bne.n	80043e6 <__kernel_rem_pio2f+0x54e>
 80042f6:	9900      	ldr	r1, [sp, #0]
 80042f8:	600a      	str	r2, [r1, #0]
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	460a      	mov	r2, r1
 80042fe:	6090      	str	r0, [r2, #8]
 8004300:	e7dd      	b.n	80042be <__kernel_rem_pio2f+0x426>
 8004302:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004306:	f7fc faf7 	bl	80008f8 <__addsf3>
 800430a:	3c01      	subs	r4, #1
 800430c:	2c00      	cmp	r4, #0
 800430e:	daf8      	bge.n	8004302 <__kernel_rem_pio2f+0x46a>
 8004310:	b10d      	cbz	r5, 8004316 <__kernel_rem_pio2f+0x47e>
 8004312:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004316:	9b00      	ldr	r3, [sp, #0]
 8004318:	6018      	str	r0, [r3, #0]
 800431a:	e7d0      	b.n	80042be <__kernel_rem_pio2f+0x426>
 800431c:	2000      	movs	r0, #0
 800431e:	af32      	add	r7, sp, #200	; 0xc8
 8004320:	e7f4      	b.n	800430c <__kernel_rem_pio2f+0x474>
 8004322:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8004326:	f7fc fae7 	bl	80008f8 <__addsf3>
 800432a:	3f01      	subs	r7, #1
 800432c:	2f00      	cmp	r7, #0
 800432e:	daf8      	bge.n	8004322 <__kernel_rem_pio2f+0x48a>
 8004330:	b1bd      	cbz	r5, 8004362 <__kernel_rem_pio2f+0x4ca>
 8004332:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8004336:	9a00      	ldr	r2, [sp, #0]
 8004338:	4601      	mov	r1, r0
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	9832      	ldr	r0, [sp, #200]	; 0xc8
 800433e:	f7fc fad9 	bl	80008f4 <__aeabi_fsub>
 8004342:	2701      	movs	r7, #1
 8004344:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004348:	42bc      	cmp	r4, r7
 800434a:	da0c      	bge.n	8004366 <__kernel_rem_pio2f+0x4ce>
 800434c:	b10d      	cbz	r5, 8004352 <__kernel_rem_pio2f+0x4ba>
 800434e:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	6058      	str	r0, [r3, #4]
 8004356:	e7b2      	b.n	80042be <__kernel_rem_pio2f+0x426>
 8004358:	4627      	mov	r7, r4
 800435a:	2000      	movs	r0, #0
 800435c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8004360:	e7e4      	b.n	800432c <__kernel_rem_pio2f+0x494>
 8004362:	4603      	mov	r3, r0
 8004364:	e7e7      	b.n	8004336 <__kernel_rem_pio2f+0x49e>
 8004366:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 800436a:	f7fc fac5 	bl	80008f8 <__addsf3>
 800436e:	3701      	adds	r7, #1
 8004370:	e7ea      	b.n	8004348 <__kernel_rem_pio2f+0x4b0>
 8004372:	f8d8 3000 	ldr.w	r3, [r8]
 8004376:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	9201      	str	r2, [sp, #4]
 8004382:	f7fc fab9 	bl	80008f8 <__addsf3>
 8004386:	9a01      	ldr	r2, [sp, #4]
 8004388:	4601      	mov	r1, r0
 800438a:	4681      	mov	r9, r0
 800438c:	4610      	mov	r0, r2
 800438e:	f7fc fab1 	bl	80008f4 <__aeabi_fsub>
 8004392:	9b02      	ldr	r3, [sp, #8]
 8004394:	4619      	mov	r1, r3
 8004396:	f7fc faaf 	bl	80008f8 <__addsf3>
 800439a:	f848 0904 	str.w	r0, [r8], #-4
 800439e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043a2:	f8c8 9000 	str.w	r9, [r8]
 80043a6:	e798      	b.n	80042da <__kernel_rem_pio2f+0x442>
 80043a8:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80043ac:	f8d7 a000 	ldr.w	sl, [r7]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	4651      	mov	r1, sl
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fc fa9f 	bl	80008f8 <__addsf3>
 80043ba:	9b01      	ldr	r3, [sp, #4]
 80043bc:	4601      	mov	r1, r0
 80043be:	4680      	mov	r8, r0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fc fa97 	bl	80008f4 <__aeabi_fsub>
 80043c6:	4651      	mov	r1, sl
 80043c8:	f7fc fa96 	bl	80008f8 <__addsf3>
 80043cc:	f847 0904 	str.w	r0, [r7], #-4
 80043d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80043d4:	f8c7 8000 	str.w	r8, [r7]
 80043d8:	e783      	b.n	80042e2 <__kernel_rem_pio2f+0x44a>
 80043da:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 80043de:	f7fc fa8b 	bl	80008f8 <__addsf3>
 80043e2:	3c01      	subs	r4, #1
 80043e4:	e781      	b.n	80042ea <__kernel_rem_pio2f+0x452>
 80043e6:	9900      	ldr	r1, [sp, #0]
 80043e8:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80043ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80043f0:	600a      	str	r2, [r1, #0]
 80043f2:	604b      	str	r3, [r1, #4]
 80043f4:	460a      	mov	r2, r1
 80043f6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80043fa:	e780      	b.n	80042fe <__kernel_rem_pio2f+0x466>

080043fc <__kernel_sinf>:
 80043fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004400:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8004404:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004408:	4604      	mov	r4, r0
 800440a:	460f      	mov	r7, r1
 800440c:	4691      	mov	r9, r2
 800440e:	da03      	bge.n	8004418 <__kernel_sinf+0x1c>
 8004410:	f7fc fd40 	bl	8000e94 <__aeabi_f2iz>
 8004414:	2800      	cmp	r0, #0
 8004416:	d035      	beq.n	8004484 <__kernel_sinf+0x88>
 8004418:	4621      	mov	r1, r4
 800441a:	4620      	mov	r0, r4
 800441c:	f7fc fb74 	bl	8000b08 <__aeabi_fmul>
 8004420:	4605      	mov	r5, r0
 8004422:	4601      	mov	r1, r0
 8004424:	4620      	mov	r0, r4
 8004426:	f7fc fb6f 	bl	8000b08 <__aeabi_fmul>
 800442a:	4929      	ldr	r1, [pc, #164]	; (80044d0 <__kernel_sinf+0xd4>)
 800442c:	4606      	mov	r6, r0
 800442e:	4628      	mov	r0, r5
 8004430:	f7fc fb6a 	bl	8000b08 <__aeabi_fmul>
 8004434:	4927      	ldr	r1, [pc, #156]	; (80044d4 <__kernel_sinf+0xd8>)
 8004436:	f7fc fa5d 	bl	80008f4 <__aeabi_fsub>
 800443a:	4629      	mov	r1, r5
 800443c:	f7fc fb64 	bl	8000b08 <__aeabi_fmul>
 8004440:	4925      	ldr	r1, [pc, #148]	; (80044d8 <__kernel_sinf+0xdc>)
 8004442:	f7fc fa59 	bl	80008f8 <__addsf3>
 8004446:	4629      	mov	r1, r5
 8004448:	f7fc fb5e 	bl	8000b08 <__aeabi_fmul>
 800444c:	4923      	ldr	r1, [pc, #140]	; (80044dc <__kernel_sinf+0xe0>)
 800444e:	f7fc fa51 	bl	80008f4 <__aeabi_fsub>
 8004452:	4629      	mov	r1, r5
 8004454:	f7fc fb58 	bl	8000b08 <__aeabi_fmul>
 8004458:	4921      	ldr	r1, [pc, #132]	; (80044e0 <__kernel_sinf+0xe4>)
 800445a:	f7fc fa4d 	bl	80008f8 <__addsf3>
 800445e:	4680      	mov	r8, r0
 8004460:	f1b9 0f00 	cmp.w	r9, #0
 8004464:	d111      	bne.n	800448a <__kernel_sinf+0x8e>
 8004466:	4601      	mov	r1, r0
 8004468:	4628      	mov	r0, r5
 800446a:	f7fc fb4d 	bl	8000b08 <__aeabi_fmul>
 800446e:	491d      	ldr	r1, [pc, #116]	; (80044e4 <__kernel_sinf+0xe8>)
 8004470:	f7fc fa40 	bl	80008f4 <__aeabi_fsub>
 8004474:	4631      	mov	r1, r6
 8004476:	f7fc fb47 	bl	8000b08 <__aeabi_fmul>
 800447a:	4601      	mov	r1, r0
 800447c:	4620      	mov	r0, r4
 800447e:	f7fc fa3b 	bl	80008f8 <__addsf3>
 8004482:	4604      	mov	r4, r0
 8004484:	4620      	mov	r0, r4
 8004486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800448a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800448e:	4638      	mov	r0, r7
 8004490:	f7fc fb3a 	bl	8000b08 <__aeabi_fmul>
 8004494:	4641      	mov	r1, r8
 8004496:	4681      	mov	r9, r0
 8004498:	4630      	mov	r0, r6
 800449a:	f7fc fb35 	bl	8000b08 <__aeabi_fmul>
 800449e:	4601      	mov	r1, r0
 80044a0:	4648      	mov	r0, r9
 80044a2:	f7fc fa27 	bl	80008f4 <__aeabi_fsub>
 80044a6:	4629      	mov	r1, r5
 80044a8:	f7fc fb2e 	bl	8000b08 <__aeabi_fmul>
 80044ac:	4639      	mov	r1, r7
 80044ae:	f7fc fa21 	bl	80008f4 <__aeabi_fsub>
 80044b2:	490c      	ldr	r1, [pc, #48]	; (80044e4 <__kernel_sinf+0xe8>)
 80044b4:	4605      	mov	r5, r0
 80044b6:	4630      	mov	r0, r6
 80044b8:	f7fc fb26 	bl	8000b08 <__aeabi_fmul>
 80044bc:	4601      	mov	r1, r0
 80044be:	4628      	mov	r0, r5
 80044c0:	f7fc fa1a 	bl	80008f8 <__addsf3>
 80044c4:	4601      	mov	r1, r0
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7fc fa14 	bl	80008f4 <__aeabi_fsub>
 80044cc:	e7d9      	b.n	8004482 <__kernel_sinf+0x86>
 80044ce:	bf00      	nop
 80044d0:	2f2ec9d3 	.word	0x2f2ec9d3
 80044d4:	32d72f34 	.word	0x32d72f34
 80044d8:	3638ef1b 	.word	0x3638ef1b
 80044dc:	39500d01 	.word	0x39500d01
 80044e0:	3c088889 	.word	0x3c088889
 80044e4:	3e2aaaab 	.word	0x3e2aaaab

080044e8 <fabsf>:
 80044e8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80044ec:	4770      	bx	lr
	...

080044f0 <floorf>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80044f6:	3d7f      	subs	r5, #127	; 0x7f
 80044f8:	2d16      	cmp	r5, #22
 80044fa:	4601      	mov	r1, r0
 80044fc:	4604      	mov	r4, r0
 80044fe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8004502:	dc26      	bgt.n	8004552 <floorf+0x62>
 8004504:	2d00      	cmp	r5, #0
 8004506:	da0e      	bge.n	8004526 <floorf+0x36>
 8004508:	4917      	ldr	r1, [pc, #92]	; (8004568 <floorf+0x78>)
 800450a:	f7fc f9f5 	bl	80008f8 <__addsf3>
 800450e:	2100      	movs	r1, #0
 8004510:	f7fc fcb6 	bl	8000e80 <__aeabi_fcmpgt>
 8004514:	b128      	cbz	r0, 8004522 <floorf+0x32>
 8004516:	2c00      	cmp	r4, #0
 8004518:	da23      	bge.n	8004562 <floorf+0x72>
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <floorf+0x7c>)
 800451c:	2e00      	cmp	r6, #0
 800451e:	bf18      	it	ne
 8004520:	461c      	movne	r4, r3
 8004522:	4621      	mov	r1, r4
 8004524:	e01b      	b.n	800455e <floorf+0x6e>
 8004526:	4e12      	ldr	r6, [pc, #72]	; (8004570 <floorf+0x80>)
 8004528:	412e      	asrs	r6, r5
 800452a:	4230      	tst	r0, r6
 800452c:	d017      	beq.n	800455e <floorf+0x6e>
 800452e:	490e      	ldr	r1, [pc, #56]	; (8004568 <floorf+0x78>)
 8004530:	f7fc f9e2 	bl	80008f8 <__addsf3>
 8004534:	2100      	movs	r1, #0
 8004536:	f7fc fca3 	bl	8000e80 <__aeabi_fcmpgt>
 800453a:	2800      	cmp	r0, #0
 800453c:	d0f1      	beq.n	8004522 <floorf+0x32>
 800453e:	2c00      	cmp	r4, #0
 8004540:	bfbe      	ittt	lt
 8004542:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8004546:	fa43 f505 	asrlt.w	r5, r3, r5
 800454a:	1964      	addlt	r4, r4, r5
 800454c:	ea24 0406 	bic.w	r4, r4, r6
 8004550:	e7e7      	b.n	8004522 <floorf+0x32>
 8004552:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8004556:	d302      	bcc.n	800455e <floorf+0x6e>
 8004558:	f7fc f9ce 	bl	80008f8 <__addsf3>
 800455c:	4601      	mov	r1, r0
 800455e:	4608      	mov	r0, r1
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	2400      	movs	r4, #0
 8004564:	e7dd      	b.n	8004522 <floorf+0x32>
 8004566:	bf00      	nop
 8004568:	7149f2ca 	.word	0x7149f2ca
 800456c:	bf800000 	.word	0xbf800000
 8004570:	007fffff 	.word	0x007fffff

08004574 <scalbnf>:
 8004574:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4603      	mov	r3, r0
 800457c:	460d      	mov	r5, r1
 800457e:	4604      	mov	r4, r0
 8004580:	d02a      	beq.n	80045d8 <scalbnf+0x64>
 8004582:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004586:	d304      	bcc.n	8004592 <scalbnf+0x1e>
 8004588:	4601      	mov	r1, r0
 800458a:	f7fc f9b5 	bl	80008f8 <__addsf3>
 800458e:	4603      	mov	r3, r0
 8004590:	e022      	b.n	80045d8 <scalbnf+0x64>
 8004592:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8004596:	d117      	bne.n	80045c8 <scalbnf+0x54>
 8004598:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800459c:	f7fc fab4 	bl	8000b08 <__aeabi_fmul>
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <scalbnf+0x8c>)
 80045a2:	4295      	cmp	r5, r2
 80045a4:	4603      	mov	r3, r0
 80045a6:	db0b      	blt.n	80045c0 <scalbnf+0x4c>
 80045a8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80045ac:	4604      	mov	r4, r0
 80045ae:	3a19      	subs	r2, #25
 80045b0:	442a      	add	r2, r5
 80045b2:	2afe      	cmp	r2, #254	; 0xfe
 80045b4:	dd0a      	ble.n	80045cc <scalbnf+0x58>
 80045b6:	4913      	ldr	r1, [pc, #76]	; (8004604 <scalbnf+0x90>)
 80045b8:	4618      	mov	r0, r3
 80045ba:	f361 001e 	bfi	r0, r1, #0, #31
 80045be:	e000      	b.n	80045c2 <scalbnf+0x4e>
 80045c0:	4911      	ldr	r1, [pc, #68]	; (8004608 <scalbnf+0x94>)
 80045c2:	f7fc faa1 	bl	8000b08 <__aeabi_fmul>
 80045c6:	e7e2      	b.n	800458e <scalbnf+0x1a>
 80045c8:	0dd2      	lsrs	r2, r2, #23
 80045ca:	e7f1      	b.n	80045b0 <scalbnf+0x3c>
 80045cc:	2a00      	cmp	r2, #0
 80045ce:	dd05      	ble.n	80045dc <scalbnf+0x68>
 80045d0:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80045d4:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80045d8:	4618      	mov	r0, r3
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	f112 0f16 	cmn.w	r2, #22
 80045e0:	da05      	bge.n	80045ee <scalbnf+0x7a>
 80045e2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80045e6:	4295      	cmp	r5, r2
 80045e8:	dce5      	bgt.n	80045b6 <scalbnf+0x42>
 80045ea:	4907      	ldr	r1, [pc, #28]	; (8004608 <scalbnf+0x94>)
 80045ec:	e7e4      	b.n	80045b8 <scalbnf+0x44>
 80045ee:	3219      	adds	r2, #25
 80045f0:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80045f4:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80045f8:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80045fc:	e7e1      	b.n	80045c2 <scalbnf+0x4e>
 80045fe:	bf00      	nop
 8004600:	ffff3cb0 	.word	0xffff3cb0
 8004604:	7149f2ca 	.word	0x7149f2ca
 8004608:	0da24260 	.word	0x0da24260

0800460c <_init>:
 800460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460e:	bf00      	nop
 8004610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	469e      	mov	lr, r3
 8004616:	4770      	bx	lr

08004618 <_fini>:
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	bf00      	nop
 800461c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461e:	bc08      	pop	{r3}
 8004620:	469e      	mov	lr, r3
 8004622:	4770      	bx	lr
