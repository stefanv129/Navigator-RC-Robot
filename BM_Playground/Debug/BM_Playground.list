
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f64  08002f64  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000064  08002fd0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002fd0  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a9e  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bfd  00000000  00000000  00023b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  00024730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000268  00000000  00000000  00024a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c79  00000000  00000000  00024c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003be2  00000000  00000000  00028911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c0c9  00000000  00000000  0002c4f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000385bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001464  00000000  00000000  0003860c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002e04 	.word	0x08002e04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002e04 	.word	0x08002e04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d141      	bne.n	8000812 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <GPIO_PeriClockControl+0x130>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d147      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000836:	f023 0302 	bic.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <GPIO_PeriClockControl+0x130>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400

080008bc <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d820      	bhi.n	800091e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e08c      	b.n	8000a38 <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d117      	bne.n	8000956 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000926:	4b90      	ldr	r3, [pc, #576]	; (8000b68 <GPIO_Init+0x2ac>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7912      	ldrb	r2, [r2, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	2201      	movs	r2, #1
 8000932:	408a      	lsls	r2, r1
 8000934:	4611      	mov	r1, r2
 8000936:	4a8c      	ldr	r2, [pc, #560]	; (8000b68 <GPIO_Init+0x2ac>)
 8000938:	430b      	orrs	r3, r1
 800093a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b8a      	ldr	r3, [pc, #552]	; (8000b68 <GPIO_Init+0x2ac>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a86      	ldr	r2, [pc, #536]	; (8000b68 <GPIO_Init+0x2ac>)
 8000950:	400b      	ands	r3, r1
 8000952:	6093      	str	r3, [r2, #8]
 8000954:	e035      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b05      	cmp	r3, #5
 800095c:	d117      	bne.n	800098e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b82      	ldr	r3, [pc, #520]	; (8000b68 <GPIO_Init+0x2ac>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7912      	ldrb	r2, [r2, #4]
 8000966:	4611      	mov	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	408a      	lsls	r2, r1
 800096c:	4611      	mov	r1, r2
 800096e:	4a7e      	ldr	r2, [pc, #504]	; (8000b68 <GPIO_Init+0x2ac>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b7c      	ldr	r3, [pc, #496]	; (8000b68 <GPIO_Init+0x2ac>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7912      	ldrb	r2, [r2, #4]
 800097c:	4611      	mov	r1, r2
 800097e:	2201      	movs	r2, #1
 8000980:	408a      	lsls	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a78      	ldr	r2, [pc, #480]	; (8000b68 <GPIO_Init+0x2ac>)
 8000988:	400b      	ands	r3, r1
 800098a:	60d3      	str	r3, [r2, #12]
 800098c:	e019      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d115      	bne.n	80009c2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000996:	4b74      	ldr	r3, [pc, #464]	; (8000b68 <GPIO_Init+0x2ac>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7912      	ldrb	r2, [r2, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	408a      	lsls	r2, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a70      	ldr	r2, [pc, #448]	; (8000b68 <GPIO_Init+0x2ac>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ac:	4b6e      	ldr	r3, [pc, #440]	; (8000b68 <GPIO_Init+0x2ac>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7912      	ldrb	r2, [r2, #4]
 80009b4:	4611      	mov	r1, r2
 80009b6:	2201      	movs	r2, #1
 80009b8:	408a      	lsls	r2, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a6a      	ldr	r2, [pc, #424]	; (8000b68 <GPIO_Init+0x2ac>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a64      	ldr	r2, [pc, #400]	; (8000b6c <GPIO_Init+0x2b0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d00f      	beq.n	80009fe <GPIO_Init+0x142>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a63      	ldr	r2, [pc, #396]	; (8000b70 <GPIO_Init+0x2b4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d008      	beq.n	80009fa <GPIO_Init+0x13e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <GPIO_Init+0x2b8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <GPIO_Init+0x13a>
 80009f2:	2302      	movs	r3, #2
 80009f4:	e004      	b.n	8000a00 <GPIO_Init+0x144>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e002      	b.n	8000a00 <GPIO_Init+0x144>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <GPIO_Init+0x144>
 80009fe:	2300      	movs	r3, #0
 8000a00:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a02:	4b5d      	ldr	r3, [pc, #372]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a0e:	7c7a      	ldrb	r2, [r7, #17]
 8000a10:	7cbb      	ldrb	r3, [r7, #18]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa02 f103 	lsl.w	r1, r2, r3
 8000a18:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <GPIO_Init+0x2c0>)
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a22:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	7912      	ldrb	r2, [r2, #4]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	408a      	lsls	r2, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	4a4d      	ldr	r2, [pc, #308]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	799b      	ldrb	r3, [r3, #6]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6899      	ldr	r1, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	79db      	ldrb	r3, [r3, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2103      	movs	r1, #3
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68d9      	ldr	r1, [r3, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7a1b      	ldrb	r3, [r3, #8]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6859      	ldr	r1, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d131      	bne.n	8000b60 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	7c3a      	ldrb	r2, [r7, #16]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7c3a      	ldrb	r2, [r7, #16]
 8000b2e:	4001      	ands	r1, r0
 8000b30:	3208      	adds	r2, #8
 8000b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7c3a      	ldrb	r2, [r7, #16]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7a5b      	ldrb	r3, [r3, #9]
 8000b46:	461a      	mov	r2, r3
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	7c3a      	ldrb	r2, [r7, #16]
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013c00 	.word	0x40013c00
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40013800 	.word	0x40013800

08000b80 <GPIO_Write_Pin>:
	{
		GPIOH_REG_RESET();
	}
}

void GPIO_Write_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t STATE) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	70bb      	strb	r3, [r7, #2]
	if (STATE == SET) {
 8000b90:	78bb      	ldrb	r3, [r7, #2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d109      	bne.n	8000baa <GPIO_Write_Pin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);   // Set the pin
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	78fa      	ldrb	r2, [r7, #3]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}
 8000ba8:	e009      	b.n	8000bbe <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	43d2      	mvns	r2, r2
 8000bb8:	401a      	ands	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	615a      	str	r2, [r3, #20]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
    return value;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d809      	bhi.n	8000c18 <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	78fa      	ldrb	r2, [r7, #3]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	405a      	eors	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	e000      	b.n	8000c1a <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 8000c18:	bf00      	nop
}
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <GPIO_IRQInterruptConfig>:

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	460a      	mov	r2, r1
 8000c2e:	71fb      	strb	r3, [r7, #7]
 8000c30:	4613      	mov	r3, r2
 8000c32:	71bb      	strb	r3, [r7, #6]

	if(EnorDi == ENABLE)
 8000c34:	79bb      	ldrb	r3, [r7, #6]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d133      	bne.n	8000ca2 <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b1f      	cmp	r3, #31
 8000c3e:	d80a      	bhi.n	8000c56 <GPIO_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <GPIO_IRQInterruptConfig+0xf0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <GPIO_IRQInterruptConfig+0xf0>)
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6013      	str	r3, [r2, #0]
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
		}
	}

}
 8000c54:	e059      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b1f      	cmp	r3, #31
 8000c5a:	d90f      	bls.n	8000c7c <GPIO_IRQInterruptConfig+0x58>
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c60:	d80c      	bhi.n	8000c7c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <GPIO_IRQInterruptConfig+0xf4>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	f002 021f 	and.w	r2, r2, #31
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	4611      	mov	r1, r2
 8000c74:	4a28      	ldr	r2, [pc, #160]	; (8000d18 <GPIO_IRQInterruptConfig+0xf4>)
 8000c76:	430b      	orrs	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e046      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c80:	d943      	bls.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b5f      	cmp	r3, #95	; 0x5f
 8000c86:	d840      	bhi.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 8000c88:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <GPIO_IRQInterruptConfig+0xf8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c92:	2101      	movs	r1, #1
 8000c94:	fa01 f202 	lsl.w	r2, r1, r2
 8000c98:	4611      	mov	r1, r2
 8000c9a:	4a20      	ldr	r2, [pc, #128]	; (8000d1c <GPIO_IRQInterruptConfig+0xf8>)
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	e033      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b1f      	cmp	r3, #31
 8000ca6:	d80a      	bhi.n	8000cbe <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <GPIO_IRQInterruptConfig+0xfc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	2101      	movs	r1, #1
 8000cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <GPIO_IRQInterruptConfig+0xfc>)
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	e025      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	2b1f      	cmp	r3, #31
 8000cc2:	d90f      	bls.n	8000ce4 <GPIO_IRQInterruptConfig+0xc0>
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc8:	d80c      	bhi.n	8000ce4 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <GPIO_IRQInterruptConfig+0x100>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	f002 021f 	and.w	r2, r2, #31
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <GPIO_IRQInterruptConfig+0x100>)
 8000cde:	430b      	orrs	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e012      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ce8:	d90f      	bls.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b5f      	cmp	r3, #95	; 0x5f
 8000cee:	d80c      	bhi.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000cf0:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <GPIO_IRQInterruptConfig+0x104>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	79fa      	ldrb	r2, [r7, #7]
 8000cf6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	4611      	mov	r1, r2
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <GPIO_IRQInterruptConfig+0x104>)
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	e7ff      	b.n	8000d0a <GPIO_IRQInterruptConfig+0xe6>
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000e104 	.word	0xe000e104
 8000d1c:	e000e108 	.word	0xe000e108
 8000d20:	e000e180 	.word	0xe000e180
 8000d24:	e000e184 	.word	0xe000e184
 8000d28:	e000e188 	.word	0xe000e188

08000d2c <GPIO_IRQHandling>:


void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <GPIO_IRQHandling+0x3c>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	4013      	ands	r3, r2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d009      	beq.n	8000d5c <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <GPIO_IRQHandling+0x3c>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	fa01 f202 	lsl.w	r2, r1, r2
 8000d54:	4611      	mov	r1, r2
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <GPIO_IRQHandling+0x3c>)
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	6153      	str	r3, [r2, #20]
	}
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40013c00 	.word	0x40013c00

08000d6c <I2C_SM_INIT>:

#include "I2C.h"


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
    // 1. Enable peripheral clock
    I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <I2C_SM_INIT+0x70>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <I2C_SM_INIT+0x70>)
 8000d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40

    // 2. Configure ACK
    pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7a5b      	ldrb	r3, [r3, #9]
 8000d8a:	029b      	lsls	r3, r3, #10
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]

    // 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
    pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2208      	movs	r2, #8
 8000d9c:	605a      	str	r2, [r3, #4]

    // 4. Configure CCR for Standard Mode
    uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <I2C_SM_INIT+0x74>)
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	81fb      	strh	r3, [r7, #14]
    pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8000dac:	89fa      	ldrh	r2, [r7, #14]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000db6:	61da      	str	r2, [r3, #28]

    // 5. Set TRISE
    // TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
    pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2209      	movs	r2, #9
 8000dbe:	621a      	str	r2, [r3, #32]

    // 6. Enable the peripheral
    pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0201 	orr.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	007a1200 	.word	0x007a1200

08000de4 <drive_FWD>:
		__asm__("nop");
	}
}

//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]


	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000df4:	2201      	movs	r2, #1
 8000df6:	2100      	movs	r1, #0
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f000 fa87 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2102      	movs	r1, #2
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 fa82 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fa7d 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2103      	movs	r1, #3
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 fa78 	bl	800130c <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH3)) & ~((1 << 4 * CH2) | (1 << 4 * CH4));
 8000e1c:	f240 1301 	movw	r3, #257	; 0x101
 8000e20:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6a19      	ldr	r1, [r3, #32]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	621a      	str	r2, [r3, #32]

	//GP_TIM_Control(pGP_TIM_Handle->pTIMx, ENABLE);
	//one wheel turns faster at startup...
	//increase duty linearly?

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	695a      	ldr	r2, [r3, #20]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f042 0201 	orr.w	r2, r2, #1
 8000e40:	615a      	str	r2, [r3, #20]
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <stop_FWD>:

void stop_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_STOP);
 8000e52:	2202      	movs	r2, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fa58 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_STOP);
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	2102      	movs	r1, #2
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fa53 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_STOP);
 8000e66:	2202      	movs	r2, #2
 8000e68:	2101      	movs	r1, #1
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fa4e 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_STOP);
 8000e70:	2202      	movs	r2, #2
 8000e72:	2103      	movs	r1, #3
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 fa49 	bl	800130c <GP_TIM_PWM_Control>



	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695a      	ldr	r2, [r3, #20]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0201 	orr.w	r2, r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f000 fa30 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 fa2b 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2101      	movs	r1, #1
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 fa26 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 fa21 	bl	800130c <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH4)) & ~((1 << 4 * CH3) | (1 << 4 * CH2));
 8000eca:	f241 0301 	movw	r3, #4097	; 0x1001
 8000ece:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6a19      	ldr	r1, [r3, #32]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f9fd 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2102      	movs	r1, #2
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f9f8 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f9f3 	bl	800130c <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2103      	movs	r1, #3
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f9ee 	bl	800130c <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH3) | (1 << 4 * CH2)) & ~((1 << 4 * CH4) | (1 << 4 * CH1));
 8000f30:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000f34:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a19      	ldr	r1, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	695a      	ldr	r2, [r3, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	615a      	str	r2, [r3, #20]
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000f72:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000f7a:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	791b      	ldrb	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d125      	bne.n	8000fd6 <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000f9a:	bf00      	nop
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f8      	beq.n	8000f9c <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0203 	bic.w	r2, r2, #3
 8000fb8:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000fc6:	bf00      	nop
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f8      	bne.n	8000fc8 <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <AD_TIM_Start_Countdown>:



#include "TIMER.h"

void AD_TIM_Start_Countdown(AD_TIM_RegDef_t *pTIMx, uint32_t time_ms) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	pTIMx->CR1 &= ~TIM_CR1_CEN;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 0201 	bic.w	r2, r3, #1
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) != 0);
 8000ff6:	bf00      	nop
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f9      	bne.n	8000ff8 <AD_TIM_Start_Countdown+0x18>
	// Clear any pending update flag
	pTIMx->SR &= ~TIM_SR_UIF;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	f023 0201 	bic.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	611a      	str	r2, [r3, #16]

	// Configure for single countdown
	pTIMx->CNT = time_ms - 1;;  // Load counter this doesnt set count to 0...
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	1e5a      	subs	r2, r3, #1
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
	pTIMx->ARR = time_ms - 1;  // Count from this value down to 0
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	1e5a      	subs	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
	// Generate update to load registers
	pTIMx->EGR |= TIM_EGR_UG;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	f043 0201 	orr.w	r2, r3, #1
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	615a      	str	r2, [r3, #20]

	pTIMx->CR1 |= TIM_CR1_CEN;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) == 0);
 8001038:	bf00      	nop
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <AD_TIM_Start_Countdown+0x5a>
	// Clear update flag
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
	...

08001054 <AD_TIM_CDN_INIT>:
//could just use timer handle instead



void AD_TIM_CDN_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]

	if (pAD_TIM_Handle->pTIMx == TIM1) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <AD_TIM_CDN_INIT+0x90>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d105      	bne.n	8001072 <AD_TIM_CDN_INIT+0x1e>
		TIM1_PCLK_EN();
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <AD_TIM_CDN_INIT+0x94>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <AD_TIM_CDN_INIT+0x94>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
	}

	//HANDLE INTERRUPTS
	*NVIC_ISER0 |= TIM1_UP_IRQ;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <AD_TIM_CDN_INIT+0x98>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a1d      	ldr	r2, [pc, #116]	; (80010ec <AD_TIM_CDN_INIT+0x98>)
 8001078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800107c:	6013      	str	r3, [r2, #0]
	pAD_TIM_Handle->pTIMx->DIER |= TIM_DIER_UIE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	60da      	str	r2, [r3, #12]
	//IS CLOCK NEEDED FORE SETTING REGS?

	// Set timer UEV to only overflow
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_URS;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 0204 	orr.w	r2, r2, #4
 800109c:	601a      	str	r2, [r3, #0]

	// Set timer direction to downcounting
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_DIR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0208 	orr.w	r2, r2, #8
 80010ac:	601a      	str	r2, [r3, #0]

	// Enable Auto-Reload Preload (recommended for stability)
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]

	// Set prescaler
	pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	889a      	ldrh	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28

	// Force update event to load PSC immediately
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0201 	orr.w	r2, r2, #1
 80010d6:	615a      	str	r2, [r3, #20]

}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40010000 	.word	0x40010000
 80010e8:	40023800 	.word	0x40023800
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001100:	d106      	bne.n	8001110 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8001102:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <GP_TIM_PWM_INIT+0x108>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	4a3c      	ldr	r2, [pc, #240]	; (80011f8 <GP_TIM_PWM_INIT+0x108>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6413      	str	r3, [r2, #64]	; 0x40
 800110e:	e00a      	b.n	8001126 <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a39      	ldr	r2, [pc, #228]	; (80011fc <GP_TIM_PWM_INIT+0x10c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d105      	bne.n	8001126 <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 800111a:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <GP_TIM_PWM_INIT+0x108>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a36      	ldr	r2, [pc, #216]	; (80011f8 <GP_TIM_PWM_INIT+0x108>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 8001126:	bf00      	nop
 8001128:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <GP_TIM_PWM_INIT+0x108>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f9      	beq.n	8001128 <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001142:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	889a      	ldrh	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	88db      	ldrh	r3, [r3, #6]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e03c      	b.n	80011da <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3302      	adds	r3, #2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	88db      	ldrh	r3, [r3, #6]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f93d 	bl	80003ec <__aeabi_ui2f>
 8001172:	4603      	mov	r3, r0
 8001174:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 8001176:	4922      	ldr	r1, [pc, #136]	; (8001200 <GP_TIM_PWM_INIT+0x110>)
 8001178:	6938      	ldr	r0, [r7, #16]
 800117a:	f7ff fa43 	bl	8000604 <__aeabi_fdiv>
 800117e:	4603      	mov	r3, r0
 8001180:	461c      	mov	r4, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	88db      	ldrh	r3, [r3, #6]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f934 	bl	80003f4 <__aeabi_i2f>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f983 	bl	800049c <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff facf 	bl	800073c <__aeabi_f2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3302      	adds	r3, #2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	795b      	ldrb	r3, [r3, #5]
 80011ae:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	3302      	adds	r3, #2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	791b      	ldrb	r3, [r3, #4]
 80011bc:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	b2d9      	uxtb	r1, r3
 80011c6:	7b7c      	ldrb	r4, [r7, #13]
 80011c8:	89fa      	ldrh	r2, [r7, #14]
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	4623      	mov	r3, r4
 80011d0:	f000 f818 	bl	8001204 <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	ddbf      	ble.n	8001160 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	615a      	str	r2, [r3, #20]

}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40000400 	.word	0x40000400
 8001200:	42c80000 	.word	0x42c80000

08001204 <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	461a      	mov	r2, r3
 8001212:	4603      	mov	r3, r0
 8001214:	70fb      	strb	r3, [r7, #3]
 8001216:	460b      	mov	r3, r1
 8001218:	803b      	strh	r3, [r7, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d802      	bhi.n	800122a <GP_TIM_SetChannel+0x26>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3318      	adds	r3, #24
 8001228:	e001      	b.n	800122e <GP_TIM_SetChannel+0x2a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	331c      	adds	r3, #28
 800122e:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d864      	bhi.n	8001300 <GP_TIM_SetChannel+0xfc>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <GP_TIM_SetChannel+0x38>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800124d 	.word	0x0800124d
 8001240:	0800125d 	.word	0x0800125d
 8001244:	0800126d 	.word	0x0800126d
 8001248:	0800127f 	.word	0x0800127f
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3334      	adds	r3, #52	; 0x34
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	2304      	movs	r3, #4
 8001254:	74fb      	strb	r3, [r7, #19]
 8001256:	2301      	movs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e019      	b.n	8001290 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3338      	adds	r3, #56	; 0x38
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	230c      	movs	r3, #12
 8001264:	74fb      	strb	r3, [r7, #19]
 8001266:	2310      	movs	r3, #16
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	e011      	b.n	8001290 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	333c      	adds	r3, #60	; 0x3c
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2304      	movs	r3, #4
 8001274:	74fb      	strb	r3, [r7, #19]
 8001276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e008      	b.n	8001290 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3340      	adds	r3, #64	; 0x40
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	230c      	movs	r3, #12
 8001286:	74fb      	strb	r3, [r7, #19]
 8001288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8001290:	883a      	ldrh	r2, [r7, #0]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7cfa      	ldrb	r2, [r7, #19]
 800129c:	2107      	movs	r1, #7
 800129e:	fa01 f202 	lsl.w	r2, r1, r2
 80012a2:	43d2      	mvns	r2, r2
 80012a4:	401a      	ands	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	78ba      	ldrb	r2, [r7, #2]
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	d101      	bne.n	80012b8 <GP_TIM_SetChannel+0xb4>
 80012b4:	2106      	movs	r1, #6
 80012b6:	e000      	b.n	80012ba <GP_TIM_SetChannel+0xb6>
 80012b8:	2107      	movs	r1, #7
 80012ba:	7cfa      	ldrb	r2, [r7, #19]
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	431a      	orrs	r2, r3
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	7cfa      	ldrb	r2, [r7, #19]
 80012cc:	3a01      	subs	r2, #1
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	431a      	orrs	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 80012da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
 80012ee:	e008      	b.n	8001302 <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	e000      	b.n	8001302 <GP_TIM_SetChannel+0xfe>
	default: return;
 8001300:	bf00      	nop
	}
}
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_STATE) {
 800130c:	b590      	push	{r4, r7, lr}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
 8001318:	4613      	mov	r3, r2
 800131a:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	2b03      	cmp	r3, #3
 8001320:	d86c      	bhi.n	80013fc <GP_TIM_PWM_Control+0xf0>

	//		uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit

	if (PWM_STATE == PWM_OUTPUT) {
 8001322:	78bb      	ldrb	r3, [r7, #2]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d141      	bne.n	80013ac <GP_TIM_PWM_Control+0xa0>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	3302      	adds	r3, #2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	88db      	ldrh	r3, [r3, #6]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f85d 	bl	80003f4 <__aeabi_i2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4931      	ldr	r1, [pc, #196]	; (8001404 <GP_TIM_PWM_Control+0xf8>)
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f960 	bl	8000604 <__aeabi_fdiv>
 8001344:	4603      	mov	r3, r0
 8001346:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f851 	bl	80003f4 <__aeabi_i2f>
 8001352:	4603      	mov	r3, r0
 8001354:	4619      	mov	r1, r3
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff f8a0 	bl	800049c <__aeabi_fmul>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f9ec 	bl	800073c <__aeabi_f2uiz>
 8001364:	4603      	mov	r3, r0
 8001366:	81bb      	strh	r3, [r7, #12]
		switch(channel) {
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d847      	bhi.n	80013fe <GP_TIM_PWM_Control+0xf2>
 800136e:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <GP_TIM_PWM_Control+0x68>)
 8001370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001374:	08001385 	.word	0x08001385
 8001378:	0800138f 	.word	0x0800138f
 800137c:	08001399 	.word	0x08001399
 8001380:	080013a3 	.word	0x080013a3
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	89ba      	ldrh	r2, [r7, #12]
 800138a:	635a      	str	r2, [r3, #52]	; 0x34
 800138c:	e037      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	89ba      	ldrh	r2, [r7, #12]
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
 8001396:	e032      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	89ba      	ldrh	r2, [r7, #12]
 800139e:	63da      	str	r2, [r3, #60]	; 0x3c
 80013a0:	e02d      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	89ba      	ldrh	r2, [r7, #12]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
 80013aa:	e028      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		}

//		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
	} else if(PWM_STATE == PWM_STOP)
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d125      	bne.n	80013fe <GP_TIM_PWM_Control+0xf2>
	{
		uint16_t duty = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	81fb      	strh	r3, [r7, #14]
		switch(channel) {
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d820      	bhi.n	80013fe <GP_TIM_PWM_Control+0xf2>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <GP_TIM_PWM_Control+0xb8>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013d5 	.word	0x080013d5
 80013c8:	080013df 	.word	0x080013df
 80013cc:	080013e9 	.word	0x080013e9
 80013d0:	080013f3 	.word	0x080013f3
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	89fa      	ldrh	r2, [r7, #14]
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
 80013dc:	e00f      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	89fa      	ldrh	r2, [r7, #14]
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
 80013e6:	e00a      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	89fa      	ldrh	r2, [r7, #14]
 80013ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80013f0:	e005      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	89fa      	ldrh	r2, [r7, #14]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
 80013fa:	e000      	b.n	80013fe <GP_TIM_PWM_Control+0xf2>
	if (channel > 3) return;
 80013fc:	bf00      	nop
	{
		//pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
	}


}
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bd90      	pop	{r4, r7, pc}
 8001404:	42c80000 	.word	0x42c80000

08001408 <USART_SetBaudRate>:

#include "USART.h"


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001408:	b480      	push	{r7}
 800140a:	b089      	sub	sp, #36	; 0x24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]

	uint32_t PCLKx = APB2_CLOCK_FREQ;	//APB2_CLOCK_FREQ_MHZ
 8001412:	4b2d      	ldr	r3, [pc, #180]	; (80014c8 <USART_SetBaudRate+0xc0>)
 8001414:	617b      	str	r3, [r7, #20]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <USART_SetBaudRate+0x36>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	009a      	lsls	r2, r3, #2
 8001430:	441a      	add	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	fbb2 f3f3 	udiv	r3, r2, r3
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	e00a      	b.n	8001454 <USART_SetBaudRate+0x4c>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	009a      	lsls	r2, r3, #2
 8001448:	441a      	add	r2, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4a1d      	ldr	r2, [pc, #116]	; (80014cc <USART_SetBaudRate+0xc4>)
 8001458:	fba2 2303 	umull	r2, r3, r2, r3
 800145c:	095b      	lsrs	r3, r3, #5
 800145e:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2264      	movs	r2, #100	; 0x64
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <USART_SetBaudRate+0x92>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	3332      	adds	r3, #50	; 0x32
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <USART_SetBaudRate+0xc4>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	095b      	lsrs	r3, r3, #5
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	e009      	b.n	80014ae <USART_SetBaudRate+0xa6>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	011b      	lsls	r3, r3, #4
 800149e:	3332      	adds	r3, #50	; 0x32
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <USART_SetBaudRate+0xc4>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]
}
 80014bc:	bf00      	nop
 80014be:	3724      	adds	r7, #36	; 0x24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	007a1200 	.word	0x007a1200
 80014cc:	51eb851f 	.word	0x51eb851f

080014d0 <USART_INIT>:


void USART_INIT(USART_Handle_t *pUSARTHandle){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	uint32_t tempreg=0;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
	//ENABLE PERIPHERAL
	USART1_PCLK_EN();
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <USART_INIT+0xa4>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <USART_INIT+0xa4>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d104      	bne.n	80014fa <USART_INIT+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	e010      	b.n	800151c <USART_INIT+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d104      	bne.n	800150c <USART_INIT+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	e007      	b.n	800151c <USART_INIT+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	791b      	ldrb	r3, [r3, #4]
 8001510:	2b02      	cmp	r3, #2
 8001512:	d103      	bne.n	800151c <USART_INIT+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f043 030c 	orr.w	r3, r3, #12
 800151a:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7b5b      	ldrb	r3, [r3, #13]
 8001520:	031b      	lsls	r3, r3, #12
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	60da      	str	r2, [r3, #12]

	tempreg=0;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	7b1b      	ldrb	r3, [r3, #12]
 800153a:	031b      	lsls	r3, r3, #12
 800153c:	461a      	mov	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4313      	orrs	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	611a      	str	r2, [r3, #16]


	//no hw flow control

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4619      	mov	r1, r3
 8001556:	4610      	mov	r0, r2
 8001558:	f7ff ff56 	bl	8001408 <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << 13);  // UE
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800156a:	60da      	str	r2, [r3, #12]
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800

08001578 <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8001590:	2301      	movs	r3, #1
 8001592:	e000      	b.n	8001596 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <USART_ReceiveData>:
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));

}

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e045      	b.n	800163e <USART_ReceiveData+0x9e>
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));
 80015b2:	bf00      	nop
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2120      	movs	r1, #32
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffdc 	bl	8001578 <USART_GetFlagStatus>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f6      	beq.n	80015b4 <USART_ReceiveData+0x14>

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	7b5b      	ldrb	r3, [r3, #13]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d11d      	bne.n	800160a <USART_ReceiveData+0x6a>
		{
			//We are going to receive 9bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	7b9b      	ldrb	r3, [r3, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10f      	bne.n	80015f6 <USART_ReceiveData+0x56>
			{
				//No parity is used , so all 9bits will be of user data

				//read only first 9 bits so mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	801a      	strh	r2, [r3, #0]

				//Now increment the pRxBuffer two times
				pRxBuffer++;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
				pRxBuffer++;
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	e020      	b.n	8001638 <USART_ReceiveData+0x98>
			}
			else
			{
				//Parity is used, so 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	e016      	b.n	8001638 <USART_ReceiveData+0x98>
		else
		{
			//We are going to receive 8bit data in a frame

			//Now, check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	7b9b      	ldrb	r3, [r3, #14]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <USART_ReceiveData+0x80>
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	701a      	strb	r2, [r3, #0]
 800161e:	e008      	b.n	8001632 <USART_ReceiveData+0x92>
			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	701a      	strb	r2, [r3, #0]

			}

			//Now , increment the pRxBuffer
			pRxBuffer++;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3301      	adds	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3b5      	bcc.n	80015b2 <USART_ReceiveData+0x12>
		}
	}

}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <init_random_seed>:
void Full_GP_TIM_Config(void);
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);
void Full_USART_Config(void);

void init_random_seed(void) {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	srand(129);  // Seed with x,y coords/angle
 8001654:	2081      	movs	r0, #129	; 0x81
 8001656:	f000 fb77 	bl	8001d48 <srand>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <get_random_duration>:

uint32_t get_random_duration(void) {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	return 250 + (rand() % 451);  // Between 50 - 200 ms lets say
 8001664:	f000 fb9e 	bl	8001da4 <rand>
 8001668:	4602      	mov	r2, r0
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <get_random_duration+0x28>)
 800166c:	fb83 1302 	smull	r1, r3, r3, r2
 8001670:	11d9      	asrs	r1, r3, #7
 8001672:	17d3      	asrs	r3, r2, #31
 8001674:	1acb      	subs	r3, r1, r3
 8001676:	f240 11c3 	movw	r1, #451	; 0x1c3
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	33fa      	adds	r3, #250	; 0xfa
	//what is maximum rand value?
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	48a8048b 	.word	0x48a8048b

0800168c <ms_delay>:

uint16_t calc_rotation(uint32_t duration_ms, float angular_velocity_dps) {
	return (uint16_t)((duration_ms / 1000.0f) * angular_velocity_dps);  // degrees = time * speed
}

void ms_delay(uint32_t time_ms) {
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i < time_ms * 1000; ++i) {
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e003      	b.n	80016a2 <ms_delay+0x16>
		__asm__("nop");
 800169a:	bf00      	nop
	for(volatile uint32_t i = 0; i < time_ms * 1000; ++i) {
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3301      	adds	r3, #1
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a8:	fb03 f202 	mul.w	r2, r3, r2
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d8f3      	bhi.n	800169a <ms_delay+0xe>
	}
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
	...

080016c0 <main>:
char msg[32] = "Password OK!\n";
uint8_t password = 0;



int main(void) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

	Full_RCC_Config();
 80016c4:	f000 f8a6 	bl	8001814 <Full_RCC_Config>
	Full_AD_TIM_Config();
 80016c8:	f000 f9dc 	bl	8001a84 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 80016cc:	f000 f8ba 	bl	8001844 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 80016d0:	f000 f9a0 	bl	8001a14 <Full_GP_TIM_Config>
	Full_USART_Config();
 80016d4:	f000 f9fe 	bl	8001ad4 <Full_USART_Config>
	Full_I2C_Config();
 80016d8:	f000 f9e6 	bl	8001aa8 <Full_I2C_Config>
	init_random_seed();
 80016dc:	f7ff ffb8 	bl	8001650 <init_random_seed>

//	while(1){
//		GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
//		ms_delay(1000);
//	}
	ms_delay(500);
 80016e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016e4:	f7ff ffd2 	bl	800168c <ms_delay>
	//current_state == STATE_DRIVING;

	//when wall is sensed
	while (1)
	{
		if(current_state == STATE_DRIVING)
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <main+0x80>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d023      	beq.n	8001738 <main+0x78>
			//INCREMENT = accel_g  * 10 ms
			//			float angle_rad = ANGLE * (M_PI / 180.0f);
			//			X_POINT += (int16_t)(INCREMENT * sinf(angle_rad));
			//			Y_POINT += (int16_t)(INCREMENT * cosf(angle_rad));
		}
		else if(current_state == STATE_TURNING)
 80016f0:	4b13      	ldr	r3, [pc, #76]	; (8001740 <main+0x80>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d01f      	beq.n	8001738 <main+0x78>
		{
			//float gyro_dps = raw_gyro / 65.5f;  // if FSR = ±500°/s
			//angular_velocity = read_w_gyro(); => Z, last 2 bytes of the 6 read
			//ANGLE = (ANGLE + calc_rotation(10ms,w))%360;
		}
		else if(current_state == STATE_IDLE)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <main+0x80>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d11b      	bne.n	8001738 <main+0x78>
		{
			USART_ReceiveData(&USART1_TXRX, &password, 1);
 8001700:	2201      	movs	r2, #1
 8001702:	4910      	ldr	r1, [pc, #64]	; (8001744 <main+0x84>)
 8001704:	4810      	ldr	r0, [pc, #64]	; (8001748 <main+0x88>)
 8001706:	f7ff ff4b 	bl	80015a0 <USART_ReceiveData>
			//will block here until it receives data
			GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 800170a:	210d      	movs	r1, #13
 800170c:	480f      	ldr	r0, [pc, #60]	; (800174c <main+0x8c>)
 800170e:	f7ff fa70 	bl	8000bf2 <GPIO_Toggle_Pin>
			if(password == START_PSW)
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <main+0x84>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d10e      	bne.n	8001738 <main+0x78>
			{
				//START CONDITION basically

				current_state = STATE_DRIVING;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <main+0x80>)
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
				drive_FWD(&TIM2_PWM);
 8001720:	480b      	ldr	r0, [pc, #44]	; (8001750 <main+0x90>)
 8001722:	f7ff fb5f 	bl	8000de4 <drive_FWD>
				GPIO_IRQInterruptConfig(EXTI4_IRQ, ENABLE);
 8001726:	2101      	movs	r1, #1
 8001728:	200a      	movs	r0, #10
 800172a:	f7ff fa7b 	bl	8000c24 <GPIO_IRQInterruptConfig>
				GPIO_Write_Pin(GPIOC, GPIO_PIN_NO_13, DISABLE);
 800172e:	2200      	movs	r2, #0
 8001730:	210d      	movs	r1, #13
 8001732:	4806      	ldr	r0, [pc, #24]	; (800174c <main+0x8c>)
 8001734:	f7ff fa24 	bl	8000b80 <GPIO_Write_Pin>


			}
		}
		//srand(X_POINT%Y_POINT*ANGLE);
		ms_delay(10);
 8001738:	200a      	movs	r0, #10
 800173a:	f7ff ffa7 	bl	800168c <ms_delay>
		if(current_state == STATE_DRIVING)
 800173e:	e7d3      	b.n	80016e8 <main+0x28>
 8001740:	20000080 	.word	0x20000080
 8001744:	2000010c 	.word	0x2000010c
 8001748:	200000e8 	.word	0x200000e8
 800174c:	40020800 	.word	0x40020800
 8001750:	20000084 	.word	0x20000084

08001754 <EXTI4_IRQHandler>:
}



void  EXTI4_IRQHandler(void) //WALL SENSED
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
	stop_FWD(&TIM2_PWM);
 800175a:	4819      	ldr	r0, [pc, #100]	; (80017c0 <EXTI4_IRQHandler+0x6c>)
 800175c:	f7ff fb75 	bl	8000e4a <stop_FWD>
	//stop_FWD(&TIM2_PWM);
	//GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
	//ms_delay(100);


	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8001760:	2004      	movs	r0, #4
 8001762:	f7ff fae3 	bl	8000d2c <GPIO_IRQHandling>
	ms_delay(400);
 8001766:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800176a:	f7ff ff8f 	bl	800168c <ms_delay>
	uint32_t turn_duration = get_random_duration();
 800176e:	f7ff ff77 	bl	8001660 <get_random_duration>
 8001772:	6078      	str	r0, [r7, #4]

	if(!GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 8001774:	2104      	movs	r1, #4
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <EXTI4_IRQHandler+0x70>)
 8001778:	f7ff fa26 	bl	8000bc8 <GPIO_Read_Pin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d114      	bne.n	80017ac <EXTI4_IRQHandler+0x58>
		GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,DISABLE);
 8001782:	2200      	movs	r2, #0
 8001784:	210d      	movs	r1, #13
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <EXTI4_IRQHandler+0x74>)
 8001788:	f7ff f9fa 	bl	8000b80 <GPIO_Write_Pin>
		current_state = STATE_TURNING;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <EXTI4_IRQHandler+0x78>)
 800178e:	2202      	movs	r2, #2
 8001790:	701a      	strb	r2, [r3, #0]

		if(!(turn_duration % 2))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <EXTI4_IRQHandler+0x50>
		{
			turn_RGT(&TIM2_PWM);
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <EXTI4_IRQHandler+0x6c>)
 800179e:	f7ff fb78 	bl	8000e92 <turn_RGT>
	{
		AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,turn_duration);
		//increment angle for timer duration
	}

}
 80017a2:	e009      	b.n	80017b8 <EXTI4_IRQHandler+0x64>
			turn_LFT(&TIM2_PWM);
 80017a4:	4806      	ldr	r0, [pc, #24]	; (80017c0 <EXTI4_IRQHandler+0x6c>)
 80017a6:	f7ff fba7 	bl	8000ef8 <turn_LFT>
}
 80017aa:	e005      	b.n	80017b8 <EXTI4_IRQHandler+0x64>
		AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,turn_duration);
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <EXTI4_IRQHandler+0x7c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fc14 	bl	8000fe0 <AD_TIM_Start_Countdown>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000084 	.word	0x20000084
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020800 	.word	0x40020800
 80017cc:	20000080 	.word	0x20000080
 80017d0:	200000a0 	.word	0x200000a0

080017d4 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void) //ROTATION TIME OVER
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	//	}
	//walls still sensed
	//turn until they are gone
	//bad in interrupt but it is a good failsafe if car is stuck

	GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,ENABLE);
 80017d8:	2201      	movs	r2, #1
 80017da:	210d      	movs	r1, #13
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80017de:	f7ff f9cf 	bl	8000b80 <GPIO_Write_Pin>

	current_state = STATE_DRIVING;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <TIM1_UP_TIM10_IRQHandler+0x34>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
	drive_FWD(&TIM2_PWM);
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <TIM1_UP_TIM10_IRQHandler+0x38>)
 80017ea:	f7ff fafb 	bl	8000de4 <drive_FWD>

	TIM1_CDN.pTIMx->SR &= ~TIM_SR_UIF;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0201 	bic.w	r2, r2, #1
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020800 	.word	0x40020800
 8001808:	20000080 	.word	0x20000080
 800180c:	20000084 	.word	0x20000084
 8001810:	200000a0 	.word	0x200000a0

08001814 <Full_RCC_Config>:


void Full_RCC_Config(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <Full_RCC_Config+0x2c>)
 800181c:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 800181e:	2300      	movs	r3, #0
 8001820:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 8001826:	2304      	movs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 800182a:	2304      	movs	r3, #4
 800182c:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 800182e:	463b      	mov	r3, r7
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb94 	bl	8000f5e <RCC_Clock_Config>
}
 8001836:	bf00      	nop
 8001838:	3720      	adds	r7, #32
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 8001844:	b580      	push	{r7, lr}
 8001846:	b09e      	sub	sp, #120	; 0x78
 8001848:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <Full_GPIO_Config+0x1c4>)
 800184c:	66fb      	str	r3, [r7, #108]	; 0x6c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800184e:	230d      	movs	r3, #13
 8001850:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001854:	2301      	movs	r3, #1
 8001856:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PB0 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 800186e:	663b      	str	r3, [r7, #96]	; 0x60
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8001870:	2304      	movs	r3, #4
 8001872:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RFT;
 8001876:	2306      	movs	r3, #6
 8001878:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// UART CONFIG
	// GPIO Configuration for UART_TX PA9 = UART_TX
	GPIO_Handle_t GpioTX;
	GpioTX.pGPIOx = GPIOA;
 8001888:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 800188a:	657b      	str	r3, [r7, #84]	; 0x54
	GpioTX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800188c:	2309      	movs	r3, #9
 800188e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	GpioTX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 8001892:	2302      	movs	r3, #2
 8001894:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	GpioTX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8001898:	2307      	movs	r3, #7
 800189a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GpioTX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	GpioTX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80018a4:	2301      	movs	r3, #1
 80018a6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	// GPIO Configuration for GpioSensor PA10 = UART_RX
	GPIO_Handle_t GpioRX;
	GpioRX.pGPIOx = GPIOA;
 80018aa:	4b58      	ldr	r3, [pc, #352]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
	GpioRX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 80018ae:	230a      	movs	r3, #10
 80018b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GpioRX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 80018b4:	2302      	movs	r3, #2
 80018b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	GpioRX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 80018ba:	2307      	movs	r3, #7
 80018bc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioRX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	GpioRX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 80018cc:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 80018ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80018dc:	2303      	movs	r3, #3
 80018de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80018f4:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80018fe:	2302      	movs	r3, #2
 8001900:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001904:	2303      	movs	r3, #3
 8001906:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800190a:	2300      	movs	r3, #0
 800190c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001910:	2301      	movs	r3, #1
 8001912:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001916:	2300      	movs	r3, #0
 8001918:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <Full_GPIO_Config+0x1cc>)
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001920:	2303      	movs	r3, #3
 8001922:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001926:	2302      	movs	r3, #2
 8001928:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800192c:	2303      	movs	r3, #3
 800192e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001932:	2300      	movs	r3, #0
 8001934:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8001938:	2301      	movs	r3, #1
 800193a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800193e:	2300      	movs	r3, #0
 8001940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <Full_GPIO_Config+0x1c8>)
 8001946:	61bb      	str	r3, [r7, #24]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8001948:	2300      	movs	r3, #0
 800194a:	773b      	strb	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800194c:	2302      	movs	r3, #2
 800194e:	777b      	strb	r3, [r7, #29]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001950:	2303      	movs	r3, #3
 8001952:	77bb      	strb	r3, [r7, #30]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800195a:	2301      	movs	r3, #1
 800195c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8001964:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <Full_GPIO_Config+0x1cc>)
 8001966:	60fb      	str	r3, [r7, #12]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8001968:	2306      	movs	r3, #6
 800196a:	743b      	strb	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800196c:	2302      	movs	r3, #2
 800196e:	747b      	strb	r3, [r7, #17]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001970:	2303      	movs	r3, #3
 8001972:	74bb      	strb	r3, [r7, #18]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001974:	2300      	movs	r3, #0
 8001976:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 8001978:	2304      	movs	r3, #4
 800197a:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800197c:	2300      	movs	r3, #0
 800197e:	74fb      	strb	r3, [r7, #19]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <Full_GPIO_Config+0x1cc>)
 8001982:	603b      	str	r3, [r7, #0]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001984:	2307      	movs	r3, #7
 8001986:	713b      	strb	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001988:	2302      	movs	r3, #2
 800198a:	717b      	strb	r3, [r7, #5]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 800198c:	2303      	movs	r3, #3
 800198e:	71bb      	strb	r3, [r7, #6]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001990:	2300      	movs	r3, #0
 8001992:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8001994:	2304      	movs	r3, #4
 8001996:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001998:	2300      	movs	r3, #0
 800199a:	71fb      	strb	r3, [r7, #7]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 800199c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe ff8b 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSensor);
 80019a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe ff86 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH3);
 80019b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe ff81 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH2);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe ff7c 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH1);
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe ff77 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH4);
 80019ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe ff72 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSCL);
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe ff6d 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80019e2:	463b      	mov	r3, r7
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe ff69 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioTX);
 80019ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe ff64 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioRX);
 80019f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe ff5f 	bl	80008bc <GPIO_Init>

	//GPIO_IRQInterruptConfig(EXTI15_10_IRQ, ENABLE);
}
 80019fe:	bf00      	nop
 8001a00:	3778      	adds	r7, #120	; 0x78
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40020400 	.word	0x40020400

08001a14 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 8001a18:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a1e:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 6;
 8001a20:	4b17      	ldr	r3, [pc, #92]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a22:	2206      	movs	r2, #6
 8001a24:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 6400;
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a28:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001a2c:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a30:	2201      	movs	r2, #1
 8001a32:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = 10;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a3c:	220a      	movs	r2, #10
 8001a3e:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = 10;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a4e:	220a      	movs	r2, #10
 8001a50:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = 10;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a60:	220a      	movs	r2, #10
 8001a62:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = 10;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a72:	220a      	movs	r2, #10
 8001a74:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <Full_GP_TIM_Config+0x6c>)
 8001a78:	f7ff fb3a 	bl	80010f0 <GP_TIM_PWM_INIT>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000084 	.word	0x20000084

08001a84 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_CDN.pTIMx = TIM1;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <Full_AD_TIM_Config+0x1c>)
 8001a8a:	4a06      	ldr	r2, [pc, #24]	; (8001aa4 <Full_AD_TIM_Config+0x20>)
 8001a8c:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_CDN.AD_TIM_Config.Prescaler = PRESCALER_16K;
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <Full_AD_TIM_Config+0x1c>)
 8001a90:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001a94:	809a      	strh	r2, [r3, #4]
	AD_TIM_CDN_INIT(&TIM1_CDN);
 8001a96:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <Full_AD_TIM_Config+0x1c>)
 8001a98:	f7ff fadc 	bl	8001054 <AD_TIM_CDN_INIT>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200000a0 	.word	0x200000a0
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <Full_I2C_Config>:

void Full_I2C_Config(void){
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <Full_I2C_Config+0x20>)
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <Full_I2C_Config+0x24>)
 8001ab0:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <Full_I2C_Config+0x20>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <Full_I2C_Config+0x20>)
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <Full_I2C_Config+0x28>)
 8001abc:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 8001abe:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <Full_I2C_Config+0x20>)
 8001ac0:	f7ff f954 	bl	8000d6c <I2C_SM_INIT>
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200000c0 	.word	0x200000c0
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	000186a0 	.word	0x000186a0

08001ad4 <Full_USART_Config>:

void Full_USART_Config(void){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

	USART1_TXRX.pUSARTx = USART1;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <Full_USART_Config+0x34>)
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <Full_USART_Config+0x38>)
 8001adc:	601a      	str	r2, [r3, #0]
	USART1_TXRX.USART_Config.USART_Mode = USART_MODE_TXRX;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <Full_USART_Config+0x34>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	711a      	strb	r2, [r3, #4]
	USART1_TXRX.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <Full_USART_Config+0x34>)
 8001ae6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001aea:	609a      	str	r2, [r3, #8]
	USART1_TXRX.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <Full_USART_Config+0x34>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	735a      	strb	r2, [r3, #13]
	USART1_TXRX.USART_Config.USART_NoOfStopBits	= USART_STOPBITS_1;
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <Full_USART_Config+0x34>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	731a      	strb	r2, [r3, #12]
	USART1_TXRX.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8001af8:	4b03      	ldr	r3, [pc, #12]	; (8001b08 <Full_USART_Config+0x34>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	739a      	strb	r2, [r3, #14]
	//enable peripheral via cr1?

	USART_INIT(&USART1_TXRX);
 8001afe:	4802      	ldr	r0, [pc, #8]	; (8001b08 <Full_USART_Config+0x34>)
 8001b00:	f7ff fce6 	bl	80014d0 <USART_INIT>
	//USART1_TXRX.pUSARTx->CR1 |= (1 << 13);
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000e8 	.word	0x200000e8
 8001b0c:	40011000 	.word	0x40011000

08001b10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <_kill>:

int _kill(int pid, int sig)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b28:	f000 f8dc 	bl	8001ce4 <__errno>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2216      	movs	r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
  return -1;
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <_exit>:

void _exit (int status)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b46:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffe7 	bl	8001b1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b50:	e7fe      	b.n	8001b50 <_exit+0x12>

08001b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e00a      	b.n	8001b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b64:	f3af 8000 	nop.w
 8001b68:	4601      	mov	r1, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	60ba      	str	r2, [r7, #8]
 8001b70:	b2ca      	uxtb	r2, r1
 8001b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3301      	adds	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	dbf0      	blt.n	8001b64 <_read+0x12>
  }

  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e009      	b.n	8001bb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1c5a      	adds	r2, r3, #1
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf1      	blt.n	8001b9e <_write+0x12>
  }
  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_close>:

int _close(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr

08001bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bea:	605a      	str	r2, [r3, #4]
  return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c2c:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <_sbrk+0x5c>)
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <_sbrk+0x60>)
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c38:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <_sbrk+0x64>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <_sbrk+0x68>)
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d207      	bcs.n	8001c64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c54:	f000 f846 	bl	8001ce4 <__errno>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c62:	e009      	b.n	8001c78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <_sbrk+0x64>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <_sbrk+0x64>)
 8001c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20018000 	.word	0x20018000
 8001c84:	00000400 	.word	0x00000400
 8001c88:	20000110 	.word	0x20000110
 8001c8c:	20000128 	.word	0x20000128

08001c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8001c9a:	490d      	ldr	r1, [pc, #52]	; (8001cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <LoopForever+0xe>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca0:	e002      	b.n	8001ca8 <LoopCopyDataInit>

08001ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ca6:	3304      	adds	r3, #4

08001ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cac:	d3f9      	bcc.n	8001ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cae:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cb0:	4c0a      	ldr	r4, [pc, #40]	; (8001cdc <LoopForever+0x16>)
  movs r3, #0
 8001cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cb4:	e001      	b.n	8001cba <LoopFillZerobss>

08001cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb8:	3204      	adds	r2, #4

08001cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cbc:	d3fb      	bcc.n	8001cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001cbe:	f000 f817 	bl	8001cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cc2:	f7ff fcfd 	bl	80016c0 <main>

08001cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8001cc6:	e7fe      	b.n	8001cc6 <LoopForever>
  ldr   r0, =_estack
 8001cc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001cd4:	08002f6c 	.word	0x08002f6c
  ldr r2, =_sbss
 8001cd8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001cdc:	20000124 	.word	0x20000124

08001ce0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce0:	e7fe      	b.n	8001ce0 <ADC_IRQHandler>
	...

08001ce4 <__errno>:
 8001ce4:	4b01      	ldr	r3, [pc, #4]	; (8001cec <__errno+0x8>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000000 	.word	0x20000000

08001cf0 <__libc_init_array>:
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	4d0d      	ldr	r5, [pc, #52]	; (8001d28 <__libc_init_array+0x38>)
 8001cf4:	4c0d      	ldr	r4, [pc, #52]	; (8001d2c <__libc_init_array+0x3c>)
 8001cf6:	1b64      	subs	r4, r4, r5
 8001cf8:	10a4      	asrs	r4, r4, #2
 8001cfa:	2600      	movs	r6, #0
 8001cfc:	42a6      	cmp	r6, r4
 8001cfe:	d109      	bne.n	8001d14 <__libc_init_array+0x24>
 8001d00:	4d0b      	ldr	r5, [pc, #44]	; (8001d30 <__libc_init_array+0x40>)
 8001d02:	4c0c      	ldr	r4, [pc, #48]	; (8001d34 <__libc_init_array+0x44>)
 8001d04:	f001 f87e 	bl	8002e04 <_init>
 8001d08:	1b64      	subs	r4, r4, r5
 8001d0a:	10a4      	asrs	r4, r4, #2
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	42a6      	cmp	r6, r4
 8001d10:	d105      	bne.n	8001d1e <__libc_init_array+0x2e>
 8001d12:	bd70      	pop	{r4, r5, r6, pc}
 8001d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d18:	4798      	blx	r3
 8001d1a:	3601      	adds	r6, #1
 8001d1c:	e7ee      	b.n	8001cfc <__libc_init_array+0xc>
 8001d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d22:	4798      	blx	r3
 8001d24:	3601      	adds	r6, #1
 8001d26:	e7f2      	b.n	8001d0e <__libc_init_array+0x1e>
 8001d28:	08002f64 	.word	0x08002f64
 8001d2c:	08002f64 	.word	0x08002f64
 8001d30:	08002f64 	.word	0x08002f64
 8001d34:	08002f68 	.word	0x08002f68

08001d38 <memset>:
 8001d38:	4402      	add	r2, r0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <memset+0xa>
 8001d40:	4770      	bx	lr
 8001d42:	f803 1b01 	strb.w	r1, [r3], #1
 8001d46:	e7f9      	b.n	8001d3c <memset+0x4>

08001d48 <srand>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <srand+0x44>)
 8001d4c:	681d      	ldr	r5, [r3, #0]
 8001d4e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001d50:	4604      	mov	r4, r0
 8001d52:	b9b3      	cbnz	r3, 8001d82 <srand+0x3a>
 8001d54:	2018      	movs	r0, #24
 8001d56:	f000 f893 	bl	8001e80 <malloc>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	63a8      	str	r0, [r5, #56]	; 0x38
 8001d5e:	b920      	cbnz	r0, 8001d6a <srand+0x22>
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <srand+0x48>)
 8001d62:	480c      	ldr	r0, [pc, #48]	; (8001d94 <srand+0x4c>)
 8001d64:	2142      	movs	r1, #66	; 0x42
 8001d66:	f000 f85b 	bl	8001e20 <__assert_func>
 8001d6a:	490b      	ldr	r1, [pc, #44]	; (8001d98 <srand+0x50>)
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <srand+0x54>)
 8001d6e:	e9c0 1300 	strd	r1, r3, [r0]
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <srand+0x58>)
 8001d74:	6083      	str	r3, [r0, #8]
 8001d76:	230b      	movs	r3, #11
 8001d78:	8183      	strh	r3, [r0, #12]
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001d84:	2200      	movs	r2, #0
 8001d86:	611c      	str	r4, [r3, #16]
 8001d88:	615a      	str	r2, [r3, #20]
 8001d8a:	bd38      	pop	{r3, r4, r5, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	08002e20 	.word	0x08002e20
 8001d94:	08002e37 	.word	0x08002e37
 8001d98:	abcd330e 	.word	0xabcd330e
 8001d9c:	e66d1234 	.word	0xe66d1234
 8001da0:	0005deec 	.word	0x0005deec

08001da4 <rand>:
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <rand+0x5c>)
 8001da6:	b510      	push	{r4, lr}
 8001da8:	681c      	ldr	r4, [r3, #0]
 8001daa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dac:	b9b3      	cbnz	r3, 8001ddc <rand+0x38>
 8001dae:	2018      	movs	r0, #24
 8001db0:	f000 f866 	bl	8001e80 <malloc>
 8001db4:	4602      	mov	r2, r0
 8001db6:	63a0      	str	r0, [r4, #56]	; 0x38
 8001db8:	b920      	cbnz	r0, 8001dc4 <rand+0x20>
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <rand+0x60>)
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <rand+0x64>)
 8001dbe:	214e      	movs	r1, #78	; 0x4e
 8001dc0:	f000 f82e 	bl	8001e20 <__assert_func>
 8001dc4:	4911      	ldr	r1, [pc, #68]	; (8001e0c <rand+0x68>)
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <rand+0x6c>)
 8001dc8:	e9c0 1300 	strd	r1, r3, [r0]
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <rand+0x70>)
 8001dce:	6083      	str	r3, [r0, #8]
 8001dd0:	230b      	movs	r3, #11
 8001dd2:	8183      	strh	r3, [r0, #12]
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001ddc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <rand+0x74>)
 8001de0:	6920      	ldr	r0, [r4, #16]
 8001de2:	6963      	ldr	r3, [r4, #20]
 8001de4:	490d      	ldr	r1, [pc, #52]	; (8001e1c <rand+0x78>)
 8001de6:	4342      	muls	r2, r0
 8001de8:	fb01 2203 	mla	r2, r1, r3, r2
 8001dec:	fba0 0101 	umull	r0, r1, r0, r1
 8001df0:	1c43      	adds	r3, r0, #1
 8001df2:	eb42 0001 	adc.w	r0, r2, r1
 8001df6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001dfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	08002e20 	.word	0x08002e20
 8001e08:	08002e37 	.word	0x08002e37
 8001e0c:	abcd330e 	.word	0xabcd330e
 8001e10:	e66d1234 	.word	0xe66d1234
 8001e14:	0005deec 	.word	0x0005deec
 8001e18:	5851f42d 	.word	0x5851f42d
 8001e1c:	4c957f2d 	.word	0x4c957f2d

08001e20 <__assert_func>:
 8001e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e22:	4614      	mov	r4, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <__assert_func+0x2c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4605      	mov	r5, r0
 8001e2c:	68d8      	ldr	r0, [r3, #12]
 8001e2e:	b14c      	cbz	r4, 8001e44 <__assert_func+0x24>
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <__assert_func+0x30>)
 8001e32:	9100      	str	r1, [sp, #0]
 8001e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001e38:	4906      	ldr	r1, [pc, #24]	; (8001e54 <__assert_func+0x34>)
 8001e3a:	462b      	mov	r3, r5
 8001e3c:	f000 f80e 	bl	8001e5c <fiprintf>
 8001e40:	f000 fcc0 	bl	80027c4 <abort>
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <__assert_func+0x38>)
 8001e46:	461c      	mov	r4, r3
 8001e48:	e7f3      	b.n	8001e32 <__assert_func+0x12>
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	08002e92 	.word	0x08002e92
 8001e54:	08002e9f 	.word	0x08002e9f
 8001e58:	08002ecd 	.word	0x08002ecd

08001e5c <fiprintf>:
 8001e5c:	b40e      	push	{r1, r2, r3}
 8001e5e:	b503      	push	{r0, r1, lr}
 8001e60:	4601      	mov	r1, r0
 8001e62:	ab03      	add	r3, sp, #12
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <fiprintf+0x20>)
 8001e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e6a:	6800      	ldr	r0, [r0, #0]
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f000 f915 	bl	800209c <_vfiprintf_r>
 8001e72:	b002      	add	sp, #8
 8001e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e78:	b003      	add	sp, #12
 8001e7a:	4770      	bx	lr
 8001e7c:	20000000 	.word	0x20000000

08001e80 <malloc>:
 8001e80:	4b02      	ldr	r3, [pc, #8]	; (8001e8c <malloc+0xc>)
 8001e82:	4601      	mov	r1, r0
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f000 b86d 	b.w	8001f64 <_malloc_r>
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000

08001e90 <_free_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4605      	mov	r5, r0
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d041      	beq.n	8001f1c <_free_r+0x8c>
 8001e98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e9c:	1f0c      	subs	r4, r1, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bfb8      	it	lt
 8001ea2:	18e4      	addlt	r4, r4, r3
 8001ea4:	f000 feb2 	bl	8002c0c <__malloc_lock>
 8001ea8:	4a1d      	ldr	r2, [pc, #116]	; (8001f20 <_free_r+0x90>)
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	b933      	cbnz	r3, 8001ebc <_free_r+0x2c>
 8001eae:	6063      	str	r3, [r4, #4]
 8001eb0:	6014      	str	r4, [r2, #0]
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb8:	f000 beae 	b.w	8002c18 <__malloc_unlock>
 8001ebc:	42a3      	cmp	r3, r4
 8001ebe:	d908      	bls.n	8001ed2 <_free_r+0x42>
 8001ec0:	6820      	ldr	r0, [r4, #0]
 8001ec2:	1821      	adds	r1, r4, r0
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	bf01      	itttt	eq
 8001ec8:	6819      	ldreq	r1, [r3, #0]
 8001eca:	685b      	ldreq	r3, [r3, #4]
 8001ecc:	1809      	addeq	r1, r1, r0
 8001ece:	6021      	streq	r1, [r4, #0]
 8001ed0:	e7ed      	b.n	8001eae <_free_r+0x1e>
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	b10b      	cbz	r3, 8001edc <_free_r+0x4c>
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	d9fa      	bls.n	8001ed2 <_free_r+0x42>
 8001edc:	6811      	ldr	r1, [r2, #0]
 8001ede:	1850      	adds	r0, r2, r1
 8001ee0:	42a0      	cmp	r0, r4
 8001ee2:	d10b      	bne.n	8001efc <_free_r+0x6c>
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	4401      	add	r1, r0
 8001ee8:	1850      	adds	r0, r2, r1
 8001eea:	4283      	cmp	r3, r0
 8001eec:	6011      	str	r1, [r2, #0]
 8001eee:	d1e0      	bne.n	8001eb2 <_free_r+0x22>
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	6053      	str	r3, [r2, #4]
 8001ef6:	4401      	add	r1, r0
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	e7da      	b.n	8001eb2 <_free_r+0x22>
 8001efc:	d902      	bls.n	8001f04 <_free_r+0x74>
 8001efe:	230c      	movs	r3, #12
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	e7d6      	b.n	8001eb2 <_free_r+0x22>
 8001f04:	6820      	ldr	r0, [r4, #0]
 8001f06:	1821      	adds	r1, r4, r0
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	bf04      	itt	eq
 8001f0c:	6819      	ldreq	r1, [r3, #0]
 8001f0e:	685b      	ldreq	r3, [r3, #4]
 8001f10:	6063      	str	r3, [r4, #4]
 8001f12:	bf04      	itt	eq
 8001f14:	1809      	addeq	r1, r1, r0
 8001f16:	6021      	streq	r1, [r4, #0]
 8001f18:	6054      	str	r4, [r2, #4]
 8001f1a:	e7ca      	b.n	8001eb2 <_free_r+0x22>
 8001f1c:	bd38      	pop	{r3, r4, r5, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000114 	.word	0x20000114

08001f24 <sbrk_aligned>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4e0e      	ldr	r6, [pc, #56]	; (8001f60 <sbrk_aligned+0x3c>)
 8001f28:	460c      	mov	r4, r1
 8001f2a:	6831      	ldr	r1, [r6, #0]
 8001f2c:	4605      	mov	r5, r0
 8001f2e:	b911      	cbnz	r1, 8001f36 <sbrk_aligned+0x12>
 8001f30:	f000 fb78 	bl	8002624 <_sbrk_r>
 8001f34:	6030      	str	r0, [r6, #0]
 8001f36:	4621      	mov	r1, r4
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f000 fb73 	bl	8002624 <_sbrk_r>
 8001f3e:	1c43      	adds	r3, r0, #1
 8001f40:	d00a      	beq.n	8001f58 <sbrk_aligned+0x34>
 8001f42:	1cc4      	adds	r4, r0, #3
 8001f44:	f024 0403 	bic.w	r4, r4, #3
 8001f48:	42a0      	cmp	r0, r4
 8001f4a:	d007      	beq.n	8001f5c <sbrk_aligned+0x38>
 8001f4c:	1a21      	subs	r1, r4, r0
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 fb68 	bl	8002624 <_sbrk_r>
 8001f54:	3001      	adds	r0, #1
 8001f56:	d101      	bne.n	8001f5c <sbrk_aligned+0x38>
 8001f58:	f04f 34ff 	mov.w	r4, #4294967295
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	20000118 	.word	0x20000118

08001f64 <_malloc_r>:
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f68:	1ccd      	adds	r5, r1, #3
 8001f6a:	f025 0503 	bic.w	r5, r5, #3
 8001f6e:	3508      	adds	r5, #8
 8001f70:	2d0c      	cmp	r5, #12
 8001f72:	bf38      	it	cc
 8001f74:	250c      	movcc	r5, #12
 8001f76:	2d00      	cmp	r5, #0
 8001f78:	4607      	mov	r7, r0
 8001f7a:	db01      	blt.n	8001f80 <_malloc_r+0x1c>
 8001f7c:	42a9      	cmp	r1, r5
 8001f7e:	d905      	bls.n	8001f8c <_malloc_r+0x28>
 8001f80:	230c      	movs	r3, #12
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	2600      	movs	r6, #0
 8001f86:	4630      	mov	r0, r6
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f8c:	4e2e      	ldr	r6, [pc, #184]	; (8002048 <_malloc_r+0xe4>)
 8001f8e:	f000 fe3d 	bl	8002c0c <__malloc_lock>
 8001f92:	6833      	ldr	r3, [r6, #0]
 8001f94:	461c      	mov	r4, r3
 8001f96:	bb34      	cbnz	r4, 8001fe6 <_malloc_r+0x82>
 8001f98:	4629      	mov	r1, r5
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	f7ff ffc2 	bl	8001f24 <sbrk_aligned>
 8001fa0:	1c43      	adds	r3, r0, #1
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	d14d      	bne.n	8002042 <_malloc_r+0xde>
 8001fa6:	6834      	ldr	r4, [r6, #0]
 8001fa8:	4626      	mov	r6, r4
 8001faa:	2e00      	cmp	r6, #0
 8001fac:	d140      	bne.n	8002030 <_malloc_r+0xcc>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	4631      	mov	r1, r6
 8001fb2:	4638      	mov	r0, r7
 8001fb4:	eb04 0803 	add.w	r8, r4, r3
 8001fb8:	f000 fb34 	bl	8002624 <_sbrk_r>
 8001fbc:	4580      	cmp	r8, r0
 8001fbe:	d13a      	bne.n	8002036 <_malloc_r+0xd2>
 8001fc0:	6821      	ldr	r1, [r4, #0]
 8001fc2:	3503      	adds	r5, #3
 8001fc4:	1a6d      	subs	r5, r5, r1
 8001fc6:	f025 0503 	bic.w	r5, r5, #3
 8001fca:	3508      	adds	r5, #8
 8001fcc:	2d0c      	cmp	r5, #12
 8001fce:	bf38      	it	cc
 8001fd0:	250c      	movcc	r5, #12
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	f7ff ffa5 	bl	8001f24 <sbrk_aligned>
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d02b      	beq.n	8002036 <_malloc_r+0xd2>
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	442b      	add	r3, r5
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	e00e      	b.n	8002004 <_malloc_r+0xa0>
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	1b52      	subs	r2, r2, r5
 8001fea:	d41e      	bmi.n	800202a <_malloc_r+0xc6>
 8001fec:	2a0b      	cmp	r2, #11
 8001fee:	d916      	bls.n	800201e <_malloc_r+0xba>
 8001ff0:	1961      	adds	r1, r4, r5
 8001ff2:	42a3      	cmp	r3, r4
 8001ff4:	6025      	str	r5, [r4, #0]
 8001ff6:	bf18      	it	ne
 8001ff8:	6059      	strne	r1, [r3, #4]
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	bf08      	it	eq
 8001ffe:	6031      	streq	r1, [r6, #0]
 8002000:	5162      	str	r2, [r4, r5]
 8002002:	604b      	str	r3, [r1, #4]
 8002004:	4638      	mov	r0, r7
 8002006:	f104 060b 	add.w	r6, r4, #11
 800200a:	f000 fe05 	bl	8002c18 <__malloc_unlock>
 800200e:	f026 0607 	bic.w	r6, r6, #7
 8002012:	1d23      	adds	r3, r4, #4
 8002014:	1af2      	subs	r2, r6, r3
 8002016:	d0b6      	beq.n	8001f86 <_malloc_r+0x22>
 8002018:	1b9b      	subs	r3, r3, r6
 800201a:	50a3      	str	r3, [r4, r2]
 800201c:	e7b3      	b.n	8001f86 <_malloc_r+0x22>
 800201e:	6862      	ldr	r2, [r4, #4]
 8002020:	42a3      	cmp	r3, r4
 8002022:	bf0c      	ite	eq
 8002024:	6032      	streq	r2, [r6, #0]
 8002026:	605a      	strne	r2, [r3, #4]
 8002028:	e7ec      	b.n	8002004 <_malloc_r+0xa0>
 800202a:	4623      	mov	r3, r4
 800202c:	6864      	ldr	r4, [r4, #4]
 800202e:	e7b2      	b.n	8001f96 <_malloc_r+0x32>
 8002030:	4634      	mov	r4, r6
 8002032:	6876      	ldr	r6, [r6, #4]
 8002034:	e7b9      	b.n	8001faa <_malloc_r+0x46>
 8002036:	230c      	movs	r3, #12
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4638      	mov	r0, r7
 800203c:	f000 fdec 	bl	8002c18 <__malloc_unlock>
 8002040:	e7a1      	b.n	8001f86 <_malloc_r+0x22>
 8002042:	6025      	str	r5, [r4, #0]
 8002044:	e7de      	b.n	8002004 <_malloc_r+0xa0>
 8002046:	bf00      	nop
 8002048:	20000114 	.word	0x20000114

0800204c <__sfputc_r>:
 800204c:	6893      	ldr	r3, [r2, #8]
 800204e:	3b01      	subs	r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	b410      	push	{r4}
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	da07      	bge.n	8002068 <__sfputc_r+0x1c>
 8002058:	6994      	ldr	r4, [r2, #24]
 800205a:	42a3      	cmp	r3, r4
 800205c:	db01      	blt.n	8002062 <__sfputc_r+0x16>
 800205e:	290a      	cmp	r1, #10
 8002060:	d102      	bne.n	8002068 <__sfputc_r+0x1c>
 8002062:	bc10      	pop	{r4}
 8002064:	f000 baee 	b.w	8002644 <__swbuf_r>
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	1c58      	adds	r0, r3, #1
 800206c:	6010      	str	r0, [r2, #0]
 800206e:	7019      	strb	r1, [r3, #0]
 8002070:	4608      	mov	r0, r1
 8002072:	bc10      	pop	{r4}
 8002074:	4770      	bx	lr

08002076 <__sfputs_r>:
 8002076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002078:	4606      	mov	r6, r0
 800207a:	460f      	mov	r7, r1
 800207c:	4614      	mov	r4, r2
 800207e:	18d5      	adds	r5, r2, r3
 8002080:	42ac      	cmp	r4, r5
 8002082:	d101      	bne.n	8002088 <__sfputs_r+0x12>
 8002084:	2000      	movs	r0, #0
 8002086:	e007      	b.n	8002098 <__sfputs_r+0x22>
 8002088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800208c:	463a      	mov	r2, r7
 800208e:	4630      	mov	r0, r6
 8002090:	f7ff ffdc 	bl	800204c <__sfputc_r>
 8002094:	1c43      	adds	r3, r0, #1
 8002096:	d1f3      	bne.n	8002080 <__sfputs_r+0xa>
 8002098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800209c <_vfiprintf_r>:
 800209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a0:	460d      	mov	r5, r1
 80020a2:	b09d      	sub	sp, #116	; 0x74
 80020a4:	4614      	mov	r4, r2
 80020a6:	4698      	mov	r8, r3
 80020a8:	4606      	mov	r6, r0
 80020aa:	b118      	cbz	r0, 80020b4 <_vfiprintf_r+0x18>
 80020ac:	6983      	ldr	r3, [r0, #24]
 80020ae:	b90b      	cbnz	r3, 80020b4 <_vfiprintf_r+0x18>
 80020b0:	f000 fca6 	bl	8002a00 <__sinit>
 80020b4:	4b89      	ldr	r3, [pc, #548]	; (80022dc <_vfiprintf_r+0x240>)
 80020b6:	429d      	cmp	r5, r3
 80020b8:	d11b      	bne.n	80020f2 <_vfiprintf_r+0x56>
 80020ba:	6875      	ldr	r5, [r6, #4]
 80020bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020be:	07d9      	lsls	r1, r3, #31
 80020c0:	d405      	bmi.n	80020ce <_vfiprintf_r+0x32>
 80020c2:	89ab      	ldrh	r3, [r5, #12]
 80020c4:	059a      	lsls	r2, r3, #22
 80020c6:	d402      	bmi.n	80020ce <_vfiprintf_r+0x32>
 80020c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020ca:	f000 fd37 	bl	8002b3c <__retarget_lock_acquire_recursive>
 80020ce:	89ab      	ldrh	r3, [r5, #12]
 80020d0:	071b      	lsls	r3, r3, #28
 80020d2:	d501      	bpl.n	80020d8 <_vfiprintf_r+0x3c>
 80020d4:	692b      	ldr	r3, [r5, #16]
 80020d6:	b9eb      	cbnz	r3, 8002114 <_vfiprintf_r+0x78>
 80020d8:	4629      	mov	r1, r5
 80020da:	4630      	mov	r0, r6
 80020dc:	f000 fb04 	bl	80026e8 <__swsetup_r>
 80020e0:	b1c0      	cbz	r0, 8002114 <_vfiprintf_r+0x78>
 80020e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020e4:	07dc      	lsls	r4, r3, #31
 80020e6:	d50e      	bpl.n	8002106 <_vfiprintf_r+0x6a>
 80020e8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ec:	b01d      	add	sp, #116	; 0x74
 80020ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020f2:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <_vfiprintf_r+0x244>)
 80020f4:	429d      	cmp	r5, r3
 80020f6:	d101      	bne.n	80020fc <_vfiprintf_r+0x60>
 80020f8:	68b5      	ldr	r5, [r6, #8]
 80020fa:	e7df      	b.n	80020bc <_vfiprintf_r+0x20>
 80020fc:	4b79      	ldr	r3, [pc, #484]	; (80022e4 <_vfiprintf_r+0x248>)
 80020fe:	429d      	cmp	r5, r3
 8002100:	bf08      	it	eq
 8002102:	68f5      	ldreq	r5, [r6, #12]
 8002104:	e7da      	b.n	80020bc <_vfiprintf_r+0x20>
 8002106:	89ab      	ldrh	r3, [r5, #12]
 8002108:	0598      	lsls	r0, r3, #22
 800210a:	d4ed      	bmi.n	80020e8 <_vfiprintf_r+0x4c>
 800210c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800210e:	f000 fd16 	bl	8002b3e <__retarget_lock_release_recursive>
 8002112:	e7e9      	b.n	80020e8 <_vfiprintf_r+0x4c>
 8002114:	2300      	movs	r3, #0
 8002116:	9309      	str	r3, [sp, #36]	; 0x24
 8002118:	2320      	movs	r3, #32
 800211a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800211e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002122:	2330      	movs	r3, #48	; 0x30
 8002124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022e8 <_vfiprintf_r+0x24c>
 8002128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800212c:	f04f 0901 	mov.w	r9, #1
 8002130:	4623      	mov	r3, r4
 8002132:	469a      	mov	sl, r3
 8002134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002138:	b10a      	cbz	r2, 800213e <_vfiprintf_r+0xa2>
 800213a:	2a25      	cmp	r2, #37	; 0x25
 800213c:	d1f9      	bne.n	8002132 <_vfiprintf_r+0x96>
 800213e:	ebba 0b04 	subs.w	fp, sl, r4
 8002142:	d00b      	beq.n	800215c <_vfiprintf_r+0xc0>
 8002144:	465b      	mov	r3, fp
 8002146:	4622      	mov	r2, r4
 8002148:	4629      	mov	r1, r5
 800214a:	4630      	mov	r0, r6
 800214c:	f7ff ff93 	bl	8002076 <__sfputs_r>
 8002150:	3001      	adds	r0, #1
 8002152:	f000 80aa 	beq.w	80022aa <_vfiprintf_r+0x20e>
 8002156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002158:	445a      	add	r2, fp
 800215a:	9209      	str	r2, [sp, #36]	; 0x24
 800215c:	f89a 3000 	ldrb.w	r3, [sl]
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80a2 	beq.w	80022aa <_vfiprintf_r+0x20e>
 8002166:	2300      	movs	r3, #0
 8002168:	f04f 32ff 	mov.w	r2, #4294967295
 800216c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002170:	f10a 0a01 	add.w	sl, sl, #1
 8002174:	9304      	str	r3, [sp, #16]
 8002176:	9307      	str	r3, [sp, #28]
 8002178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800217c:	931a      	str	r3, [sp, #104]	; 0x68
 800217e:	4654      	mov	r4, sl
 8002180:	2205      	movs	r2, #5
 8002182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002186:	4858      	ldr	r0, [pc, #352]	; (80022e8 <_vfiprintf_r+0x24c>)
 8002188:	f7fe f82a 	bl	80001e0 <memchr>
 800218c:	9a04      	ldr	r2, [sp, #16]
 800218e:	b9d8      	cbnz	r0, 80021c8 <_vfiprintf_r+0x12c>
 8002190:	06d1      	lsls	r1, r2, #27
 8002192:	bf44      	itt	mi
 8002194:	2320      	movmi	r3, #32
 8002196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800219a:	0713      	lsls	r3, r2, #28
 800219c:	bf44      	itt	mi
 800219e:	232b      	movmi	r3, #43	; 0x2b
 80021a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021a4:	f89a 3000 	ldrb.w	r3, [sl]
 80021a8:	2b2a      	cmp	r3, #42	; 0x2a
 80021aa:	d015      	beq.n	80021d8 <_vfiprintf_r+0x13c>
 80021ac:	9a07      	ldr	r2, [sp, #28]
 80021ae:	4654      	mov	r4, sl
 80021b0:	2000      	movs	r0, #0
 80021b2:	f04f 0c0a 	mov.w	ip, #10
 80021b6:	4621      	mov	r1, r4
 80021b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021bc:	3b30      	subs	r3, #48	; 0x30
 80021be:	2b09      	cmp	r3, #9
 80021c0:	d94e      	bls.n	8002260 <_vfiprintf_r+0x1c4>
 80021c2:	b1b0      	cbz	r0, 80021f2 <_vfiprintf_r+0x156>
 80021c4:	9207      	str	r2, [sp, #28]
 80021c6:	e014      	b.n	80021f2 <_vfiprintf_r+0x156>
 80021c8:	eba0 0308 	sub.w	r3, r0, r8
 80021cc:	fa09 f303 	lsl.w	r3, r9, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	9304      	str	r3, [sp, #16]
 80021d4:	46a2      	mov	sl, r4
 80021d6:	e7d2      	b.n	800217e <_vfiprintf_r+0xe2>
 80021d8:	9b03      	ldr	r3, [sp, #12]
 80021da:	1d19      	adds	r1, r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	9103      	str	r1, [sp, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bfbb      	ittet	lt
 80021e4:	425b      	neglt	r3, r3
 80021e6:	f042 0202 	orrlt.w	r2, r2, #2
 80021ea:	9307      	strge	r3, [sp, #28]
 80021ec:	9307      	strlt	r3, [sp, #28]
 80021ee:	bfb8      	it	lt
 80021f0:	9204      	strlt	r2, [sp, #16]
 80021f2:	7823      	ldrb	r3, [r4, #0]
 80021f4:	2b2e      	cmp	r3, #46	; 0x2e
 80021f6:	d10c      	bne.n	8002212 <_vfiprintf_r+0x176>
 80021f8:	7863      	ldrb	r3, [r4, #1]
 80021fa:	2b2a      	cmp	r3, #42	; 0x2a
 80021fc:	d135      	bne.n	800226a <_vfiprintf_r+0x1ce>
 80021fe:	9b03      	ldr	r3, [sp, #12]
 8002200:	1d1a      	adds	r2, r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	9203      	str	r2, [sp, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	bfb8      	it	lt
 800220a:	f04f 33ff 	movlt.w	r3, #4294967295
 800220e:	3402      	adds	r4, #2
 8002210:	9305      	str	r3, [sp, #20]
 8002212:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80022ec <_vfiprintf_r+0x250>
 8002216:	7821      	ldrb	r1, [r4, #0]
 8002218:	2203      	movs	r2, #3
 800221a:	4650      	mov	r0, sl
 800221c:	f7fd ffe0 	bl	80001e0 <memchr>
 8002220:	b140      	cbz	r0, 8002234 <_vfiprintf_r+0x198>
 8002222:	2340      	movs	r3, #64	; 0x40
 8002224:	eba0 000a 	sub.w	r0, r0, sl
 8002228:	fa03 f000 	lsl.w	r0, r3, r0
 800222c:	9b04      	ldr	r3, [sp, #16]
 800222e:	4303      	orrs	r3, r0
 8002230:	3401      	adds	r4, #1
 8002232:	9304      	str	r3, [sp, #16]
 8002234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002238:	482d      	ldr	r0, [pc, #180]	; (80022f0 <_vfiprintf_r+0x254>)
 800223a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800223e:	2206      	movs	r2, #6
 8002240:	f7fd ffce 	bl	80001e0 <memchr>
 8002244:	2800      	cmp	r0, #0
 8002246:	d03f      	beq.n	80022c8 <_vfiprintf_r+0x22c>
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <_vfiprintf_r+0x258>)
 800224a:	bb1b      	cbnz	r3, 8002294 <_vfiprintf_r+0x1f8>
 800224c:	9b03      	ldr	r3, [sp, #12]
 800224e:	3307      	adds	r3, #7
 8002250:	f023 0307 	bic.w	r3, r3, #7
 8002254:	3308      	adds	r3, #8
 8002256:	9303      	str	r3, [sp, #12]
 8002258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800225a:	443b      	add	r3, r7
 800225c:	9309      	str	r3, [sp, #36]	; 0x24
 800225e:	e767      	b.n	8002130 <_vfiprintf_r+0x94>
 8002260:	fb0c 3202 	mla	r2, ip, r2, r3
 8002264:	460c      	mov	r4, r1
 8002266:	2001      	movs	r0, #1
 8002268:	e7a5      	b.n	80021b6 <_vfiprintf_r+0x11a>
 800226a:	2300      	movs	r3, #0
 800226c:	3401      	adds	r4, #1
 800226e:	9305      	str	r3, [sp, #20]
 8002270:	4619      	mov	r1, r3
 8002272:	f04f 0c0a 	mov.w	ip, #10
 8002276:	4620      	mov	r0, r4
 8002278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800227c:	3a30      	subs	r2, #48	; 0x30
 800227e:	2a09      	cmp	r2, #9
 8002280:	d903      	bls.n	800228a <_vfiprintf_r+0x1ee>
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0c5      	beq.n	8002212 <_vfiprintf_r+0x176>
 8002286:	9105      	str	r1, [sp, #20]
 8002288:	e7c3      	b.n	8002212 <_vfiprintf_r+0x176>
 800228a:	fb0c 2101 	mla	r1, ip, r1, r2
 800228e:	4604      	mov	r4, r0
 8002290:	2301      	movs	r3, #1
 8002292:	e7f0      	b.n	8002276 <_vfiprintf_r+0x1da>
 8002294:	ab03      	add	r3, sp, #12
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	462a      	mov	r2, r5
 800229a:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <_vfiprintf_r+0x25c>)
 800229c:	a904      	add	r1, sp, #16
 800229e:	4630      	mov	r0, r6
 80022a0:	f3af 8000 	nop.w
 80022a4:	4607      	mov	r7, r0
 80022a6:	1c78      	adds	r0, r7, #1
 80022a8:	d1d6      	bne.n	8002258 <_vfiprintf_r+0x1bc>
 80022aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022ac:	07d9      	lsls	r1, r3, #31
 80022ae:	d405      	bmi.n	80022bc <_vfiprintf_r+0x220>
 80022b0:	89ab      	ldrh	r3, [r5, #12]
 80022b2:	059a      	lsls	r2, r3, #22
 80022b4:	d402      	bmi.n	80022bc <_vfiprintf_r+0x220>
 80022b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022b8:	f000 fc41 	bl	8002b3e <__retarget_lock_release_recursive>
 80022bc:	89ab      	ldrh	r3, [r5, #12]
 80022be:	065b      	lsls	r3, r3, #25
 80022c0:	f53f af12 	bmi.w	80020e8 <_vfiprintf_r+0x4c>
 80022c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022c6:	e711      	b.n	80020ec <_vfiprintf_r+0x50>
 80022c8:	ab03      	add	r3, sp, #12
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	462a      	mov	r2, r5
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <_vfiprintf_r+0x25c>)
 80022d0:	a904      	add	r1, sp, #16
 80022d2:	4630      	mov	r0, r6
 80022d4:	f000 f880 	bl	80023d8 <_printf_i>
 80022d8:	e7e4      	b.n	80022a4 <_vfiprintf_r+0x208>
 80022da:	bf00      	nop
 80022dc:	08002f24 	.word	0x08002f24
 80022e0:	08002f44 	.word	0x08002f44
 80022e4:	08002f04 	.word	0x08002f04
 80022e8:	08002ece 	.word	0x08002ece
 80022ec:	08002ed4 	.word	0x08002ed4
 80022f0:	08002ed8 	.word	0x08002ed8
 80022f4:	00000000 	.word	0x00000000
 80022f8:	08002077 	.word	0x08002077

080022fc <_printf_common>:
 80022fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002300:	4616      	mov	r6, r2
 8002302:	4699      	mov	r9, r3
 8002304:	688a      	ldr	r2, [r1, #8]
 8002306:	690b      	ldr	r3, [r1, #16]
 8002308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800230c:	4293      	cmp	r3, r2
 800230e:	bfb8      	it	lt
 8002310:	4613      	movlt	r3, r2
 8002312:	6033      	str	r3, [r6, #0]
 8002314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002318:	4607      	mov	r7, r0
 800231a:	460c      	mov	r4, r1
 800231c:	b10a      	cbz	r2, 8002322 <_printf_common+0x26>
 800231e:	3301      	adds	r3, #1
 8002320:	6033      	str	r3, [r6, #0]
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	0699      	lsls	r1, r3, #26
 8002326:	bf42      	ittt	mi
 8002328:	6833      	ldrmi	r3, [r6, #0]
 800232a:	3302      	addmi	r3, #2
 800232c:	6033      	strmi	r3, [r6, #0]
 800232e:	6825      	ldr	r5, [r4, #0]
 8002330:	f015 0506 	ands.w	r5, r5, #6
 8002334:	d106      	bne.n	8002344 <_printf_common+0x48>
 8002336:	f104 0a19 	add.w	sl, r4, #25
 800233a:	68e3      	ldr	r3, [r4, #12]
 800233c:	6832      	ldr	r2, [r6, #0]
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	42ab      	cmp	r3, r5
 8002342:	dc26      	bgt.n	8002392 <_printf_common+0x96>
 8002344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002348:	1e13      	subs	r3, r2, #0
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	bf18      	it	ne
 800234e:	2301      	movne	r3, #1
 8002350:	0692      	lsls	r2, r2, #26
 8002352:	d42b      	bmi.n	80023ac <_printf_common+0xb0>
 8002354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002358:	4649      	mov	r1, r9
 800235a:	4638      	mov	r0, r7
 800235c:	47c0      	blx	r8
 800235e:	3001      	adds	r0, #1
 8002360:	d01e      	beq.n	80023a0 <_printf_common+0xa4>
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	68e5      	ldr	r5, [r4, #12]
 8002366:	6832      	ldr	r2, [r6, #0]
 8002368:	f003 0306 	and.w	r3, r3, #6
 800236c:	2b04      	cmp	r3, #4
 800236e:	bf08      	it	eq
 8002370:	1aad      	subeq	r5, r5, r2
 8002372:	68a3      	ldr	r3, [r4, #8]
 8002374:	6922      	ldr	r2, [r4, #16]
 8002376:	bf0c      	ite	eq
 8002378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800237c:	2500      	movne	r5, #0
 800237e:	4293      	cmp	r3, r2
 8002380:	bfc4      	itt	gt
 8002382:	1a9b      	subgt	r3, r3, r2
 8002384:	18ed      	addgt	r5, r5, r3
 8002386:	2600      	movs	r6, #0
 8002388:	341a      	adds	r4, #26
 800238a:	42b5      	cmp	r5, r6
 800238c:	d11a      	bne.n	80023c4 <_printf_common+0xc8>
 800238e:	2000      	movs	r0, #0
 8002390:	e008      	b.n	80023a4 <_printf_common+0xa8>
 8002392:	2301      	movs	r3, #1
 8002394:	4652      	mov	r2, sl
 8002396:	4649      	mov	r1, r9
 8002398:	4638      	mov	r0, r7
 800239a:	47c0      	blx	r8
 800239c:	3001      	adds	r0, #1
 800239e:	d103      	bne.n	80023a8 <_printf_common+0xac>
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023a8:	3501      	adds	r5, #1
 80023aa:	e7c6      	b.n	800233a <_printf_common+0x3e>
 80023ac:	18e1      	adds	r1, r4, r3
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	2030      	movs	r0, #48	; 0x30
 80023b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023b6:	4422      	add	r2, r4
 80023b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023c0:	3302      	adds	r3, #2
 80023c2:	e7c7      	b.n	8002354 <_printf_common+0x58>
 80023c4:	2301      	movs	r3, #1
 80023c6:	4622      	mov	r2, r4
 80023c8:	4649      	mov	r1, r9
 80023ca:	4638      	mov	r0, r7
 80023cc:	47c0      	blx	r8
 80023ce:	3001      	adds	r0, #1
 80023d0:	d0e6      	beq.n	80023a0 <_printf_common+0xa4>
 80023d2:	3601      	adds	r6, #1
 80023d4:	e7d9      	b.n	800238a <_printf_common+0x8e>
	...

080023d8 <_printf_i>:
 80023d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023dc:	7e0f      	ldrb	r7, [r1, #24]
 80023de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023e0:	2f78      	cmp	r7, #120	; 0x78
 80023e2:	4691      	mov	r9, r2
 80023e4:	4680      	mov	r8, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	469a      	mov	sl, r3
 80023ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023ee:	d807      	bhi.n	8002400 <_printf_i+0x28>
 80023f0:	2f62      	cmp	r7, #98	; 0x62
 80023f2:	d80a      	bhi.n	800240a <_printf_i+0x32>
 80023f4:	2f00      	cmp	r7, #0
 80023f6:	f000 80d8 	beq.w	80025aa <_printf_i+0x1d2>
 80023fa:	2f58      	cmp	r7, #88	; 0x58
 80023fc:	f000 80a3 	beq.w	8002546 <_printf_i+0x16e>
 8002400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002408:	e03a      	b.n	8002480 <_printf_i+0xa8>
 800240a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800240e:	2b15      	cmp	r3, #21
 8002410:	d8f6      	bhi.n	8002400 <_printf_i+0x28>
 8002412:	a101      	add	r1, pc, #4	; (adr r1, 8002418 <_printf_i+0x40>)
 8002414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002418:	08002471 	.word	0x08002471
 800241c:	08002485 	.word	0x08002485
 8002420:	08002401 	.word	0x08002401
 8002424:	08002401 	.word	0x08002401
 8002428:	08002401 	.word	0x08002401
 800242c:	08002401 	.word	0x08002401
 8002430:	08002485 	.word	0x08002485
 8002434:	08002401 	.word	0x08002401
 8002438:	08002401 	.word	0x08002401
 800243c:	08002401 	.word	0x08002401
 8002440:	08002401 	.word	0x08002401
 8002444:	08002591 	.word	0x08002591
 8002448:	080024b5 	.word	0x080024b5
 800244c:	08002573 	.word	0x08002573
 8002450:	08002401 	.word	0x08002401
 8002454:	08002401 	.word	0x08002401
 8002458:	080025b3 	.word	0x080025b3
 800245c:	08002401 	.word	0x08002401
 8002460:	080024b5 	.word	0x080024b5
 8002464:	08002401 	.word	0x08002401
 8002468:	08002401 	.word	0x08002401
 800246c:	0800257b 	.word	0x0800257b
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	1d1a      	adds	r2, r3, #4
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	602a      	str	r2, [r5, #0]
 8002478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800247c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002480:	2301      	movs	r3, #1
 8002482:	e0a3      	b.n	80025cc <_printf_i+0x1f4>
 8002484:	6820      	ldr	r0, [r4, #0]
 8002486:	6829      	ldr	r1, [r5, #0]
 8002488:	0606      	lsls	r6, r0, #24
 800248a:	f101 0304 	add.w	r3, r1, #4
 800248e:	d50a      	bpl.n	80024a6 <_printf_i+0xce>
 8002490:	680e      	ldr	r6, [r1, #0]
 8002492:	602b      	str	r3, [r5, #0]
 8002494:	2e00      	cmp	r6, #0
 8002496:	da03      	bge.n	80024a0 <_printf_i+0xc8>
 8002498:	232d      	movs	r3, #45	; 0x2d
 800249a:	4276      	negs	r6, r6
 800249c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a0:	485e      	ldr	r0, [pc, #376]	; (800261c <_printf_i+0x244>)
 80024a2:	230a      	movs	r3, #10
 80024a4:	e019      	b.n	80024da <_printf_i+0x102>
 80024a6:	680e      	ldr	r6, [r1, #0]
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024ae:	bf18      	it	ne
 80024b0:	b236      	sxthne	r6, r6
 80024b2:	e7ef      	b.n	8002494 <_printf_i+0xbc>
 80024b4:	682b      	ldr	r3, [r5, #0]
 80024b6:	6820      	ldr	r0, [r4, #0]
 80024b8:	1d19      	adds	r1, r3, #4
 80024ba:	6029      	str	r1, [r5, #0]
 80024bc:	0601      	lsls	r1, r0, #24
 80024be:	d501      	bpl.n	80024c4 <_printf_i+0xec>
 80024c0:	681e      	ldr	r6, [r3, #0]
 80024c2:	e002      	b.n	80024ca <_printf_i+0xf2>
 80024c4:	0646      	lsls	r6, r0, #25
 80024c6:	d5fb      	bpl.n	80024c0 <_printf_i+0xe8>
 80024c8:	881e      	ldrh	r6, [r3, #0]
 80024ca:	4854      	ldr	r0, [pc, #336]	; (800261c <_printf_i+0x244>)
 80024cc:	2f6f      	cmp	r7, #111	; 0x6f
 80024ce:	bf0c      	ite	eq
 80024d0:	2308      	moveq	r3, #8
 80024d2:	230a      	movne	r3, #10
 80024d4:	2100      	movs	r1, #0
 80024d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024da:	6865      	ldr	r5, [r4, #4]
 80024dc:	60a5      	str	r5, [r4, #8]
 80024de:	2d00      	cmp	r5, #0
 80024e0:	bfa2      	ittt	ge
 80024e2:	6821      	ldrge	r1, [r4, #0]
 80024e4:	f021 0104 	bicge.w	r1, r1, #4
 80024e8:	6021      	strge	r1, [r4, #0]
 80024ea:	b90e      	cbnz	r6, 80024f0 <_printf_i+0x118>
 80024ec:	2d00      	cmp	r5, #0
 80024ee:	d04d      	beq.n	800258c <_printf_i+0x1b4>
 80024f0:	4615      	mov	r5, r2
 80024f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80024f6:	fb03 6711 	mls	r7, r3, r1, r6
 80024fa:	5dc7      	ldrb	r7, [r0, r7]
 80024fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002500:	4637      	mov	r7, r6
 8002502:	42bb      	cmp	r3, r7
 8002504:	460e      	mov	r6, r1
 8002506:	d9f4      	bls.n	80024f2 <_printf_i+0x11a>
 8002508:	2b08      	cmp	r3, #8
 800250a:	d10b      	bne.n	8002524 <_printf_i+0x14c>
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	07de      	lsls	r6, r3, #31
 8002510:	d508      	bpl.n	8002524 <_printf_i+0x14c>
 8002512:	6923      	ldr	r3, [r4, #16]
 8002514:	6861      	ldr	r1, [r4, #4]
 8002516:	4299      	cmp	r1, r3
 8002518:	bfde      	ittt	le
 800251a:	2330      	movle	r3, #48	; 0x30
 800251c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002524:	1b52      	subs	r2, r2, r5
 8002526:	6122      	str	r2, [r4, #16]
 8002528:	f8cd a000 	str.w	sl, [sp]
 800252c:	464b      	mov	r3, r9
 800252e:	aa03      	add	r2, sp, #12
 8002530:	4621      	mov	r1, r4
 8002532:	4640      	mov	r0, r8
 8002534:	f7ff fee2 	bl	80022fc <_printf_common>
 8002538:	3001      	adds	r0, #1
 800253a:	d14c      	bne.n	80025d6 <_printf_i+0x1fe>
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	b004      	add	sp, #16
 8002542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002546:	4835      	ldr	r0, [pc, #212]	; (800261c <_printf_i+0x244>)
 8002548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800254c:	6829      	ldr	r1, [r5, #0]
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	f851 6b04 	ldr.w	r6, [r1], #4
 8002554:	6029      	str	r1, [r5, #0]
 8002556:	061d      	lsls	r5, r3, #24
 8002558:	d514      	bpl.n	8002584 <_printf_i+0x1ac>
 800255a:	07df      	lsls	r7, r3, #31
 800255c:	bf44      	itt	mi
 800255e:	f043 0320 	orrmi.w	r3, r3, #32
 8002562:	6023      	strmi	r3, [r4, #0]
 8002564:	b91e      	cbnz	r6, 800256e <_printf_i+0x196>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	f023 0320 	bic.w	r3, r3, #32
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	2310      	movs	r3, #16
 8002570:	e7b0      	b.n	80024d4 <_printf_i+0xfc>
 8002572:	6823      	ldr	r3, [r4, #0]
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	6023      	str	r3, [r4, #0]
 800257a:	2378      	movs	r3, #120	; 0x78
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <_printf_i+0x248>)
 800257e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002582:	e7e3      	b.n	800254c <_printf_i+0x174>
 8002584:	0659      	lsls	r1, r3, #25
 8002586:	bf48      	it	mi
 8002588:	b2b6      	uxthmi	r6, r6
 800258a:	e7e6      	b.n	800255a <_printf_i+0x182>
 800258c:	4615      	mov	r5, r2
 800258e:	e7bb      	b.n	8002508 <_printf_i+0x130>
 8002590:	682b      	ldr	r3, [r5, #0]
 8002592:	6826      	ldr	r6, [r4, #0]
 8002594:	6961      	ldr	r1, [r4, #20]
 8002596:	1d18      	adds	r0, r3, #4
 8002598:	6028      	str	r0, [r5, #0]
 800259a:	0635      	lsls	r5, r6, #24
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	d501      	bpl.n	80025a4 <_printf_i+0x1cc>
 80025a0:	6019      	str	r1, [r3, #0]
 80025a2:	e002      	b.n	80025aa <_printf_i+0x1d2>
 80025a4:	0670      	lsls	r0, r6, #25
 80025a6:	d5fb      	bpl.n	80025a0 <_printf_i+0x1c8>
 80025a8:	8019      	strh	r1, [r3, #0]
 80025aa:	2300      	movs	r3, #0
 80025ac:	6123      	str	r3, [r4, #16]
 80025ae:	4615      	mov	r5, r2
 80025b0:	e7ba      	b.n	8002528 <_printf_i+0x150>
 80025b2:	682b      	ldr	r3, [r5, #0]
 80025b4:	1d1a      	adds	r2, r3, #4
 80025b6:	602a      	str	r2, [r5, #0]
 80025b8:	681d      	ldr	r5, [r3, #0]
 80025ba:	6862      	ldr	r2, [r4, #4]
 80025bc:	2100      	movs	r1, #0
 80025be:	4628      	mov	r0, r5
 80025c0:	f7fd fe0e 	bl	80001e0 <memchr>
 80025c4:	b108      	cbz	r0, 80025ca <_printf_i+0x1f2>
 80025c6:	1b40      	subs	r0, r0, r5
 80025c8:	6060      	str	r0, [r4, #4]
 80025ca:	6863      	ldr	r3, [r4, #4]
 80025cc:	6123      	str	r3, [r4, #16]
 80025ce:	2300      	movs	r3, #0
 80025d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025d4:	e7a8      	b.n	8002528 <_printf_i+0x150>
 80025d6:	6923      	ldr	r3, [r4, #16]
 80025d8:	462a      	mov	r2, r5
 80025da:	4649      	mov	r1, r9
 80025dc:	4640      	mov	r0, r8
 80025de:	47d0      	blx	sl
 80025e0:	3001      	adds	r0, #1
 80025e2:	d0ab      	beq.n	800253c <_printf_i+0x164>
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	079b      	lsls	r3, r3, #30
 80025e8:	d413      	bmi.n	8002612 <_printf_i+0x23a>
 80025ea:	68e0      	ldr	r0, [r4, #12]
 80025ec:	9b03      	ldr	r3, [sp, #12]
 80025ee:	4298      	cmp	r0, r3
 80025f0:	bfb8      	it	lt
 80025f2:	4618      	movlt	r0, r3
 80025f4:	e7a4      	b.n	8002540 <_printf_i+0x168>
 80025f6:	2301      	movs	r3, #1
 80025f8:	4632      	mov	r2, r6
 80025fa:	4649      	mov	r1, r9
 80025fc:	4640      	mov	r0, r8
 80025fe:	47d0      	blx	sl
 8002600:	3001      	adds	r0, #1
 8002602:	d09b      	beq.n	800253c <_printf_i+0x164>
 8002604:	3501      	adds	r5, #1
 8002606:	68e3      	ldr	r3, [r4, #12]
 8002608:	9903      	ldr	r1, [sp, #12]
 800260a:	1a5b      	subs	r3, r3, r1
 800260c:	42ab      	cmp	r3, r5
 800260e:	dcf2      	bgt.n	80025f6 <_printf_i+0x21e>
 8002610:	e7eb      	b.n	80025ea <_printf_i+0x212>
 8002612:	2500      	movs	r5, #0
 8002614:	f104 0619 	add.w	r6, r4, #25
 8002618:	e7f5      	b.n	8002606 <_printf_i+0x22e>
 800261a:	bf00      	nop
 800261c:	08002edf 	.word	0x08002edf
 8002620:	08002ef0 	.word	0x08002ef0

08002624 <_sbrk_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d06      	ldr	r5, [pc, #24]	; (8002640 <_sbrk_r+0x1c>)
 8002628:	2300      	movs	r3, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	602b      	str	r3, [r5, #0]
 8002630:	f7ff faf8 	bl	8001c24 <_sbrk>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	d102      	bne.n	800263e <_sbrk_r+0x1a>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b103      	cbz	r3, 800263e <_sbrk_r+0x1a>
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	20000120 	.word	0x20000120

08002644 <__swbuf_r>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	460e      	mov	r6, r1
 8002648:	4614      	mov	r4, r2
 800264a:	4605      	mov	r5, r0
 800264c:	b118      	cbz	r0, 8002656 <__swbuf_r+0x12>
 800264e:	6983      	ldr	r3, [r0, #24]
 8002650:	b90b      	cbnz	r3, 8002656 <__swbuf_r+0x12>
 8002652:	f000 f9d5 	bl	8002a00 <__sinit>
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <__swbuf_r+0x98>)
 8002658:	429c      	cmp	r4, r3
 800265a:	d12b      	bne.n	80026b4 <__swbuf_r+0x70>
 800265c:	686c      	ldr	r4, [r5, #4]
 800265e:	69a3      	ldr	r3, [r4, #24]
 8002660:	60a3      	str	r3, [r4, #8]
 8002662:	89a3      	ldrh	r3, [r4, #12]
 8002664:	071a      	lsls	r2, r3, #28
 8002666:	d52f      	bpl.n	80026c8 <__swbuf_r+0x84>
 8002668:	6923      	ldr	r3, [r4, #16]
 800266a:	b36b      	cbz	r3, 80026c8 <__swbuf_r+0x84>
 800266c:	6923      	ldr	r3, [r4, #16]
 800266e:	6820      	ldr	r0, [r4, #0]
 8002670:	1ac0      	subs	r0, r0, r3
 8002672:	6963      	ldr	r3, [r4, #20]
 8002674:	b2f6      	uxtb	r6, r6
 8002676:	4283      	cmp	r3, r0
 8002678:	4637      	mov	r7, r6
 800267a:	dc04      	bgt.n	8002686 <__swbuf_r+0x42>
 800267c:	4621      	mov	r1, r4
 800267e:	4628      	mov	r0, r5
 8002680:	f000 f92a 	bl	80028d8 <_fflush_r>
 8002684:	bb30      	cbnz	r0, 80026d4 <__swbuf_r+0x90>
 8002686:	68a3      	ldr	r3, [r4, #8]
 8002688:	3b01      	subs	r3, #1
 800268a:	60a3      	str	r3, [r4, #8]
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	6022      	str	r2, [r4, #0]
 8002692:	701e      	strb	r6, [r3, #0]
 8002694:	6963      	ldr	r3, [r4, #20]
 8002696:	3001      	adds	r0, #1
 8002698:	4283      	cmp	r3, r0
 800269a:	d004      	beq.n	80026a6 <__swbuf_r+0x62>
 800269c:	89a3      	ldrh	r3, [r4, #12]
 800269e:	07db      	lsls	r3, r3, #31
 80026a0:	d506      	bpl.n	80026b0 <__swbuf_r+0x6c>
 80026a2:	2e0a      	cmp	r6, #10
 80026a4:	d104      	bne.n	80026b0 <__swbuf_r+0x6c>
 80026a6:	4621      	mov	r1, r4
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 f915 	bl	80028d8 <_fflush_r>
 80026ae:	b988      	cbnz	r0, 80026d4 <__swbuf_r+0x90>
 80026b0:	4638      	mov	r0, r7
 80026b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b4:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <__swbuf_r+0x9c>)
 80026b6:	429c      	cmp	r4, r3
 80026b8:	d101      	bne.n	80026be <__swbuf_r+0x7a>
 80026ba:	68ac      	ldr	r4, [r5, #8]
 80026bc:	e7cf      	b.n	800265e <__swbuf_r+0x1a>
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <__swbuf_r+0xa0>)
 80026c0:	429c      	cmp	r4, r3
 80026c2:	bf08      	it	eq
 80026c4:	68ec      	ldreq	r4, [r5, #12]
 80026c6:	e7ca      	b.n	800265e <__swbuf_r+0x1a>
 80026c8:	4621      	mov	r1, r4
 80026ca:	4628      	mov	r0, r5
 80026cc:	f000 f80c 	bl	80026e8 <__swsetup_r>
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d0cb      	beq.n	800266c <__swbuf_r+0x28>
 80026d4:	f04f 37ff 	mov.w	r7, #4294967295
 80026d8:	e7ea      	b.n	80026b0 <__swbuf_r+0x6c>
 80026da:	bf00      	nop
 80026dc:	08002f24 	.word	0x08002f24
 80026e0:	08002f44 	.word	0x08002f44
 80026e4:	08002f04 	.word	0x08002f04

080026e8 <__swsetup_r>:
 80026e8:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <__swsetup_r+0xcc>)
 80026ea:	b570      	push	{r4, r5, r6, lr}
 80026ec:	681d      	ldr	r5, [r3, #0]
 80026ee:	4606      	mov	r6, r0
 80026f0:	460c      	mov	r4, r1
 80026f2:	b125      	cbz	r5, 80026fe <__swsetup_r+0x16>
 80026f4:	69ab      	ldr	r3, [r5, #24]
 80026f6:	b913      	cbnz	r3, 80026fe <__swsetup_r+0x16>
 80026f8:	4628      	mov	r0, r5
 80026fa:	f000 f981 	bl	8002a00 <__sinit>
 80026fe:	4b2e      	ldr	r3, [pc, #184]	; (80027b8 <__swsetup_r+0xd0>)
 8002700:	429c      	cmp	r4, r3
 8002702:	d10f      	bne.n	8002724 <__swsetup_r+0x3c>
 8002704:	686c      	ldr	r4, [r5, #4]
 8002706:	89a3      	ldrh	r3, [r4, #12]
 8002708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800270c:	0719      	lsls	r1, r3, #28
 800270e:	d42c      	bmi.n	800276a <__swsetup_r+0x82>
 8002710:	06dd      	lsls	r5, r3, #27
 8002712:	d411      	bmi.n	8002738 <__swsetup_r+0x50>
 8002714:	2309      	movs	r3, #9
 8002716:	6033      	str	r3, [r6, #0]
 8002718:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800271c:	81a3      	strh	r3, [r4, #12]
 800271e:	f04f 30ff 	mov.w	r0, #4294967295
 8002722:	e03e      	b.n	80027a2 <__swsetup_r+0xba>
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <__swsetup_r+0xd4>)
 8002726:	429c      	cmp	r4, r3
 8002728:	d101      	bne.n	800272e <__swsetup_r+0x46>
 800272a:	68ac      	ldr	r4, [r5, #8]
 800272c:	e7eb      	b.n	8002706 <__swsetup_r+0x1e>
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <__swsetup_r+0xd8>)
 8002730:	429c      	cmp	r4, r3
 8002732:	bf08      	it	eq
 8002734:	68ec      	ldreq	r4, [r5, #12]
 8002736:	e7e6      	b.n	8002706 <__swsetup_r+0x1e>
 8002738:	0758      	lsls	r0, r3, #29
 800273a:	d512      	bpl.n	8002762 <__swsetup_r+0x7a>
 800273c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800273e:	b141      	cbz	r1, 8002752 <__swsetup_r+0x6a>
 8002740:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002744:	4299      	cmp	r1, r3
 8002746:	d002      	beq.n	800274e <__swsetup_r+0x66>
 8002748:	4630      	mov	r0, r6
 800274a:	f7ff fba1 	bl	8001e90 <_free_r>
 800274e:	2300      	movs	r3, #0
 8002750:	6363      	str	r3, [r4, #52]	; 0x34
 8002752:	89a3      	ldrh	r3, [r4, #12]
 8002754:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002758:	81a3      	strh	r3, [r4, #12]
 800275a:	2300      	movs	r3, #0
 800275c:	6063      	str	r3, [r4, #4]
 800275e:	6923      	ldr	r3, [r4, #16]
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	f043 0308 	orr.w	r3, r3, #8
 8002768:	81a3      	strh	r3, [r4, #12]
 800276a:	6923      	ldr	r3, [r4, #16]
 800276c:	b94b      	cbnz	r3, 8002782 <__swsetup_r+0x9a>
 800276e:	89a3      	ldrh	r3, [r4, #12]
 8002770:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002778:	d003      	beq.n	8002782 <__swsetup_r+0x9a>
 800277a:	4621      	mov	r1, r4
 800277c:	4630      	mov	r0, r6
 800277e:	f000 fa05 	bl	8002b8c <__smakebuf_r>
 8002782:	89a0      	ldrh	r0, [r4, #12]
 8002784:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002788:	f010 0301 	ands.w	r3, r0, #1
 800278c:	d00a      	beq.n	80027a4 <__swsetup_r+0xbc>
 800278e:	2300      	movs	r3, #0
 8002790:	60a3      	str	r3, [r4, #8]
 8002792:	6963      	ldr	r3, [r4, #20]
 8002794:	425b      	negs	r3, r3
 8002796:	61a3      	str	r3, [r4, #24]
 8002798:	6923      	ldr	r3, [r4, #16]
 800279a:	b943      	cbnz	r3, 80027ae <__swsetup_r+0xc6>
 800279c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027a0:	d1ba      	bne.n	8002718 <__swsetup_r+0x30>
 80027a2:	bd70      	pop	{r4, r5, r6, pc}
 80027a4:	0781      	lsls	r1, r0, #30
 80027a6:	bf58      	it	pl
 80027a8:	6963      	ldrpl	r3, [r4, #20]
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	e7f4      	b.n	8002798 <__swsetup_r+0xb0>
 80027ae:	2000      	movs	r0, #0
 80027b0:	e7f7      	b.n	80027a2 <__swsetup_r+0xba>
 80027b2:	bf00      	nop
 80027b4:	20000000 	.word	0x20000000
 80027b8:	08002f24 	.word	0x08002f24
 80027bc:	08002f44 	.word	0x08002f44
 80027c0:	08002f04 	.word	0x08002f04

080027c4 <abort>:
 80027c4:	b508      	push	{r3, lr}
 80027c6:	2006      	movs	r0, #6
 80027c8:	f000 fa54 	bl	8002c74 <raise>
 80027cc:	2001      	movs	r0, #1
 80027ce:	f7ff f9b6 	bl	8001b3e <_exit>
	...

080027d4 <__sflush_r>:
 80027d4:	898a      	ldrh	r2, [r1, #12]
 80027d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d8:	4605      	mov	r5, r0
 80027da:	0710      	lsls	r0, r2, #28
 80027dc:	460c      	mov	r4, r1
 80027de:	d457      	bmi.n	8002890 <__sflush_r+0xbc>
 80027e0:	684b      	ldr	r3, [r1, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dc04      	bgt.n	80027f0 <__sflush_r+0x1c>
 80027e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dc01      	bgt.n	80027f0 <__sflush_r+0x1c>
 80027ec:	2000      	movs	r0, #0
 80027ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80027f2:	2e00      	cmp	r6, #0
 80027f4:	d0fa      	beq.n	80027ec <__sflush_r+0x18>
 80027f6:	2300      	movs	r3, #0
 80027f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80027fc:	682f      	ldr	r7, [r5, #0]
 80027fe:	602b      	str	r3, [r5, #0]
 8002800:	d032      	beq.n	8002868 <__sflush_r+0x94>
 8002802:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	075a      	lsls	r2, r3, #29
 8002808:	d505      	bpl.n	8002816 <__sflush_r+0x42>
 800280a:	6863      	ldr	r3, [r4, #4]
 800280c:	1ac0      	subs	r0, r0, r3
 800280e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002810:	b10b      	cbz	r3, 8002816 <__sflush_r+0x42>
 8002812:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002814:	1ac0      	subs	r0, r0, r3
 8002816:	2300      	movs	r3, #0
 8002818:	4602      	mov	r2, r0
 800281a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800281c:	6a21      	ldr	r1, [r4, #32]
 800281e:	4628      	mov	r0, r5
 8002820:	47b0      	blx	r6
 8002822:	1c43      	adds	r3, r0, #1
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	d106      	bne.n	8002836 <__sflush_r+0x62>
 8002828:	6829      	ldr	r1, [r5, #0]
 800282a:	291d      	cmp	r1, #29
 800282c:	d82c      	bhi.n	8002888 <__sflush_r+0xb4>
 800282e:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <__sflush_r+0x100>)
 8002830:	40ca      	lsrs	r2, r1
 8002832:	07d6      	lsls	r6, r2, #31
 8002834:	d528      	bpl.n	8002888 <__sflush_r+0xb4>
 8002836:	2200      	movs	r2, #0
 8002838:	6062      	str	r2, [r4, #4]
 800283a:	04d9      	lsls	r1, r3, #19
 800283c:	6922      	ldr	r2, [r4, #16]
 800283e:	6022      	str	r2, [r4, #0]
 8002840:	d504      	bpl.n	800284c <__sflush_r+0x78>
 8002842:	1c42      	adds	r2, r0, #1
 8002844:	d101      	bne.n	800284a <__sflush_r+0x76>
 8002846:	682b      	ldr	r3, [r5, #0]
 8002848:	b903      	cbnz	r3, 800284c <__sflush_r+0x78>
 800284a:	6560      	str	r0, [r4, #84]	; 0x54
 800284c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800284e:	602f      	str	r7, [r5, #0]
 8002850:	2900      	cmp	r1, #0
 8002852:	d0cb      	beq.n	80027ec <__sflush_r+0x18>
 8002854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002858:	4299      	cmp	r1, r3
 800285a:	d002      	beq.n	8002862 <__sflush_r+0x8e>
 800285c:	4628      	mov	r0, r5
 800285e:	f7ff fb17 	bl	8001e90 <_free_r>
 8002862:	2000      	movs	r0, #0
 8002864:	6360      	str	r0, [r4, #52]	; 0x34
 8002866:	e7c2      	b.n	80027ee <__sflush_r+0x1a>
 8002868:	6a21      	ldr	r1, [r4, #32]
 800286a:	2301      	movs	r3, #1
 800286c:	4628      	mov	r0, r5
 800286e:	47b0      	blx	r6
 8002870:	1c41      	adds	r1, r0, #1
 8002872:	d1c7      	bne.n	8002804 <__sflush_r+0x30>
 8002874:	682b      	ldr	r3, [r5, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0c4      	beq.n	8002804 <__sflush_r+0x30>
 800287a:	2b1d      	cmp	r3, #29
 800287c:	d001      	beq.n	8002882 <__sflush_r+0xae>
 800287e:	2b16      	cmp	r3, #22
 8002880:	d101      	bne.n	8002886 <__sflush_r+0xb2>
 8002882:	602f      	str	r7, [r5, #0]
 8002884:	e7b2      	b.n	80027ec <__sflush_r+0x18>
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288c:	81a3      	strh	r3, [r4, #12]
 800288e:	e7ae      	b.n	80027ee <__sflush_r+0x1a>
 8002890:	690f      	ldr	r7, [r1, #16]
 8002892:	2f00      	cmp	r7, #0
 8002894:	d0aa      	beq.n	80027ec <__sflush_r+0x18>
 8002896:	0793      	lsls	r3, r2, #30
 8002898:	680e      	ldr	r6, [r1, #0]
 800289a:	bf08      	it	eq
 800289c:	694b      	ldreq	r3, [r1, #20]
 800289e:	600f      	str	r7, [r1, #0]
 80028a0:	bf18      	it	ne
 80028a2:	2300      	movne	r3, #0
 80028a4:	1bf6      	subs	r6, r6, r7
 80028a6:	608b      	str	r3, [r1, #8]
 80028a8:	2e00      	cmp	r6, #0
 80028aa:	dd9f      	ble.n	80027ec <__sflush_r+0x18>
 80028ac:	6a21      	ldr	r1, [r4, #32]
 80028ae:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80028b2:	4633      	mov	r3, r6
 80028b4:	463a      	mov	r2, r7
 80028b6:	4628      	mov	r0, r5
 80028b8:	47e0      	blx	ip
 80028ba:	2800      	cmp	r0, #0
 80028bc:	dc06      	bgt.n	80028cc <__sflush_r+0xf8>
 80028be:	89a3      	ldrh	r3, [r4, #12]
 80028c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c4:	81a3      	strh	r3, [r4, #12]
 80028c6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ca:	e790      	b.n	80027ee <__sflush_r+0x1a>
 80028cc:	4407      	add	r7, r0
 80028ce:	1a36      	subs	r6, r6, r0
 80028d0:	e7ea      	b.n	80028a8 <__sflush_r+0xd4>
 80028d2:	bf00      	nop
 80028d4:	20400001 	.word	0x20400001

080028d8 <_fflush_r>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	690b      	ldr	r3, [r1, #16]
 80028dc:	4605      	mov	r5, r0
 80028de:	460c      	mov	r4, r1
 80028e0:	b913      	cbnz	r3, 80028e8 <_fflush_r+0x10>
 80028e2:	2500      	movs	r5, #0
 80028e4:	4628      	mov	r0, r5
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	b118      	cbz	r0, 80028f2 <_fflush_r+0x1a>
 80028ea:	6983      	ldr	r3, [r0, #24]
 80028ec:	b90b      	cbnz	r3, 80028f2 <_fflush_r+0x1a>
 80028ee:	f000 f887 	bl	8002a00 <__sinit>
 80028f2:	4b14      	ldr	r3, [pc, #80]	; (8002944 <_fflush_r+0x6c>)
 80028f4:	429c      	cmp	r4, r3
 80028f6:	d11b      	bne.n	8002930 <_fflush_r+0x58>
 80028f8:	686c      	ldr	r4, [r5, #4]
 80028fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0ef      	beq.n	80028e2 <_fflush_r+0xa>
 8002902:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002904:	07d0      	lsls	r0, r2, #31
 8002906:	d404      	bmi.n	8002912 <_fflush_r+0x3a>
 8002908:	0599      	lsls	r1, r3, #22
 800290a:	d402      	bmi.n	8002912 <_fflush_r+0x3a>
 800290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800290e:	f000 f915 	bl	8002b3c <__retarget_lock_acquire_recursive>
 8002912:	4628      	mov	r0, r5
 8002914:	4621      	mov	r1, r4
 8002916:	f7ff ff5d 	bl	80027d4 <__sflush_r>
 800291a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800291c:	07da      	lsls	r2, r3, #31
 800291e:	4605      	mov	r5, r0
 8002920:	d4e0      	bmi.n	80028e4 <_fflush_r+0xc>
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	059b      	lsls	r3, r3, #22
 8002926:	d4dd      	bmi.n	80028e4 <_fflush_r+0xc>
 8002928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800292a:	f000 f908 	bl	8002b3e <__retarget_lock_release_recursive>
 800292e:	e7d9      	b.n	80028e4 <_fflush_r+0xc>
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <_fflush_r+0x70>)
 8002932:	429c      	cmp	r4, r3
 8002934:	d101      	bne.n	800293a <_fflush_r+0x62>
 8002936:	68ac      	ldr	r4, [r5, #8]
 8002938:	e7df      	b.n	80028fa <_fflush_r+0x22>
 800293a:	4b04      	ldr	r3, [pc, #16]	; (800294c <_fflush_r+0x74>)
 800293c:	429c      	cmp	r4, r3
 800293e:	bf08      	it	eq
 8002940:	68ec      	ldreq	r4, [r5, #12]
 8002942:	e7da      	b.n	80028fa <_fflush_r+0x22>
 8002944:	08002f24 	.word	0x08002f24
 8002948:	08002f44 	.word	0x08002f44
 800294c:	08002f04 	.word	0x08002f04

08002950 <std>:
 8002950:	2300      	movs	r3, #0
 8002952:	b510      	push	{r4, lr}
 8002954:	4604      	mov	r4, r0
 8002956:	e9c0 3300 	strd	r3, r3, [r0]
 800295a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800295e:	6083      	str	r3, [r0, #8]
 8002960:	8181      	strh	r1, [r0, #12]
 8002962:	6643      	str	r3, [r0, #100]	; 0x64
 8002964:	81c2      	strh	r2, [r0, #14]
 8002966:	6183      	str	r3, [r0, #24]
 8002968:	4619      	mov	r1, r3
 800296a:	2208      	movs	r2, #8
 800296c:	305c      	adds	r0, #92	; 0x5c
 800296e:	f7ff f9e3 	bl	8001d38 <memset>
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <std+0x38>)
 8002974:	6263      	str	r3, [r4, #36]	; 0x24
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <std+0x3c>)
 8002978:	62a3      	str	r3, [r4, #40]	; 0x28
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <std+0x40>)
 800297c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <std+0x44>)
 8002980:	6224      	str	r4, [r4, #32]
 8002982:	6323      	str	r3, [r4, #48]	; 0x30
 8002984:	bd10      	pop	{r4, pc}
 8002986:	bf00      	nop
 8002988:	08002cad 	.word	0x08002cad
 800298c:	08002ccf 	.word	0x08002ccf
 8002990:	08002d07 	.word	0x08002d07
 8002994:	08002d2b 	.word	0x08002d2b

08002998 <_cleanup_r>:
 8002998:	4901      	ldr	r1, [pc, #4]	; (80029a0 <_cleanup_r+0x8>)
 800299a:	f000 b8af 	b.w	8002afc <_fwalk_reent>
 800299e:	bf00      	nop
 80029a0:	080028d9 	.word	0x080028d9

080029a4 <__sfmoreglue>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2268      	movs	r2, #104	; 0x68
 80029a8:	1e4d      	subs	r5, r1, #1
 80029aa:	4355      	muls	r5, r2
 80029ac:	460e      	mov	r6, r1
 80029ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029b2:	f7ff fad7 	bl	8001f64 <_malloc_r>
 80029b6:	4604      	mov	r4, r0
 80029b8:	b140      	cbz	r0, 80029cc <__sfmoreglue+0x28>
 80029ba:	2100      	movs	r1, #0
 80029bc:	e9c0 1600 	strd	r1, r6, [r0]
 80029c0:	300c      	adds	r0, #12
 80029c2:	60a0      	str	r0, [r4, #8]
 80029c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029c8:	f7ff f9b6 	bl	8001d38 <memset>
 80029cc:	4620      	mov	r0, r4
 80029ce:	bd70      	pop	{r4, r5, r6, pc}

080029d0 <__sfp_lock_acquire>:
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <__sfp_lock_acquire+0x8>)
 80029d2:	f000 b8b3 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 80029d6:	bf00      	nop
 80029d8:	2000011d 	.word	0x2000011d

080029dc <__sfp_lock_release>:
 80029dc:	4801      	ldr	r0, [pc, #4]	; (80029e4 <__sfp_lock_release+0x8>)
 80029de:	f000 b8ae 	b.w	8002b3e <__retarget_lock_release_recursive>
 80029e2:	bf00      	nop
 80029e4:	2000011d 	.word	0x2000011d

080029e8 <__sinit_lock_acquire>:
 80029e8:	4801      	ldr	r0, [pc, #4]	; (80029f0 <__sinit_lock_acquire+0x8>)
 80029ea:	f000 b8a7 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 80029ee:	bf00      	nop
 80029f0:	2000011e 	.word	0x2000011e

080029f4 <__sinit_lock_release>:
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <__sinit_lock_release+0x8>)
 80029f6:	f000 b8a2 	b.w	8002b3e <__retarget_lock_release_recursive>
 80029fa:	bf00      	nop
 80029fc:	2000011e 	.word	0x2000011e

08002a00 <__sinit>:
 8002a00:	b510      	push	{r4, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	f7ff fff0 	bl	80029e8 <__sinit_lock_acquire>
 8002a08:	69a3      	ldr	r3, [r4, #24]
 8002a0a:	b11b      	cbz	r3, 8002a14 <__sinit+0x14>
 8002a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a10:	f7ff bff0 	b.w	80029f4 <__sinit_lock_release>
 8002a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a18:	6523      	str	r3, [r4, #80]	; 0x50
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <__sinit+0x68>)
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <__sinit+0x6c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	bf04      	itt	eq
 8002a26:	2301      	moveq	r3, #1
 8002a28:	61a3      	streq	r3, [r4, #24]
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	f000 f820 	bl	8002a70 <__sfp>
 8002a30:	6060      	str	r0, [r4, #4]
 8002a32:	4620      	mov	r0, r4
 8002a34:	f000 f81c 	bl	8002a70 <__sfp>
 8002a38:	60a0      	str	r0, [r4, #8]
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 f818 	bl	8002a70 <__sfp>
 8002a40:	2200      	movs	r2, #0
 8002a42:	60e0      	str	r0, [r4, #12]
 8002a44:	2104      	movs	r1, #4
 8002a46:	6860      	ldr	r0, [r4, #4]
 8002a48:	f7ff ff82 	bl	8002950 <std>
 8002a4c:	68a0      	ldr	r0, [r4, #8]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2109      	movs	r1, #9
 8002a52:	f7ff ff7d 	bl	8002950 <std>
 8002a56:	68e0      	ldr	r0, [r4, #12]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	2112      	movs	r1, #18
 8002a5c:	f7ff ff78 	bl	8002950 <std>
 8002a60:	2301      	movs	r3, #1
 8002a62:	61a3      	str	r3, [r4, #24]
 8002a64:	e7d2      	b.n	8002a0c <__sinit+0xc>
 8002a66:	bf00      	nop
 8002a68:	08002e1c 	.word	0x08002e1c
 8002a6c:	08002999 	.word	0x08002999

08002a70 <__sfp>:
 8002a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a72:	4607      	mov	r7, r0
 8002a74:	f7ff ffac 	bl	80029d0 <__sfp_lock_acquire>
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <__sfp+0x84>)
 8002a7a:	681e      	ldr	r6, [r3, #0]
 8002a7c:	69b3      	ldr	r3, [r6, #24]
 8002a7e:	b913      	cbnz	r3, 8002a86 <__sfp+0x16>
 8002a80:	4630      	mov	r0, r6
 8002a82:	f7ff ffbd 	bl	8002a00 <__sinit>
 8002a86:	3648      	adds	r6, #72	; 0x48
 8002a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	d503      	bpl.n	8002a98 <__sfp+0x28>
 8002a90:	6833      	ldr	r3, [r6, #0]
 8002a92:	b30b      	cbz	r3, 8002ad8 <__sfp+0x68>
 8002a94:	6836      	ldr	r6, [r6, #0]
 8002a96:	e7f7      	b.n	8002a88 <__sfp+0x18>
 8002a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a9c:	b9d5      	cbnz	r5, 8002ad4 <__sfp+0x64>
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <__sfp+0x88>)
 8002aa0:	60e3      	str	r3, [r4, #12]
 8002aa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8002aa8:	f000 f847 	bl	8002b3a <__retarget_lock_init_recursive>
 8002aac:	f7ff ff96 	bl	80029dc <__sfp_lock_release>
 8002ab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002ab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002ab8:	6025      	str	r5, [r4, #0]
 8002aba:	61a5      	str	r5, [r4, #24]
 8002abc:	2208      	movs	r2, #8
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ac4:	f7ff f938 	bl	8001d38 <memset>
 8002ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad4:	3468      	adds	r4, #104	; 0x68
 8002ad6:	e7d9      	b.n	8002a8c <__sfp+0x1c>
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4638      	mov	r0, r7
 8002adc:	f7ff ff62 	bl	80029a4 <__sfmoreglue>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	6030      	str	r0, [r6, #0]
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d1d5      	bne.n	8002a94 <__sfp+0x24>
 8002ae8:	f7ff ff78 	bl	80029dc <__sfp_lock_release>
 8002aec:	230c      	movs	r3, #12
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	e7ee      	b.n	8002ad0 <__sfp+0x60>
 8002af2:	bf00      	nop
 8002af4:	08002e1c 	.word	0x08002e1c
 8002af8:	ffff0001 	.word	0xffff0001

08002afc <_fwalk_reent>:
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b00:	4606      	mov	r6, r0
 8002b02:	4688      	mov	r8, r1
 8002b04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b08:	2700      	movs	r7, #0
 8002b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8002b12:	d505      	bpl.n	8002b20 <_fwalk_reent+0x24>
 8002b14:	6824      	ldr	r4, [r4, #0]
 8002b16:	2c00      	cmp	r4, #0
 8002b18:	d1f7      	bne.n	8002b0a <_fwalk_reent+0xe>
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b20:	89ab      	ldrh	r3, [r5, #12]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d907      	bls.n	8002b36 <_fwalk_reent+0x3a>
 8002b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	d003      	beq.n	8002b36 <_fwalk_reent+0x3a>
 8002b2e:	4629      	mov	r1, r5
 8002b30:	4630      	mov	r0, r6
 8002b32:	47c0      	blx	r8
 8002b34:	4307      	orrs	r7, r0
 8002b36:	3568      	adds	r5, #104	; 0x68
 8002b38:	e7e9      	b.n	8002b0e <_fwalk_reent+0x12>

08002b3a <__retarget_lock_init_recursive>:
 8002b3a:	4770      	bx	lr

08002b3c <__retarget_lock_acquire_recursive>:
 8002b3c:	4770      	bx	lr

08002b3e <__retarget_lock_release_recursive>:
 8002b3e:	4770      	bx	lr

08002b40 <__swhatbuf_r>:
 8002b40:	b570      	push	{r4, r5, r6, lr}
 8002b42:	460e      	mov	r6, r1
 8002b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	b096      	sub	sp, #88	; 0x58
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	461d      	mov	r5, r3
 8002b50:	da08      	bge.n	8002b64 <__swhatbuf_r+0x24>
 8002b52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	602a      	str	r2, [r5, #0]
 8002b5a:	061a      	lsls	r2, r3, #24
 8002b5c:	d410      	bmi.n	8002b80 <__swhatbuf_r+0x40>
 8002b5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b62:	e00e      	b.n	8002b82 <__swhatbuf_r+0x42>
 8002b64:	466a      	mov	r2, sp
 8002b66:	f000 f907 	bl	8002d78 <_fstat_r>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	dbf1      	blt.n	8002b52 <__swhatbuf_r+0x12>
 8002b6e:	9a01      	ldr	r2, [sp, #4]
 8002b70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b78:	425a      	negs	r2, r3
 8002b7a:	415a      	adcs	r2, r3
 8002b7c:	602a      	str	r2, [r5, #0]
 8002b7e:	e7ee      	b.n	8002b5e <__swhatbuf_r+0x1e>
 8002b80:	2340      	movs	r3, #64	; 0x40
 8002b82:	2000      	movs	r0, #0
 8002b84:	6023      	str	r3, [r4, #0]
 8002b86:	b016      	add	sp, #88	; 0x58
 8002b88:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b8c <__smakebuf_r>:
 8002b8c:	898b      	ldrh	r3, [r1, #12]
 8002b8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b90:	079d      	lsls	r5, r3, #30
 8002b92:	4606      	mov	r6, r0
 8002b94:	460c      	mov	r4, r1
 8002b96:	d507      	bpl.n	8002ba8 <__smakebuf_r+0x1c>
 8002b98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	6123      	str	r3, [r4, #16]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	6163      	str	r3, [r4, #20]
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd70      	pop	{r4, r5, r6, pc}
 8002ba8:	ab01      	add	r3, sp, #4
 8002baa:	466a      	mov	r2, sp
 8002bac:	f7ff ffc8 	bl	8002b40 <__swhatbuf_r>
 8002bb0:	9900      	ldr	r1, [sp, #0]
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f7ff f9d5 	bl	8001f64 <_malloc_r>
 8002bba:	b948      	cbnz	r0, 8002bd0 <__smakebuf_r+0x44>
 8002bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bc0:	059a      	lsls	r2, r3, #22
 8002bc2:	d4ef      	bmi.n	8002ba4 <__smakebuf_r+0x18>
 8002bc4:	f023 0303 	bic.w	r3, r3, #3
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	81a3      	strh	r3, [r4, #12]
 8002bce:	e7e3      	b.n	8002b98 <__smakebuf_r+0xc>
 8002bd0:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <__smakebuf_r+0x7c>)
 8002bd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002bd4:	89a3      	ldrh	r3, [r4, #12]
 8002bd6:	6020      	str	r0, [r4, #0]
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	81a3      	strh	r3, [r4, #12]
 8002bde:	9b00      	ldr	r3, [sp, #0]
 8002be0:	6163      	str	r3, [r4, #20]
 8002be2:	9b01      	ldr	r3, [sp, #4]
 8002be4:	6120      	str	r0, [r4, #16]
 8002be6:	b15b      	cbz	r3, 8002c00 <__smakebuf_r+0x74>
 8002be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bec:	4630      	mov	r0, r6
 8002bee:	f000 f8d5 	bl	8002d9c <_isatty_r>
 8002bf2:	b128      	cbz	r0, 8002c00 <__smakebuf_r+0x74>
 8002bf4:	89a3      	ldrh	r3, [r4, #12]
 8002bf6:	f023 0303 	bic.w	r3, r3, #3
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	81a3      	strh	r3, [r4, #12]
 8002c00:	89a0      	ldrh	r0, [r4, #12]
 8002c02:	4305      	orrs	r5, r0
 8002c04:	81a5      	strh	r5, [r4, #12]
 8002c06:	e7cd      	b.n	8002ba4 <__smakebuf_r+0x18>
 8002c08:	08002999 	.word	0x08002999

08002c0c <__malloc_lock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	; (8002c14 <__malloc_lock+0x8>)
 8002c0e:	f7ff bf95 	b.w	8002b3c <__retarget_lock_acquire_recursive>
 8002c12:	bf00      	nop
 8002c14:	2000011c 	.word	0x2000011c

08002c18 <__malloc_unlock>:
 8002c18:	4801      	ldr	r0, [pc, #4]	; (8002c20 <__malloc_unlock+0x8>)
 8002c1a:	f7ff bf90 	b.w	8002b3e <__retarget_lock_release_recursive>
 8002c1e:	bf00      	nop
 8002c20:	2000011c 	.word	0x2000011c

08002c24 <_raise_r>:
 8002c24:	291f      	cmp	r1, #31
 8002c26:	b538      	push	{r3, r4, r5, lr}
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	d904      	bls.n	8002c38 <_raise_r+0x14>
 8002c2e:	2316      	movs	r3, #22
 8002c30:	6003      	str	r3, [r0, #0]
 8002c32:	f04f 30ff 	mov.w	r0, #4294967295
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c3a:	b112      	cbz	r2, 8002c42 <_raise_r+0x1e>
 8002c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002c40:	b94b      	cbnz	r3, 8002c56 <_raise_r+0x32>
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 f830 	bl	8002ca8 <_getpid_r>
 8002c48:	462a      	mov	r2, r5
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c52:	f000 b817 	b.w	8002c84 <_kill_r>
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d00a      	beq.n	8002c70 <_raise_r+0x4c>
 8002c5a:	1c59      	adds	r1, r3, #1
 8002c5c:	d103      	bne.n	8002c66 <_raise_r+0x42>
 8002c5e:	2316      	movs	r3, #22
 8002c60:	6003      	str	r3, [r0, #0]
 8002c62:	2001      	movs	r0, #1
 8002c64:	e7e7      	b.n	8002c36 <_raise_r+0x12>
 8002c66:	2400      	movs	r4, #0
 8002c68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002c6c:	4628      	mov	r0, r5
 8002c6e:	4798      	blx	r3
 8002c70:	2000      	movs	r0, #0
 8002c72:	e7e0      	b.n	8002c36 <_raise_r+0x12>

08002c74 <raise>:
 8002c74:	4b02      	ldr	r3, [pc, #8]	; (8002c80 <raise+0xc>)
 8002c76:	4601      	mov	r1, r0
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	f7ff bfd3 	b.w	8002c24 <_raise_r>
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <_kill_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	4d07      	ldr	r5, [pc, #28]	; (8002ca4 <_kill_r+0x20>)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	4608      	mov	r0, r1
 8002c8e:	4611      	mov	r1, r2
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	f7fe ff44 	bl	8001b1e <_kill>
 8002c96:	1c43      	adds	r3, r0, #1
 8002c98:	d102      	bne.n	8002ca0 <_kill_r+0x1c>
 8002c9a:	682b      	ldr	r3, [r5, #0]
 8002c9c:	b103      	cbz	r3, 8002ca0 <_kill_r+0x1c>
 8002c9e:	6023      	str	r3, [r4, #0]
 8002ca0:	bd38      	pop	{r3, r4, r5, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000120 	.word	0x20000120

08002ca8 <_getpid_r>:
 8002ca8:	f7fe bf32 	b.w	8001b10 <_getpid>

08002cac <__sread>:
 8002cac:	b510      	push	{r4, lr}
 8002cae:	460c      	mov	r4, r1
 8002cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb4:	f000 f894 	bl	8002de0 <_read_r>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	bfab      	itete	ge
 8002cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8002cc0:	181b      	addge	r3, r3, r0
 8002cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002cc6:	bfac      	ite	ge
 8002cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002cca:	81a3      	strhlt	r3, [r4, #12]
 8002ccc:	bd10      	pop	{r4, pc}

08002cce <__swrite>:
 8002cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cd2:	461f      	mov	r7, r3
 8002cd4:	898b      	ldrh	r3, [r1, #12]
 8002cd6:	05db      	lsls	r3, r3, #23
 8002cd8:	4605      	mov	r5, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4616      	mov	r6, r2
 8002cde:	d505      	bpl.n	8002cec <__swrite+0x1e>
 8002ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f000 f868 	bl	8002dbc <_lseek_r>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	4632      	mov	r2, r6
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d02:	f000 b817 	b.w	8002d34 <_write_r>

08002d06 <__sseek>:
 8002d06:	b510      	push	{r4, lr}
 8002d08:	460c      	mov	r4, r1
 8002d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d0e:	f000 f855 	bl	8002dbc <_lseek_r>
 8002d12:	1c43      	adds	r3, r0, #1
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	bf15      	itete	ne
 8002d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d22:	81a3      	strheq	r3, [r4, #12]
 8002d24:	bf18      	it	ne
 8002d26:	81a3      	strhne	r3, [r4, #12]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <__sclose>:
 8002d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d2e:	f000 b813 	b.w	8002d58 <_close_r>
	...

08002d34 <_write_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4d07      	ldr	r5, [pc, #28]	; (8002d54 <_write_r+0x20>)
 8002d38:	4604      	mov	r4, r0
 8002d3a:	4608      	mov	r0, r1
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	2200      	movs	r2, #0
 8002d40:	602a      	str	r2, [r5, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f7fe ff22 	bl	8001b8c <_write>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	d102      	bne.n	8002d52 <_write_r+0x1e>
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	b103      	cbz	r3, 8002d52 <_write_r+0x1e>
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
 8002d54:	20000120 	.word	0x20000120

08002d58 <_close_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4d06      	ldr	r5, [pc, #24]	; (8002d74 <_close_r+0x1c>)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	602b      	str	r3, [r5, #0]
 8002d64:	f7fe ff2e 	bl	8001bc4 <_close>
 8002d68:	1c43      	adds	r3, r0, #1
 8002d6a:	d102      	bne.n	8002d72 <_close_r+0x1a>
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	b103      	cbz	r3, 8002d72 <_close_r+0x1a>
 8002d70:	6023      	str	r3, [r4, #0]
 8002d72:	bd38      	pop	{r3, r4, r5, pc}
 8002d74:	20000120 	.word	0x20000120

08002d78 <_fstat_r>:
 8002d78:	b538      	push	{r3, r4, r5, lr}
 8002d7a:	4d07      	ldr	r5, [pc, #28]	; (8002d98 <_fstat_r+0x20>)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	4604      	mov	r4, r0
 8002d80:	4608      	mov	r0, r1
 8002d82:	4611      	mov	r1, r2
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	f7fe ff28 	bl	8001bda <_fstat>
 8002d8a:	1c43      	adds	r3, r0, #1
 8002d8c:	d102      	bne.n	8002d94 <_fstat_r+0x1c>
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	b103      	cbz	r3, 8002d94 <_fstat_r+0x1c>
 8002d92:	6023      	str	r3, [r4, #0]
 8002d94:	bd38      	pop	{r3, r4, r5, pc}
 8002d96:	bf00      	nop
 8002d98:	20000120 	.word	0x20000120

08002d9c <_isatty_r>:
 8002d9c:	b538      	push	{r3, r4, r5, lr}
 8002d9e:	4d06      	ldr	r5, [pc, #24]	; (8002db8 <_isatty_r+0x1c>)
 8002da0:	2300      	movs	r3, #0
 8002da2:	4604      	mov	r4, r0
 8002da4:	4608      	mov	r0, r1
 8002da6:	602b      	str	r3, [r5, #0]
 8002da8:	f7fe ff26 	bl	8001bf8 <_isatty>
 8002dac:	1c43      	adds	r3, r0, #1
 8002dae:	d102      	bne.n	8002db6 <_isatty_r+0x1a>
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	b103      	cbz	r3, 8002db6 <_isatty_r+0x1a>
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
 8002db8:	20000120 	.word	0x20000120

08002dbc <_lseek_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4d07      	ldr	r5, [pc, #28]	; (8002ddc <_lseek_r+0x20>)
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	4608      	mov	r0, r1
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	602a      	str	r2, [r5, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f7fe ff1e 	bl	8001c0c <_lseek>
 8002dd0:	1c43      	adds	r3, r0, #1
 8002dd2:	d102      	bne.n	8002dda <_lseek_r+0x1e>
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	b103      	cbz	r3, 8002dda <_lseek_r+0x1e>
 8002dd8:	6023      	str	r3, [r4, #0]
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
 8002ddc:	20000120 	.word	0x20000120

08002de0 <_read_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4d07      	ldr	r5, [pc, #28]	; (8002e00 <_read_r+0x20>)
 8002de4:	4604      	mov	r4, r0
 8002de6:	4608      	mov	r0, r1
 8002de8:	4611      	mov	r1, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	602a      	str	r2, [r5, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f7fe feaf 	bl	8001b52 <_read>
 8002df4:	1c43      	adds	r3, r0, #1
 8002df6:	d102      	bne.n	8002dfe <_read_r+0x1e>
 8002df8:	682b      	ldr	r3, [r5, #0]
 8002dfa:	b103      	cbz	r3, 8002dfe <_read_r+0x1e>
 8002dfc:	6023      	str	r3, [r4, #0]
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
 8002e00:	20000120 	.word	0x20000120

08002e04 <_init>:
 8002e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e06:	bf00      	nop
 8002e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0a:	bc08      	pop	{r3}
 8002e0c:	469e      	mov	lr, r3
 8002e0e:	4770      	bx	lr

08002e10 <_fini>:
 8002e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e12:	bf00      	nop
 8002e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e16:	bc08      	pop	{r3}
 8002e18:	469e      	mov	lr, r3
 8002e1a:	4770      	bx	lr
