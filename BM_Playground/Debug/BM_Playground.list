
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f20  08000f28  00010f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f20  08000f20  00010f28  2**0
                  CONTENTS
  4 .ARM          00000000  08000f20  08000f20  00010f28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f20  08000f28  00010f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f20  08000f20  00010f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000f28  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000f28  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010f28  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ebd  00000000  00000000  00010f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000569  00000000  00000000  00012e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00013378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00013490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021b9  00000000  00000000  00013550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e81  00000000  00000000  00015709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000802e  00000000  00000000  0001758a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001f5b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000035c  00000000  00000000  0001f608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f08 	.word	0x08000f08

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000f08 	.word	0x08000f08

080001d4 <__aeabi_frsub>:
 80001d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__addsf3>
 80001da:	bf00      	nop

080001dc <__aeabi_fsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e0 <__addsf3>:
 80001e0:	0042      	lsls	r2, r0, #1
 80001e2:	bf1f      	itttt	ne
 80001e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001e8:	ea92 0f03 	teqne	r2, r3
 80001ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f4:	d06a      	beq.n	80002cc <__addsf3+0xec>
 80001f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001fe:	bfc1      	itttt	gt
 8000200:	18d2      	addgt	r2, r2, r3
 8000202:	4041      	eorgt	r1, r0
 8000204:	4048      	eorgt	r0, r1
 8000206:	4041      	eorgt	r1, r0
 8000208:	bfb8      	it	lt
 800020a:	425b      	neglt	r3, r3
 800020c:	2b19      	cmp	r3, #25
 800020e:	bf88      	it	hi
 8000210:	4770      	bxhi	lr
 8000212:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000216:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800021e:	bf18      	it	ne
 8000220:	4240      	negne	r0, r0
 8000222:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000226:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800022e:	bf18      	it	ne
 8000230:	4249      	negne	r1, r1
 8000232:	ea92 0f03 	teq	r2, r3
 8000236:	d03f      	beq.n	80002b8 <__addsf3+0xd8>
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	fa41 fc03 	asr.w	ip, r1, r3
 8000240:	eb10 000c 	adds.w	r0, r0, ip
 8000244:	f1c3 0320 	rsb	r3, r3, #32
 8000248:	fa01 f103 	lsl.w	r1, r1, r3
 800024c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000250:	d502      	bpl.n	8000258 <__addsf3+0x78>
 8000252:	4249      	negs	r1, r1
 8000254:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000258:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800025c:	d313      	bcc.n	8000286 <__addsf3+0xa6>
 800025e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000262:	d306      	bcc.n	8000272 <__addsf3+0x92>
 8000264:	0840      	lsrs	r0, r0, #1
 8000266:	ea4f 0131 	mov.w	r1, r1, rrx
 800026a:	f102 0201 	add.w	r2, r2, #1
 800026e:	2afe      	cmp	r2, #254	; 0xfe
 8000270:	d251      	bcs.n	8000316 <__addsf3+0x136>
 8000272:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000276:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027a:	bf08      	it	eq
 800027c:	f020 0001 	biceq.w	r0, r0, #1
 8000280:	ea40 0003 	orr.w	r0, r0, r3
 8000284:	4770      	bx	lr
 8000286:	0049      	lsls	r1, r1, #1
 8000288:	eb40 0000 	adc.w	r0, r0, r0
 800028c:	3a01      	subs	r2, #1
 800028e:	bf28      	it	cs
 8000290:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000294:	d2ed      	bcs.n	8000272 <__addsf3+0x92>
 8000296:	fab0 fc80 	clz	ip, r0
 800029a:	f1ac 0c08 	sub.w	ip, ip, #8
 800029e:	ebb2 020c 	subs.w	r2, r2, ip
 80002a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002a6:	bfaa      	itet	ge
 80002a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002ac:	4252      	neglt	r2, r2
 80002ae:	4318      	orrge	r0, r3
 80002b0:	bfbc      	itt	lt
 80002b2:	40d0      	lsrlt	r0, r2
 80002b4:	4318      	orrlt	r0, r3
 80002b6:	4770      	bx	lr
 80002b8:	f092 0f00 	teq	r2, #0
 80002bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c0:	bf06      	itte	eq
 80002c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002c6:	3201      	addeq	r2, #1
 80002c8:	3b01      	subne	r3, #1
 80002ca:	e7b5      	b.n	8000238 <__addsf3+0x58>
 80002cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d4:	bf18      	it	ne
 80002d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002da:	d021      	beq.n	8000320 <__addsf3+0x140>
 80002dc:	ea92 0f03 	teq	r2, r3
 80002e0:	d004      	beq.n	80002ec <__addsf3+0x10c>
 80002e2:	f092 0f00 	teq	r2, #0
 80002e6:	bf08      	it	eq
 80002e8:	4608      	moveq	r0, r1
 80002ea:	4770      	bx	lr
 80002ec:	ea90 0f01 	teq	r0, r1
 80002f0:	bf1c      	itt	ne
 80002f2:	2000      	movne	r0, #0
 80002f4:	4770      	bxne	lr
 80002f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fa:	d104      	bne.n	8000306 <__addsf3+0x126>
 80002fc:	0040      	lsls	r0, r0, #1
 80002fe:	bf28      	it	cs
 8000300:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000304:	4770      	bx	lr
 8000306:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030a:	bf3c      	itt	cc
 800030c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000310:	4770      	bxcc	lr
 8000312:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000316:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	4770      	bx	lr
 8000320:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000324:	bf16      	itet	ne
 8000326:	4608      	movne	r0, r1
 8000328:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800032c:	4601      	movne	r1, r0
 800032e:	0242      	lsls	r2, r0, #9
 8000330:	bf06      	itte	eq
 8000332:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000336:	ea90 0f01 	teqeq	r0, r1
 800033a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800033e:	4770      	bx	lr

08000340 <__aeabi_ui2f>:
 8000340:	f04f 0300 	mov.w	r3, #0
 8000344:	e004      	b.n	8000350 <__aeabi_i2f+0x8>
 8000346:	bf00      	nop

08000348 <__aeabi_i2f>:
 8000348:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800034c:	bf48      	it	mi
 800034e:	4240      	negmi	r0, r0
 8000350:	ea5f 0c00 	movs.w	ip, r0
 8000354:	bf08      	it	eq
 8000356:	4770      	bxeq	lr
 8000358:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800035c:	4601      	mov	r1, r0
 800035e:	f04f 0000 	mov.w	r0, #0
 8000362:	e01c      	b.n	800039e <__aeabi_l2f+0x2a>

08000364 <__aeabi_ul2f>:
 8000364:	ea50 0201 	orrs.w	r2, r0, r1
 8000368:	bf08      	it	eq
 800036a:	4770      	bxeq	lr
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	e00a      	b.n	8000388 <__aeabi_l2f+0x14>
 8000372:	bf00      	nop

08000374 <__aeabi_l2f>:
 8000374:	ea50 0201 	orrs.w	r2, r0, r1
 8000378:	bf08      	it	eq
 800037a:	4770      	bxeq	lr
 800037c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000380:	d502      	bpl.n	8000388 <__aeabi_l2f+0x14>
 8000382:	4240      	negs	r0, r0
 8000384:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000388:	ea5f 0c01 	movs.w	ip, r1
 800038c:	bf02      	ittt	eq
 800038e:	4684      	moveq	ip, r0
 8000390:	4601      	moveq	r1, r0
 8000392:	2000      	moveq	r0, #0
 8000394:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000398:	bf08      	it	eq
 800039a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800039e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a2:	fabc f28c 	clz	r2, ip
 80003a6:	3a08      	subs	r2, #8
 80003a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003ac:	db10      	blt.n	80003d0 <__aeabi_l2f+0x5c>
 80003ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b2:	4463      	add	r3, ip
 80003b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80003b8:	f1c2 0220 	rsb	r2, r2, #32
 80003bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c0:	fa20 f202 	lsr.w	r2, r0, r2
 80003c4:	eb43 0002 	adc.w	r0, r3, r2
 80003c8:	bf08      	it	eq
 80003ca:	f020 0001 	biceq.w	r0, r0, #1
 80003ce:	4770      	bx	lr
 80003d0:	f102 0220 	add.w	r2, r2, #32
 80003d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80003d8:	f1c2 0220 	rsb	r2, r2, #32
 80003dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e0:	fa21 f202 	lsr.w	r2, r1, r2
 80003e4:	eb43 0002 	adc.w	r0, r3, r2
 80003e8:	bf08      	it	eq
 80003ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_fmul>:
 80003f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003f8:	bf1e      	ittt	ne
 80003fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003fe:	ea92 0f0c 	teqne	r2, ip
 8000402:	ea93 0f0c 	teqne	r3, ip
 8000406:	d06f      	beq.n	80004e8 <__aeabi_fmul+0xf8>
 8000408:	441a      	add	r2, r3
 800040a:	ea80 0c01 	eor.w	ip, r0, r1
 800040e:	0240      	lsls	r0, r0, #9
 8000410:	bf18      	it	ne
 8000412:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000416:	d01e      	beq.n	8000456 <__aeabi_fmul+0x66>
 8000418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800041c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000420:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000424:	fba0 3101 	umull	r3, r1, r0, r1
 8000428:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800042c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000430:	bf3e      	ittt	cc
 8000432:	0049      	lslcc	r1, r1, #1
 8000434:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000438:	005b      	lslcc	r3, r3, #1
 800043a:	ea40 0001 	orr.w	r0, r0, r1
 800043e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000442:	2afd      	cmp	r2, #253	; 0xfd
 8000444:	d81d      	bhi.n	8000482 <__aeabi_fmul+0x92>
 8000446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800044a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800044e:	bf08      	it	eq
 8000450:	f020 0001 	biceq.w	r0, r0, #1
 8000454:	4770      	bx	lr
 8000456:	f090 0f00 	teq	r0, #0
 800045a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800045e:	bf08      	it	eq
 8000460:	0249      	lsleq	r1, r1, #9
 8000462:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000466:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800046a:	3a7f      	subs	r2, #127	; 0x7f
 800046c:	bfc2      	ittt	gt
 800046e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000472:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000476:	4770      	bxgt	lr
 8000478:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800047c:	f04f 0300 	mov.w	r3, #0
 8000480:	3a01      	subs	r2, #1
 8000482:	dc5d      	bgt.n	8000540 <__aeabi_fmul+0x150>
 8000484:	f112 0f19 	cmn.w	r2, #25
 8000488:	bfdc      	itt	le
 800048a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800048e:	4770      	bxle	lr
 8000490:	f1c2 0200 	rsb	r2, r2, #0
 8000494:	0041      	lsls	r1, r0, #1
 8000496:	fa21 f102 	lsr.w	r1, r1, r2
 800049a:	f1c2 0220 	rsb	r2, r2, #32
 800049e:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004a6:	f140 0000 	adc.w	r0, r0, #0
 80004aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ae:	bf08      	it	eq
 80004b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b4:	4770      	bx	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004be:	bf02      	ittt	eq
 80004c0:	0040      	lsleq	r0, r0, #1
 80004c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004c6:	3a01      	subeq	r2, #1
 80004c8:	d0f9      	beq.n	80004be <__aeabi_fmul+0xce>
 80004ca:	ea40 000c 	orr.w	r0, r0, ip
 80004ce:	f093 0f00 	teq	r3, #0
 80004d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004d6:	bf02      	ittt	eq
 80004d8:	0049      	lsleq	r1, r1, #1
 80004da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004de:	3b01      	subeq	r3, #1
 80004e0:	d0f9      	beq.n	80004d6 <__aeabi_fmul+0xe6>
 80004e2:	ea41 010c 	orr.w	r1, r1, ip
 80004e6:	e78f      	b.n	8000408 <__aeabi_fmul+0x18>
 80004e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004ec:	ea92 0f0c 	teq	r2, ip
 80004f0:	bf18      	it	ne
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d00a      	beq.n	800050e <__aeabi_fmul+0x11e>
 80004f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004fc:	bf18      	it	ne
 80004fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000502:	d1d8      	bne.n	80004b6 <__aeabi_fmul+0xc6>
 8000504:	ea80 0001 	eor.w	r0, r0, r1
 8000508:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800050c:	4770      	bx	lr
 800050e:	f090 0f00 	teq	r0, #0
 8000512:	bf17      	itett	ne
 8000514:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000518:	4608      	moveq	r0, r1
 800051a:	f091 0f00 	teqne	r1, #0
 800051e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000522:	d014      	beq.n	800054e <__aeabi_fmul+0x15e>
 8000524:	ea92 0f0c 	teq	r2, ip
 8000528:	d101      	bne.n	800052e <__aeabi_fmul+0x13e>
 800052a:	0242      	lsls	r2, r0, #9
 800052c:	d10f      	bne.n	800054e <__aeabi_fmul+0x15e>
 800052e:	ea93 0f0c 	teq	r3, ip
 8000532:	d103      	bne.n	800053c <__aeabi_fmul+0x14c>
 8000534:	024b      	lsls	r3, r1, #9
 8000536:	bf18      	it	ne
 8000538:	4608      	movne	r0, r1
 800053a:	d108      	bne.n	800054e <__aeabi_fmul+0x15e>
 800053c:	ea80 0001 	eor.w	r0, r0, r1
 8000540:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000544:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000548:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800054c:	4770      	bx	lr
 800054e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bx	lr

08000558 <__aeabi_fdiv>:
 8000558:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000560:	bf1e      	ittt	ne
 8000562:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000566:	ea92 0f0c 	teqne	r2, ip
 800056a:	ea93 0f0c 	teqne	r3, ip
 800056e:	d069      	beq.n	8000644 <__aeabi_fdiv+0xec>
 8000570:	eba2 0203 	sub.w	r2, r2, r3
 8000574:	ea80 0c01 	eor.w	ip, r0, r1
 8000578:	0249      	lsls	r1, r1, #9
 800057a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800057e:	d037      	beq.n	80005f0 <__aeabi_fdiv+0x98>
 8000580:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000584:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000588:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800058c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000590:	428b      	cmp	r3, r1
 8000592:	bf38      	it	cc
 8000594:	005b      	lslcc	r3, r3, #1
 8000596:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800059a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800059e:	428b      	cmp	r3, r1
 80005a0:	bf24      	itt	cs
 80005a2:	1a5b      	subcs	r3, r3, r1
 80005a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005ac:	bf24      	itt	cs
 80005ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005ba:	bf24      	itt	cs
 80005bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005c8:	bf24      	itt	cs
 80005ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005d2:	011b      	lsls	r3, r3, #4
 80005d4:	bf18      	it	ne
 80005d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005da:	d1e0      	bne.n	800059e <__aeabi_fdiv+0x46>
 80005dc:	2afd      	cmp	r2, #253	; 0xfd
 80005de:	f63f af50 	bhi.w	8000482 <__aeabi_fmul+0x92>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005e8:	bf08      	it	eq
 80005ea:	f020 0001 	biceq.w	r0, r0, #1
 80005ee:	4770      	bx	lr
 80005f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005f8:	327f      	adds	r2, #127	; 0x7f
 80005fa:	bfc2      	ittt	gt
 80005fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000600:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000604:	4770      	bxgt	lr
 8000606:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800060a:	f04f 0300 	mov.w	r3, #0
 800060e:	3a01      	subs	r2, #1
 8000610:	e737      	b.n	8000482 <__aeabi_fmul+0x92>
 8000612:	f092 0f00 	teq	r2, #0
 8000616:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800061a:	bf02      	ittt	eq
 800061c:	0040      	lsleq	r0, r0, #1
 800061e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000622:	3a01      	subeq	r2, #1
 8000624:	d0f9      	beq.n	800061a <__aeabi_fdiv+0xc2>
 8000626:	ea40 000c 	orr.w	r0, r0, ip
 800062a:	f093 0f00 	teq	r3, #0
 800062e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000632:	bf02      	ittt	eq
 8000634:	0049      	lsleq	r1, r1, #1
 8000636:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800063a:	3b01      	subeq	r3, #1
 800063c:	d0f9      	beq.n	8000632 <__aeabi_fdiv+0xda>
 800063e:	ea41 010c 	orr.w	r1, r1, ip
 8000642:	e795      	b.n	8000570 <__aeabi_fdiv+0x18>
 8000644:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000648:	ea92 0f0c 	teq	r2, ip
 800064c:	d108      	bne.n	8000660 <__aeabi_fdiv+0x108>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	f47f af7d 	bne.w	800054e <__aeabi_fmul+0x15e>
 8000654:	ea93 0f0c 	teq	r3, ip
 8000658:	f47f af70 	bne.w	800053c <__aeabi_fmul+0x14c>
 800065c:	4608      	mov	r0, r1
 800065e:	e776      	b.n	800054e <__aeabi_fmul+0x15e>
 8000660:	ea93 0f0c 	teq	r3, ip
 8000664:	d104      	bne.n	8000670 <__aeabi_fdiv+0x118>
 8000666:	024b      	lsls	r3, r1, #9
 8000668:	f43f af4c 	beq.w	8000504 <__aeabi_fmul+0x114>
 800066c:	4608      	mov	r0, r1
 800066e:	e76e      	b.n	800054e <__aeabi_fmul+0x15e>
 8000670:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000674:	bf18      	it	ne
 8000676:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800067a:	d1ca      	bne.n	8000612 <__aeabi_fdiv+0xba>
 800067c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000680:	f47f af5c 	bne.w	800053c <__aeabi_fmul+0x14c>
 8000684:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000688:	f47f af3c 	bne.w	8000504 <__aeabi_fmul+0x114>
 800068c:	e75f      	b.n	800054e <__aeabi_fmul+0x15e>
 800068e:	bf00      	nop

08000690 <__aeabi_f2uiz>:
 8000690:	0042      	lsls	r2, r0, #1
 8000692:	d20e      	bcs.n	80006b2 <__aeabi_f2uiz+0x22>
 8000694:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000698:	d30b      	bcc.n	80006b2 <__aeabi_f2uiz+0x22>
 800069a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800069e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006a2:	d409      	bmi.n	80006b8 <__aeabi_f2uiz+0x28>
 80006a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006ac:	fa23 f002 	lsr.w	r0, r3, r2
 80006b0:	4770      	bx	lr
 80006b2:	f04f 0000 	mov.w	r0, #0
 80006b6:	4770      	bx	lr
 80006b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006bc:	d101      	bne.n	80006c2 <__aeabi_f2uiz+0x32>
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	d102      	bne.n	80006c8 <__aeabi_f2uiz+0x38>
 80006c2:	f04f 30ff 	mov.w	r0, #4294967295
 80006c6:	4770      	bx	lr
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <GPIO_PeriClockControl>:
#include "F401RE_GPIO.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d141      	bne.n	8000766 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a43      	ldr	r2, [pc, #268]	; (80007f4 <GPIO_PeriClockControl+0x124>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80006ea:	4b43      	ldr	r3, [pc, #268]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a42      	ldr	r2, [pc, #264]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80006f6:	e077      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a40      	ldr	r2, [pc, #256]	; (80007fc <GPIO_PeriClockControl+0x12c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d106      	bne.n	800070e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000700:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000704:	4a3c      	ldr	r2, [pc, #240]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070c:	e06c      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a3b      	ldr	r2, [pc, #236]	; (8000800 <GPIO_PeriClockControl+0x130>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000716:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a37      	ldr	r2, [pc, #220]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000722:	e061      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a37      	ldr	r2, [pc, #220]	; (8000804 <GPIO_PeriClockControl+0x134>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d106      	bne.n	800073a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800072e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000730:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000732:	f043 0308 	orr.w	r3, r3, #8
 8000736:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000738:	e056      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4a32      	ldr	r2, [pc, #200]	; (8000808 <GPIO_PeriClockControl+0x138>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d106      	bne.n	8000750 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a2c      	ldr	r2, [pc, #176]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074e:	e04b      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4a2e      	ldr	r2, [pc, #184]	; (800080c <GPIO_PeriClockControl+0x13c>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d147      	bne.n	80007e8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800075e:	f043 0320 	orr.w	r3, r3, #32
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000764:	e040      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <GPIO_PeriClockControl+0x124>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d106      	bne.n	800077c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800076e:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000774:	f023 0301 	bic.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
}
 800077a:	e035      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <GPIO_PeriClockControl+0x12c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d106      	bne.n	8000792 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000784:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800078a:	f023 0302 	bic.w	r3, r3, #2
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000790:	e02a      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <GPIO_PeriClockControl+0x130>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d106      	bne.n	80007a8 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a16      	ldr	r2, [pc, #88]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007a0:	f023 0304 	bic.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a6:	e01f      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <GPIO_PeriClockControl+0x134>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d106      	bne.n	80007be <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	4a10      	ldr	r2, [pc, #64]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007b6:	f023 0308 	bic.w	r3, r3, #8
 80007ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007bc:	e014      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4a11      	ldr	r2, [pc, #68]	; (8000808 <GPIO_PeriClockControl+0x138>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d106      	bne.n	80007d4 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007cc:	f023 0310 	bic.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007d2:	e009      	b.n	80007e8 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4a0d      	ldr	r2, [pc, #52]	; (800080c <GPIO_PeriClockControl+0x13c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d105      	bne.n	80007e8 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <GPIO_PeriClockControl+0x128>)
 80007e2:	f023 0320 	bic.w	r3, r3, #32
 80007e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020400 	.word	0x40020400
 8000800:	40020800 	.word	0x40020800
 8000804:	40020c00 	.word	0x40020c00
 8000808:	40021000 	.word	0x40021000
 800080c:	40021400 	.word	0x40021400

08000810 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff54 	bl	80006d0 <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d81f      	bhi.n	8000870 <GPIO_Init+0x60>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	795b      	ldrb	r3, [r3, #5]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2103      	movs	r1, #3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	400a      	ands	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
	}else{
		//this part will code later . ( interrupt mode)
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	799b      	ldrb	r3, [r3, #6]
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	fa02 f303 	lsl.w	r3, r2, r3
 8000880:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	689a      	ldr	r2, [r3, #8]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2103      	movs	r1, #3
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4619      	mov	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	400a      	ands	r2, r1
 800089e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6899      	ldr	r1, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	430a      	orrs	r2, r1
 80008ae:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	79db      	ldrb	r3, [r3, #7]
 80008b4:	461a      	mov	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	791b      	ldrb	r3, [r3, #4]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2103      	movs	r1, #3
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	400a      	ands	r2, r1
 80008de:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68d9      	ldr	r1, [r3, #12]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7a1b      	ldrb	r3, [r3, #8]
 80008f4:	461a      	mov	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	791b      	ldrb	r3, [r3, #4]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	685a      	ldr	r2, [r3, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	791b      	ldrb	r3, [r3, #4]
 800090a:	4619      	mov	r1, r3
 800090c:	2301      	movs	r3, #1
 800090e:	408b      	lsls	r3, r1
 8000910:	43db      	mvns	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	400a      	ands	r2, r1
 800091a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6859      	ldr	r1, [r3, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	430a      	orrs	r2, r1
 800092a:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d131      	bne.n	8000998 <GPIO_Init+0x188>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	791b      	ldrb	r3, [r3, #4]
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	791b      	ldrb	r3, [r3, #4]
 8000940:	f003 0307 	and.w	r3, r3, #7
 8000944:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	7afa      	ldrb	r2, [r7, #11]
 800094c:	3208      	adds	r2, #8
 800094e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000952:	7abb      	ldrb	r3, [r7, #10]
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	220f      	movs	r2, #15
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	43db      	mvns	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	7afa      	ldrb	r2, [r7, #11]
 8000966:	4001      	ands	r1, r0
 8000968:	3208      	adds	r2, #8
 800096a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	7afa      	ldrb	r2, [r7, #11]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	461a      	mov	r2, r3
 8000980:	7abb      	ldrb	r3, [r7, #10]
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	4618      	mov	r0, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	7afa      	ldrb	r2, [r7, #11]
 8000990:	4301      	orrs	r1, r0
 8000992:	3208      	adds	r2, #8
 8000994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <RCC_Clock_Config>:

#include "F401RE_RCC.h"

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80009b4:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 80009bc:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	791b      	ldrb	r3, [r3, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d126      	bne.n	8000a1a <RCC_Clock_Config+0x7a>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f042 0201 	orr.w	r2, r2, #1
 80009da:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 80009dc:	bf00      	nop
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0302 	and.w	r3, r3, #2
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f8      	beq.n	80009de <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689a      	ldr	r2, [r3, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f022 0203 	bic.w	r2, r2, #3
 80009fa:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6892      	ldr	r2, [r2, #8]
 8000a06:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000a08:	bf00      	nop
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	f003 030c 	and.w	r3, r3, #12
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <RCC_Clock_Config+0x6a>

		// 5. Wait until PLL is used as the system clock
		//3 << 2
		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
	}
}
 8000a18:	e05c      	b.n	8000ad4 <RCC_Clock_Config+0x134>
	} else if (pRCC_Handle_t->RCC_Config.CLK_Source == PLLCLK) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	791b      	ldrb	r3, [r3, #4]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d158      	bne.n	8000ad4 <RCC_Clock_Config+0x134>
		if (!(pRCC_Handle_t->pRCC->PLLCFGR & ~RCC_PLLCFGR_PLLSRC_HSI)) {
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10f      	bne.n	8000a50 <RCC_Clock_Config+0xb0>
			pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0201 	orr.w	r2, r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
			while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000a40:	bf00      	nop
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 0302 	and.w	r3, r3, #2
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d0f8      	beq.n	8000a42 <RCC_Clock_Config+0xa2>
		pRCC_Handle_t->pRCC->PLLCFGR &= RCC_PLLCFGR_PLLSRC_HSI;  // Ensure HSI is selected as PLL source
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000a5e:	605a      	str	r2, [r3, #4]
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_M |
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	685a      	ldr	r2, [r3, #4]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6899      	ldr	r1, [r3, #8]
				(pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_N << 6) |
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	019b      	lsls	r3, r3, #6
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_M |
 8000a70:	4319      	orrs	r1, r3
				(pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_P << 16));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	041b      	lsls	r3, r3, #16
				(pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_N << 6) |
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	4619      	mov	r1, r3
		pRCC_Handle_t->pRCC->PLLCFGR |= (pRCC_Handle_t->RCC_Config.PLL_Facs.PLL_M |
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	605a      	str	r2, [r3, #4]
		pRCC_Handle_t->pRCC->CR |= RCC_CR_PLLON;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a92:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_PLLRDY)); // Wait until PLL is ready
 8000a94:	bf00      	nop
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f8      	beq.n	8000a96 <RCC_Clock_Config+0xf6>
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0203 	bic.w	r2, r2, #3
 8000ab2:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as system clock source
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0202 	orr.w	r2, r2, #2
 8000ac2:	609a      	str	r2, [r3, #8]
		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
 8000ac4:	bf00      	nop
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 030f 	and.w	r3, r3, #15
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	d1f8      	bne.n	8000ac6 <RCC_Clock_Config+0x126>
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <GP_TIM_PWM_INIT>:


#include "F401RE_TIMER.h"

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af0:	d105      	bne.n	8000afe <GP_TIM_PWM_INIT+0x1e>
		TIM2_PCLK_EN();
 8000af2:	4b85      	ldr	r3, [pc, #532]	; (8000d08 <GP_TIM_PWM_INIT+0x228>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a84      	ldr	r2, [pc, #528]	; (8000d08 <GP_TIM_PWM_INIT+0x228>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
	}//add other cases later
	while (!(RCC->APB1ENR & (1 << 0))) {}
 8000afe:	bf00      	nop
 8000b00:	4b81      	ldr	r3, [pc, #516]	; (8000d08 <GP_TIM_PWM_INIT+0x228>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <GP_TIM_PWM_INIT+0x20>
	//WAIT A BIT

	// Enable Auto-Reload Preload (ARPE)
	pGP_TIM_Handle->pTIMx->CR1 |= (1 << 7);  // ARPE: Auto-Reload Preload Enable
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b1a:	601a      	str	r2, [r3, #0]

	// Set Prescaler & Auto-Reload Value
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	889a      	ldrh	r2, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = (pGP_TIM_Handle->GP_TIM_Config.Period - 1);  // Frequency
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	88db      	ldrh	r3, [r3, #6]
 8000b2a:	1e5a      	subs	r2, r3, #1
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure PWM Channels
	for (int ch = 0; ch < 4; ch++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	e0dd      	b.n	8000cf4 <GP_TIM_PWM_INIT+0x214>
		if (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled) {
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	791b      	ldrb	r3, [r3, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80d1 	beq.w	8000cec <GP_TIM_PWM_INIT+0x20c>
			uint16_t dutyCycle = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3302      	adds	r3, #2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	88db      	ldrh	r3, [r3, #6]
 8000b56:	817b      	strh	r3, [r7, #10]
			dutyCycle = (uint16_t)(((float)dutyCycle / 100) * pGP_TIM_Handle->GP_TIM_Config.Period); // ex.(50/100)
 8000b58:	897b      	ldrh	r3, [r7, #10]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff fbf0 	bl	8000340 <__aeabi_ui2f>
 8000b60:	4603      	mov	r3, r0
 8000b62:	496a      	ldr	r1, [pc, #424]	; (8000d0c <GP_TIM_PWM_INIT+0x22c>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fcf7 	bl	8000558 <__aeabi_fdiv>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	88db      	ldrh	r3, [r3, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fbe8 	bl	8000348 <__aeabi_i2f>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	f7ff fc37 	bl	80003f0 <__aeabi_fmul>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fd83 	bl	8000690 <__aeabi_f2uiz>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	817b      	strh	r3, [r7, #10]
			//79 result here
			switch (ch) {
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	f200 80ac 	bhi.w	8000cee <GP_TIM_PWM_INIT+0x20e>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <GP_TIM_PWM_INIT+0xbc>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bad 	.word	0x08000bad
 8000ba0:	08000bfb 	.word	0x08000bfb
 8000ba4:	08000c4d 	.word	0x08000c4d
 8000ba8:	08000c9b 	.word	0x08000c9b
			case CH1:
				pGP_TIM_Handle->pTIMx->CCR1 = dutyCycle;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	897a      	ldrh	r2, [r7, #10]
 8000bb2:	635a      	str	r2, [r3, #52]	; 0x34
				pGP_TIM_Handle->pTIMx->CCMR1 &= ~(7 << 4);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	699a      	ldr	r2, [r3, #24]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000bc2:	619a      	str	r2, [r3, #24]
				pGP_TIM_Handle->pTIMx->CCMR1 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 4) : (7 << 4);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	795b      	ldrb	r3, [r3, #5]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <GP_TIM_PWM_INIT+0xfe>
 8000bda:	2160      	movs	r1, #96	; 0x60
 8000bdc:	e000      	b.n	8000be0 <GP_TIM_PWM_INIT+0x100>
 8000bde:	2170      	movs	r1, #112	; 0x70
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	430a      	orrs	r2, r1
 8000be6:	619a      	str	r2, [r3, #24]
				pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << 3); // Enable Output Compare Preload
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	699a      	ldr	r2, [r3, #24]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f042 0208 	orr.w	r2, r2, #8
 8000bf6:	619a      	str	r2, [r3, #24]
				break;
 8000bf8:	e079      	b.n	8000cee <GP_TIM_PWM_INIT+0x20e>

			case CH2:
				pGP_TIM_Handle->pTIMx->CCR2 = dutyCycle;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	897a      	ldrh	r2, [r7, #10]
 8000c00:	639a      	str	r2, [r3, #56]	; 0x38
				pGP_TIM_Handle->pTIMx->CCMR1 &= ~(7 << 12);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000c10:	619a      	str	r2, [r3, #24]
				pGP_TIM_Handle->pTIMx->CCMR1 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 12) : (7 << 12);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	699a      	ldr	r2, [r3, #24]
 8000c18:	6879      	ldr	r1, [r7, #4]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <GP_TIM_PWM_INIT+0x14e>
 8000c28:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c2c:	e001      	b.n	8000c32 <GP_TIM_PWM_INIT+0x152>
 8000c2e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	619a      	str	r2, [r3, #24]
				pGP_TIM_Handle->pTIMx->CCMR1 |= (1 << 11); // Enable Output Compare Preload
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	699a      	ldr	r2, [r3, #24]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c48:	619a      	str	r2, [r3, #24]
				break;
 8000c4a:	e050      	b.n	8000cee <GP_TIM_PWM_INIT+0x20e>

			case CH3:
				pGP_TIM_Handle->pTIMx->CCR3 = dutyCycle;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	897a      	ldrh	r2, [r7, #10]
 8000c52:	63da      	str	r2, [r3, #60]	; 0x3c
				pGP_TIM_Handle->pTIMx->CCMR2 &= ~(7 << 4);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c62:	61da      	str	r2, [r3, #28]
				pGP_TIM_Handle->pTIMx->CCMR2 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 4) : (7 << 4);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	795b      	ldrb	r3, [r3, #5]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <GP_TIM_PWM_INIT+0x19e>
 8000c7a:	2160      	movs	r1, #96	; 0x60
 8000c7c:	e000      	b.n	8000c80 <GP_TIM_PWM_INIT+0x1a0>
 8000c7e:	2170      	movs	r1, #112	; 0x70
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	61da      	str	r2, [r3, #28]
				pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << 3); // Enable Output Compare Preload
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	69da      	ldr	r2, [r3, #28]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0208 	orr.w	r2, r2, #8
 8000c96:	61da      	str	r2, [r3, #28]
				break;
 8000c98:	e029      	b.n	8000cee <GP_TIM_PWM_INIT+0x20e>

			case CH4:
				pGP_TIM_Handle->pTIMx->CCR4 = dutyCycle;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	897a      	ldrh	r2, [r7, #10]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
				pGP_TIM_Handle->pTIMx->CCMR2 &= ~(7 << 12);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000cb0:	61da      	str	r2, [r3, #28]
				pGP_TIM_Handle->pTIMx->CCMR2 |= (pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode == PWM1) ? (6 << 12) : (7 << 12);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	69da      	ldr	r2, [r3, #28]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	795b      	ldrb	r3, [r3, #5]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <GP_TIM_PWM_INIT+0x1ee>
 8000cc8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ccc:	e001      	b.n	8000cd2 <GP_TIM_PWM_INIT+0x1f2>
 8000cce:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	61da      	str	r2, [r3, #28]
				pGP_TIM_Handle->pTIMx->CCMR2 |= (1 << 11); // Enable Output Compare Preload
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69da      	ldr	r2, [r3, #28]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ce8:	61da      	str	r2, [r3, #28]
				break;
 8000cea:	e000      	b.n	8000cee <GP_TIM_PWM_INIT+0x20e>
			}
		}
 8000cec:	bf00      	nop
	for (int ch = 0; ch < 4; ch++) {
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	f77f af1e 	ble.w	8000b38 <GP_TIM_PWM_INIT+0x58>
	}
	//pGP_TIM_Handle->pTIMx->CR1 |= (1 << 0); NOT NECESSARY BEACUSE PWM START DOES IT
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd90      	pop	{r4, r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	42c80000 	.word	0x42c80000

08000d10 <GP_TIM_PWM_Change_State>:
		// Enable the Timer Counter (CEN Bit)
		pGP_TIM_Handle->pTIMx->CR1 |= (1 << 0);  // Start the Timer (CEN Bit)
	}
}

void GP_TIM_PWM_Change_State(GP_TIM_Handle_t *pTIM_Handle, uint8_t Channel, uint8_t State){
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	70bb      	strb	r3, [r7, #2]
	//briefly disable timer
	//0 1 2 3
	if(State == PWM_OUTPUT){
 8000d20:	78bb      	ldrb	r3, [r7, #2]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d10d      	bne.n	8000d42 <GP_TIM_PWM_Change_State+0x32>
		pTIM_Handle->pTIMx->CCER |= (1 << (Channel * 4));  // Enable CH (CC1E)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6a1a      	ldr	r2, [r3, #32]
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	621a      	str	r2, [r3, #32]
		pTIM_Handle->pTIMx->CCER &= ~(1 << (Channel * 4));  // Ground CH (CC1E)
		//ADD WAIT
	}


}
 8000d40:	e00d      	b.n	8000d5e <GP_TIM_PWM_Change_State+0x4e>
		pTIM_Handle->pTIMx->CCER &= ~(1 << (Channel * 4));  // Ground CH (CC1E)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	6a1a      	ldr	r2, [r3, #32]
 8000d48:	78fb      	ldrb	r3, [r7, #3]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	621a      	str	r2, [r3, #32]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <drive_FWD>:
} //would rather turn right and left alternatively and usew random to calc he turn time => angle



//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(AD_TIM_Handle_t *pGP_TIM_Handle){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	pGP_TIM_Handle->pTIMx->CR1 &= ~(1 << 0);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
	GP_TIM_PWM_Change_State(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ffc3 	bl	8000d10 <GP_TIM_PWM_Change_State>
	GP_TIM_PWM_Change_State(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffbe 	bl	8000d10 <GP_TIM_PWM_Change_State>
	GP_TIM_PWM_Change_State(pGP_TIM_Handle,CH2,GND);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffb9 	bl	8000d10 <GP_TIM_PWM_Change_State>
	GP_TIM_PWM_Change_State(pGP_TIM_Handle,CH4,GND);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2103      	movs	r1, #3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ffb4 	bl	8000d10 <GP_TIM_PWM_Change_State>
	//WAIT FOR CHANNEL 4
	pGP_TIM_Handle->pTIMx->CR1 |= (1 << 0);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 0201 	orr.w	r2, r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <main>:





int main(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	; 0x50
 8000dc4:	af00      	add	r7, sp, #0

	uint8_t START = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <main+0xa4>)
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_M = 16;
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_N = 400;
	//RCC_Handle.RCC_Config.PLL_Facs.PLL_P = 3;
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;
 8000dde:	2304      	movs	r3, #4
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
	//=> 8Mhz for peripherals, 16 for timers
	RCC_Clock_Config(&RCC_Handle);
 8000de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fdda 	bl	80009a0 <RCC_Clock_Config>

	// Timer Configuration
	GP_TIM_Handle_t TIM2_PWM;
	TIM2_PWM.pTIMx = TIM2;
 8000dec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df0:	613b      	str	r3, [r7, #16]
	TIM2_PWM.GP_TIM_Config.Prescaler = 4;
 8000df2:	2304      	movs	r3, #4
 8000df4:	82bb      	strh	r3, [r7, #20]
	TIM2_PWM.GP_TIM_Config.Period = 100;
 8000df6:	2364      	movs	r3, #100	; 0x64
 8000df8:	82fb      	strh	r3, [r7, #22]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = 1;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	773b      	strb	r3, [r7, #28]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f887 3020 	strb.w	r3, [r7, #32]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	777b      	strb	r3, [r7, #29]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = DutyCycle_80;  // 80% Duty
 8000e14:	2350      	movs	r3, #80	; 0x50
 8000e16:	83fb      	strh	r3, [r7, #30]

	GP_TIM_PWM_INIT(&TIM2_PWM);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fe5f 	bl	8000ae0 <GP_TIM_PWM_INIT>
    //GP_TIM_PWM_Start(&TIM2_PWM, CH1);
	drive_FWD(&TIM2_PWM);//activate on start only
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff9e 	bl	8000d68 <drive_FWD>

	// GPIO Configuration for TIM1 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <main+0xa8>)
 8000e2e:	607b      	str	r3, [r7, #4]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	723b      	strb	r3, [r7, #8]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000e34:	2302      	movs	r3, #2
 8000e36:	727b      	strb	r3, [r7, #9]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8000e38:	2303      	movs	r3, #3
 8000e3a:	72bb      	strb	r3, [r7, #10]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	733b      	strb	r3, [r7, #12]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 8000e40:	2301      	movs	r3, #1
 8000e42:	737b      	strb	r3, [r7, #13]
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e44:	2300      	movs	r3, #0
 8000e46:	72fb      	strb	r3, [r7, #11]



	// Initialize GPIO
	GPIO_Init(&GpioCH1);
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fce0 	bl	8000810 <GPIO_Init>

	/* Loop forever */
	//an ISR should set START to 1, another should set it to 0
	while (START) {
 8000e50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1fb      	bne.n	8000e50 <main+0x90>

	}

	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3750      	adds	r7, #80	; 0x50
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e9a:	f000 f811 	bl	8000ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9e:	f7ff ff8f 	bl	8000dc0 <main>

08000ea2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   r0, =_estack
 8000ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000eb0:	08000f28 	.word	0x08000f28
  ldr r2, =_sbss
 8000eb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000eb8:	2000001c 	.word	0x2000001c

08000ebc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC_IRQHandler>
	...

08000ec0 <__libc_init_array>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4d0d      	ldr	r5, [pc, #52]	; (8000ef8 <__libc_init_array+0x38>)
 8000ec4:	4c0d      	ldr	r4, [pc, #52]	; (8000efc <__libc_init_array+0x3c>)
 8000ec6:	1b64      	subs	r4, r4, r5
 8000ec8:	10a4      	asrs	r4, r4, #2
 8000eca:	2600      	movs	r6, #0
 8000ecc:	42a6      	cmp	r6, r4
 8000ece:	d109      	bne.n	8000ee4 <__libc_init_array+0x24>
 8000ed0:	4d0b      	ldr	r5, [pc, #44]	; (8000f00 <__libc_init_array+0x40>)
 8000ed2:	4c0c      	ldr	r4, [pc, #48]	; (8000f04 <__libc_init_array+0x44>)
 8000ed4:	f000 f818 	bl	8000f08 <_init>
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	10a4      	asrs	r4, r4, #2
 8000edc:	2600      	movs	r6, #0
 8000ede:	42a6      	cmp	r6, r4
 8000ee0:	d105      	bne.n	8000eee <__libc_init_array+0x2e>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee8:	4798      	blx	r3
 8000eea:	3601      	adds	r6, #1
 8000eec:	e7ee      	b.n	8000ecc <__libc_init_array+0xc>
 8000eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef2:	4798      	blx	r3
 8000ef4:	3601      	adds	r6, #1
 8000ef6:	e7f2      	b.n	8000ede <__libc_init_array+0x1e>
 8000ef8:	08000f20 	.word	0x08000f20
 8000efc:	08000f20 	.word	0x08000f20
 8000f00:	08000f20 	.word	0x08000f20
 8000f04:	08000f24 	.word	0x08000f24

08000f08 <_init>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	bf00      	nop
 8000f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0e:	bc08      	pop	{r3}
 8000f10:	469e      	mov	lr, r3
 8000f12:	4770      	bx	lr

08000f14 <_fini>:
 8000f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f16:	bf00      	nop
 8000f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1a:	bc08      	pop	{r3}
 8000f1c:	469e      	mov	lr, r3
 8000f1e:	4770      	bx	lr
