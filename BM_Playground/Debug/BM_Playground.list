
BM_Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d28  08002d28  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002d28  08002d28  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d28  08002d28  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d28  08002d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000064  08002d94  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08002d94  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a6b  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bfd  00000000  00000000  00023af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  000246f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000268  00000000  00000000  000249f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c79  00000000  00000000  00024c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003bc2  00000000  00000000  000288d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c0c9  00000000  00000000  0002c49b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00038564  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001464  00000000  00000000  000385b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002bc8 	.word	0x08002bc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08002bc8 	.word	0x08002bc8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_frsub>:
 8000280:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__addsf3>
 8000286:	bf00      	nop

08000288 <__aeabi_fsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800028c <__addsf3>:
 800028c:	0042      	lsls	r2, r0, #1
 800028e:	bf1f      	itttt	ne
 8000290:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000294:	ea92 0f03 	teqne	r2, r3
 8000298:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800029c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002a0:	d06a      	beq.n	8000378 <__addsf3+0xec>
 80002a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002aa:	bfc1      	itttt	gt
 80002ac:	18d2      	addgt	r2, r2, r3
 80002ae:	4041      	eorgt	r1, r0
 80002b0:	4048      	eorgt	r0, r1
 80002b2:	4041      	eorgt	r1, r0
 80002b4:	bfb8      	it	lt
 80002b6:	425b      	neglt	r3, r3
 80002b8:	2b19      	cmp	r3, #25
 80002ba:	bf88      	it	hi
 80002bc:	4770      	bxhi	lr
 80002be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002ca:	bf18      	it	ne
 80002cc:	4240      	negne	r0, r0
 80002ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80002d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80002da:	bf18      	it	ne
 80002dc:	4249      	negne	r1, r1
 80002de:	ea92 0f03 	teq	r2, r3
 80002e2:	d03f      	beq.n	8000364 <__addsf3+0xd8>
 80002e4:	f1a2 0201 	sub.w	r2, r2, #1
 80002e8:	fa41 fc03 	asr.w	ip, r1, r3
 80002ec:	eb10 000c 	adds.w	r0, r0, ip
 80002f0:	f1c3 0320 	rsb	r3, r3, #32
 80002f4:	fa01 f103 	lsl.w	r1, r1, r3
 80002f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__addsf3+0x78>
 80002fe:	4249      	negs	r1, r1
 8000300:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000304:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000308:	d313      	bcc.n	8000332 <__addsf3+0xa6>
 800030a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800030e:	d306      	bcc.n	800031e <__addsf3+0x92>
 8000310:	0840      	lsrs	r0, r0, #1
 8000312:	ea4f 0131 	mov.w	r1, r1, rrx
 8000316:	f102 0201 	add.w	r2, r2, #1
 800031a:	2afe      	cmp	r2, #254	; 0xfe
 800031c:	d251      	bcs.n	80003c2 <__addsf3+0x136>
 800031e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000322:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000326:	bf08      	it	eq
 8000328:	f020 0001 	biceq.w	r0, r0, #1
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	4770      	bx	lr
 8000332:	0049      	lsls	r1, r1, #1
 8000334:	eb40 0000 	adc.w	r0, r0, r0
 8000338:	3a01      	subs	r2, #1
 800033a:	bf28      	it	cs
 800033c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000340:	d2ed      	bcs.n	800031e <__addsf3+0x92>
 8000342:	fab0 fc80 	clz	ip, r0
 8000346:	f1ac 0c08 	sub.w	ip, ip, #8
 800034a:	ebb2 020c 	subs.w	r2, r2, ip
 800034e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000352:	bfaa      	itet	ge
 8000354:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000358:	4252      	neglt	r2, r2
 800035a:	4318      	orrge	r0, r3
 800035c:	bfbc      	itt	lt
 800035e:	40d0      	lsrlt	r0, r2
 8000360:	4318      	orrlt	r0, r3
 8000362:	4770      	bx	lr
 8000364:	f092 0f00 	teq	r2, #0
 8000368:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800036c:	bf06      	itte	eq
 800036e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000372:	3201      	addeq	r2, #1
 8000374:	3b01      	subne	r3, #1
 8000376:	e7b5      	b.n	80002e4 <__addsf3+0x58>
 8000378:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800037c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000380:	bf18      	it	ne
 8000382:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000386:	d021      	beq.n	80003cc <__addsf3+0x140>
 8000388:	ea92 0f03 	teq	r2, r3
 800038c:	d004      	beq.n	8000398 <__addsf3+0x10c>
 800038e:	f092 0f00 	teq	r2, #0
 8000392:	bf08      	it	eq
 8000394:	4608      	moveq	r0, r1
 8000396:	4770      	bx	lr
 8000398:	ea90 0f01 	teq	r0, r1
 800039c:	bf1c      	itt	ne
 800039e:	2000      	movne	r0, #0
 80003a0:	4770      	bxne	lr
 80003a2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003a6:	d104      	bne.n	80003b2 <__addsf3+0x126>
 80003a8:	0040      	lsls	r0, r0, #1
 80003aa:	bf28      	it	cs
 80003ac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003b0:	4770      	bx	lr
 80003b2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003b6:	bf3c      	itt	cc
 80003b8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003bc:	4770      	bxcc	lr
 80003be:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003c2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003c6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003ca:	4770      	bx	lr
 80003cc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80003d0:	bf16      	itet	ne
 80003d2:	4608      	movne	r0, r1
 80003d4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80003d8:	4601      	movne	r1, r0
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	bf06      	itte	eq
 80003de:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80003e2:	ea90 0f01 	teqeq	r0, r1
 80003e6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003ea:	4770      	bx	lr

080003ec <__aeabi_ui2f>:
 80003ec:	f04f 0300 	mov.w	r3, #0
 80003f0:	e004      	b.n	80003fc <__aeabi_i2f+0x8>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2f>:
 80003f4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003f8:	bf48      	it	mi
 80003fa:	4240      	negmi	r0, r0
 80003fc:	ea5f 0c00 	movs.w	ip, r0
 8000400:	bf08      	it	eq
 8000402:	4770      	bxeq	lr
 8000404:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000408:	4601      	mov	r1, r0
 800040a:	f04f 0000 	mov.w	r0, #0
 800040e:	e01c      	b.n	800044a <__aeabi_l2f+0x2a>

08000410 <__aeabi_ul2f>:
 8000410:	ea50 0201 	orrs.w	r2, r0, r1
 8000414:	bf08      	it	eq
 8000416:	4770      	bxeq	lr
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	e00a      	b.n	8000434 <__aeabi_l2f+0x14>
 800041e:	bf00      	nop

08000420 <__aeabi_l2f>:
 8000420:	ea50 0201 	orrs.w	r2, r0, r1
 8000424:	bf08      	it	eq
 8000426:	4770      	bxeq	lr
 8000428:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__aeabi_l2f+0x14>
 800042e:	4240      	negs	r0, r0
 8000430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000434:	ea5f 0c01 	movs.w	ip, r1
 8000438:	bf02      	ittt	eq
 800043a:	4684      	moveq	ip, r0
 800043c:	4601      	moveq	r1, r0
 800043e:	2000      	moveq	r0, #0
 8000440:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000444:	bf08      	it	eq
 8000446:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800044a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800044e:	fabc f28c 	clz	r2, ip
 8000452:	3a08      	subs	r2, #8
 8000454:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000458:	db10      	blt.n	800047c <__aeabi_l2f+0x5c>
 800045a:	fa01 fc02 	lsl.w	ip, r1, r2
 800045e:	4463      	add	r3, ip
 8000460:	fa00 fc02 	lsl.w	ip, r0, r2
 8000464:	f1c2 0220 	rsb	r2, r2, #32
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	eb43 0002 	adc.w	r0, r3, r2
 8000474:	bf08      	it	eq
 8000476:	f020 0001 	biceq.w	r0, r0, #1
 800047a:	4770      	bx	lr
 800047c:	f102 0220 	add.w	r2, r2, #32
 8000480:	fa01 fc02 	lsl.w	ip, r1, r2
 8000484:	f1c2 0220 	rsb	r2, r2, #32
 8000488:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800048c:	fa21 f202 	lsr.w	r2, r1, r2
 8000490:	eb43 0002 	adc.w	r0, r3, r2
 8000494:	bf08      	it	eq
 8000496:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800049a:	4770      	bx	lr

0800049c <__aeabi_fmul>:
 800049c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004a0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004a4:	bf1e      	ittt	ne
 80004a6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004aa:	ea92 0f0c 	teqne	r2, ip
 80004ae:	ea93 0f0c 	teqne	r3, ip
 80004b2:	d06f      	beq.n	8000594 <__aeabi_fmul+0xf8>
 80004b4:	441a      	add	r2, r3
 80004b6:	ea80 0c01 	eor.w	ip, r0, r1
 80004ba:	0240      	lsls	r0, r0, #9
 80004bc:	bf18      	it	ne
 80004be:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80004c2:	d01e      	beq.n	8000502 <__aeabi_fmul+0x66>
 80004c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004c8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80004cc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80004d0:	fba0 3101 	umull	r3, r1, r0, r1
 80004d4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80004d8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80004dc:	bf3e      	ittt	cc
 80004de:	0049      	lslcc	r1, r1, #1
 80004e0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80004e4:	005b      	lslcc	r3, r3, #1
 80004e6:	ea40 0001 	orr.w	r0, r0, r1
 80004ea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004ee:	2afd      	cmp	r2, #253	; 0xfd
 80004f0:	d81d      	bhi.n	800052e <__aeabi_fmul+0x92>
 80004f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004f6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004fa:	bf08      	it	eq
 80004fc:	f020 0001 	biceq.w	r0, r0, #1
 8000500:	4770      	bx	lr
 8000502:	f090 0f00 	teq	r0, #0
 8000506:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800050a:	bf08      	it	eq
 800050c:	0249      	lsleq	r1, r1, #9
 800050e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000512:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000516:	3a7f      	subs	r2, #127	; 0x7f
 8000518:	bfc2      	ittt	gt
 800051a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800051e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000522:	4770      	bxgt	lr
 8000524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	3a01      	subs	r2, #1
 800052e:	dc5d      	bgt.n	80005ec <__aeabi_fmul+0x150>
 8000530:	f112 0f19 	cmn.w	r2, #25
 8000534:	bfdc      	itt	le
 8000536:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800053a:	4770      	bxle	lr
 800053c:	f1c2 0200 	rsb	r2, r2, #0
 8000540:	0041      	lsls	r1, r0, #1
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	f1c2 0220 	rsb	r2, r2, #32
 800054a:	fa00 fc02 	lsl.w	ip, r0, r2
 800054e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000552:	f140 0000 	adc.w	r0, r0, #0
 8000556:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800055a:	bf08      	it	eq
 800055c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000560:	4770      	bx	lr
 8000562:	f092 0f00 	teq	r2, #0
 8000566:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800056a:	bf02      	ittt	eq
 800056c:	0040      	lsleq	r0, r0, #1
 800056e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000572:	3a01      	subeq	r2, #1
 8000574:	d0f9      	beq.n	800056a <__aeabi_fmul+0xce>
 8000576:	ea40 000c 	orr.w	r0, r0, ip
 800057a:	f093 0f00 	teq	r3, #0
 800057e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000582:	bf02      	ittt	eq
 8000584:	0049      	lsleq	r1, r1, #1
 8000586:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800058a:	3b01      	subeq	r3, #1
 800058c:	d0f9      	beq.n	8000582 <__aeabi_fmul+0xe6>
 800058e:	ea41 010c 	orr.w	r1, r1, ip
 8000592:	e78f      	b.n	80004b4 <__aeabi_fmul+0x18>
 8000594:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000598:	ea92 0f0c 	teq	r2, ip
 800059c:	bf18      	it	ne
 800059e:	ea93 0f0c 	teqne	r3, ip
 80005a2:	d00a      	beq.n	80005ba <__aeabi_fmul+0x11e>
 80005a4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005a8:	bf18      	it	ne
 80005aa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	d1d8      	bne.n	8000562 <__aeabi_fmul+0xc6>
 80005b0:	ea80 0001 	eor.w	r0, r0, r1
 80005b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005b8:	4770      	bx	lr
 80005ba:	f090 0f00 	teq	r0, #0
 80005be:	bf17      	itett	ne
 80005c0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80005c4:	4608      	moveq	r0, r1
 80005c6:	f091 0f00 	teqne	r1, #0
 80005ca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80005ce:	d014      	beq.n	80005fa <__aeabi_fmul+0x15e>
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d101      	bne.n	80005da <__aeabi_fmul+0x13e>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	d10f      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005da:	ea93 0f0c 	teq	r3, ip
 80005de:	d103      	bne.n	80005e8 <__aeabi_fmul+0x14c>
 80005e0:	024b      	lsls	r3, r1, #9
 80005e2:	bf18      	it	ne
 80005e4:	4608      	movne	r0, r1
 80005e6:	d108      	bne.n	80005fa <__aeabi_fmul+0x15e>
 80005e8:	ea80 0001 	eor.w	r0, r0, r1
 80005ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f8:	4770      	bx	lr
 80005fa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005fe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000602:	4770      	bx	lr

08000604 <__aeabi_fdiv>:
 8000604:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000608:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800060c:	bf1e      	ittt	ne
 800060e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000612:	ea92 0f0c 	teqne	r2, ip
 8000616:	ea93 0f0c 	teqne	r3, ip
 800061a:	d069      	beq.n	80006f0 <__aeabi_fdiv+0xec>
 800061c:	eba2 0203 	sub.w	r2, r2, r3
 8000620:	ea80 0c01 	eor.w	ip, r0, r1
 8000624:	0249      	lsls	r1, r1, #9
 8000626:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800062a:	d037      	beq.n	800069c <__aeabi_fdiv+0x98>
 800062c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000630:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000634:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000638:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800063c:	428b      	cmp	r3, r1
 800063e:	bf38      	it	cc
 8000640:	005b      	lslcc	r3, r3, #1
 8000642:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000646:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800064a:	428b      	cmp	r3, r1
 800064c:	bf24      	itt	cs
 800064e:	1a5b      	subcs	r3, r3, r1
 8000650:	ea40 000c 	orrcs.w	r0, r0, ip
 8000654:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000658:	bf24      	itt	cs
 800065a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800065e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000662:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000666:	bf24      	itt	cs
 8000668:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800066c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000670:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000674:	bf24      	itt	cs
 8000676:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800067a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	bf18      	it	ne
 8000682:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000686:	d1e0      	bne.n	800064a <__aeabi_fdiv+0x46>
 8000688:	2afd      	cmp	r2, #253	; 0xfd
 800068a:	f63f af50 	bhi.w	800052e <__aeabi_fmul+0x92>
 800068e:	428b      	cmp	r3, r1
 8000690:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000694:	bf08      	it	eq
 8000696:	f020 0001 	biceq.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80006a0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80006a4:	327f      	adds	r2, #127	; 0x7f
 80006a6:	bfc2      	ittt	gt
 80006a8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80006ac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80006b0:	4770      	bxgt	lr
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	3a01      	subs	r2, #1
 80006bc:	e737      	b.n	800052e <__aeabi_fmul+0x92>
 80006be:	f092 0f00 	teq	r2, #0
 80006c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80006c6:	bf02      	ittt	eq
 80006c8:	0040      	lsleq	r0, r0, #1
 80006ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80006ce:	3a01      	subeq	r2, #1
 80006d0:	d0f9      	beq.n	80006c6 <__aeabi_fdiv+0xc2>
 80006d2:	ea40 000c 	orr.w	r0, r0, ip
 80006d6:	f093 0f00 	teq	r3, #0
 80006da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006de:	bf02      	ittt	eq
 80006e0:	0049      	lsleq	r1, r1, #1
 80006e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80006e6:	3b01      	subeq	r3, #1
 80006e8:	d0f9      	beq.n	80006de <__aeabi_fdiv+0xda>
 80006ea:	ea41 010c 	orr.w	r1, r1, ip
 80006ee:	e795      	b.n	800061c <__aeabi_fdiv+0x18>
 80006f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006f4:	ea92 0f0c 	teq	r2, ip
 80006f8:	d108      	bne.n	800070c <__aeabi_fdiv+0x108>
 80006fa:	0242      	lsls	r2, r0, #9
 80006fc:	f47f af7d 	bne.w	80005fa <__aeabi_fmul+0x15e>
 8000700:	ea93 0f0c 	teq	r3, ip
 8000704:	f47f af70 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000708:	4608      	mov	r0, r1
 800070a:	e776      	b.n	80005fa <__aeabi_fmul+0x15e>
 800070c:	ea93 0f0c 	teq	r3, ip
 8000710:	d104      	bne.n	800071c <__aeabi_fdiv+0x118>
 8000712:	024b      	lsls	r3, r1, #9
 8000714:	f43f af4c 	beq.w	80005b0 <__aeabi_fmul+0x114>
 8000718:	4608      	mov	r0, r1
 800071a:	e76e      	b.n	80005fa <__aeabi_fmul+0x15e>
 800071c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000720:	bf18      	it	ne
 8000722:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000726:	d1ca      	bne.n	80006be <__aeabi_fdiv+0xba>
 8000728:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800072c:	f47f af5c 	bne.w	80005e8 <__aeabi_fmul+0x14c>
 8000730:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000734:	f47f af3c 	bne.w	80005b0 <__aeabi_fmul+0x114>
 8000738:	e75f      	b.n	80005fa <__aeabi_fmul+0x15e>
 800073a:	bf00      	nop

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <GPIO_PeriClockControl>:
#include "STM32F4.h"

//ENABLE PERIPHERAL CLOCK

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d141      	bne.n	8000812 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a43      	ldr	r2, [pc, #268]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DS();
		}
	}

}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a40      	ldr	r2, [pc, #256]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007b2:	f043 0302 	orr.w	r3, r3, #2
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a3b      	ldr	r2, [pc, #236]	; (80008ac <GPIO_PeriClockControl+0x130>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d106      	bne.n	80007d0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a37      	ldr	r2, [pc, #220]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007de:	f043 0308 	orr.w	r3, r3, #8
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2e      	ldr	r2, [pc, #184]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d147      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800080a:	f043 0320 	orr.w	r3, r3, #32
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a22      	ldr	r2, [pc, #136]	; (80008a0 <GPIO_PeriClockControl+0x124>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DS();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000820:	f023 0301 	bic.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a1f      	ldr	r2, [pc, #124]	; (80008a8 <GPIO_PeriClockControl+0x12c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DS();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000836:	f023 0302 	bic.w	r3, r3, #2
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1a      	ldr	r2, [pc, #104]	; (80008ac <GPIO_PeriClockControl+0x130>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DS();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800084c:	f023 0304 	bic.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PeriClockControl+0x134>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DS();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000862:	f023 0308 	bic.w	r3, r3, #8
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x138>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DS();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 8000878:	f023 0310 	bic.w	r3, r3, #16
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <GPIO_PeriClockControl+0x13c>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DS();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x128>)
 800088e:	f023 0320 	bic.w	r3, r3, #32
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400

080008bc <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	uint32_t temp=0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff ff54 	bl	800077c <GPIO_PeriClockControl>

	//moder
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	795b      	ldrb	r3, [r3, #5]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d820      	bhi.n	800091e <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	461a      	mov	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	2103      	movs	r1, #3
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	4619      	mov	r1, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	430a      	orrs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	e08c      	b.n	8000a38 <GPIO_Init+0x17c>
	}else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT )
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	795b      	ldrb	r3, [r3, #5]
 8000922:	2b04      	cmp	r3, #4
 8000924:	d117      	bne.n	8000956 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000926:	4b90      	ldr	r3, [pc, #576]	; (8000b68 <GPIO_Init+0x2ac>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	7912      	ldrb	r2, [r2, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	2201      	movs	r2, #1
 8000932:	408a      	lsls	r2, r1
 8000934:	4611      	mov	r1, r2
 8000936:	4a8c      	ldr	r2, [pc, #560]	; (8000b68 <GPIO_Init+0x2ac>)
 8000938:	430b      	orrs	r3, r1
 800093a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800093c:	4b8a      	ldr	r3, [pc, #552]	; (8000b68 <GPIO_Init+0x2ac>)
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	7912      	ldrb	r2, [r2, #4]
 8000944:	4611      	mov	r1, r2
 8000946:	2201      	movs	r2, #1
 8000948:	408a      	lsls	r2, r1
 800094a:	43d2      	mvns	r2, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a86      	ldr	r2, [pc, #536]	; (8000b68 <GPIO_Init+0x2ac>)
 8000950:	400b      	ands	r3, r1
 8000952:	6093      	str	r3, [r2, #8]
 8000954:	e035      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b05      	cmp	r3, #5
 800095c:	d117      	bne.n	800098e <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	4b82      	ldr	r3, [pc, #520]	; (8000b68 <GPIO_Init+0x2ac>)
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7912      	ldrb	r2, [r2, #4]
 8000966:	4611      	mov	r1, r2
 8000968:	2201      	movs	r2, #1
 800096a:	408a      	lsls	r2, r1
 800096c:	4611      	mov	r1, r2
 800096e:	4a7e      	ldr	r2, [pc, #504]	; (8000b68 <GPIO_Init+0x2ac>)
 8000970:	430b      	orrs	r3, r1
 8000972:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000974:	4b7c      	ldr	r3, [pc, #496]	; (8000b68 <GPIO_Init+0x2ac>)
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	7912      	ldrb	r2, [r2, #4]
 800097c:	4611      	mov	r1, r2
 800097e:	2201      	movs	r2, #1
 8000980:	408a      	lsls	r2, r1
 8000982:	43d2      	mvns	r2, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a78      	ldr	r2, [pc, #480]	; (8000b68 <GPIO_Init+0x2ac>)
 8000988:	400b      	ands	r3, r1
 800098a:	60d3      	str	r3, [r2, #12]
 800098c:	e019      	b.n	80009c2 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	795b      	ldrb	r3, [r3, #5]
 8000992:	2b06      	cmp	r3, #6
 8000994:	d115      	bne.n	80009c2 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000996:	4b74      	ldr	r3, [pc, #464]	; (8000b68 <GPIO_Init+0x2ac>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7912      	ldrb	r2, [r2, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	2201      	movs	r2, #1
 80009a2:	408a      	lsls	r2, r1
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a70      	ldr	r2, [pc, #448]	; (8000b68 <GPIO_Init+0x2ac>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009ac:	4b6e      	ldr	r3, [pc, #440]	; (8000b68 <GPIO_Init+0x2ac>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	7912      	ldrb	r2, [r2, #4]
 80009b4:	4611      	mov	r1, r2
 80009b6:	2201      	movs	r2, #1
 80009b8:	408a      	lsls	r2, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	4a6a      	ldr	r2, [pc, #424]	; (8000b68 <GPIO_Init+0x2ac>)
 80009be:	430b      	orrs	r3, r1
 80009c0:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	791b      	ldrb	r3, [r3, #4]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	791b      	ldrb	r3, [r3, #4]
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a64      	ldr	r2, [pc, #400]	; (8000b6c <GPIO_Init+0x2b0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d00f      	beq.n	80009fe <GPIO_Init+0x142>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a63      	ldr	r2, [pc, #396]	; (8000b70 <GPIO_Init+0x2b4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d008      	beq.n	80009fa <GPIO_Init+0x13e>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <GPIO_Init+0x2b8>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <GPIO_Init+0x13a>
 80009f2:	2302      	movs	r3, #2
 80009f4:	e004      	b.n	8000a00 <GPIO_Init+0x144>
 80009f6:	2300      	movs	r3, #0
 80009f8:	e002      	b.n	8000a00 <GPIO_Init+0x144>
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <GPIO_Init+0x144>
 80009fe:	2300      	movs	r3, #0
 8000a00:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a02:	4b5d      	ldr	r3, [pc, #372]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <GPIO_Init+0x2bc>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000a0e:	7c7a      	ldrb	r2, [r7, #17]
 8000a10:	7cbb      	ldrb	r3, [r7, #18]
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	fa02 f103 	lsl.w	r1, r2, r3
 8000a18:	4a58      	ldr	r2, [pc, #352]	; (8000b7c <GPIO_Init+0x2c0>)
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000a22:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	7912      	ldrb	r2, [r2, #4]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	408a      	lsls	r2, r1
 8000a30:	4611      	mov	r1, r2
 8000a32:	4a4d      	ldr	r2, [pc, #308]	; (8000b68 <GPIO_Init+0x2ac>)
 8000a34:	430b      	orrs	r3, r1
 8000a36:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	799b      	ldrb	r3, [r3, #6]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	689a      	ldr	r2, [r3, #8]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	400a      	ands	r2, r1
 8000a66:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6899      	ldr	r1, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	79db      	ldrb	r3, [r3, #7]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68da      	ldr	r2, [r3, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	2103      	movs	r1, #3
 8000a98:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	400a      	ands	r2, r1
 8000aa6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	68d9      	ldr	r1, [r3, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7a1b      	ldrb	r3, [r3, #8]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	791b      	ldrb	r3, [r3, #4]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	408b      	lsls	r3, r1
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	4619      	mov	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	6859      	ldr	r1, [r3, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d131      	bne.n	8000b60 <GPIO_Init+0x2a4>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	791b      	ldrb	r3, [r3, #4]
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	7c3a      	ldrb	r2, [r7, #16]
 8000b14:	3208      	adds	r2, #8
 8000b16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	7c3a      	ldrb	r2, [r7, #16]
 8000b2e:	4001      	ands	r1, r0
 8000b30:	3208      	adds	r2, #8
 8000b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	7c3a      	ldrb	r2, [r7, #16]
 8000b3c:	3208      	adds	r2, #8
 8000b3e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7a5b      	ldrb	r3, [r3, #9]
 8000b46:	461a      	mov	r2, r3
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	7c3a      	ldrb	r2, [r7, #16]
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40013c00 	.word	0x40013c00
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40013800 	.word	0x40013800

08000b80 <GPIO_Write_Pin>:
	{
		GPIOH_REG_RESET();
	}
}

void GPIO_Write_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t STATE) {
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	70fb      	strb	r3, [r7, #3]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	70bb      	strb	r3, [r7, #2]
	if (STATE == SET) {
 8000b90:	78bb      	ldrb	r3, [r7, #2]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d109      	bne.n	8000baa <GPIO_Write_Pin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);   // Set the pin
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	78fa      	ldrb	r2, [r7, #3]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
	}
}
 8000ba8:	e009      	b.n	8000bbe <GPIO_Write_Pin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);  // Clear the pin
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	78fa      	ldrb	r2, [r7, #3]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb6:	43d2      	mvns	r2, r2
 8000bb8:	401a      	ands	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	615a      	str	r2, [r3, #20]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <GPIO_Read_Pin>:

uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	70fb      	strb	r3, [r7, #3]
    uint8_t value;

    value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x01); // Isolate the bit for the given pin
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
    return value;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <GPIO_Toggle_Pin>:


void GPIO_Toggle_Pin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	70fb      	strb	r3, [r7, #3]
	if (PinNumber > 15) return;
 8000bfe:	78fb      	ldrb	r3, [r7, #3]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d809      	bhi.n	8000c18 <GPIO_Toggle_Pin+0x26>
	pGPIOx->ODR ^= (1 << PinNumber);  // Toggle the bit
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	78fa      	ldrb	r2, [r7, #3]
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	405a      	eors	r2, r3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	e000      	b.n	8000c1a <GPIO_Toggle_Pin+0x28>
	if (PinNumber > 15) return;
 8000c18:	bf00      	nop
}
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
	...

08000c24 <GPIO_IRQHandling>:

}


void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	//	PRx: Pending bit
	//	 0: No trigger request occurred
	//	 1: selected trigger request occurred
	//	 This bit is set when the selected edge event arrives on the external interrupt line.
	//	This bit is cleared by programming it to ‘1’
	if(EXTI->PR & ( 1 << PinNumber))
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <GPIO_IRQHandling+0x3c>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	79fa      	ldrb	r2, [r7, #7]
 8000c34:	2101      	movs	r1, #1
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d009      	beq.n	8000c54 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI->PR |= ( 1 << PinNumber);
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <GPIO_IRQHandling+0x3c>)
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	79fa      	ldrb	r2, [r7, #7]
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <GPIO_IRQHandling+0x3c>)
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6153      	str	r3, [r2, #20]
	}
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	40013c00 	.word	0x40013c00

08000c64 <I2C_SM_INIT>:

#include "I2C.h"


void I2C_SM_INIT(I2C_Handle_t *pI2CHandle)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
    // 1. Enable peripheral clock
    I2C1_PCLK_EN();  // You can make this generic with pI2CHandle->pI2Cx
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <I2C_SM_INIT+0x70>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <I2C_SM_INIT+0x70>)
 8000c72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40

    // 2. Configure ACK
    pI2CHandle->pI2Cx->CR1 |= (pI2CHandle->I2C_Config.I2C_AckControl << 10); // Bit 10 = ACK
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7a5b      	ldrb	r3, [r3, #9]
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4619      	mov	r1, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]

    // 3. Set peripheral clock frequency in MHz (FREQ in CR2[5:0])
    pI2CHandle->pI2Cx->CR2 = (APB1_CLOCK_FREQ_MHZ & 0x3F); // e.g., 16 MHz → write 0x10
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2208      	movs	r2, #8
 8000c94:	605a      	str	r2, [r3, #4]

    // 4. Configure CCR for Standard Mode
    uint16_t ccr_val = APB1_CLOCK_FREQ / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <I2C_SM_INIT+0x74>)
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	81fb      	strh	r3, [r7, #14]
    pI2CHandle->pI2Cx->CCR = (ccr_val & 0xFFF); // Standard mode, 12-bit CCR
 8000ca4:	89fa      	ldrh	r2, [r7, #14]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000cae:	61da      	str	r2, [r3, #28]

    // 5. Set TRISE
    // TRISE = FREQ_MHz + 1 for Standard Mode (max rise time = 1000ns)
    pI2CHandle->pI2Cx->TRISE = APB1_CLOCK_FREQ_MHZ + 1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2209      	movs	r2, #9
 8000cb6:	621a      	str	r2, [r3, #32]

    // 6. Enable the peripheral
    pI2CHandle->pI2Cx->CR1 |= I2C_CR1_PE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	007a1200 	.word	0x007a1200

08000cdc <drive_FWD>:
		__asm__("nop");
	}
}

//TREAT FUNCTIONS LIKE A STATE
void drive_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]


	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2100      	movs	r1, #0
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 fa87 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 fa82 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2101      	movs	r1, #1
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fa7d 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f000 fa78 	bl	8001204 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH3)) & ~((1 << 4 * CH2) | (1 << 4 * CH4));
 8000d14:	f240 1301 	movw	r3, #257	; 0x101
 8000d18:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6a19      	ldr	r1, [r3, #32]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	430a      	orrs	r2, r1
 8000d28:	621a      	str	r2, [r3, #32]

	//GP_TIM_Control(pGP_TIM_Handle->pTIMx, ENABLE);
	//one wheel turns faster at startup...
	//increase duty linearly?

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 0201 	orr.w	r2, r2, #1
 8000d38:	615a      	str	r2, [r3, #20]
}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <stop_FWD>:

void stop_FWD(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_STOP);
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 fa58 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_STOP);
 8000d54:	2202      	movs	r2, #2
 8000d56:	2102      	movs	r1, #2
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 fa53 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_STOP);
 8000d5e:	2202      	movs	r2, #2
 8000d60:	2101      	movs	r1, #1
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 fa4e 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_STOP);
 8000d68:	2202      	movs	r2, #2
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 fa49 	bl	8001204 <GP_TIM_PWM_Control>



	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f042 0201 	orr.w	r2, r2, #1
 8000d80:	615a      	str	r2, [r3, #20]
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <turn_RGT>:

void turn_RGT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,PWM_OUTPUT);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 fa30 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,GND);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2102      	movs	r1, #2
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fa2b 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,GND);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fa26 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,PWM_OUTPUT);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f000 fa21 	bl	8001204 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH1) | (1 << 4 * CH4)) & ~((1 << 4 * CH3) | (1 << 4 * CH2));
 8000dc2:	f241 0301 	movw	r3, #4097	; 0x1001
 8000dc6:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6a19      	ldr	r1, [r3, #32]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	695a      	ldr	r2, [r3, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0201 	orr.w	r2, r2, #1
 8000de6:	615a      	str	r2, [r3, #20]
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <turn_LFT>:

void turn_LFT(GP_TIM_Handle_t *pGP_TIM_Handle){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	pGP_TIM_Handle->pTIMx->CCER = 0;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]

	GP_TIM_PWM_Control(pGP_TIM_Handle,CH1,GND);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f9fd 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH3,PWM_OUTPUT);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f000 f9f8 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH2,PWM_OUTPUT);
 8000e14:	2201      	movs	r2, #1
 8000e16:	2101      	movs	r1, #1
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f9f3 	bl	8001204 <GP_TIM_PWM_Control>
	GP_TIM_PWM_Control(pGP_TIM_Handle,CH4,GND);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2103      	movs	r1, #3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f9ee 	bl	8001204 <GP_TIM_PWM_Control>

	uint32_t ccer_mask = ((1 << 4 * CH3) | (1 << 4 * CH2)) & ~((1 << 4 * CH4) | (1 << 4 * CH1));
 8000e28:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000e2c:	60fb      	str	r3, [r7, #12]
	pGP_TIM_Handle->pTIMx->CCER |= ccer_mask;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6a19      	ldr	r1, [r3, #32]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	621a      	str	r2, [r3, #32]

	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	695a      	ldr	r2, [r3, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f042 0201 	orr.w	r2, r2, #1
 8000e4c:	615a      	str	r2, [r3, #20]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <RCC_Clock_Config>:

#include <RCC.h>

//either make a example funcion or use a config struct

void RCC_Clock_Config(RCC_Handle_t *pRCC_Handle_t) {
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
	// 4. Configure AHB, APB1, APB2 prescalers
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	011a      	lsls	r2, r3, #4
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	035b      	lsls	r3, r3, #13
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e6a:	431a      	orrs	r2, r3
			(pRCC_Handle_t->RCC_Config.Prescalers.APB2_Presc << 10)); // APB2 = HCLK / 2
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	029b      	lsls	r3, r3, #10
			(pRCC_Handle_t->RCC_Config.Prescalers.APB1_Presc << 13) | // APB1 = HCLK / 2
 8000e72:	431a      	orrs	r2, r3
	pRCC_Handle_t->pRCC->CFGR = ((pRCC_Handle_t->RCC_Config.Prescalers.AHB_Presc << 4) |  // AHB = SYSCLK / 1 (no division)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	609a      	str	r2, [r3, #8]

	if (pRCC_Handle_t->RCC_Config.CLK_Source == HSI) {
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	791b      	ldrb	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d125      	bne.n	8000ece <RCC_Clock_Config+0x78>
		// 1. Enable HSI
		pRCC_Handle_t->pRCC->CR |= RCC_CR_HSION;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0201 	orr.w	r2, r2, #1
 8000e90:	601a      	str	r2, [r3, #0]
		while (!(pRCC_Handle_t->pRCC->CR & RCC_CR_HSIRDY)); // Wait until HSI is ready
 8000e92:	bf00      	nop
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f8      	beq.n	8000e94 <RCC_Clock_Config+0x3e>

		// 2. Select HSI as the system clock source
		pRCC_Handle_t->pRCC->CFGR &= ~0x3; // Clear system clock switch bits
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0203 	bic.w	r2, r2, #3
 8000eb0:	609a      	str	r2, [r3, #8]
		pRCC_Handle_t->pRCC->CFGR |= RCC_CFGR_SW_HSI; // Select HSI as system clock source
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6892      	ldr	r2, [r2, #8]
 8000ebc:	609a      	str	r2, [r3, #8]

		// 3. Wait until HSI is used as the system clock
		while ((pRCC_Handle_t->pRCC->CFGR & RCC_CFGR_SWS_HSI) != RCC_CFGR_SW_HSI); //TEST IF BITS 2 AND 3 ARE 0
 8000ebe:	bf00      	nop
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f8      	bne.n	8000ec0 <RCC_Clock_Config+0x6a>
//
//		// 5. Wait until PLL is used as the system clock
//		//3 << 2
//		while ((pRCC_Handle_t->pRCC->CFGR & 0xF) != 0xA);
//	}
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <AD_TIM_Start_Countdown>:



#include "TIMER.h"

void AD_TIM_Start_Countdown(AD_TIM_RegDef_t *pTIMx, uint32_t time_ms) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	pTIMx->CR1 &= ~TIM_CR1_CEN;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 0201 	bic.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) != 0);
 8000eee:	bf00      	nop
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f9      	bne.n	8000ef0 <AD_TIM_Start_Countdown+0x18>
	// Clear any pending update flag
	pTIMx->SR &= ~TIM_SR_UIF;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f023 0201 	bic.w	r2, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	611a      	str	r2, [r3, #16]

	// Configure for single countdown
	pTIMx->CNT = time_ms - 1;;  // Load counter this doesnt set count to 0...
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	1e5a      	subs	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
	pTIMx->ARR = time_ms - 1;  // Count from this value down to 0
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
	// Generate update to load registers
	pTIMx->EGR |= TIM_EGR_UG;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	615a      	str	r2, [r3, #20]

	pTIMx->CR1 |= TIM_CR1_CEN;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f043 0201 	orr.w	r2, r3, #1
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
	while((pTIMx->CR1 & TIM_CR1_CEN) == 0);
 8000f30:	bf00      	nop
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f9      	beq.n	8000f32 <AD_TIM_Start_Countdown+0x5a>
	// Clear update flag
}
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
	...

08000f4c <AD_TIM_CDN_INIT>:
//could just use timer handle instead



void AD_TIM_CDN_INIT(AD_TIM_Handle_t *pAD_TIM_Handle) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

	if (pAD_TIM_Handle->pTIMx == TIM1) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <AD_TIM_CDN_INIT+0x90>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d105      	bne.n	8000f6a <AD_TIM_CDN_INIT+0x1e>
		TIM1_PCLK_EN();
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <AD_TIM_CDN_INIT+0x94>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a1f      	ldr	r2, [pc, #124]	; (8000fe0 <AD_TIM_CDN_INIT+0x94>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
	}

	//HANDLE INTERRUPTS
	*NVIC_ISER0 |= TIM1_UP_IRQ;
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <AD_TIM_CDN_INIT+0x98>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <AD_TIM_CDN_INIT+0x98>)
 8000f70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f74:	6013      	str	r3, [r2, #0]
	pAD_TIM_Handle->pTIMx->DIER |= TIM_DIER_UIE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f042 0201 	orr.w	r2, r2, #1
 8000f84:	60da      	str	r2, [r3, #12]
	//IS CLOCK NEEDED FORE SETTING REGS?

	// Set timer UEV to only overflow
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_URS;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0204 	orr.w	r2, r2, #4
 8000f94:	601a      	str	r2, [r3, #0]

	// Set timer direction to downcounting
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_DIR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0208 	orr.w	r2, r2, #8
 8000fa4:	601a      	str	r2, [r3, #0]

	// Enable Auto-Reload Preload (recommended for stability)
	pAD_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]

	// Set prescaler
	pAD_TIM_Handle->pTIMx->PSC = pAD_TIM_Handle->AD_TIM_Config.Prescaler;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	889a      	ldrh	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	629a      	str	r2, [r3, #40]	; 0x28

	// Force update event to load PSC immediately
	pAD_TIM_Handle->pTIMx->EGR |= TIM_EGR_UG;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	615a      	str	r2, [r3, #20]

}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <GP_TIM_PWM_INIT>:

//TIM2 exclusivelyy used for PWM outputs now
void GP_TIM_PWM_INIT(GP_TIM_Handle_t *pGP_TIM_Handle) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
	// Enable peripheral clock
	if (pGP_TIM_Handle->pTIMx == TIM2) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d106      	bne.n	8001008 <GP_TIM_PWM_INIT+0x20>
		TIM2_PCLK_EN();
 8000ffa:	4b3d      	ldr	r3, [pc, #244]	; (80010f0 <GP_TIM_PWM_INIT+0x108>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <GP_TIM_PWM_INIT+0x108>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	e00a      	b.n	800101e <GP_TIM_PWM_INIT+0x36>
	} else if (pGP_TIM_Handle->pTIMx == TIM3) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a39      	ldr	r2, [pc, #228]	; (80010f4 <GP_TIM_PWM_INIT+0x10c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d105      	bne.n	800101e <GP_TIM_PWM_INIT+0x36>
		TIM3_PCLK_EN();
 8001012:	4b37      	ldr	r3, [pc, #220]	; (80010f0 <GP_TIM_PWM_INIT+0x108>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <GP_TIM_PWM_INIT+0x108>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
	}

	// Wait until peripheral clock is stable
	while (!(RCC->APB1ENR & (1 << 0)));
 800101e:	bf00      	nop
 8001020:	4b33      	ldr	r3, [pc, #204]	; (80010f0 <GP_TIM_PWM_INIT+0x108>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 0301 	and.w	r3, r3, #1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f9      	beq.n	8001020 <GP_TIM_PWM_INIT+0x38>

	// Timer base configuration
	pGP_TIM_Handle->pTIMx->CR1 |= TIM_CR1_ARPE;  // Enable Auto-Reload Preload
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800103a:	601a      	str	r2, [r3, #0]
	pGP_TIM_Handle->pTIMx->PSC = pGP_TIM_Handle->GP_TIM_Config.Prescaler;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	889a      	ldrh	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
	pGP_TIM_Handle->pTIMx->ARR = pGP_TIM_Handle->GP_TIM_Config.Period - 1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	88db      	ldrh	r3, [r3, #6]
 800104a:	1e5a      	subs	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c

	// Configure all channels using the unified function
	for (int ch = 0; ch < 4; ch++) {
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e03c      	b.n	80010d2 <GP_TIM_PWM_INIT+0xea>
		float duty_percent = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].DutyCycle;
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3302      	adds	r3, #2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	88db      	ldrh	r3, [r3, #6]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff f9c1 	bl	80003ec <__aeabi_ui2f>
 800106a:	4603      	mov	r3, r0
 800106c:	613b      	str	r3, [r7, #16]
		uint16_t duty = (uint16_t)((duty_percent / 100.0f) * pGP_TIM_Handle->GP_TIM_Config.Period);
 800106e:	4922      	ldr	r1, [pc, #136]	; (80010f8 <GP_TIM_PWM_INIT+0x110>)
 8001070:	6938      	ldr	r0, [r7, #16]
 8001072:	f7ff fac7 	bl	8000604 <__aeabi_fdiv>
 8001076:	4603      	mov	r3, r0
 8001078:	461c      	mov	r4, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	88db      	ldrh	r3, [r3, #6]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff f9b8 	bl	80003f4 <__aeabi_i2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff fa07 	bl	800049c <__aeabi_fmul>
 800108e:	4603      	mov	r3, r0
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fb53 	bl	800073c <__aeabi_f2uiz>
 8001096:	4603      	mov	r3, r0
 8001098:	81fb      	strh	r3, [r7, #14]
		uint8_t mode = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Mode;
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3302      	adds	r3, #2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4413      	add	r3, r2
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	737b      	strb	r3, [r7, #13]
		uint8_t enabled = pGP_TIM_Handle->GP_TIM_Config.CH_Setup[ch].CH_Enabled;
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3302      	adds	r3, #2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	791b      	ldrb	r3, [r3, #4]
 80010b4:	733b      	strb	r3, [r7, #12]

		GP_TIM_SetChannel(pGP_TIM_Handle->pTIMx, ch, duty, mode, enabled);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	7b7c      	ldrb	r4, [r7, #13]
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	4623      	mov	r3, r4
 80010c8:	f000 f818 	bl	80010fc <GP_TIM_SetChannel>
	for (int ch = 0; ch < 4; ch++) {
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	ddbf      	ble.n	8001058 <GP_TIM_PWM_INIT+0x70>
	}

	// Force update to load all values
	pGP_TIM_Handle->pTIMx->EGR |= (1 << 0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0201 	orr.w	r2, r2, #1
 80010e6:	615a      	str	r2, [r3, #20]

}
 80010e8:	bf00      	nop
 80010ea:	371c      	adds	r7, #28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40000400 	.word	0x40000400
 80010f8:	42c80000 	.word	0x42c80000

080010fc <GP_TIM_SetChannel>:



void GP_TIM_SetChannel(GP_TIM_RegDef_t *pTIMx, uint8_t ch, uint16_t duty, uint8_t mode, uint8_t enable_output) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	4608      	mov	r0, r1
 8001106:	4611      	mov	r1, r2
 8001108:	461a      	mov	r2, r3
 800110a:	4603      	mov	r3, r0
 800110c:	70fb      	strb	r3, [r7, #3]
 800110e:	460b      	mov	r3, r1
 8001110:	803b      	strh	r3, [r7, #0]
 8001112:	4613      	mov	r3, r2
 8001114:	70bb      	strb	r3, [r7, #2]
	volatile uint32_t *ccmr = (ch < 2) ? &pTIMx->CCMR1 : &pTIMx->CCMR2;
 8001116:	78fb      	ldrb	r3, [r7, #3]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d802      	bhi.n	8001122 <GP_TIM_SetChannel+0x26>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3318      	adds	r3, #24
 8001120:	e001      	b.n	8001126 <GP_TIM_SetChannel+0x2a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	331c      	adds	r3, #28
 8001126:	60bb      	str	r3, [r7, #8]
	volatile uint32_t *ccr;
	uint8_t shift;
	uint32_t enable_bit;

	switch (ch) {
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d864      	bhi.n	80011f8 <GP_TIM_SetChannel+0xfc>
 800112e:	a201      	add	r2, pc, #4	; (adr r2, 8001134 <GP_TIM_SetChannel+0x38>)
 8001130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001134:	08001145 	.word	0x08001145
 8001138:	08001155 	.word	0x08001155
 800113c:	08001165 	.word	0x08001165
 8001140:	08001177 	.word	0x08001177
	case CH1: ccr = &pTIMx->CCR1; shift = 4; enable_bit = 1 << 0; break;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3334      	adds	r3, #52	; 0x34
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	2304      	movs	r3, #4
 800114c:	74fb      	strb	r3, [r7, #19]
 800114e:	2301      	movs	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e019      	b.n	8001188 <GP_TIM_SetChannel+0x8c>
	case CH2: ccr = &pTIMx->CCR2; shift = 12; enable_bit = 1 << 4; break;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3338      	adds	r3, #56	; 0x38
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	230c      	movs	r3, #12
 800115c:	74fb      	strb	r3, [r7, #19]
 800115e:	2310      	movs	r3, #16
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e011      	b.n	8001188 <GP_TIM_SetChannel+0x8c>
	case CH3: ccr = &pTIMx->CCR3; shift = 4; enable_bit = 1 << 8; break;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	333c      	adds	r3, #60	; 0x3c
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2304      	movs	r3, #4
 800116c:	74fb      	strb	r3, [r7, #19]
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	e008      	b.n	8001188 <GP_TIM_SetChannel+0x8c>
	case CH4: ccr = &pTIMx->CCR4; shift = 12; enable_bit = 1 << 12; break;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3340      	adds	r3, #64	; 0x40
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	230c      	movs	r3, #12
 800117e:	74fb      	strb	r3, [r7, #19]
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	bf00      	nop
	default: return;
	}

	*ccr = duty;
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	601a      	str	r2, [r3, #0]

	// Clear and set output compare mode (PWM1 or PWM2)
	*ccmr &= ~(7 << shift);
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	7cfa      	ldrb	r2, [r7, #19]
 8001194:	2107      	movs	r1, #7
 8001196:	fa01 f202 	lsl.w	r2, r1, r2
 800119a:	43d2      	mvns	r2, r2
 800119c:	401a      	ands	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	601a      	str	r2, [r3, #0]
	*ccmr |= (mode == PWM1 ? 6 : 7) << shift;
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	78ba      	ldrb	r2, [r7, #2]
 80011a8:	2a00      	cmp	r2, #0
 80011aa:	d101      	bne.n	80011b0 <GP_TIM_SetChannel+0xb4>
 80011ac:	2106      	movs	r1, #6
 80011ae:	e000      	b.n	80011b2 <GP_TIM_SetChannel+0xb6>
 80011b0:	2107      	movs	r1, #7
 80011b2:	7cfa      	ldrb	r2, [r7, #19]
 80011b4:	fa01 f202 	lsl.w	r2, r1, r2
 80011b8:	431a      	orrs	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]

	// Enable preload
	*ccmr |= (1 << (shift - 1));
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	7cfa      	ldrb	r2, [r7, #19]
 80011c4:	3a01      	subs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	431a      	orrs	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	601a      	str	r2, [r3, #0]

	// Only enable output if requested
	if (enable_output) {
 80011d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <GP_TIM_SetChannel+0xec>
		pTIMx->CCER |= enable_bit;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	621a      	str	r2, [r3, #32]
 80011e6:	e008      	b.n	80011fa <GP_TIM_SetChannel+0xfe>
	} else {
		pTIMx->CCER &= ~enable_bit;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1a      	ldr	r2, [r3, #32]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	401a      	ands	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	621a      	str	r2, [r3, #32]
 80011f6:	e000      	b.n	80011fa <GP_TIM_SetChannel+0xfe>
	default: return;
 80011f8:	bf00      	nop
	}
}
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <GP_TIM_PWM_Control>:
		pTIMx->CR1 &= ~TIM_CR1_CEN;
		while((pTIMx->CR1 & TIM_CR1_CEN) == 1);
	}
}

void GP_TIM_PWM_Control(GP_TIM_Handle_t *pGP_TIM_Handle, uint8_t channel, uint8_t PWM_STATE) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
	if (channel > 3) return;
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b03      	cmp	r3, #3
 8001218:	d86c      	bhi.n	80012f4 <GP_TIM_PWM_Control+0xf0>

	//		uint32_t ccer_mask = (1 << (channel * 4)); // CCxE bit

	if (PWM_STATE == PWM_OUTPUT) {
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d141      	bne.n	80012a4 <GP_TIM_PWM_Control+0xa0>
		// Make sure duty is set first
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3302      	adds	r3, #2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	88db      	ldrh	r3, [r3, #6]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8e1 	bl	80003f4 <__aeabi_i2f>
 8001232:	4603      	mov	r3, r0
 8001234:	4931      	ldr	r1, [pc, #196]	; (80012fc <GP_TIM_PWM_Control+0xf8>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f9e4 	bl	8000604 <__aeabi_fdiv>
 800123c:	4603      	mov	r3, r0
 800123e:	461c      	mov	r4, r3
				pGP_TIM_Handle->GP_TIM_Config.Period);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	88db      	ldrh	r3, [r3, #6]
		uint16_t duty = (uint16_t)((pGP_TIM_Handle->GP_TIM_Config.CH_Setup[channel].DutyCycle / 100.0f) *
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f8d5 	bl	80003f4 <__aeabi_i2f>
 800124a:	4603      	mov	r3, r0
 800124c:	4619      	mov	r1, r3
 800124e:	4620      	mov	r0, r4
 8001250:	f7ff f924 	bl	800049c <__aeabi_fmul>
 8001254:	4603      	mov	r3, r0
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fa70 	bl	800073c <__aeabi_f2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	81bb      	strh	r3, [r7, #12]
		switch(channel) {
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	2b03      	cmp	r3, #3
 8001264:	d847      	bhi.n	80012f6 <GP_TIM_PWM_Control+0xf2>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <GP_TIM_PWM_Control+0x68>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800127d 	.word	0x0800127d
 8001270:	08001287 	.word	0x08001287
 8001274:	08001291 	.word	0x08001291
 8001278:	0800129b 	.word	0x0800129b
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e037      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	89ba      	ldrh	r2, [r7, #12]
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
 800128e:	e032      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	89ba      	ldrh	r2, [r7, #12]
 8001296:	63da      	str	r2, [r3, #60]	; 0x3c
 8001298:	e02d      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	89ba      	ldrh	r2, [r7, #12]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
 80012a2:	e028      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		}

//		pGP_TIM_Handle->pTIMx->CCER |= ccer_mask; // Enable output
	} else if(PWM_STATE == PWM_STOP)
 80012a4:	78bb      	ldrb	r3, [r7, #2]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d125      	bne.n	80012f6 <GP_TIM_PWM_Control+0xf2>
	{
		uint16_t duty = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	81fb      	strh	r3, [r7, #14]
		switch(channel) {
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	d820      	bhi.n	80012f6 <GP_TIM_PWM_Control+0xf2>
 80012b4:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <GP_TIM_PWM_Control+0xb8>)
 80012b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ba:	bf00      	nop
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d7 	.word	0x080012d7
 80012c4:	080012e1 	.word	0x080012e1
 80012c8:	080012eb 	.word	0x080012eb
		case CH1: pGP_TIM_Handle->pTIMx->CCR1 = duty; break;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	89fa      	ldrh	r2, [r7, #14]
 80012d2:	635a      	str	r2, [r3, #52]	; 0x34
 80012d4:	e00f      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH2: pGP_TIM_Handle->pTIMx->CCR2 = duty; break;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	89fa      	ldrh	r2, [r7, #14]
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38
 80012de:	e00a      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH3: pGP_TIM_Handle->pTIMx->CCR3 = duty; break;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	89fa      	ldrh	r2, [r7, #14]
 80012e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80012e8:	e005      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
		case CH4: pGP_TIM_Handle->pTIMx->CCR4 = duty; break;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	89fa      	ldrh	r2, [r7, #14]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
 80012f2:	e000      	b.n	80012f6 <GP_TIM_PWM_Control+0xf2>
	if (channel > 3) return;
 80012f4:	bf00      	nop
	{
		//pGP_TIM_Handle->pTIMx->CCER &= ~ccer_mask; // Disable output
	}


}
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	42c80000 	.word	0x42c80000

08001300 <USART_SetBaudRate>:

#include "USART.h"


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8001300:	b480      	push	{r7}
 8001302:	b089      	sub	sp, #36	; 0x24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]

	uint32_t PCLKx = APB2_CLOCK_FREQ;	//APB2_CLOCK_FREQ_MHZ
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <USART_SetBaudRate+0xc0>)
 800130c:	617b      	str	r3, [r7, #20]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]


	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <USART_SetBaudRate+0x36>
	{
		//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	009a      	lsls	r2, r3, #2
 8001328:	441a      	add	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	e00a      	b.n	800134c <USART_SetBaudRate+0x4c>
	}else
	{
		//over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	009a      	lsls	r2, r3, #2
 8001340:	441a      	add	r2, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	61fb      	str	r3, [r7, #28]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <USART_SetBaudRate+0xc4>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	011b      	lsls	r3, r3, #4
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	69fa      	ldr	r2, [r7, #28]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	61bb      	str	r3, [r7, #24]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00a      	beq.n	8001392 <USART_SetBaudRate+0x92>
	{
		//OVER8 = 1 , over sampling by 8
		F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	3332      	adds	r3, #50	; 0x32
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <USART_SetBaudRate+0xc4>)
 8001384:	fba2 2303 	umull	r2, r3, r2, r3
 8001388:	095b      	lsrs	r3, r3, #5
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	e009      	b.n	80013a6 <USART_SetBaudRate+0xa6>

	}else
	{
		//over sampling by 16
		F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	3332      	adds	r3, #50	; 0x32
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <USART_SetBaudRate+0xc4>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	f003 030f 	and.w	r3, r3, #15
 80013a4:	61bb      	str	r3, [r7, #24]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]
}
 80013b4:	bf00      	nop
 80013b6:	3724      	adds	r7, #36	; 0x24
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	007a1200 	.word	0x007a1200
 80013c4:	51eb851f 	.word	0x51eb851f

080013c8 <USART_INIT>:


void USART_INIT(USART_Handle_t *pUSARTHandle){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

	uint32_t tempreg=0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
	//ENABLE PERIPHERAL
	USART1_PCLK_EN();
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <USART_INIT+0xa4>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <USART_INIT+0xa4>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6453      	str	r3, [r2, #68]	; 0x44

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	791b      	ldrb	r3, [r3, #4]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d104      	bne.n	80013f2 <USART_INIT+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e010      	b.n	8001414 <USART_INIT+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	791b      	ldrb	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d104      	bne.n	8001404 <USART_INIT+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	e007      	b.n	8001414 <USART_INIT+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d103      	bne.n	8001414 <USART_INIT+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f043 030c 	orr.w	r3, r3, #12
 8001412:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7b5b      	ldrb	r3, [r3, #13]
 8001418:	031b      	lsls	r3, r3, #12
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	60da      	str	r2, [r3, #12]

	tempreg=0;
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7b1b      	ldrb	r3, [r3, #12]
 8001432:	031b      	lsls	r3, r3, #12
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	611a      	str	r2, [r3, #16]


	//no hw flow control

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	4619      	mov	r1, r3
 800144e:	4610      	mov	r0, r2
 8001450:	f7ff ff56 	bl	8001300 <USART_SetBaudRate>

	pUSARTHandle->pUSARTx->CR1 |= (1 << 13);  // UE
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001462:	60da      	str	r2, [r3, #12]
}
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800

08001470 <init_random_seed>:
void Full_GP_TIM_Config(void);
void Full_AD_TIM_Config(void);
void Full_I2C_Config(void);
void Full_USART_Config(void);

void init_random_seed(void) {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	srand(129);  // Seed with x,y coords/angle
 8001474:	2081      	movs	r0, #129	; 0x81
 8001476:	f000 fb49 	bl	8001b0c <srand>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <get_random_duration>:

uint32_t get_random_duration(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	return 250 + (rand() % 451);  // Between 50 - 200 ms lets say
 8001484:	f000 fb70 	bl	8001b68 <rand>
 8001488:	4602      	mov	r2, r0
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <get_random_duration+0x28>)
 800148c:	fb83 1302 	smull	r1, r3, r3, r2
 8001490:	11d9      	asrs	r1, r3, #7
 8001492:	17d3      	asrs	r3, r2, #31
 8001494:	1acb      	subs	r3, r1, r3
 8001496:	f240 11c3 	movw	r1, #451	; 0x1c3
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	33fa      	adds	r3, #250	; 0xfa
	//what is maximum rand value?
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	48a8048b 	.word	0x48a8048b

080014ac <ms_delay>:

uint16_t calc_rotation(uint32_t duration_ms, float angular_velocity_dps) {
	return (uint16_t)((duration_ms / 1000.0f) * angular_velocity_dps);  // degrees = time * speed
}

void ms_delay(uint32_t time_ms) {
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	for(volatile uint32_t i = 0; i < time_ms * 1000; ++i) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e003      	b.n	80014c2 <ms_delay+0x16>
		__asm__("nop");
 80014ba:	bf00      	nop
	for(volatile uint32_t i = 0; i < time_ms * 1000; ++i) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c8:	fb03 f202 	mul.w	r2, r3, r2
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d8f3      	bhi.n	80014ba <ms_delay+0xe>
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
	...

080014e0 <main>:
char msg[32] = "Password OK!\n";
uint8_t password = 0;



int main(void) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

	Full_RCC_Config();
 80014e4:	f000 f878 	bl	80015d8 <Full_RCC_Config>
	Full_AD_TIM_Config();
 80014e8:	f000 f9ae 	bl	8001848 <Full_AD_TIM_Config>
	Full_GPIO_Config();
 80014ec:	f000 f88c 	bl	8001608 <Full_GPIO_Config>
	Full_GP_TIM_Config();
 80014f0:	f000 f972 	bl	80017d8 <Full_GP_TIM_Config>
	Full_USART_Config();
 80014f4:	f000 f9d0 	bl	8001898 <Full_USART_Config>
	Full_I2C_Config();
 80014f8:	f000 f9b8 	bl	800186c <Full_I2C_Config>
	init_random_seed();
 80014fc:	f7ff ffb8 	bl	8001470 <init_random_seed>

	while(1){
		GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 8001500:	210d      	movs	r1, #13
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <main+0x34>)
 8001504:	f7ff fb75 	bl	8000bf2 <GPIO_Toggle_Pin>
		ms_delay(1045);
 8001508:	f240 4015 	movw	r0, #1045	; 0x415
 800150c:	f7ff ffce 	bl	80014ac <ms_delay>
		GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
 8001510:	e7f6      	b.n	8001500 <main+0x20>
 8001512:	bf00      	nop
 8001514:	40020800 	.word	0x40020800

08001518 <EXTI4_IRQHandler>:
}



void  EXTI4_IRQHandler(void) //WALL SENSED
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	stop_FWD(&TIM2_PWM);
 800151e:	4819      	ldr	r0, [pc, #100]	; (8001584 <EXTI4_IRQHandler+0x6c>)
 8001520:	f7ff fc0f 	bl	8000d42 <stop_FWD>
	//stop_FWD(&TIM2_PWM);
	//GPIO_Toggle_Pin(GPIOC, GPIO_PIN_NO_13);
	//ms_delay(100);


	GPIO_IRQHandling(GPIO_PIN_NO_4);
 8001524:	2004      	movs	r0, #4
 8001526:	f7ff fb7d 	bl	8000c24 <GPIO_IRQHandling>
	ms_delay(400);
 800152a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800152e:	f7ff ffbd 	bl	80014ac <ms_delay>
	uint32_t turn_duration = get_random_duration();
 8001532:	f7ff ffa5 	bl	8001480 <get_random_duration>
 8001536:	6078      	str	r0, [r7, #4]

	if(!GPIO_Read_Pin(GPIOA, GPIO_PIN_NO_4)){
 8001538:	2104      	movs	r1, #4
 800153a:	4813      	ldr	r0, [pc, #76]	; (8001588 <EXTI4_IRQHandler+0x70>)
 800153c:	f7ff fb44 	bl	8000bc8 <GPIO_Read_Pin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d114      	bne.n	8001570 <EXTI4_IRQHandler+0x58>
		GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,DISABLE);
 8001546:	2200      	movs	r2, #0
 8001548:	210d      	movs	r1, #13
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <EXTI4_IRQHandler+0x74>)
 800154c:	f7ff fb18 	bl	8000b80 <GPIO_Write_Pin>
		current_state = STATE_TURNING;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <EXTI4_IRQHandler+0x78>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]

		if(!(turn_duration % 2))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <EXTI4_IRQHandler+0x50>
		{
			turn_RGT(&TIM2_PWM);
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <EXTI4_IRQHandler+0x6c>)
 8001562:	f7ff fc12 	bl	8000d8a <turn_RGT>
	{
		AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,turn_duration);
		//increment angle for timer duration
	}

}
 8001566:	e009      	b.n	800157c <EXTI4_IRQHandler+0x64>
			turn_LFT(&TIM2_PWM);
 8001568:	4806      	ldr	r0, [pc, #24]	; (8001584 <EXTI4_IRQHandler+0x6c>)
 800156a:	f7ff fc41 	bl	8000df0 <turn_LFT>
}
 800156e:	e005      	b.n	800157c <EXTI4_IRQHandler+0x64>
		AD_TIM_Start_Countdown(TIM1_CDN.pTIMx,turn_duration);
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <EXTI4_IRQHandler+0x7c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fcae 	bl	8000ed8 <AD_TIM_Start_Countdown>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000084 	.word	0x20000084
 8001588:	40020000 	.word	0x40020000
 800158c:	40020800 	.word	0x40020800
 8001590:	20000080 	.word	0x20000080
 8001594:	200000a0 	.word	0x200000a0

08001598 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void) //ROTATION TIME OVER
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	//	}
	//walls still sensed
	//turn until they are gone
	//bad in interrupt but it is a good failsafe if car is stuck

	GPIO_Write_Pin(GPIOC,GPIO_PIN_NO_13,ENABLE);
 800159c:	2201      	movs	r2, #1
 800159e:	210d      	movs	r1, #13
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80015a2:	f7ff faed 	bl	8000b80 <GPIO_Write_Pin>

	current_state = STATE_DRIVING;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <TIM1_UP_TIM10_IRQHandler+0x34>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
	drive_FWD(&TIM2_PWM);
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <TIM1_UP_TIM10_IRQHandler+0x38>)
 80015ae:	f7ff fb95 	bl	8000cdc <drive_FWD>

	TIM1_CDN.pTIMx->SR &= ~TIM_SR_UIF;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 0201 	bic.w	r2, r2, #1
 80015c0:	611a      	str	r2, [r3, #16]
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40020800 	.word	0x40020800
 80015cc:	20000080 	.word	0x20000080
 80015d0:	20000084 	.word	0x20000084
 80015d4:	200000a0 	.word	0x200000a0

080015d8 <Full_RCC_Config>:


void Full_RCC_Config(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
	RCC_Handle_t RCC_Handle;
	RCC_Handle.pRCC = RCC;
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <Full_RCC_Config+0x2c>)
 80015e0:	603b      	str	r3, [r7, #0]
	RCC_Handle.RCC_Config.CLK_Source = HSI;
 80015e2:	2300      	movs	r3, #0
 80015e4:	713b      	strb	r3, [r7, #4]
	RCC_Handle.RCC_Config.Prescalers.AHB_Presc = AHB_DIV1;//0x0
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
	RCC_Handle.RCC_Config.Prescalers.APB1_Presc = APB1_DIV2;//0x4
 80015ea:	2304      	movs	r3, #4
 80015ec:	61bb      	str	r3, [r7, #24]
	RCC_Handle.RCC_Config.Prescalers.APB2_Presc = APB2_DIV2;//0x4
 80015ee:	2304      	movs	r3, #4
 80015f0:	61fb      	str	r3, [r7, #28]
	RCC_Clock_Config(&RCC_Handle);
 80015f2:	463b      	mov	r3, r7
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc2e 	bl	8000e56 <RCC_Clock_Config>
}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <Full_GPIO_Config>:

void Full_GPIO_Config(void){
 8001608:	b580      	push	{r7, lr}
 800160a:	b09e      	sub	sp, #120	; 0x78
 800160c:	af00      	add	r7, sp, #0
	// Testing LED Config
	// GPIO Configuration for TESTPIN PC13 = LED
	GPIO_Handle_t GpioLED;
	GpioLED.pGPIOx = GPIOC;
 800160e:	4b6f      	ldr	r3, [pc, #444]	; (80017cc <Full_GPIO_Config+0x1c4>)
 8001610:	66fb      	str	r3, [r7, #108]	; 0x6c
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8001612:	230d      	movs	r3, #13
 8001614:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001618:	2301      	movs	r3, #1
 800161a:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001624:	2300      	movs	r3, #0
 8001626:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	// SENSOR CONFIG
	// GPIO Configuration for GpioSensor PB0 = GPIO INTERRUPT
	GPIO_Handle_t GpioSensor;
	GpioSensor.pGPIOx = GPIOA;
 8001630:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 8001632:	663b      	str	r3, [r7, #96]	; 0x60
	GpioSensor.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8001634:	2304      	movs	r3, #4
 8001636:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	GpioSensor.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RFT;
 800163a:	2306      	movs	r3, #6
 800163c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	GpioSensor.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	GpioSensor.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001646:	2301      	movs	r3, #1
 8001648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// UART CONFIG
	// GPIO Configuration for UART_TX PA9 = UART_TX
	GPIO_Handle_t GpioTX;
	GpioTX.pGPIOx = GPIOA;
 800164c:	4b60      	ldr	r3, [pc, #384]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 800164e:	657b      	str	r3, [r7, #84]	; 0x54
	GpioTX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8001650:	2309      	movs	r3, #9
 8001652:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	GpioTX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 8001656:	2302      	movs	r3, #2
 8001658:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	GpioTX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800165c:	2307      	movs	r3, #7
 800165e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	GpioTX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	GpioTX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	// GPIO Configuration for GpioSensor PA10 = UART_RX
	GPIO_Handle_t GpioRX;
	GpioRX.pGPIOx = GPIOA;
 800166e:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 8001670:	64bb      	str	r3, [r7, #72]	; 0x48
	GpioRX.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_10;
 8001672:	230a      	movs	r3, #10
 8001674:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	GpioRX.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;//AF07
 8001678:	2302      	movs	r3, #2
 800167a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	GpioRX.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800167e:	2307      	movs	r3, #7
 8001680:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	GpioRX.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	GpioRX.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800168a:	2301      	movs	r3, #1
 800168c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// GPIO Configuration for TIM2 CH4 (PA3)
	GPIO_Handle_t GpioCH4;
	GpioCH4.pGPIOx = GPIOA;
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
	GpioCH4.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8001694:	2303      	movs	r3, #3
 8001696:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	GpioCH4.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800169a:	2302      	movs	r3, #2
 800169c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	GpioCH4.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80016a0:	2303      	movs	r3, #3
 80016a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	GpioCH4.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	GpioCH4.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80016ac:	2301      	movs	r3, #1
 80016ae:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	GpioCH4.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	// GPIO Configuration for TIM2 CH3 (PA2)
	GPIO_Handle_t GpioCH3;
	GpioCH3.pGPIOx = GPIOA;
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
	GpioCH3.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 80016bc:	2302      	movs	r3, #2
 80016be:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	GpioCH3.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	GpioCH3.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80016c8:	2303      	movs	r3, #3
 80016ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	GpioCH3.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	GpioCH3.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	GpioCH3.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// GPIO Configuration for TIM2 CH2 (PB3)
	GPIO_Handle_t GpioCH2;
	GpioCH2.pGPIOx = GPIOB;
 80016e0:	4b3c      	ldr	r3, [pc, #240]	; (80017d4 <Full_GPIO_Config+0x1cc>)
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
	GpioCH2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80016e4:	2303      	movs	r3, #3
 80016e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GpioCH2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GpioCH2.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 80016f0:	2303      	movs	r3, #3
 80016f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GpioCH2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GpioCH2.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	GpioCH2.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	// GPIO Configuration for TIM2 CH1 (PA0)
	GPIO_Handle_t GpioCH1;
	GpioCH1.pGPIOx = GPIOA;
 8001708:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <Full_GPIO_Config+0x1c8>)
 800170a:	61bb      	str	r3, [r7, #24]
	GpioCH1.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800170c:	2300      	movs	r3, #0
 800170e:	773b      	strb	r3, [r7, #28]
	GpioCH1.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001710:	2302      	movs	r3, #2
 8001712:	777b      	strb	r3, [r7, #29]
	GpioCH1.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001714:	2303      	movs	r3, #3
 8001716:	77bb      	strb	r3, [r7, #30]
	GpioCH1.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001718:	2300      	movs	r3, #0
 800171a:	f887 3020 	strb.w	r3, [r7, #32]
	GpioCH1.GPIO_PinConfig.GPIO_PinAltFunMode = 1;  // AF1 for TIM2_PWM
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	GpioCH1.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001724:	2300      	movs	r3, #0
 8001726:	77fb      	strb	r3, [r7, #31]

	// GPIO Configuration for SDA (PB6)
	GPIO_Handle_t GpioSCL;
	GpioSCL.pGPIOx = GPIOB;
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <Full_GPIO_Config+0x1cc>)
 800172a:	60fb      	str	r3, [r7, #12]
	GpioSCL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800172c:	2306      	movs	r3, #6
 800172e:	743b      	strb	r3, [r7, #16]
	GpioSCL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001730:	2302      	movs	r3, #2
 8001732:	747b      	strb	r3, [r7, #17]
	GpioSCL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001734:	2303      	movs	r3, #3
 8001736:	74bb      	strb	r3, [r7, #18]
	GpioSCL.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001738:	2300      	movs	r3, #0
 800173a:	753b      	strb	r3, [r7, #20]
	GpioSCL.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sCL
 800173c:	2304      	movs	r3, #4
 800173e:	757b      	strb	r3, [r7, #21]
	GpioSCL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001740:	2300      	movs	r3, #0
 8001742:	74fb      	strb	r3, [r7, #19]

	// GPIO Configuration for SCL (PB7)
	GPIO_Handle_t GpioSDA;
	GpioSDA.pGPIOx = GPIOB;
 8001744:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <Full_GPIO_Config+0x1cc>)
 8001746:	603b      	str	r3, [r7, #0]
	GpioSDA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8001748:	2307      	movs	r3, #7
 800174a:	713b      	strb	r3, [r7, #4]
	GpioSDA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800174c:	2302      	movs	r3, #2
 800174e:	717b      	strb	r3, [r7, #5]
	GpioSDA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;  // Set higher speed for PWM
 8001750:	2303      	movs	r3, #3
 8001752:	71bb      	strb	r3, [r7, #6]
	GpioSDA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001754:	2300      	movs	r3, #0
 8001756:	723b      	strb	r3, [r7, #8]
	GpioSDA.GPIO_PinConfig.GPIO_PinAltFunMode = 4;  // AF4 for I2C1_sDA
 8001758:	2304      	movs	r3, #4
 800175a:	727b      	strb	r3, [r7, #9]
	GpioSDA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]

	// Initialize GPIO
	GPIO_Init(&GpioLED); //turns led on
 8001760:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff f8a9 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSensor);
 800176a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f8a4 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH3);
 8001774:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f89f 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH2);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff f89a 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH1);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff f895 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioCH4);
 8001792:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f890 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSCL);
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff f88b 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioSDA);
 80017a6:	463b      	mov	r3, r7
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff f887 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioTX);
 80017ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff f882 	bl	80008bc <GPIO_Init>
	GPIO_Init(&GpioRX);
 80017b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f87d 	bl	80008bc <GPIO_Init>

	//GPIO_IRQInterruptConfig(EXTI15_10_IRQ, ENABLE);
}
 80017c2:	bf00      	nop
 80017c4:	3778      	adds	r7, #120	; 0x78
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020000 	.word	0x40020000
 80017d4:	40020400 	.word	0x40020400

080017d8 <Full_GP_TIM_Config>:

void Full_GP_TIM_Config(void){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0

	// GP Timer Configuration
	TIM2_PWM.pTIMx = TIM2;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	601a      	str	r2, [r3, #0]
	TIM2_PWM.GP_TIM_Config.Prescaler = 6;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 80017e6:	2206      	movs	r2, #6
 80017e8:	809a      	strh	r2, [r3, #4]
	TIM2_PWM.GP_TIM_Config.Period = 6400;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 80017ec:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 80017f0:	80da      	strh	r2, [r3, #6]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Enabled = ENABLE;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	731a      	strb	r2, [r3, #12]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].CH_Mode = PWM1;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	735a      	strb	r2, [r3, #13]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH1].DutyCycle = 10;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001800:	220a      	movs	r2, #10
 8001802:	81da      	strh	r2, [r3, #14]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Enabled = ENABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001806:	2201      	movs	r2, #1
 8001808:	741a      	strb	r2, [r3, #16]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].CH_Mode = PWM1;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 800180c:	2200      	movs	r2, #0
 800180e:	745a      	strb	r2, [r3, #17]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH2].DutyCycle = 10;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001812:	220a      	movs	r2, #10
 8001814:	825a      	strh	r2, [r3, #18]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Enabled = ENABLE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001818:	2201      	movs	r2, #1
 800181a:	751a      	strb	r2, [r3, #20]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].CH_Mode = PWM1;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 800181e:	2200      	movs	r2, #0
 8001820:	755a      	strb	r2, [r3, #21]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH3].DutyCycle = 10;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001824:	220a      	movs	r2, #10
 8001826:	82da      	strh	r2, [r3, #22]

	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Enabled = ENABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 800182a:	2201      	movs	r2, #1
 800182c:	761a      	strb	r2, [r3, #24]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].CH_Mode = PWM1;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001830:	2200      	movs	r2, #0
 8001832:	765a      	strb	r2, [r3, #25]
	TIM2_PWM.GP_TIM_Config.CH_Setup[CH4].DutyCycle = 10;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 8001836:	220a      	movs	r2, #10
 8001838:	835a      	strh	r2, [r3, #26]

	// Initialize TIM2 + CHANNELS
	GP_TIM_PWM_INIT(&TIM2_PWM);  // Initialize with CH1 disabled
 800183a:	4802      	ldr	r0, [pc, #8]	; (8001844 <Full_GP_TIM_Config+0x6c>)
 800183c:	f7ff fbd4 	bl	8000fe8 <GP_TIM_PWM_INIT>
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000084 	.word	0x20000084

08001848 <Full_AD_TIM_Config>:

void Full_AD_TIM_Config(void){
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

	// AD Timer Configuration
	TIM1_CDN.pTIMx = TIM1;
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <Full_AD_TIM_Config+0x1c>)
 800184e:	4a06      	ldr	r2, [pc, #24]	; (8001868 <Full_AD_TIM_Config+0x20>)
 8001850:	601a      	str	r2, [r3, #0]

	//TIM1_CDN.AD_TIM_Config.ClockDivision = 4;
	TIM1_CDN.AD_TIM_Config.Prescaler = PRESCALER_16K;
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <Full_AD_TIM_Config+0x1c>)
 8001854:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001858:	809a      	strh	r2, [r3, #4]
	AD_TIM_CDN_INIT(&TIM1_CDN);
 800185a:	4802      	ldr	r0, [pc, #8]	; (8001864 <Full_AD_TIM_Config+0x1c>)
 800185c:	f7ff fb76 	bl	8000f4c <AD_TIM_CDN_INIT>
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000a0 	.word	0x200000a0
 8001868:	40010000 	.word	0x40010000

0800186c <Full_I2C_Config>:

void Full_I2C_Config(void){
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
	I2C1_RX.pI2Cx = I2C1;
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <Full_I2C_Config+0x20>)
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <Full_I2C_Config+0x24>)
 8001874:	601a      	str	r2, [r3, #0]
	I2C1_RX.I2C_Config.I2C_AckControl = 1;
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <Full_I2C_Config+0x20>)
 8001878:	2201      	movs	r2, #1
 800187a:	725a      	strb	r2, [r3, #9]
	I2C1_RX.I2C_Config.I2C_SCLSpeed = 100000;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <Full_I2C_Config+0x20>)
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <Full_I2C_Config+0x28>)
 8001880:	605a      	str	r2, [r3, #4]
	I2C_SM_INIT(&I2C1_RX);
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <Full_I2C_Config+0x20>)
 8001884:	f7ff f9ee 	bl	8000c64 <I2C_SM_INIT>
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	200000c0 	.word	0x200000c0
 8001890:	40005400 	.word	0x40005400
 8001894:	000186a0 	.word	0x000186a0

08001898 <Full_USART_Config>:

void Full_USART_Config(void){
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0

	USART1_TXRX.pUSARTx = USART1;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <Full_USART_Config+0x34>)
 800189e:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <Full_USART_Config+0x38>)
 80018a0:	601a      	str	r2, [r3, #0]
	USART1_TXRX.USART_Config.USART_Mode = USART_MODE_TXRX;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <Full_USART_Config+0x34>)
 80018a4:	2202      	movs	r2, #2
 80018a6:	711a      	strb	r2, [r3, #4]
	USART1_TXRX.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <Full_USART_Config+0x34>)
 80018aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018ae:	609a      	str	r2, [r3, #8]
	USART1_TXRX.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <Full_USART_Config+0x34>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	735a      	strb	r2, [r3, #13]
	USART1_TXRX.USART_Config.USART_NoOfStopBits	= USART_STOPBITS_1;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <Full_USART_Config+0x34>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	731a      	strb	r2, [r3, #12]
	USART1_TXRX.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <Full_USART_Config+0x34>)
 80018be:	2200      	movs	r2, #0
 80018c0:	739a      	strb	r2, [r3, #14]
	//enable peripheral via cr1?

	USART_INIT(&USART1_TXRX);
 80018c2:	4802      	ldr	r0, [pc, #8]	; (80018cc <Full_USART_Config+0x34>)
 80018c4:	f7ff fd80 	bl	80013c8 <USART_INIT>
	//USART1_TXRX.pUSARTx->CR1 |= (1 << 13);
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200000e8 	.word	0x200000e8
 80018d0:	40011000 	.word	0x40011000

080018d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return 1;
 80018d8:	2301      	movs	r3, #1
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <_kill>:

int _kill(int pid, int sig)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ec:	f000 f8dc 	bl	8001aa8 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2216      	movs	r2, #22
 80018f4:	601a      	str	r2, [r3, #0]
  return -1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <_exit>:

void _exit (int status)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190a:	f04f 31ff 	mov.w	r1, #4294967295
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffe7 	bl	80018e2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001914:	e7fe      	b.n	8001914 <_exit+0x12>

08001916 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e00a      	b.n	800193e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001928:	f3af 8000 	nop.w
 800192c:	4601      	mov	r1, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	60ba      	str	r2, [r7, #8]
 8001934:	b2ca      	uxtb	r2, r1
 8001936:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	dbf0      	blt.n	8001928 <_read+0x12>
  }

  return len;
 8001946:	687b      	ldr	r3, [r7, #4]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e009      	b.n	8001976 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	3301      	adds	r3, #1
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	dbf1      	blt.n	8001962 <_write+0x12>
  }
  return len;
 800197e:	687b      	ldr	r3, [r7, #4]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_close>:

int _close(int file)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ae:	605a      	str	r2, [r3, #4]
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <_isatty>:

int _isatty(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f000 f846 	bl	8001aa8 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20018000 	.word	0x20018000
 8001a48:	00000400 	.word	0x00000400
 8001a4c:	2000010c 	.word	0x2000010c
 8001a50:	20000120 	.word	0x20000120

08001a54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a54:	480d      	ldr	r0, [pc, #52]	; (8001a8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a58:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a5e:	490d      	ldr	r1, [pc, #52]	; (8001a94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a60:	4a0d      	ldr	r2, [pc, #52]	; (8001a98 <LoopForever+0xe>)
  movs r3, #0
 8001a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a64:	e002      	b.n	8001a6c <LoopCopyDataInit>

08001a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6a:	3304      	adds	r3, #4

08001a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a70:	d3f9      	bcc.n	8001a66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a74:	4c0a      	ldr	r4, [pc, #40]	; (8001aa0 <LoopForever+0x16>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a78:	e001      	b.n	8001a7e <LoopFillZerobss>

08001a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a7c:	3204      	adds	r2, #4

08001a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a80:	d3fb      	bcc.n	8001a7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a82:	f000 f817 	bl	8001ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a86:	f7ff fd2b 	bl	80014e0 <main>

08001a8a <LoopForever>:

LoopForever:
  b LoopForever
 8001a8a:	e7fe      	b.n	8001a8a <LoopForever>
  ldr   r0, =_estack
 8001a8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a94:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001a98:	08002d30 	.word	0x08002d30
  ldr r2, =_sbss
 8001a9c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001aa0:	20000120 	.word	0x20000120

08001aa4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <__errno>:
 8001aa8:	4b01      	ldr	r3, [pc, #4]	; (8001ab0 <__errno+0x8>)
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <__libc_init_array>:
 8001ab4:	b570      	push	{r4, r5, r6, lr}
 8001ab6:	4d0d      	ldr	r5, [pc, #52]	; (8001aec <__libc_init_array+0x38>)
 8001ab8:	4c0d      	ldr	r4, [pc, #52]	; (8001af0 <__libc_init_array+0x3c>)
 8001aba:	1b64      	subs	r4, r4, r5
 8001abc:	10a4      	asrs	r4, r4, #2
 8001abe:	2600      	movs	r6, #0
 8001ac0:	42a6      	cmp	r6, r4
 8001ac2:	d109      	bne.n	8001ad8 <__libc_init_array+0x24>
 8001ac4:	4d0b      	ldr	r5, [pc, #44]	; (8001af4 <__libc_init_array+0x40>)
 8001ac6:	4c0c      	ldr	r4, [pc, #48]	; (8001af8 <__libc_init_array+0x44>)
 8001ac8:	f001 f87e 	bl	8002bc8 <_init>
 8001acc:	1b64      	subs	r4, r4, r5
 8001ace:	10a4      	asrs	r4, r4, #2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	42a6      	cmp	r6, r4
 8001ad4:	d105      	bne.n	8001ae2 <__libc_init_array+0x2e>
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
 8001ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001adc:	4798      	blx	r3
 8001ade:	3601      	adds	r6, #1
 8001ae0:	e7ee      	b.n	8001ac0 <__libc_init_array+0xc>
 8001ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ae6:	4798      	blx	r3
 8001ae8:	3601      	adds	r6, #1
 8001aea:	e7f2      	b.n	8001ad2 <__libc_init_array+0x1e>
 8001aec:	08002d28 	.word	0x08002d28
 8001af0:	08002d28 	.word	0x08002d28
 8001af4:	08002d28 	.word	0x08002d28
 8001af8:	08002d2c 	.word	0x08002d2c

08001afc <memset>:
 8001afc:	4402      	add	r2, r0
 8001afe:	4603      	mov	r3, r0
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memset+0xa>
 8001b04:	4770      	bx	lr
 8001b06:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0a:	e7f9      	b.n	8001b00 <memset+0x4>

08001b0c <srand>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <srand+0x44>)
 8001b10:	681d      	ldr	r5, [r3, #0]
 8001b12:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b14:	4604      	mov	r4, r0
 8001b16:	b9b3      	cbnz	r3, 8001b46 <srand+0x3a>
 8001b18:	2018      	movs	r0, #24
 8001b1a:	f000 f893 	bl	8001c44 <malloc>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	63a8      	str	r0, [r5, #56]	; 0x38
 8001b22:	b920      	cbnz	r0, 8001b2e <srand+0x22>
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <srand+0x48>)
 8001b26:	480c      	ldr	r0, [pc, #48]	; (8001b58 <srand+0x4c>)
 8001b28:	2142      	movs	r1, #66	; 0x42
 8001b2a:	f000 f85b 	bl	8001be4 <__assert_func>
 8001b2e:	490b      	ldr	r1, [pc, #44]	; (8001b5c <srand+0x50>)
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <srand+0x54>)
 8001b32:	e9c0 1300 	strd	r1, r3, [r0]
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <srand+0x58>)
 8001b38:	6083      	str	r3, [r0, #8]
 8001b3a:	230b      	movs	r3, #11
 8001b3c:	8183      	strh	r3, [r0, #12]
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2001      	movs	r0, #1
 8001b42:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001b46:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611c      	str	r4, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	20000000 	.word	0x20000000
 8001b54:	08002be4 	.word	0x08002be4
 8001b58:	08002bfb 	.word	0x08002bfb
 8001b5c:	abcd330e 	.word	0xabcd330e
 8001b60:	e66d1234 	.word	0xe66d1234
 8001b64:	0005deec 	.word	0x0005deec

08001b68 <rand>:
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <rand+0x5c>)
 8001b6a:	b510      	push	{r4, lr}
 8001b6c:	681c      	ldr	r4, [r3, #0]
 8001b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b70:	b9b3      	cbnz	r3, 8001ba0 <rand+0x38>
 8001b72:	2018      	movs	r0, #24
 8001b74:	f000 f866 	bl	8001c44 <malloc>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	63a0      	str	r0, [r4, #56]	; 0x38
 8001b7c:	b920      	cbnz	r0, 8001b88 <rand+0x20>
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <rand+0x60>)
 8001b80:	4812      	ldr	r0, [pc, #72]	; (8001bcc <rand+0x64>)
 8001b82:	214e      	movs	r1, #78	; 0x4e
 8001b84:	f000 f82e 	bl	8001be4 <__assert_func>
 8001b88:	4911      	ldr	r1, [pc, #68]	; (8001bd0 <rand+0x68>)
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <rand+0x6c>)
 8001b8c:	e9c0 1300 	strd	r1, r3, [r0]
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <rand+0x70>)
 8001b92:	6083      	str	r3, [r0, #8]
 8001b94:	230b      	movs	r3, #11
 8001b96:	8183      	strh	r3, [r0, #12]
 8001b98:	2100      	movs	r1, #0
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001ba0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <rand+0x74>)
 8001ba4:	6920      	ldr	r0, [r4, #16]
 8001ba6:	6963      	ldr	r3, [r4, #20]
 8001ba8:	490d      	ldr	r1, [pc, #52]	; (8001be0 <rand+0x78>)
 8001baa:	4342      	muls	r2, r0
 8001bac:	fb01 2203 	mla	r2, r1, r3, r2
 8001bb0:	fba0 0101 	umull	r0, r1, r0, r1
 8001bb4:	1c43      	adds	r3, r0, #1
 8001bb6:	eb42 0001 	adc.w	r0, r2, r1
 8001bba:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001bbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001bc2:	bd10      	pop	{r4, pc}
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	08002be4 	.word	0x08002be4
 8001bcc:	08002bfb 	.word	0x08002bfb
 8001bd0:	abcd330e 	.word	0xabcd330e
 8001bd4:	e66d1234 	.word	0xe66d1234
 8001bd8:	0005deec 	.word	0x0005deec
 8001bdc:	5851f42d 	.word	0x5851f42d
 8001be0:	4c957f2d 	.word	0x4c957f2d

08001be4 <__assert_func>:
 8001be4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001be6:	4614      	mov	r4, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <__assert_func+0x2c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4605      	mov	r5, r0
 8001bf0:	68d8      	ldr	r0, [r3, #12]
 8001bf2:	b14c      	cbz	r4, 8001c08 <__assert_func+0x24>
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <__assert_func+0x30>)
 8001bf6:	9100      	str	r1, [sp, #0]
 8001bf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001bfc:	4906      	ldr	r1, [pc, #24]	; (8001c18 <__assert_func+0x34>)
 8001bfe:	462b      	mov	r3, r5
 8001c00:	f000 f80e 	bl	8001c20 <fiprintf>
 8001c04:	f000 fcc0 	bl	8002588 <abort>
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__assert_func+0x38>)
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	e7f3      	b.n	8001bf6 <__assert_func+0x12>
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000
 8001c14:	08002c56 	.word	0x08002c56
 8001c18:	08002c63 	.word	0x08002c63
 8001c1c:	08002c91 	.word	0x08002c91

08001c20 <fiprintf>:
 8001c20:	b40e      	push	{r1, r2, r3}
 8001c22:	b503      	push	{r0, r1, lr}
 8001c24:	4601      	mov	r1, r0
 8001c26:	ab03      	add	r3, sp, #12
 8001c28:	4805      	ldr	r0, [pc, #20]	; (8001c40 <fiprintf+0x20>)
 8001c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c2e:	6800      	ldr	r0, [r0, #0]
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	f000 f915 	bl	8001e60 <_vfiprintf_r>
 8001c36:	b002      	add	sp, #8
 8001c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c3c:	b003      	add	sp, #12
 8001c3e:	4770      	bx	lr
 8001c40:	20000000 	.word	0x20000000

08001c44 <malloc>:
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <malloc+0xc>)
 8001c46:	4601      	mov	r1, r0
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	f000 b86d 	b.w	8001d28 <_malloc_r>
 8001c4e:	bf00      	nop
 8001c50:	20000000 	.word	0x20000000

08001c54 <_free_r>:
 8001c54:	b538      	push	{r3, r4, r5, lr}
 8001c56:	4605      	mov	r5, r0
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d041      	beq.n	8001ce0 <_free_r+0x8c>
 8001c5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c60:	1f0c      	subs	r4, r1, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bfb8      	it	lt
 8001c66:	18e4      	addlt	r4, r4, r3
 8001c68:	f000 feb2 	bl	80029d0 <__malloc_lock>
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <_free_r+0x90>)
 8001c6e:	6813      	ldr	r3, [r2, #0]
 8001c70:	b933      	cbnz	r3, 8001c80 <_free_r+0x2c>
 8001c72:	6063      	str	r3, [r4, #4]
 8001c74:	6014      	str	r4, [r2, #0]
 8001c76:	4628      	mov	r0, r5
 8001c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c7c:	f000 beae 	b.w	80029dc <__malloc_unlock>
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	d908      	bls.n	8001c96 <_free_r+0x42>
 8001c84:	6820      	ldr	r0, [r4, #0]
 8001c86:	1821      	adds	r1, r4, r0
 8001c88:	428b      	cmp	r3, r1
 8001c8a:	bf01      	itttt	eq
 8001c8c:	6819      	ldreq	r1, [r3, #0]
 8001c8e:	685b      	ldreq	r3, [r3, #4]
 8001c90:	1809      	addeq	r1, r1, r0
 8001c92:	6021      	streq	r1, [r4, #0]
 8001c94:	e7ed      	b.n	8001c72 <_free_r+0x1e>
 8001c96:	461a      	mov	r2, r3
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	b10b      	cbz	r3, 8001ca0 <_free_r+0x4c>
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	d9fa      	bls.n	8001c96 <_free_r+0x42>
 8001ca0:	6811      	ldr	r1, [r2, #0]
 8001ca2:	1850      	adds	r0, r2, r1
 8001ca4:	42a0      	cmp	r0, r4
 8001ca6:	d10b      	bne.n	8001cc0 <_free_r+0x6c>
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	4401      	add	r1, r0
 8001cac:	1850      	adds	r0, r2, r1
 8001cae:	4283      	cmp	r3, r0
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	d1e0      	bne.n	8001c76 <_free_r+0x22>
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	6053      	str	r3, [r2, #4]
 8001cba:	4401      	add	r1, r0
 8001cbc:	6011      	str	r1, [r2, #0]
 8001cbe:	e7da      	b.n	8001c76 <_free_r+0x22>
 8001cc0:	d902      	bls.n	8001cc8 <_free_r+0x74>
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	602b      	str	r3, [r5, #0]
 8001cc6:	e7d6      	b.n	8001c76 <_free_r+0x22>
 8001cc8:	6820      	ldr	r0, [r4, #0]
 8001cca:	1821      	adds	r1, r4, r0
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	bf04      	itt	eq
 8001cd0:	6819      	ldreq	r1, [r3, #0]
 8001cd2:	685b      	ldreq	r3, [r3, #4]
 8001cd4:	6063      	str	r3, [r4, #4]
 8001cd6:	bf04      	itt	eq
 8001cd8:	1809      	addeq	r1, r1, r0
 8001cda:	6021      	streq	r1, [r4, #0]
 8001cdc:	6054      	str	r4, [r2, #4]
 8001cde:	e7ca      	b.n	8001c76 <_free_r+0x22>
 8001ce0:	bd38      	pop	{r3, r4, r5, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000110 	.word	0x20000110

08001ce8 <sbrk_aligned>:
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	4e0e      	ldr	r6, [pc, #56]	; (8001d24 <sbrk_aligned+0x3c>)
 8001cec:	460c      	mov	r4, r1
 8001cee:	6831      	ldr	r1, [r6, #0]
 8001cf0:	4605      	mov	r5, r0
 8001cf2:	b911      	cbnz	r1, 8001cfa <sbrk_aligned+0x12>
 8001cf4:	f000 fb78 	bl	80023e8 <_sbrk_r>
 8001cf8:	6030      	str	r0, [r6, #0]
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	f000 fb73 	bl	80023e8 <_sbrk_r>
 8001d02:	1c43      	adds	r3, r0, #1
 8001d04:	d00a      	beq.n	8001d1c <sbrk_aligned+0x34>
 8001d06:	1cc4      	adds	r4, r0, #3
 8001d08:	f024 0403 	bic.w	r4, r4, #3
 8001d0c:	42a0      	cmp	r0, r4
 8001d0e:	d007      	beq.n	8001d20 <sbrk_aligned+0x38>
 8001d10:	1a21      	subs	r1, r4, r0
 8001d12:	4628      	mov	r0, r5
 8001d14:	f000 fb68 	bl	80023e8 <_sbrk_r>
 8001d18:	3001      	adds	r0, #1
 8001d1a:	d101      	bne.n	8001d20 <sbrk_aligned+0x38>
 8001d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8001d20:	4620      	mov	r0, r4
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	20000114 	.word	0x20000114

08001d28 <_malloc_r>:
 8001d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2c:	1ccd      	adds	r5, r1, #3
 8001d2e:	f025 0503 	bic.w	r5, r5, #3
 8001d32:	3508      	adds	r5, #8
 8001d34:	2d0c      	cmp	r5, #12
 8001d36:	bf38      	it	cc
 8001d38:	250c      	movcc	r5, #12
 8001d3a:	2d00      	cmp	r5, #0
 8001d3c:	4607      	mov	r7, r0
 8001d3e:	db01      	blt.n	8001d44 <_malloc_r+0x1c>
 8001d40:	42a9      	cmp	r1, r5
 8001d42:	d905      	bls.n	8001d50 <_malloc_r+0x28>
 8001d44:	230c      	movs	r3, #12
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	2600      	movs	r6, #0
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d50:	4e2e      	ldr	r6, [pc, #184]	; (8001e0c <_malloc_r+0xe4>)
 8001d52:	f000 fe3d 	bl	80029d0 <__malloc_lock>
 8001d56:	6833      	ldr	r3, [r6, #0]
 8001d58:	461c      	mov	r4, r3
 8001d5a:	bb34      	cbnz	r4, 8001daa <_malloc_r+0x82>
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4638      	mov	r0, r7
 8001d60:	f7ff ffc2 	bl	8001ce8 <sbrk_aligned>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	4604      	mov	r4, r0
 8001d68:	d14d      	bne.n	8001e06 <_malloc_r+0xde>
 8001d6a:	6834      	ldr	r4, [r6, #0]
 8001d6c:	4626      	mov	r6, r4
 8001d6e:	2e00      	cmp	r6, #0
 8001d70:	d140      	bne.n	8001df4 <_malloc_r+0xcc>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	4631      	mov	r1, r6
 8001d76:	4638      	mov	r0, r7
 8001d78:	eb04 0803 	add.w	r8, r4, r3
 8001d7c:	f000 fb34 	bl	80023e8 <_sbrk_r>
 8001d80:	4580      	cmp	r8, r0
 8001d82:	d13a      	bne.n	8001dfa <_malloc_r+0xd2>
 8001d84:	6821      	ldr	r1, [r4, #0]
 8001d86:	3503      	adds	r5, #3
 8001d88:	1a6d      	subs	r5, r5, r1
 8001d8a:	f025 0503 	bic.w	r5, r5, #3
 8001d8e:	3508      	adds	r5, #8
 8001d90:	2d0c      	cmp	r5, #12
 8001d92:	bf38      	it	cc
 8001d94:	250c      	movcc	r5, #12
 8001d96:	4629      	mov	r1, r5
 8001d98:	4638      	mov	r0, r7
 8001d9a:	f7ff ffa5 	bl	8001ce8 <sbrk_aligned>
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d02b      	beq.n	8001dfa <_malloc_r+0xd2>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	442b      	add	r3, r5
 8001da6:	6023      	str	r3, [r4, #0]
 8001da8:	e00e      	b.n	8001dc8 <_malloc_r+0xa0>
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	1b52      	subs	r2, r2, r5
 8001dae:	d41e      	bmi.n	8001dee <_malloc_r+0xc6>
 8001db0:	2a0b      	cmp	r2, #11
 8001db2:	d916      	bls.n	8001de2 <_malloc_r+0xba>
 8001db4:	1961      	adds	r1, r4, r5
 8001db6:	42a3      	cmp	r3, r4
 8001db8:	6025      	str	r5, [r4, #0]
 8001dba:	bf18      	it	ne
 8001dbc:	6059      	strne	r1, [r3, #4]
 8001dbe:	6863      	ldr	r3, [r4, #4]
 8001dc0:	bf08      	it	eq
 8001dc2:	6031      	streq	r1, [r6, #0]
 8001dc4:	5162      	str	r2, [r4, r5]
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	4638      	mov	r0, r7
 8001dca:	f104 060b 	add.w	r6, r4, #11
 8001dce:	f000 fe05 	bl	80029dc <__malloc_unlock>
 8001dd2:	f026 0607 	bic.w	r6, r6, #7
 8001dd6:	1d23      	adds	r3, r4, #4
 8001dd8:	1af2      	subs	r2, r6, r3
 8001dda:	d0b6      	beq.n	8001d4a <_malloc_r+0x22>
 8001ddc:	1b9b      	subs	r3, r3, r6
 8001dde:	50a3      	str	r3, [r4, r2]
 8001de0:	e7b3      	b.n	8001d4a <_malloc_r+0x22>
 8001de2:	6862      	ldr	r2, [r4, #4]
 8001de4:	42a3      	cmp	r3, r4
 8001de6:	bf0c      	ite	eq
 8001de8:	6032      	streq	r2, [r6, #0]
 8001dea:	605a      	strne	r2, [r3, #4]
 8001dec:	e7ec      	b.n	8001dc8 <_malloc_r+0xa0>
 8001dee:	4623      	mov	r3, r4
 8001df0:	6864      	ldr	r4, [r4, #4]
 8001df2:	e7b2      	b.n	8001d5a <_malloc_r+0x32>
 8001df4:	4634      	mov	r4, r6
 8001df6:	6876      	ldr	r6, [r6, #4]
 8001df8:	e7b9      	b.n	8001d6e <_malloc_r+0x46>
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	603b      	str	r3, [r7, #0]
 8001dfe:	4638      	mov	r0, r7
 8001e00:	f000 fdec 	bl	80029dc <__malloc_unlock>
 8001e04:	e7a1      	b.n	8001d4a <_malloc_r+0x22>
 8001e06:	6025      	str	r5, [r4, #0]
 8001e08:	e7de      	b.n	8001dc8 <_malloc_r+0xa0>
 8001e0a:	bf00      	nop
 8001e0c:	20000110 	.word	0x20000110

08001e10 <__sfputc_r>:
 8001e10:	6893      	ldr	r3, [r2, #8]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	b410      	push	{r4}
 8001e18:	6093      	str	r3, [r2, #8]
 8001e1a:	da07      	bge.n	8001e2c <__sfputc_r+0x1c>
 8001e1c:	6994      	ldr	r4, [r2, #24]
 8001e1e:	42a3      	cmp	r3, r4
 8001e20:	db01      	blt.n	8001e26 <__sfputc_r+0x16>
 8001e22:	290a      	cmp	r1, #10
 8001e24:	d102      	bne.n	8001e2c <__sfputc_r+0x1c>
 8001e26:	bc10      	pop	{r4}
 8001e28:	f000 baee 	b.w	8002408 <__swbuf_r>
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	1c58      	adds	r0, r3, #1
 8001e30:	6010      	str	r0, [r2, #0]
 8001e32:	7019      	strb	r1, [r3, #0]
 8001e34:	4608      	mov	r0, r1
 8001e36:	bc10      	pop	{r4}
 8001e38:	4770      	bx	lr

08001e3a <__sfputs_r>:
 8001e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3c:	4606      	mov	r6, r0
 8001e3e:	460f      	mov	r7, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	18d5      	adds	r5, r2, r3
 8001e44:	42ac      	cmp	r4, r5
 8001e46:	d101      	bne.n	8001e4c <__sfputs_r+0x12>
 8001e48:	2000      	movs	r0, #0
 8001e4a:	e007      	b.n	8001e5c <__sfputs_r+0x22>
 8001e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e50:	463a      	mov	r2, r7
 8001e52:	4630      	mov	r0, r6
 8001e54:	f7ff ffdc 	bl	8001e10 <__sfputc_r>
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	d1f3      	bne.n	8001e44 <__sfputs_r+0xa>
 8001e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e60 <_vfiprintf_r>:
 8001e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e64:	460d      	mov	r5, r1
 8001e66:	b09d      	sub	sp, #116	; 0x74
 8001e68:	4614      	mov	r4, r2
 8001e6a:	4698      	mov	r8, r3
 8001e6c:	4606      	mov	r6, r0
 8001e6e:	b118      	cbz	r0, 8001e78 <_vfiprintf_r+0x18>
 8001e70:	6983      	ldr	r3, [r0, #24]
 8001e72:	b90b      	cbnz	r3, 8001e78 <_vfiprintf_r+0x18>
 8001e74:	f000 fca6 	bl	80027c4 <__sinit>
 8001e78:	4b89      	ldr	r3, [pc, #548]	; (80020a0 <_vfiprintf_r+0x240>)
 8001e7a:	429d      	cmp	r5, r3
 8001e7c:	d11b      	bne.n	8001eb6 <_vfiprintf_r+0x56>
 8001e7e:	6875      	ldr	r5, [r6, #4]
 8001e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e82:	07d9      	lsls	r1, r3, #31
 8001e84:	d405      	bmi.n	8001e92 <_vfiprintf_r+0x32>
 8001e86:	89ab      	ldrh	r3, [r5, #12]
 8001e88:	059a      	lsls	r2, r3, #22
 8001e8a:	d402      	bmi.n	8001e92 <_vfiprintf_r+0x32>
 8001e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e8e:	f000 fd37 	bl	8002900 <__retarget_lock_acquire_recursive>
 8001e92:	89ab      	ldrh	r3, [r5, #12]
 8001e94:	071b      	lsls	r3, r3, #28
 8001e96:	d501      	bpl.n	8001e9c <_vfiprintf_r+0x3c>
 8001e98:	692b      	ldr	r3, [r5, #16]
 8001e9a:	b9eb      	cbnz	r3, 8001ed8 <_vfiprintf_r+0x78>
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f000 fb04 	bl	80024ac <__swsetup_r>
 8001ea4:	b1c0      	cbz	r0, 8001ed8 <_vfiprintf_r+0x78>
 8001ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ea8:	07dc      	lsls	r4, r3, #31
 8001eaa:	d50e      	bpl.n	8001eca <_vfiprintf_r+0x6a>
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb0:	b01d      	add	sp, #116	; 0x74
 8001eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eb6:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <_vfiprintf_r+0x244>)
 8001eb8:	429d      	cmp	r5, r3
 8001eba:	d101      	bne.n	8001ec0 <_vfiprintf_r+0x60>
 8001ebc:	68b5      	ldr	r5, [r6, #8]
 8001ebe:	e7df      	b.n	8001e80 <_vfiprintf_r+0x20>
 8001ec0:	4b79      	ldr	r3, [pc, #484]	; (80020a8 <_vfiprintf_r+0x248>)
 8001ec2:	429d      	cmp	r5, r3
 8001ec4:	bf08      	it	eq
 8001ec6:	68f5      	ldreq	r5, [r6, #12]
 8001ec8:	e7da      	b.n	8001e80 <_vfiprintf_r+0x20>
 8001eca:	89ab      	ldrh	r3, [r5, #12]
 8001ecc:	0598      	lsls	r0, r3, #22
 8001ece:	d4ed      	bmi.n	8001eac <_vfiprintf_r+0x4c>
 8001ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ed2:	f000 fd16 	bl	8002902 <__retarget_lock_release_recursive>
 8001ed6:	e7e9      	b.n	8001eac <_vfiprintf_r+0x4c>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9309      	str	r3, [sp, #36]	; 0x24
 8001edc:	2320      	movs	r3, #32
 8001ede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ee6:	2330      	movs	r3, #48	; 0x30
 8001ee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80020ac <_vfiprintf_r+0x24c>
 8001eec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ef0:	f04f 0901 	mov.w	r9, #1
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	469a      	mov	sl, r3
 8001ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001efc:	b10a      	cbz	r2, 8001f02 <_vfiprintf_r+0xa2>
 8001efe:	2a25      	cmp	r2, #37	; 0x25
 8001f00:	d1f9      	bne.n	8001ef6 <_vfiprintf_r+0x96>
 8001f02:	ebba 0b04 	subs.w	fp, sl, r4
 8001f06:	d00b      	beq.n	8001f20 <_vfiprintf_r+0xc0>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	4622      	mov	r2, r4
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff ff93 	bl	8001e3a <__sfputs_r>
 8001f14:	3001      	adds	r0, #1
 8001f16:	f000 80aa 	beq.w	800206e <_vfiprintf_r+0x20e>
 8001f1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f1c:	445a      	add	r2, fp
 8001f1e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f20:	f89a 3000 	ldrb.w	r3, [sl]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a2 	beq.w	800206e <_vfiprintf_r+0x20e>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f34:	f10a 0a01 	add.w	sl, sl, #1
 8001f38:	9304      	str	r3, [sp, #16]
 8001f3a:	9307      	str	r3, [sp, #28]
 8001f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f40:	931a      	str	r3, [sp, #104]	; 0x68
 8001f42:	4654      	mov	r4, sl
 8001f44:	2205      	movs	r2, #5
 8001f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f4a:	4858      	ldr	r0, [pc, #352]	; (80020ac <_vfiprintf_r+0x24c>)
 8001f4c:	f7fe f948 	bl	80001e0 <memchr>
 8001f50:	9a04      	ldr	r2, [sp, #16]
 8001f52:	b9d8      	cbnz	r0, 8001f8c <_vfiprintf_r+0x12c>
 8001f54:	06d1      	lsls	r1, r2, #27
 8001f56:	bf44      	itt	mi
 8001f58:	2320      	movmi	r3, #32
 8001f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f5e:	0713      	lsls	r3, r2, #28
 8001f60:	bf44      	itt	mi
 8001f62:	232b      	movmi	r3, #43	; 0x2b
 8001f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f68:	f89a 3000 	ldrb.w	r3, [sl]
 8001f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f6e:	d015      	beq.n	8001f9c <_vfiprintf_r+0x13c>
 8001f70:	9a07      	ldr	r2, [sp, #28]
 8001f72:	4654      	mov	r4, sl
 8001f74:	2000      	movs	r0, #0
 8001f76:	f04f 0c0a 	mov.w	ip, #10
 8001f7a:	4621      	mov	r1, r4
 8001f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f80:	3b30      	subs	r3, #48	; 0x30
 8001f82:	2b09      	cmp	r3, #9
 8001f84:	d94e      	bls.n	8002024 <_vfiprintf_r+0x1c4>
 8001f86:	b1b0      	cbz	r0, 8001fb6 <_vfiprintf_r+0x156>
 8001f88:	9207      	str	r2, [sp, #28]
 8001f8a:	e014      	b.n	8001fb6 <_vfiprintf_r+0x156>
 8001f8c:	eba0 0308 	sub.w	r3, r0, r8
 8001f90:	fa09 f303 	lsl.w	r3, r9, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	9304      	str	r3, [sp, #16]
 8001f98:	46a2      	mov	sl, r4
 8001f9a:	e7d2      	b.n	8001f42 <_vfiprintf_r+0xe2>
 8001f9c:	9b03      	ldr	r3, [sp, #12]
 8001f9e:	1d19      	adds	r1, r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	9103      	str	r1, [sp, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bfbb      	ittet	lt
 8001fa8:	425b      	neglt	r3, r3
 8001faa:	f042 0202 	orrlt.w	r2, r2, #2
 8001fae:	9307      	strge	r3, [sp, #28]
 8001fb0:	9307      	strlt	r3, [sp, #28]
 8001fb2:	bfb8      	it	lt
 8001fb4:	9204      	strlt	r2, [sp, #16]
 8001fb6:	7823      	ldrb	r3, [r4, #0]
 8001fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8001fba:	d10c      	bne.n	8001fd6 <_vfiprintf_r+0x176>
 8001fbc:	7863      	ldrb	r3, [r4, #1]
 8001fbe:	2b2a      	cmp	r3, #42	; 0x2a
 8001fc0:	d135      	bne.n	800202e <_vfiprintf_r+0x1ce>
 8001fc2:	9b03      	ldr	r3, [sp, #12]
 8001fc4:	1d1a      	adds	r2, r3, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bfb8      	it	lt
 8001fce:	f04f 33ff 	movlt.w	r3, #4294967295
 8001fd2:	3402      	adds	r4, #2
 8001fd4:	9305      	str	r3, [sp, #20]
 8001fd6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80020b0 <_vfiprintf_r+0x250>
 8001fda:	7821      	ldrb	r1, [r4, #0]
 8001fdc:	2203      	movs	r2, #3
 8001fde:	4650      	mov	r0, sl
 8001fe0:	f7fe f8fe 	bl	80001e0 <memchr>
 8001fe4:	b140      	cbz	r0, 8001ff8 <_vfiprintf_r+0x198>
 8001fe6:	2340      	movs	r3, #64	; 0x40
 8001fe8:	eba0 000a 	sub.w	r0, r0, sl
 8001fec:	fa03 f000 	lsl.w	r0, r3, r0
 8001ff0:	9b04      	ldr	r3, [sp, #16]
 8001ff2:	4303      	orrs	r3, r0
 8001ff4:	3401      	adds	r4, #1
 8001ff6:	9304      	str	r3, [sp, #16]
 8001ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ffc:	482d      	ldr	r0, [pc, #180]	; (80020b4 <_vfiprintf_r+0x254>)
 8001ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002002:	2206      	movs	r2, #6
 8002004:	f7fe f8ec 	bl	80001e0 <memchr>
 8002008:	2800      	cmp	r0, #0
 800200a:	d03f      	beq.n	800208c <_vfiprintf_r+0x22c>
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <_vfiprintf_r+0x258>)
 800200e:	bb1b      	cbnz	r3, 8002058 <_vfiprintf_r+0x1f8>
 8002010:	9b03      	ldr	r3, [sp, #12]
 8002012:	3307      	adds	r3, #7
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	3308      	adds	r3, #8
 800201a:	9303      	str	r3, [sp, #12]
 800201c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800201e:	443b      	add	r3, r7
 8002020:	9309      	str	r3, [sp, #36]	; 0x24
 8002022:	e767      	b.n	8001ef4 <_vfiprintf_r+0x94>
 8002024:	fb0c 3202 	mla	r2, ip, r2, r3
 8002028:	460c      	mov	r4, r1
 800202a:	2001      	movs	r0, #1
 800202c:	e7a5      	b.n	8001f7a <_vfiprintf_r+0x11a>
 800202e:	2300      	movs	r3, #0
 8002030:	3401      	adds	r4, #1
 8002032:	9305      	str	r3, [sp, #20]
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 0c0a 	mov.w	ip, #10
 800203a:	4620      	mov	r0, r4
 800203c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002040:	3a30      	subs	r2, #48	; 0x30
 8002042:	2a09      	cmp	r2, #9
 8002044:	d903      	bls.n	800204e <_vfiprintf_r+0x1ee>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0c5      	beq.n	8001fd6 <_vfiprintf_r+0x176>
 800204a:	9105      	str	r1, [sp, #20]
 800204c:	e7c3      	b.n	8001fd6 <_vfiprintf_r+0x176>
 800204e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002052:	4604      	mov	r4, r0
 8002054:	2301      	movs	r3, #1
 8002056:	e7f0      	b.n	800203a <_vfiprintf_r+0x1da>
 8002058:	ab03      	add	r3, sp, #12
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	462a      	mov	r2, r5
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <_vfiprintf_r+0x25c>)
 8002060:	a904      	add	r1, sp, #16
 8002062:	4630      	mov	r0, r6
 8002064:	f3af 8000 	nop.w
 8002068:	4607      	mov	r7, r0
 800206a:	1c78      	adds	r0, r7, #1
 800206c:	d1d6      	bne.n	800201c <_vfiprintf_r+0x1bc>
 800206e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002070:	07d9      	lsls	r1, r3, #31
 8002072:	d405      	bmi.n	8002080 <_vfiprintf_r+0x220>
 8002074:	89ab      	ldrh	r3, [r5, #12]
 8002076:	059a      	lsls	r2, r3, #22
 8002078:	d402      	bmi.n	8002080 <_vfiprintf_r+0x220>
 800207a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800207c:	f000 fc41 	bl	8002902 <__retarget_lock_release_recursive>
 8002080:	89ab      	ldrh	r3, [r5, #12]
 8002082:	065b      	lsls	r3, r3, #25
 8002084:	f53f af12 	bmi.w	8001eac <_vfiprintf_r+0x4c>
 8002088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800208a:	e711      	b.n	8001eb0 <_vfiprintf_r+0x50>
 800208c:	ab03      	add	r3, sp, #12
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	462a      	mov	r2, r5
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <_vfiprintf_r+0x25c>)
 8002094:	a904      	add	r1, sp, #16
 8002096:	4630      	mov	r0, r6
 8002098:	f000 f880 	bl	800219c <_printf_i>
 800209c:	e7e4      	b.n	8002068 <_vfiprintf_r+0x208>
 800209e:	bf00      	nop
 80020a0:	08002ce8 	.word	0x08002ce8
 80020a4:	08002d08 	.word	0x08002d08
 80020a8:	08002cc8 	.word	0x08002cc8
 80020ac:	08002c92 	.word	0x08002c92
 80020b0:	08002c98 	.word	0x08002c98
 80020b4:	08002c9c 	.word	0x08002c9c
 80020b8:	00000000 	.word	0x00000000
 80020bc:	08001e3b 	.word	0x08001e3b

080020c0 <_printf_common>:
 80020c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020c4:	4616      	mov	r6, r2
 80020c6:	4699      	mov	r9, r3
 80020c8:	688a      	ldr	r2, [r1, #8]
 80020ca:	690b      	ldr	r3, [r1, #16]
 80020cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bfb8      	it	lt
 80020d4:	4613      	movlt	r3, r2
 80020d6:	6033      	str	r3, [r6, #0]
 80020d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020dc:	4607      	mov	r7, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	b10a      	cbz	r2, 80020e6 <_printf_common+0x26>
 80020e2:	3301      	adds	r3, #1
 80020e4:	6033      	str	r3, [r6, #0]
 80020e6:	6823      	ldr	r3, [r4, #0]
 80020e8:	0699      	lsls	r1, r3, #26
 80020ea:	bf42      	ittt	mi
 80020ec:	6833      	ldrmi	r3, [r6, #0]
 80020ee:	3302      	addmi	r3, #2
 80020f0:	6033      	strmi	r3, [r6, #0]
 80020f2:	6825      	ldr	r5, [r4, #0]
 80020f4:	f015 0506 	ands.w	r5, r5, #6
 80020f8:	d106      	bne.n	8002108 <_printf_common+0x48>
 80020fa:	f104 0a19 	add.w	sl, r4, #25
 80020fe:	68e3      	ldr	r3, [r4, #12]
 8002100:	6832      	ldr	r2, [r6, #0]
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	42ab      	cmp	r3, r5
 8002106:	dc26      	bgt.n	8002156 <_printf_common+0x96>
 8002108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800210c:	1e13      	subs	r3, r2, #0
 800210e:	6822      	ldr	r2, [r4, #0]
 8002110:	bf18      	it	ne
 8002112:	2301      	movne	r3, #1
 8002114:	0692      	lsls	r2, r2, #26
 8002116:	d42b      	bmi.n	8002170 <_printf_common+0xb0>
 8002118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800211c:	4649      	mov	r1, r9
 800211e:	4638      	mov	r0, r7
 8002120:	47c0      	blx	r8
 8002122:	3001      	adds	r0, #1
 8002124:	d01e      	beq.n	8002164 <_printf_common+0xa4>
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	68e5      	ldr	r5, [r4, #12]
 800212a:	6832      	ldr	r2, [r6, #0]
 800212c:	f003 0306 	and.w	r3, r3, #6
 8002130:	2b04      	cmp	r3, #4
 8002132:	bf08      	it	eq
 8002134:	1aad      	subeq	r5, r5, r2
 8002136:	68a3      	ldr	r3, [r4, #8]
 8002138:	6922      	ldr	r2, [r4, #16]
 800213a:	bf0c      	ite	eq
 800213c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002140:	2500      	movne	r5, #0
 8002142:	4293      	cmp	r3, r2
 8002144:	bfc4      	itt	gt
 8002146:	1a9b      	subgt	r3, r3, r2
 8002148:	18ed      	addgt	r5, r5, r3
 800214a:	2600      	movs	r6, #0
 800214c:	341a      	adds	r4, #26
 800214e:	42b5      	cmp	r5, r6
 8002150:	d11a      	bne.n	8002188 <_printf_common+0xc8>
 8002152:	2000      	movs	r0, #0
 8002154:	e008      	b.n	8002168 <_printf_common+0xa8>
 8002156:	2301      	movs	r3, #1
 8002158:	4652      	mov	r2, sl
 800215a:	4649      	mov	r1, r9
 800215c:	4638      	mov	r0, r7
 800215e:	47c0      	blx	r8
 8002160:	3001      	adds	r0, #1
 8002162:	d103      	bne.n	800216c <_printf_common+0xac>
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216c:	3501      	adds	r5, #1
 800216e:	e7c6      	b.n	80020fe <_printf_common+0x3e>
 8002170:	18e1      	adds	r1, r4, r3
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	2030      	movs	r0, #48	; 0x30
 8002176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800217a:	4422      	add	r2, r4
 800217c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002184:	3302      	adds	r3, #2
 8002186:	e7c7      	b.n	8002118 <_printf_common+0x58>
 8002188:	2301      	movs	r3, #1
 800218a:	4622      	mov	r2, r4
 800218c:	4649      	mov	r1, r9
 800218e:	4638      	mov	r0, r7
 8002190:	47c0      	blx	r8
 8002192:	3001      	adds	r0, #1
 8002194:	d0e6      	beq.n	8002164 <_printf_common+0xa4>
 8002196:	3601      	adds	r6, #1
 8002198:	e7d9      	b.n	800214e <_printf_common+0x8e>
	...

0800219c <_printf_i>:
 800219c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021a0:	7e0f      	ldrb	r7, [r1, #24]
 80021a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021a4:	2f78      	cmp	r7, #120	; 0x78
 80021a6:	4691      	mov	r9, r2
 80021a8:	4680      	mov	r8, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	469a      	mov	sl, r3
 80021ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80021b2:	d807      	bhi.n	80021c4 <_printf_i+0x28>
 80021b4:	2f62      	cmp	r7, #98	; 0x62
 80021b6:	d80a      	bhi.n	80021ce <_printf_i+0x32>
 80021b8:	2f00      	cmp	r7, #0
 80021ba:	f000 80d8 	beq.w	800236e <_printf_i+0x1d2>
 80021be:	2f58      	cmp	r7, #88	; 0x58
 80021c0:	f000 80a3 	beq.w	800230a <_printf_i+0x16e>
 80021c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021cc:	e03a      	b.n	8002244 <_printf_i+0xa8>
 80021ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021d2:	2b15      	cmp	r3, #21
 80021d4:	d8f6      	bhi.n	80021c4 <_printf_i+0x28>
 80021d6:	a101      	add	r1, pc, #4	; (adr r1, 80021dc <_printf_i+0x40>)
 80021d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021dc:	08002235 	.word	0x08002235
 80021e0:	08002249 	.word	0x08002249
 80021e4:	080021c5 	.word	0x080021c5
 80021e8:	080021c5 	.word	0x080021c5
 80021ec:	080021c5 	.word	0x080021c5
 80021f0:	080021c5 	.word	0x080021c5
 80021f4:	08002249 	.word	0x08002249
 80021f8:	080021c5 	.word	0x080021c5
 80021fc:	080021c5 	.word	0x080021c5
 8002200:	080021c5 	.word	0x080021c5
 8002204:	080021c5 	.word	0x080021c5
 8002208:	08002355 	.word	0x08002355
 800220c:	08002279 	.word	0x08002279
 8002210:	08002337 	.word	0x08002337
 8002214:	080021c5 	.word	0x080021c5
 8002218:	080021c5 	.word	0x080021c5
 800221c:	08002377 	.word	0x08002377
 8002220:	080021c5 	.word	0x080021c5
 8002224:	08002279 	.word	0x08002279
 8002228:	080021c5 	.word	0x080021c5
 800222c:	080021c5 	.word	0x080021c5
 8002230:	0800233f 	.word	0x0800233f
 8002234:	682b      	ldr	r3, [r5, #0]
 8002236:	1d1a      	adds	r2, r3, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	602a      	str	r2, [r5, #0]
 800223c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002244:	2301      	movs	r3, #1
 8002246:	e0a3      	b.n	8002390 <_printf_i+0x1f4>
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	6829      	ldr	r1, [r5, #0]
 800224c:	0606      	lsls	r6, r0, #24
 800224e:	f101 0304 	add.w	r3, r1, #4
 8002252:	d50a      	bpl.n	800226a <_printf_i+0xce>
 8002254:	680e      	ldr	r6, [r1, #0]
 8002256:	602b      	str	r3, [r5, #0]
 8002258:	2e00      	cmp	r6, #0
 800225a:	da03      	bge.n	8002264 <_printf_i+0xc8>
 800225c:	232d      	movs	r3, #45	; 0x2d
 800225e:	4276      	negs	r6, r6
 8002260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002264:	485e      	ldr	r0, [pc, #376]	; (80023e0 <_printf_i+0x244>)
 8002266:	230a      	movs	r3, #10
 8002268:	e019      	b.n	800229e <_printf_i+0x102>
 800226a:	680e      	ldr	r6, [r1, #0]
 800226c:	602b      	str	r3, [r5, #0]
 800226e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002272:	bf18      	it	ne
 8002274:	b236      	sxthne	r6, r6
 8002276:	e7ef      	b.n	8002258 <_printf_i+0xbc>
 8002278:	682b      	ldr	r3, [r5, #0]
 800227a:	6820      	ldr	r0, [r4, #0]
 800227c:	1d19      	adds	r1, r3, #4
 800227e:	6029      	str	r1, [r5, #0]
 8002280:	0601      	lsls	r1, r0, #24
 8002282:	d501      	bpl.n	8002288 <_printf_i+0xec>
 8002284:	681e      	ldr	r6, [r3, #0]
 8002286:	e002      	b.n	800228e <_printf_i+0xf2>
 8002288:	0646      	lsls	r6, r0, #25
 800228a:	d5fb      	bpl.n	8002284 <_printf_i+0xe8>
 800228c:	881e      	ldrh	r6, [r3, #0]
 800228e:	4854      	ldr	r0, [pc, #336]	; (80023e0 <_printf_i+0x244>)
 8002290:	2f6f      	cmp	r7, #111	; 0x6f
 8002292:	bf0c      	ite	eq
 8002294:	2308      	moveq	r3, #8
 8002296:	230a      	movne	r3, #10
 8002298:	2100      	movs	r1, #0
 800229a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800229e:	6865      	ldr	r5, [r4, #4]
 80022a0:	60a5      	str	r5, [r4, #8]
 80022a2:	2d00      	cmp	r5, #0
 80022a4:	bfa2      	ittt	ge
 80022a6:	6821      	ldrge	r1, [r4, #0]
 80022a8:	f021 0104 	bicge.w	r1, r1, #4
 80022ac:	6021      	strge	r1, [r4, #0]
 80022ae:	b90e      	cbnz	r6, 80022b4 <_printf_i+0x118>
 80022b0:	2d00      	cmp	r5, #0
 80022b2:	d04d      	beq.n	8002350 <_printf_i+0x1b4>
 80022b4:	4615      	mov	r5, r2
 80022b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80022ba:	fb03 6711 	mls	r7, r3, r1, r6
 80022be:	5dc7      	ldrb	r7, [r0, r7]
 80022c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80022c4:	4637      	mov	r7, r6
 80022c6:	42bb      	cmp	r3, r7
 80022c8:	460e      	mov	r6, r1
 80022ca:	d9f4      	bls.n	80022b6 <_printf_i+0x11a>
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d10b      	bne.n	80022e8 <_printf_i+0x14c>
 80022d0:	6823      	ldr	r3, [r4, #0]
 80022d2:	07de      	lsls	r6, r3, #31
 80022d4:	d508      	bpl.n	80022e8 <_printf_i+0x14c>
 80022d6:	6923      	ldr	r3, [r4, #16]
 80022d8:	6861      	ldr	r1, [r4, #4]
 80022da:	4299      	cmp	r1, r3
 80022dc:	bfde      	ittt	le
 80022de:	2330      	movle	r3, #48	; 0x30
 80022e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022e8:	1b52      	subs	r2, r2, r5
 80022ea:	6122      	str	r2, [r4, #16]
 80022ec:	f8cd a000 	str.w	sl, [sp]
 80022f0:	464b      	mov	r3, r9
 80022f2:	aa03      	add	r2, sp, #12
 80022f4:	4621      	mov	r1, r4
 80022f6:	4640      	mov	r0, r8
 80022f8:	f7ff fee2 	bl	80020c0 <_printf_common>
 80022fc:	3001      	adds	r0, #1
 80022fe:	d14c      	bne.n	800239a <_printf_i+0x1fe>
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	b004      	add	sp, #16
 8002306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230a:	4835      	ldr	r0, [pc, #212]	; (80023e0 <_printf_i+0x244>)
 800230c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002310:	6829      	ldr	r1, [r5, #0]
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	f851 6b04 	ldr.w	r6, [r1], #4
 8002318:	6029      	str	r1, [r5, #0]
 800231a:	061d      	lsls	r5, r3, #24
 800231c:	d514      	bpl.n	8002348 <_printf_i+0x1ac>
 800231e:	07df      	lsls	r7, r3, #31
 8002320:	bf44      	itt	mi
 8002322:	f043 0320 	orrmi.w	r3, r3, #32
 8002326:	6023      	strmi	r3, [r4, #0]
 8002328:	b91e      	cbnz	r6, 8002332 <_printf_i+0x196>
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	f023 0320 	bic.w	r3, r3, #32
 8002330:	6023      	str	r3, [r4, #0]
 8002332:	2310      	movs	r3, #16
 8002334:	e7b0      	b.n	8002298 <_printf_i+0xfc>
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	6023      	str	r3, [r4, #0]
 800233e:	2378      	movs	r3, #120	; 0x78
 8002340:	4828      	ldr	r0, [pc, #160]	; (80023e4 <_printf_i+0x248>)
 8002342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002346:	e7e3      	b.n	8002310 <_printf_i+0x174>
 8002348:	0659      	lsls	r1, r3, #25
 800234a:	bf48      	it	mi
 800234c:	b2b6      	uxthmi	r6, r6
 800234e:	e7e6      	b.n	800231e <_printf_i+0x182>
 8002350:	4615      	mov	r5, r2
 8002352:	e7bb      	b.n	80022cc <_printf_i+0x130>
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	6826      	ldr	r6, [r4, #0]
 8002358:	6961      	ldr	r1, [r4, #20]
 800235a:	1d18      	adds	r0, r3, #4
 800235c:	6028      	str	r0, [r5, #0]
 800235e:	0635      	lsls	r5, r6, #24
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	d501      	bpl.n	8002368 <_printf_i+0x1cc>
 8002364:	6019      	str	r1, [r3, #0]
 8002366:	e002      	b.n	800236e <_printf_i+0x1d2>
 8002368:	0670      	lsls	r0, r6, #25
 800236a:	d5fb      	bpl.n	8002364 <_printf_i+0x1c8>
 800236c:	8019      	strh	r1, [r3, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	6123      	str	r3, [r4, #16]
 8002372:	4615      	mov	r5, r2
 8002374:	e7ba      	b.n	80022ec <_printf_i+0x150>
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	1d1a      	adds	r2, r3, #4
 800237a:	602a      	str	r2, [r5, #0]
 800237c:	681d      	ldr	r5, [r3, #0]
 800237e:	6862      	ldr	r2, [r4, #4]
 8002380:	2100      	movs	r1, #0
 8002382:	4628      	mov	r0, r5
 8002384:	f7fd ff2c 	bl	80001e0 <memchr>
 8002388:	b108      	cbz	r0, 800238e <_printf_i+0x1f2>
 800238a:	1b40      	subs	r0, r0, r5
 800238c:	6060      	str	r0, [r4, #4]
 800238e:	6863      	ldr	r3, [r4, #4]
 8002390:	6123      	str	r3, [r4, #16]
 8002392:	2300      	movs	r3, #0
 8002394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002398:	e7a8      	b.n	80022ec <_printf_i+0x150>
 800239a:	6923      	ldr	r3, [r4, #16]
 800239c:	462a      	mov	r2, r5
 800239e:	4649      	mov	r1, r9
 80023a0:	4640      	mov	r0, r8
 80023a2:	47d0      	blx	sl
 80023a4:	3001      	adds	r0, #1
 80023a6:	d0ab      	beq.n	8002300 <_printf_i+0x164>
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	079b      	lsls	r3, r3, #30
 80023ac:	d413      	bmi.n	80023d6 <_printf_i+0x23a>
 80023ae:	68e0      	ldr	r0, [r4, #12]
 80023b0:	9b03      	ldr	r3, [sp, #12]
 80023b2:	4298      	cmp	r0, r3
 80023b4:	bfb8      	it	lt
 80023b6:	4618      	movlt	r0, r3
 80023b8:	e7a4      	b.n	8002304 <_printf_i+0x168>
 80023ba:	2301      	movs	r3, #1
 80023bc:	4632      	mov	r2, r6
 80023be:	4649      	mov	r1, r9
 80023c0:	4640      	mov	r0, r8
 80023c2:	47d0      	blx	sl
 80023c4:	3001      	adds	r0, #1
 80023c6:	d09b      	beq.n	8002300 <_printf_i+0x164>
 80023c8:	3501      	adds	r5, #1
 80023ca:	68e3      	ldr	r3, [r4, #12]
 80023cc:	9903      	ldr	r1, [sp, #12]
 80023ce:	1a5b      	subs	r3, r3, r1
 80023d0:	42ab      	cmp	r3, r5
 80023d2:	dcf2      	bgt.n	80023ba <_printf_i+0x21e>
 80023d4:	e7eb      	b.n	80023ae <_printf_i+0x212>
 80023d6:	2500      	movs	r5, #0
 80023d8:	f104 0619 	add.w	r6, r4, #25
 80023dc:	e7f5      	b.n	80023ca <_printf_i+0x22e>
 80023de:	bf00      	nop
 80023e0:	08002ca3 	.word	0x08002ca3
 80023e4:	08002cb4 	.word	0x08002cb4

080023e8 <_sbrk_r>:
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	4d06      	ldr	r5, [pc, #24]	; (8002404 <_sbrk_r+0x1c>)
 80023ec:	2300      	movs	r3, #0
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	602b      	str	r3, [r5, #0]
 80023f4:	f7ff faf8 	bl	80019e8 <_sbrk>
 80023f8:	1c43      	adds	r3, r0, #1
 80023fa:	d102      	bne.n	8002402 <_sbrk_r+0x1a>
 80023fc:	682b      	ldr	r3, [r5, #0]
 80023fe:	b103      	cbz	r3, 8002402 <_sbrk_r+0x1a>
 8002400:	6023      	str	r3, [r4, #0]
 8002402:	bd38      	pop	{r3, r4, r5, pc}
 8002404:	2000011c 	.word	0x2000011c

08002408 <__swbuf_r>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	460e      	mov	r6, r1
 800240c:	4614      	mov	r4, r2
 800240e:	4605      	mov	r5, r0
 8002410:	b118      	cbz	r0, 800241a <__swbuf_r+0x12>
 8002412:	6983      	ldr	r3, [r0, #24]
 8002414:	b90b      	cbnz	r3, 800241a <__swbuf_r+0x12>
 8002416:	f000 f9d5 	bl	80027c4 <__sinit>
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <__swbuf_r+0x98>)
 800241c:	429c      	cmp	r4, r3
 800241e:	d12b      	bne.n	8002478 <__swbuf_r+0x70>
 8002420:	686c      	ldr	r4, [r5, #4]
 8002422:	69a3      	ldr	r3, [r4, #24]
 8002424:	60a3      	str	r3, [r4, #8]
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	071a      	lsls	r2, r3, #28
 800242a:	d52f      	bpl.n	800248c <__swbuf_r+0x84>
 800242c:	6923      	ldr	r3, [r4, #16]
 800242e:	b36b      	cbz	r3, 800248c <__swbuf_r+0x84>
 8002430:	6923      	ldr	r3, [r4, #16]
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	1ac0      	subs	r0, r0, r3
 8002436:	6963      	ldr	r3, [r4, #20]
 8002438:	b2f6      	uxtb	r6, r6
 800243a:	4283      	cmp	r3, r0
 800243c:	4637      	mov	r7, r6
 800243e:	dc04      	bgt.n	800244a <__swbuf_r+0x42>
 8002440:	4621      	mov	r1, r4
 8002442:	4628      	mov	r0, r5
 8002444:	f000 f92a 	bl	800269c <_fflush_r>
 8002448:	bb30      	cbnz	r0, 8002498 <__swbuf_r+0x90>
 800244a:	68a3      	ldr	r3, [r4, #8]
 800244c:	3b01      	subs	r3, #1
 800244e:	60a3      	str	r3, [r4, #8]
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	6022      	str	r2, [r4, #0]
 8002456:	701e      	strb	r6, [r3, #0]
 8002458:	6963      	ldr	r3, [r4, #20]
 800245a:	3001      	adds	r0, #1
 800245c:	4283      	cmp	r3, r0
 800245e:	d004      	beq.n	800246a <__swbuf_r+0x62>
 8002460:	89a3      	ldrh	r3, [r4, #12]
 8002462:	07db      	lsls	r3, r3, #31
 8002464:	d506      	bpl.n	8002474 <__swbuf_r+0x6c>
 8002466:	2e0a      	cmp	r6, #10
 8002468:	d104      	bne.n	8002474 <__swbuf_r+0x6c>
 800246a:	4621      	mov	r1, r4
 800246c:	4628      	mov	r0, r5
 800246e:	f000 f915 	bl	800269c <_fflush_r>
 8002472:	b988      	cbnz	r0, 8002498 <__swbuf_r+0x90>
 8002474:	4638      	mov	r0, r7
 8002476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <__swbuf_r+0x9c>)
 800247a:	429c      	cmp	r4, r3
 800247c:	d101      	bne.n	8002482 <__swbuf_r+0x7a>
 800247e:	68ac      	ldr	r4, [r5, #8]
 8002480:	e7cf      	b.n	8002422 <__swbuf_r+0x1a>
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <__swbuf_r+0xa0>)
 8002484:	429c      	cmp	r4, r3
 8002486:	bf08      	it	eq
 8002488:	68ec      	ldreq	r4, [r5, #12]
 800248a:	e7ca      	b.n	8002422 <__swbuf_r+0x1a>
 800248c:	4621      	mov	r1, r4
 800248e:	4628      	mov	r0, r5
 8002490:	f000 f80c 	bl	80024ac <__swsetup_r>
 8002494:	2800      	cmp	r0, #0
 8002496:	d0cb      	beq.n	8002430 <__swbuf_r+0x28>
 8002498:	f04f 37ff 	mov.w	r7, #4294967295
 800249c:	e7ea      	b.n	8002474 <__swbuf_r+0x6c>
 800249e:	bf00      	nop
 80024a0:	08002ce8 	.word	0x08002ce8
 80024a4:	08002d08 	.word	0x08002d08
 80024a8:	08002cc8 	.word	0x08002cc8

080024ac <__swsetup_r>:
 80024ac:	4b32      	ldr	r3, [pc, #200]	; (8002578 <__swsetup_r+0xcc>)
 80024ae:	b570      	push	{r4, r5, r6, lr}
 80024b0:	681d      	ldr	r5, [r3, #0]
 80024b2:	4606      	mov	r6, r0
 80024b4:	460c      	mov	r4, r1
 80024b6:	b125      	cbz	r5, 80024c2 <__swsetup_r+0x16>
 80024b8:	69ab      	ldr	r3, [r5, #24]
 80024ba:	b913      	cbnz	r3, 80024c2 <__swsetup_r+0x16>
 80024bc:	4628      	mov	r0, r5
 80024be:	f000 f981 	bl	80027c4 <__sinit>
 80024c2:	4b2e      	ldr	r3, [pc, #184]	; (800257c <__swsetup_r+0xd0>)
 80024c4:	429c      	cmp	r4, r3
 80024c6:	d10f      	bne.n	80024e8 <__swsetup_r+0x3c>
 80024c8:	686c      	ldr	r4, [r5, #4]
 80024ca:	89a3      	ldrh	r3, [r4, #12]
 80024cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024d0:	0719      	lsls	r1, r3, #28
 80024d2:	d42c      	bmi.n	800252e <__swsetup_r+0x82>
 80024d4:	06dd      	lsls	r5, r3, #27
 80024d6:	d411      	bmi.n	80024fc <__swsetup_r+0x50>
 80024d8:	2309      	movs	r3, #9
 80024da:	6033      	str	r3, [r6, #0]
 80024dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80024e0:	81a3      	strh	r3, [r4, #12]
 80024e2:	f04f 30ff 	mov.w	r0, #4294967295
 80024e6:	e03e      	b.n	8002566 <__swsetup_r+0xba>
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <__swsetup_r+0xd4>)
 80024ea:	429c      	cmp	r4, r3
 80024ec:	d101      	bne.n	80024f2 <__swsetup_r+0x46>
 80024ee:	68ac      	ldr	r4, [r5, #8]
 80024f0:	e7eb      	b.n	80024ca <__swsetup_r+0x1e>
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <__swsetup_r+0xd8>)
 80024f4:	429c      	cmp	r4, r3
 80024f6:	bf08      	it	eq
 80024f8:	68ec      	ldreq	r4, [r5, #12]
 80024fa:	e7e6      	b.n	80024ca <__swsetup_r+0x1e>
 80024fc:	0758      	lsls	r0, r3, #29
 80024fe:	d512      	bpl.n	8002526 <__swsetup_r+0x7a>
 8002500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002502:	b141      	cbz	r1, 8002516 <__swsetup_r+0x6a>
 8002504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002508:	4299      	cmp	r1, r3
 800250a:	d002      	beq.n	8002512 <__swsetup_r+0x66>
 800250c:	4630      	mov	r0, r6
 800250e:	f7ff fba1 	bl	8001c54 <_free_r>
 8002512:	2300      	movs	r3, #0
 8002514:	6363      	str	r3, [r4, #52]	; 0x34
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800251c:	81a3      	strh	r3, [r4, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	6063      	str	r3, [r4, #4]
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	89a3      	ldrh	r3, [r4, #12]
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	81a3      	strh	r3, [r4, #12]
 800252e:	6923      	ldr	r3, [r4, #16]
 8002530:	b94b      	cbnz	r3, 8002546 <__swsetup_r+0x9a>
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800253c:	d003      	beq.n	8002546 <__swsetup_r+0x9a>
 800253e:	4621      	mov	r1, r4
 8002540:	4630      	mov	r0, r6
 8002542:	f000 fa05 	bl	8002950 <__smakebuf_r>
 8002546:	89a0      	ldrh	r0, [r4, #12]
 8002548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800254c:	f010 0301 	ands.w	r3, r0, #1
 8002550:	d00a      	beq.n	8002568 <__swsetup_r+0xbc>
 8002552:	2300      	movs	r3, #0
 8002554:	60a3      	str	r3, [r4, #8]
 8002556:	6963      	ldr	r3, [r4, #20]
 8002558:	425b      	negs	r3, r3
 800255a:	61a3      	str	r3, [r4, #24]
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	b943      	cbnz	r3, 8002572 <__swsetup_r+0xc6>
 8002560:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002564:	d1ba      	bne.n	80024dc <__swsetup_r+0x30>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	0781      	lsls	r1, r0, #30
 800256a:	bf58      	it	pl
 800256c:	6963      	ldrpl	r3, [r4, #20]
 800256e:	60a3      	str	r3, [r4, #8]
 8002570:	e7f4      	b.n	800255c <__swsetup_r+0xb0>
 8002572:	2000      	movs	r0, #0
 8002574:	e7f7      	b.n	8002566 <__swsetup_r+0xba>
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000
 800257c:	08002ce8 	.word	0x08002ce8
 8002580:	08002d08 	.word	0x08002d08
 8002584:	08002cc8 	.word	0x08002cc8

08002588 <abort>:
 8002588:	b508      	push	{r3, lr}
 800258a:	2006      	movs	r0, #6
 800258c:	f000 fa54 	bl	8002a38 <raise>
 8002590:	2001      	movs	r0, #1
 8002592:	f7ff f9b6 	bl	8001902 <_exit>
	...

08002598 <__sflush_r>:
 8002598:	898a      	ldrh	r2, [r1, #12]
 800259a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259c:	4605      	mov	r5, r0
 800259e:	0710      	lsls	r0, r2, #28
 80025a0:	460c      	mov	r4, r1
 80025a2:	d457      	bmi.n	8002654 <__sflush_r+0xbc>
 80025a4:	684b      	ldr	r3, [r1, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	dc04      	bgt.n	80025b4 <__sflush_r+0x1c>
 80025aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	dc01      	bgt.n	80025b4 <__sflush_r+0x1c>
 80025b0:	2000      	movs	r0, #0
 80025b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025b6:	2e00      	cmp	r6, #0
 80025b8:	d0fa      	beq.n	80025b0 <__sflush_r+0x18>
 80025ba:	2300      	movs	r3, #0
 80025bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025c0:	682f      	ldr	r7, [r5, #0]
 80025c2:	602b      	str	r3, [r5, #0]
 80025c4:	d032      	beq.n	800262c <__sflush_r+0x94>
 80025c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025c8:	89a3      	ldrh	r3, [r4, #12]
 80025ca:	075a      	lsls	r2, r3, #29
 80025cc:	d505      	bpl.n	80025da <__sflush_r+0x42>
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	1ac0      	subs	r0, r0, r3
 80025d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025d4:	b10b      	cbz	r3, 80025da <__sflush_r+0x42>
 80025d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d8:	1ac0      	subs	r0, r0, r3
 80025da:	2300      	movs	r3, #0
 80025dc:	4602      	mov	r2, r0
 80025de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025e0:	6a21      	ldr	r1, [r4, #32]
 80025e2:	4628      	mov	r0, r5
 80025e4:	47b0      	blx	r6
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	89a3      	ldrh	r3, [r4, #12]
 80025ea:	d106      	bne.n	80025fa <__sflush_r+0x62>
 80025ec:	6829      	ldr	r1, [r5, #0]
 80025ee:	291d      	cmp	r1, #29
 80025f0:	d82c      	bhi.n	800264c <__sflush_r+0xb4>
 80025f2:	4a29      	ldr	r2, [pc, #164]	; (8002698 <__sflush_r+0x100>)
 80025f4:	40ca      	lsrs	r2, r1
 80025f6:	07d6      	lsls	r6, r2, #31
 80025f8:	d528      	bpl.n	800264c <__sflush_r+0xb4>
 80025fa:	2200      	movs	r2, #0
 80025fc:	6062      	str	r2, [r4, #4]
 80025fe:	04d9      	lsls	r1, r3, #19
 8002600:	6922      	ldr	r2, [r4, #16]
 8002602:	6022      	str	r2, [r4, #0]
 8002604:	d504      	bpl.n	8002610 <__sflush_r+0x78>
 8002606:	1c42      	adds	r2, r0, #1
 8002608:	d101      	bne.n	800260e <__sflush_r+0x76>
 800260a:	682b      	ldr	r3, [r5, #0]
 800260c:	b903      	cbnz	r3, 8002610 <__sflush_r+0x78>
 800260e:	6560      	str	r0, [r4, #84]	; 0x54
 8002610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002612:	602f      	str	r7, [r5, #0]
 8002614:	2900      	cmp	r1, #0
 8002616:	d0cb      	beq.n	80025b0 <__sflush_r+0x18>
 8002618:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800261c:	4299      	cmp	r1, r3
 800261e:	d002      	beq.n	8002626 <__sflush_r+0x8e>
 8002620:	4628      	mov	r0, r5
 8002622:	f7ff fb17 	bl	8001c54 <_free_r>
 8002626:	2000      	movs	r0, #0
 8002628:	6360      	str	r0, [r4, #52]	; 0x34
 800262a:	e7c2      	b.n	80025b2 <__sflush_r+0x1a>
 800262c:	6a21      	ldr	r1, [r4, #32]
 800262e:	2301      	movs	r3, #1
 8002630:	4628      	mov	r0, r5
 8002632:	47b0      	blx	r6
 8002634:	1c41      	adds	r1, r0, #1
 8002636:	d1c7      	bne.n	80025c8 <__sflush_r+0x30>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0c4      	beq.n	80025c8 <__sflush_r+0x30>
 800263e:	2b1d      	cmp	r3, #29
 8002640:	d001      	beq.n	8002646 <__sflush_r+0xae>
 8002642:	2b16      	cmp	r3, #22
 8002644:	d101      	bne.n	800264a <__sflush_r+0xb2>
 8002646:	602f      	str	r7, [r5, #0]
 8002648:	e7b2      	b.n	80025b0 <__sflush_r+0x18>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002650:	81a3      	strh	r3, [r4, #12]
 8002652:	e7ae      	b.n	80025b2 <__sflush_r+0x1a>
 8002654:	690f      	ldr	r7, [r1, #16]
 8002656:	2f00      	cmp	r7, #0
 8002658:	d0aa      	beq.n	80025b0 <__sflush_r+0x18>
 800265a:	0793      	lsls	r3, r2, #30
 800265c:	680e      	ldr	r6, [r1, #0]
 800265e:	bf08      	it	eq
 8002660:	694b      	ldreq	r3, [r1, #20]
 8002662:	600f      	str	r7, [r1, #0]
 8002664:	bf18      	it	ne
 8002666:	2300      	movne	r3, #0
 8002668:	1bf6      	subs	r6, r6, r7
 800266a:	608b      	str	r3, [r1, #8]
 800266c:	2e00      	cmp	r6, #0
 800266e:	dd9f      	ble.n	80025b0 <__sflush_r+0x18>
 8002670:	6a21      	ldr	r1, [r4, #32]
 8002672:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002676:	4633      	mov	r3, r6
 8002678:	463a      	mov	r2, r7
 800267a:	4628      	mov	r0, r5
 800267c:	47e0      	blx	ip
 800267e:	2800      	cmp	r0, #0
 8002680:	dc06      	bgt.n	8002690 <__sflush_r+0xf8>
 8002682:	89a3      	ldrh	r3, [r4, #12]
 8002684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002688:	81a3      	strh	r3, [r4, #12]
 800268a:	f04f 30ff 	mov.w	r0, #4294967295
 800268e:	e790      	b.n	80025b2 <__sflush_r+0x1a>
 8002690:	4407      	add	r7, r0
 8002692:	1a36      	subs	r6, r6, r0
 8002694:	e7ea      	b.n	800266c <__sflush_r+0xd4>
 8002696:	bf00      	nop
 8002698:	20400001 	.word	0x20400001

0800269c <_fflush_r>:
 800269c:	b538      	push	{r3, r4, r5, lr}
 800269e:	690b      	ldr	r3, [r1, #16]
 80026a0:	4605      	mov	r5, r0
 80026a2:	460c      	mov	r4, r1
 80026a4:	b913      	cbnz	r3, 80026ac <_fflush_r+0x10>
 80026a6:	2500      	movs	r5, #0
 80026a8:	4628      	mov	r0, r5
 80026aa:	bd38      	pop	{r3, r4, r5, pc}
 80026ac:	b118      	cbz	r0, 80026b6 <_fflush_r+0x1a>
 80026ae:	6983      	ldr	r3, [r0, #24]
 80026b0:	b90b      	cbnz	r3, 80026b6 <_fflush_r+0x1a>
 80026b2:	f000 f887 	bl	80027c4 <__sinit>
 80026b6:	4b14      	ldr	r3, [pc, #80]	; (8002708 <_fflush_r+0x6c>)
 80026b8:	429c      	cmp	r4, r3
 80026ba:	d11b      	bne.n	80026f4 <_fflush_r+0x58>
 80026bc:	686c      	ldr	r4, [r5, #4]
 80026be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ef      	beq.n	80026a6 <_fflush_r+0xa>
 80026c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80026c8:	07d0      	lsls	r0, r2, #31
 80026ca:	d404      	bmi.n	80026d6 <_fflush_r+0x3a>
 80026cc:	0599      	lsls	r1, r3, #22
 80026ce:	d402      	bmi.n	80026d6 <_fflush_r+0x3a>
 80026d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026d2:	f000 f915 	bl	8002900 <__retarget_lock_acquire_recursive>
 80026d6:	4628      	mov	r0, r5
 80026d8:	4621      	mov	r1, r4
 80026da:	f7ff ff5d 	bl	8002598 <__sflush_r>
 80026de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80026e0:	07da      	lsls	r2, r3, #31
 80026e2:	4605      	mov	r5, r0
 80026e4:	d4e0      	bmi.n	80026a8 <_fflush_r+0xc>
 80026e6:	89a3      	ldrh	r3, [r4, #12]
 80026e8:	059b      	lsls	r3, r3, #22
 80026ea:	d4dd      	bmi.n	80026a8 <_fflush_r+0xc>
 80026ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80026ee:	f000 f908 	bl	8002902 <__retarget_lock_release_recursive>
 80026f2:	e7d9      	b.n	80026a8 <_fflush_r+0xc>
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <_fflush_r+0x70>)
 80026f6:	429c      	cmp	r4, r3
 80026f8:	d101      	bne.n	80026fe <_fflush_r+0x62>
 80026fa:	68ac      	ldr	r4, [r5, #8]
 80026fc:	e7df      	b.n	80026be <_fflush_r+0x22>
 80026fe:	4b04      	ldr	r3, [pc, #16]	; (8002710 <_fflush_r+0x74>)
 8002700:	429c      	cmp	r4, r3
 8002702:	bf08      	it	eq
 8002704:	68ec      	ldreq	r4, [r5, #12]
 8002706:	e7da      	b.n	80026be <_fflush_r+0x22>
 8002708:	08002ce8 	.word	0x08002ce8
 800270c:	08002d08 	.word	0x08002d08
 8002710:	08002cc8 	.word	0x08002cc8

08002714 <std>:
 8002714:	2300      	movs	r3, #0
 8002716:	b510      	push	{r4, lr}
 8002718:	4604      	mov	r4, r0
 800271a:	e9c0 3300 	strd	r3, r3, [r0]
 800271e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002722:	6083      	str	r3, [r0, #8]
 8002724:	8181      	strh	r1, [r0, #12]
 8002726:	6643      	str	r3, [r0, #100]	; 0x64
 8002728:	81c2      	strh	r2, [r0, #14]
 800272a:	6183      	str	r3, [r0, #24]
 800272c:	4619      	mov	r1, r3
 800272e:	2208      	movs	r2, #8
 8002730:	305c      	adds	r0, #92	; 0x5c
 8002732:	f7ff f9e3 	bl	8001afc <memset>
 8002736:	4b05      	ldr	r3, [pc, #20]	; (800274c <std+0x38>)
 8002738:	6263      	str	r3, [r4, #36]	; 0x24
 800273a:	4b05      	ldr	r3, [pc, #20]	; (8002750 <std+0x3c>)
 800273c:	62a3      	str	r3, [r4, #40]	; 0x28
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <std+0x40>)
 8002740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002742:	4b05      	ldr	r3, [pc, #20]	; (8002758 <std+0x44>)
 8002744:	6224      	str	r4, [r4, #32]
 8002746:	6323      	str	r3, [r4, #48]	; 0x30
 8002748:	bd10      	pop	{r4, pc}
 800274a:	bf00      	nop
 800274c:	08002a71 	.word	0x08002a71
 8002750:	08002a93 	.word	0x08002a93
 8002754:	08002acb 	.word	0x08002acb
 8002758:	08002aef 	.word	0x08002aef

0800275c <_cleanup_r>:
 800275c:	4901      	ldr	r1, [pc, #4]	; (8002764 <_cleanup_r+0x8>)
 800275e:	f000 b8af 	b.w	80028c0 <_fwalk_reent>
 8002762:	bf00      	nop
 8002764:	0800269d 	.word	0x0800269d

08002768 <__sfmoreglue>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2268      	movs	r2, #104	; 0x68
 800276c:	1e4d      	subs	r5, r1, #1
 800276e:	4355      	muls	r5, r2
 8002770:	460e      	mov	r6, r1
 8002772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002776:	f7ff fad7 	bl	8001d28 <_malloc_r>
 800277a:	4604      	mov	r4, r0
 800277c:	b140      	cbz	r0, 8002790 <__sfmoreglue+0x28>
 800277e:	2100      	movs	r1, #0
 8002780:	e9c0 1600 	strd	r1, r6, [r0]
 8002784:	300c      	adds	r0, #12
 8002786:	60a0      	str	r0, [r4, #8]
 8002788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800278c:	f7ff f9b6 	bl	8001afc <memset>
 8002790:	4620      	mov	r0, r4
 8002792:	bd70      	pop	{r4, r5, r6, pc}

08002794 <__sfp_lock_acquire>:
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <__sfp_lock_acquire+0x8>)
 8002796:	f000 b8b3 	b.w	8002900 <__retarget_lock_acquire_recursive>
 800279a:	bf00      	nop
 800279c:	20000119 	.word	0x20000119

080027a0 <__sfp_lock_release>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__sfp_lock_release+0x8>)
 80027a2:	f000 b8ae 	b.w	8002902 <__retarget_lock_release_recursive>
 80027a6:	bf00      	nop
 80027a8:	20000119 	.word	0x20000119

080027ac <__sinit_lock_acquire>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__sinit_lock_acquire+0x8>)
 80027ae:	f000 b8a7 	b.w	8002900 <__retarget_lock_acquire_recursive>
 80027b2:	bf00      	nop
 80027b4:	2000011a 	.word	0x2000011a

080027b8 <__sinit_lock_release>:
 80027b8:	4801      	ldr	r0, [pc, #4]	; (80027c0 <__sinit_lock_release+0x8>)
 80027ba:	f000 b8a2 	b.w	8002902 <__retarget_lock_release_recursive>
 80027be:	bf00      	nop
 80027c0:	2000011a 	.word	0x2000011a

080027c4 <__sinit>:
 80027c4:	b510      	push	{r4, lr}
 80027c6:	4604      	mov	r4, r0
 80027c8:	f7ff fff0 	bl	80027ac <__sinit_lock_acquire>
 80027cc:	69a3      	ldr	r3, [r4, #24]
 80027ce:	b11b      	cbz	r3, 80027d8 <__sinit+0x14>
 80027d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027d4:	f7ff bff0 	b.w	80027b8 <__sinit_lock_release>
 80027d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027dc:	6523      	str	r3, [r4, #80]	; 0x50
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <__sinit+0x68>)
 80027e0:	4a13      	ldr	r2, [pc, #76]	; (8002830 <__sinit+0x6c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80027e6:	42a3      	cmp	r3, r4
 80027e8:	bf04      	itt	eq
 80027ea:	2301      	moveq	r3, #1
 80027ec:	61a3      	streq	r3, [r4, #24]
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 f820 	bl	8002834 <__sfp>
 80027f4:	6060      	str	r0, [r4, #4]
 80027f6:	4620      	mov	r0, r4
 80027f8:	f000 f81c 	bl	8002834 <__sfp>
 80027fc:	60a0      	str	r0, [r4, #8]
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 f818 	bl	8002834 <__sfp>
 8002804:	2200      	movs	r2, #0
 8002806:	60e0      	str	r0, [r4, #12]
 8002808:	2104      	movs	r1, #4
 800280a:	6860      	ldr	r0, [r4, #4]
 800280c:	f7ff ff82 	bl	8002714 <std>
 8002810:	68a0      	ldr	r0, [r4, #8]
 8002812:	2201      	movs	r2, #1
 8002814:	2109      	movs	r1, #9
 8002816:	f7ff ff7d 	bl	8002714 <std>
 800281a:	68e0      	ldr	r0, [r4, #12]
 800281c:	2202      	movs	r2, #2
 800281e:	2112      	movs	r1, #18
 8002820:	f7ff ff78 	bl	8002714 <std>
 8002824:	2301      	movs	r3, #1
 8002826:	61a3      	str	r3, [r4, #24]
 8002828:	e7d2      	b.n	80027d0 <__sinit+0xc>
 800282a:	bf00      	nop
 800282c:	08002be0 	.word	0x08002be0
 8002830:	0800275d 	.word	0x0800275d

08002834 <__sfp>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	4607      	mov	r7, r0
 8002838:	f7ff ffac 	bl	8002794 <__sfp_lock_acquire>
 800283c:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <__sfp+0x84>)
 800283e:	681e      	ldr	r6, [r3, #0]
 8002840:	69b3      	ldr	r3, [r6, #24]
 8002842:	b913      	cbnz	r3, 800284a <__sfp+0x16>
 8002844:	4630      	mov	r0, r6
 8002846:	f7ff ffbd 	bl	80027c4 <__sinit>
 800284a:	3648      	adds	r6, #72	; 0x48
 800284c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002850:	3b01      	subs	r3, #1
 8002852:	d503      	bpl.n	800285c <__sfp+0x28>
 8002854:	6833      	ldr	r3, [r6, #0]
 8002856:	b30b      	cbz	r3, 800289c <__sfp+0x68>
 8002858:	6836      	ldr	r6, [r6, #0]
 800285a:	e7f7      	b.n	800284c <__sfp+0x18>
 800285c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002860:	b9d5      	cbnz	r5, 8002898 <__sfp+0x64>
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <__sfp+0x88>)
 8002864:	60e3      	str	r3, [r4, #12]
 8002866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800286a:	6665      	str	r5, [r4, #100]	; 0x64
 800286c:	f000 f847 	bl	80028fe <__retarget_lock_init_recursive>
 8002870:	f7ff ff96 	bl	80027a0 <__sfp_lock_release>
 8002874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800287c:	6025      	str	r5, [r4, #0]
 800287e:	61a5      	str	r5, [r4, #24]
 8002880:	2208      	movs	r2, #8
 8002882:	4629      	mov	r1, r5
 8002884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002888:	f7ff f938 	bl	8001afc <memset>
 800288c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002894:	4620      	mov	r0, r4
 8002896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002898:	3468      	adds	r4, #104	; 0x68
 800289a:	e7d9      	b.n	8002850 <__sfp+0x1c>
 800289c:	2104      	movs	r1, #4
 800289e:	4638      	mov	r0, r7
 80028a0:	f7ff ff62 	bl	8002768 <__sfmoreglue>
 80028a4:	4604      	mov	r4, r0
 80028a6:	6030      	str	r0, [r6, #0]
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d1d5      	bne.n	8002858 <__sfp+0x24>
 80028ac:	f7ff ff78 	bl	80027a0 <__sfp_lock_release>
 80028b0:	230c      	movs	r3, #12
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	e7ee      	b.n	8002894 <__sfp+0x60>
 80028b6:	bf00      	nop
 80028b8:	08002be0 	.word	0x08002be0
 80028bc:	ffff0001 	.word	0xffff0001

080028c0 <_fwalk_reent>:
 80028c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028c4:	4606      	mov	r6, r0
 80028c6:	4688      	mov	r8, r1
 80028c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028cc:	2700      	movs	r7, #0
 80028ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028d2:	f1b9 0901 	subs.w	r9, r9, #1
 80028d6:	d505      	bpl.n	80028e4 <_fwalk_reent+0x24>
 80028d8:	6824      	ldr	r4, [r4, #0]
 80028da:	2c00      	cmp	r4, #0
 80028dc:	d1f7      	bne.n	80028ce <_fwalk_reent+0xe>
 80028de:	4638      	mov	r0, r7
 80028e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028e4:	89ab      	ldrh	r3, [r5, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d907      	bls.n	80028fa <_fwalk_reent+0x3a>
 80028ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028ee:	3301      	adds	r3, #1
 80028f0:	d003      	beq.n	80028fa <_fwalk_reent+0x3a>
 80028f2:	4629      	mov	r1, r5
 80028f4:	4630      	mov	r0, r6
 80028f6:	47c0      	blx	r8
 80028f8:	4307      	orrs	r7, r0
 80028fa:	3568      	adds	r5, #104	; 0x68
 80028fc:	e7e9      	b.n	80028d2 <_fwalk_reent+0x12>

080028fe <__retarget_lock_init_recursive>:
 80028fe:	4770      	bx	lr

08002900 <__retarget_lock_acquire_recursive>:
 8002900:	4770      	bx	lr

08002902 <__retarget_lock_release_recursive>:
 8002902:	4770      	bx	lr

08002904 <__swhatbuf_r>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	460e      	mov	r6, r1
 8002908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800290c:	2900      	cmp	r1, #0
 800290e:	b096      	sub	sp, #88	; 0x58
 8002910:	4614      	mov	r4, r2
 8002912:	461d      	mov	r5, r3
 8002914:	da08      	bge.n	8002928 <__swhatbuf_r+0x24>
 8002916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	602a      	str	r2, [r5, #0]
 800291e:	061a      	lsls	r2, r3, #24
 8002920:	d410      	bmi.n	8002944 <__swhatbuf_r+0x40>
 8002922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002926:	e00e      	b.n	8002946 <__swhatbuf_r+0x42>
 8002928:	466a      	mov	r2, sp
 800292a:	f000 f907 	bl	8002b3c <_fstat_r>
 800292e:	2800      	cmp	r0, #0
 8002930:	dbf1      	blt.n	8002916 <__swhatbuf_r+0x12>
 8002932:	9a01      	ldr	r2, [sp, #4]
 8002934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800293c:	425a      	negs	r2, r3
 800293e:	415a      	adcs	r2, r3
 8002940:	602a      	str	r2, [r5, #0]
 8002942:	e7ee      	b.n	8002922 <__swhatbuf_r+0x1e>
 8002944:	2340      	movs	r3, #64	; 0x40
 8002946:	2000      	movs	r0, #0
 8002948:	6023      	str	r3, [r4, #0]
 800294a:	b016      	add	sp, #88	; 0x58
 800294c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002950 <__smakebuf_r>:
 8002950:	898b      	ldrh	r3, [r1, #12]
 8002952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002954:	079d      	lsls	r5, r3, #30
 8002956:	4606      	mov	r6, r0
 8002958:	460c      	mov	r4, r1
 800295a:	d507      	bpl.n	800296c <__smakebuf_r+0x1c>
 800295c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	6123      	str	r3, [r4, #16]
 8002964:	2301      	movs	r3, #1
 8002966:	6163      	str	r3, [r4, #20]
 8002968:	b002      	add	sp, #8
 800296a:	bd70      	pop	{r4, r5, r6, pc}
 800296c:	ab01      	add	r3, sp, #4
 800296e:	466a      	mov	r2, sp
 8002970:	f7ff ffc8 	bl	8002904 <__swhatbuf_r>
 8002974:	9900      	ldr	r1, [sp, #0]
 8002976:	4605      	mov	r5, r0
 8002978:	4630      	mov	r0, r6
 800297a:	f7ff f9d5 	bl	8001d28 <_malloc_r>
 800297e:	b948      	cbnz	r0, 8002994 <__smakebuf_r+0x44>
 8002980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002984:	059a      	lsls	r2, r3, #22
 8002986:	d4ef      	bmi.n	8002968 <__smakebuf_r+0x18>
 8002988:	f023 0303 	bic.w	r3, r3, #3
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	81a3      	strh	r3, [r4, #12]
 8002992:	e7e3      	b.n	800295c <__smakebuf_r+0xc>
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <__smakebuf_r+0x7c>)
 8002996:	62b3      	str	r3, [r6, #40]	; 0x28
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	6020      	str	r0, [r4, #0]
 800299c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a0:	81a3      	strh	r3, [r4, #12]
 80029a2:	9b00      	ldr	r3, [sp, #0]
 80029a4:	6163      	str	r3, [r4, #20]
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	6120      	str	r0, [r4, #16]
 80029aa:	b15b      	cbz	r3, 80029c4 <__smakebuf_r+0x74>
 80029ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029b0:	4630      	mov	r0, r6
 80029b2:	f000 f8d5 	bl	8002b60 <_isatty_r>
 80029b6:	b128      	cbz	r0, 80029c4 <__smakebuf_r+0x74>
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	81a3      	strh	r3, [r4, #12]
 80029c4:	89a0      	ldrh	r0, [r4, #12]
 80029c6:	4305      	orrs	r5, r0
 80029c8:	81a5      	strh	r5, [r4, #12]
 80029ca:	e7cd      	b.n	8002968 <__smakebuf_r+0x18>
 80029cc:	0800275d 	.word	0x0800275d

080029d0 <__malloc_lock>:
 80029d0:	4801      	ldr	r0, [pc, #4]	; (80029d8 <__malloc_lock+0x8>)
 80029d2:	f7ff bf95 	b.w	8002900 <__retarget_lock_acquire_recursive>
 80029d6:	bf00      	nop
 80029d8:	20000118 	.word	0x20000118

080029dc <__malloc_unlock>:
 80029dc:	4801      	ldr	r0, [pc, #4]	; (80029e4 <__malloc_unlock+0x8>)
 80029de:	f7ff bf90 	b.w	8002902 <__retarget_lock_release_recursive>
 80029e2:	bf00      	nop
 80029e4:	20000118 	.word	0x20000118

080029e8 <_raise_r>:
 80029e8:	291f      	cmp	r1, #31
 80029ea:	b538      	push	{r3, r4, r5, lr}
 80029ec:	4604      	mov	r4, r0
 80029ee:	460d      	mov	r5, r1
 80029f0:	d904      	bls.n	80029fc <_raise_r+0x14>
 80029f2:	2316      	movs	r3, #22
 80029f4:	6003      	str	r3, [r0, #0]
 80029f6:	f04f 30ff 	mov.w	r0, #4294967295
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80029fe:	b112      	cbz	r2, 8002a06 <_raise_r+0x1e>
 8002a00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a04:	b94b      	cbnz	r3, 8002a1a <_raise_r+0x32>
 8002a06:	4620      	mov	r0, r4
 8002a08:	f000 f830 	bl	8002a6c <_getpid_r>
 8002a0c:	462a      	mov	r2, r5
 8002a0e:	4601      	mov	r1, r0
 8002a10:	4620      	mov	r0, r4
 8002a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a16:	f000 b817 	b.w	8002a48 <_kill_r>
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d00a      	beq.n	8002a34 <_raise_r+0x4c>
 8002a1e:	1c59      	adds	r1, r3, #1
 8002a20:	d103      	bne.n	8002a2a <_raise_r+0x42>
 8002a22:	2316      	movs	r3, #22
 8002a24:	6003      	str	r3, [r0, #0]
 8002a26:	2001      	movs	r0, #1
 8002a28:	e7e7      	b.n	80029fa <_raise_r+0x12>
 8002a2a:	2400      	movs	r4, #0
 8002a2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a30:	4628      	mov	r0, r5
 8002a32:	4798      	blx	r3
 8002a34:	2000      	movs	r0, #0
 8002a36:	e7e0      	b.n	80029fa <_raise_r+0x12>

08002a38 <raise>:
 8002a38:	4b02      	ldr	r3, [pc, #8]	; (8002a44 <raise+0xc>)
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	f7ff bfd3 	b.w	80029e8 <_raise_r>
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <_kill_r>:
 8002a48:	b538      	push	{r3, r4, r5, lr}
 8002a4a:	4d07      	ldr	r5, [pc, #28]	; (8002a68 <_kill_r+0x20>)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4604      	mov	r4, r0
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	602b      	str	r3, [r5, #0]
 8002a56:	f7fe ff44 	bl	80018e2 <_kill>
 8002a5a:	1c43      	adds	r3, r0, #1
 8002a5c:	d102      	bne.n	8002a64 <_kill_r+0x1c>
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	b103      	cbz	r3, 8002a64 <_kill_r+0x1c>
 8002a62:	6023      	str	r3, [r4, #0]
 8002a64:	bd38      	pop	{r3, r4, r5, pc}
 8002a66:	bf00      	nop
 8002a68:	2000011c 	.word	0x2000011c

08002a6c <_getpid_r>:
 8002a6c:	f7fe bf32 	b.w	80018d4 <_getpid>

08002a70 <__sread>:
 8002a70:	b510      	push	{r4, lr}
 8002a72:	460c      	mov	r4, r1
 8002a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a78:	f000 f894 	bl	8002ba4 <_read_r>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	bfab      	itete	ge
 8002a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a82:	89a3      	ldrhlt	r3, [r4, #12]
 8002a84:	181b      	addge	r3, r3, r0
 8002a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a8a:	bfac      	ite	ge
 8002a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a8e:	81a3      	strhlt	r3, [r4, #12]
 8002a90:	bd10      	pop	{r4, pc}

08002a92 <__swrite>:
 8002a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a96:	461f      	mov	r7, r3
 8002a98:	898b      	ldrh	r3, [r1, #12]
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	4616      	mov	r6, r2
 8002aa2:	d505      	bpl.n	8002ab0 <__swrite+0x1e>
 8002aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f000 f868 	bl	8002b80 <_lseek_r>
 8002ab0:	89a3      	ldrh	r3, [r4, #12]
 8002ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	4632      	mov	r2, r6
 8002abe:	463b      	mov	r3, r7
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac6:	f000 b817 	b.w	8002af8 <_write_r>

08002aca <__sseek>:
 8002aca:	b510      	push	{r4, lr}
 8002acc:	460c      	mov	r4, r1
 8002ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ad2:	f000 f855 	bl	8002b80 <_lseek_r>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	bf15      	itete	ne
 8002adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ae6:	81a3      	strheq	r3, [r4, #12]
 8002ae8:	bf18      	it	ne
 8002aea:	81a3      	strhne	r3, [r4, #12]
 8002aec:	bd10      	pop	{r4, pc}

08002aee <__sclose>:
 8002aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af2:	f000 b813 	b.w	8002b1c <_close_r>
	...

08002af8 <_write_r>:
 8002af8:	b538      	push	{r3, r4, r5, lr}
 8002afa:	4d07      	ldr	r5, [pc, #28]	; (8002b18 <_write_r+0x20>)
 8002afc:	4604      	mov	r4, r0
 8002afe:	4608      	mov	r0, r1
 8002b00:	4611      	mov	r1, r2
 8002b02:	2200      	movs	r2, #0
 8002b04:	602a      	str	r2, [r5, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	f7fe ff22 	bl	8001950 <_write>
 8002b0c:	1c43      	adds	r3, r0, #1
 8002b0e:	d102      	bne.n	8002b16 <_write_r+0x1e>
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	b103      	cbz	r3, 8002b16 <_write_r+0x1e>
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	2000011c 	.word	0x2000011c

08002b1c <_close_r>:
 8002b1c:	b538      	push	{r3, r4, r5, lr}
 8002b1e:	4d06      	ldr	r5, [pc, #24]	; (8002b38 <_close_r+0x1c>)
 8002b20:	2300      	movs	r3, #0
 8002b22:	4604      	mov	r4, r0
 8002b24:	4608      	mov	r0, r1
 8002b26:	602b      	str	r3, [r5, #0]
 8002b28:	f7fe ff2e 	bl	8001988 <_close>
 8002b2c:	1c43      	adds	r3, r0, #1
 8002b2e:	d102      	bne.n	8002b36 <_close_r+0x1a>
 8002b30:	682b      	ldr	r3, [r5, #0]
 8002b32:	b103      	cbz	r3, 8002b36 <_close_r+0x1a>
 8002b34:	6023      	str	r3, [r4, #0]
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	2000011c 	.word	0x2000011c

08002b3c <_fstat_r>:
 8002b3c:	b538      	push	{r3, r4, r5, lr}
 8002b3e:	4d07      	ldr	r5, [pc, #28]	; (8002b5c <_fstat_r+0x20>)
 8002b40:	2300      	movs	r3, #0
 8002b42:	4604      	mov	r4, r0
 8002b44:	4608      	mov	r0, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	602b      	str	r3, [r5, #0]
 8002b4a:	f7fe ff28 	bl	800199e <_fstat>
 8002b4e:	1c43      	adds	r3, r0, #1
 8002b50:	d102      	bne.n	8002b58 <_fstat_r+0x1c>
 8002b52:	682b      	ldr	r3, [r5, #0]
 8002b54:	b103      	cbz	r3, 8002b58 <_fstat_r+0x1c>
 8002b56:	6023      	str	r3, [r4, #0]
 8002b58:	bd38      	pop	{r3, r4, r5, pc}
 8002b5a:	bf00      	nop
 8002b5c:	2000011c 	.word	0x2000011c

08002b60 <_isatty_r>:
 8002b60:	b538      	push	{r3, r4, r5, lr}
 8002b62:	4d06      	ldr	r5, [pc, #24]	; (8002b7c <_isatty_r+0x1c>)
 8002b64:	2300      	movs	r3, #0
 8002b66:	4604      	mov	r4, r0
 8002b68:	4608      	mov	r0, r1
 8002b6a:	602b      	str	r3, [r5, #0]
 8002b6c:	f7fe ff26 	bl	80019bc <_isatty>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	d102      	bne.n	8002b7a <_isatty_r+0x1a>
 8002b74:	682b      	ldr	r3, [r5, #0]
 8002b76:	b103      	cbz	r3, 8002b7a <_isatty_r+0x1a>
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	bd38      	pop	{r3, r4, r5, pc}
 8002b7c:	2000011c 	.word	0x2000011c

08002b80 <_lseek_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4d07      	ldr	r5, [pc, #28]	; (8002ba0 <_lseek_r+0x20>)
 8002b84:	4604      	mov	r4, r0
 8002b86:	4608      	mov	r0, r1
 8002b88:	4611      	mov	r1, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	602a      	str	r2, [r5, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7fe ff1e 	bl	80019d0 <_lseek>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d102      	bne.n	8002b9e <_lseek_r+0x1e>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	b103      	cbz	r3, 8002b9e <_lseek_r+0x1e>
 8002b9c:	6023      	str	r3, [r4, #0]
 8002b9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ba0:	2000011c 	.word	0x2000011c

08002ba4 <_read_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4d07      	ldr	r5, [pc, #28]	; (8002bc4 <_read_r+0x20>)
 8002ba8:	4604      	mov	r4, r0
 8002baa:	4608      	mov	r0, r1
 8002bac:	4611      	mov	r1, r2
 8002bae:	2200      	movs	r2, #0
 8002bb0:	602a      	str	r2, [r5, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f7fe feaf 	bl	8001916 <_read>
 8002bb8:	1c43      	adds	r3, r0, #1
 8002bba:	d102      	bne.n	8002bc2 <_read_r+0x1e>
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	b103      	cbz	r3, 8002bc2 <_read_r+0x1e>
 8002bc0:	6023      	str	r3, [r4, #0]
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	2000011c 	.word	0x2000011c

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
